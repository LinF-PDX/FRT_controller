
FRT_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ed0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  080070d0  080070d0  000170d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071c8  080071c8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080071c8  080071c8  000171c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071d0  080071d0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071d0  080071d0  000171d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071d4  080071d4  000171d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080071d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c1c  20000074  0800724c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c90  0800724c  00024c90  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019212  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031c7  00000000  00000000  000392b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b0  00000000  00000000  0003c480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001268  00000000  00000000  0003d830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003472  00000000  00000000  0003ea98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015b3b  00000000  00000000  00041f0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001073c6  00000000  00000000  00057a45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015ee0b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005644  00000000  00000000  0015ee5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
 8000220:	080070b8 	.word	0x080070b8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
 800023c:	080070b8 	.word	0x080070b8

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b974 	b.w	8000540 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <APPS1_ADC_Percent>:
static void CAN_Config(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float APPS1_ADC_Percent(void) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0
	uint16_t ADC_VAL;
	float ADC_Percent;
	uint8_t ADC_Out;

	HAL_ADC_Start(&hadc1);
 800054a:	481c      	ldr	r0, [pc, #112]	; (80005bc <APPS1_ADC_Percent+0x78>)
 800054c:	f001 f84a 	bl	80015e4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 10);
 8000550:	210a      	movs	r1, #10
 8000552:	481a      	ldr	r0, [pc, #104]	; (80005bc <APPS1_ADC_Percent+0x78>)
 8000554:	f001 f948 	bl	80017e8 <HAL_ADC_PollForConversion>
	ADC_VAL = HAL_ADC_GetValue(&hadc1);
 8000558:	4818      	ldr	r0, [pc, #96]	; (80005bc <APPS1_ADC_Percent+0x78>)
 800055a:	f001 f9d0 	bl	80018fe <HAL_ADC_GetValue>
 800055e:	4603      	mov	r3, r0
 8000560:	82fb      	strh	r3, [r7, #22]
	HAL_ADC_Stop(&hadc1);
 8000562:	4816      	ldr	r0, [pc, #88]	; (80005bc <APPS1_ADC_Percent+0x78>)
 8000564:	f001 f90c 	bl	8001780 <HAL_ADC_Stop>
	ADC_Percent = (ADC_VAL/4095)*100;
 8000568:	8afa      	ldrh	r2, [r7, #22]
 800056a:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <APPS1_ADC_Percent+0x7c>)
 800056c:	fba3 1302 	umull	r1, r3, r3, r2
 8000570:	1ad2      	subs	r2, r2, r3
 8000572:	0852      	lsrs	r2, r2, #1
 8000574:	4413      	add	r3, r2
 8000576:	0adb      	lsrs	r3, r3, #11
 8000578:	b29b      	uxth	r3, r3
 800057a:	461a      	mov	r2, r3
 800057c:	2364      	movs	r3, #100	; 0x64
 800057e:	fb02 f303 	mul.w	r3, r2, r3
 8000582:	ee07 3a90 	vmov	s15, r3
 8000586:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800058a:	edc7 7a04 	vstr	s15, [r7, #16]
	ADC_Out = (ADC_Percent - APPS1_MIN_VALUE)*(100/(APPS1_MAX_VALUE - APPS1_MIN_VALUE)); 	//apps1 travel from 15% to 85%
 800058e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000592:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8000596:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800059a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800059e:	edc7 7a01 	vstr	s15, [r7, #4]
 80005a2:	793b      	ldrb	r3, [r7, #4]
 80005a4:	73fb      	strb	r3, [r7, #15]
	return ADC_Out; //returns ADC percentage ranges from 0-1
 80005a6:	7bfb      	ldrb	r3, [r7, #15]
 80005a8:	ee07 3a90 	vmov	s15, r3
 80005ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 80005b0:	eeb0 0a67 	vmov.f32	s0, s15
 80005b4:	3718      	adds	r7, #24
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000090 	.word	0x20000090
 80005c0:	00100101 	.word	0x00100101

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c8:	f000 ff9b 	bl	8001502 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005cc:	f000 f892 	bl	80006f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d0:	f000 fa5a 	bl	8000a88 <MX_GPIO_Init>
  MX_CAN1_Init();
 80005d4:	f000 f9ec 	bl	80009b0 <MX_CAN1_Init>
  MX_ADC1_Init();
 80005d8:	f000 f8f4 	bl	80007c4 <MX_ADC1_Init>
  MX_ADC2_Init();
 80005dc:	f000 f944 	bl	8000868 <MX_ADC2_Init>
  MX_ADC3_Init();
 80005e0:	f000 f994 	bl	800090c <MX_ADC3_Init>
  MX_CAN3_Init();
 80005e4:	f000 fa1a 	bl	8000a1c <MX_CAN3_Init>
  /* USER CODE BEGIN 2 */
  	CAN_Config();
 80005e8:	f000 faba 	bl	8000b60 <CAN_Config>

	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80005ec:	2102      	movs	r1, #2
 80005ee:	4836      	ldr	r0, [pc, #216]	; (80006c8 <main+0x104>)
 80005f0:	f001 fff0 	bl	80025d4 <HAL_CAN_ActivateNotification>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <main+0x3a>
	{
	  Error_Handler();
 80005fa:	f000 fd59 	bl	80010b0 <Error_Handler>
	}
	// Initialize TxHeader and TxData
	AMK_TxHeader_R.DLC = 8;
 80005fe:	4b33      	ldr	r3, [pc, #204]	; (80006cc <main+0x108>)
 8000600:	2208      	movs	r2, #8
 8000602:	611a      	str	r2, [r3, #16]
	AMK_TxHeader_R.IDE = CAN_ID_STD;
 8000604:	4b31      	ldr	r3, [pc, #196]	; (80006cc <main+0x108>)
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
	AMK_TxHeader_R.RTR = CAN_RTR_DATA;
 800060a:	4b30      	ldr	r3, [pc, #192]	; (80006cc <main+0x108>)
 800060c:	2200      	movs	r2, #0
 800060e:	60da      	str	r2, [r3, #12]
	AMK_TxHeader_R.StdId = 0x186;
 8000610:	4b2e      	ldr	r3, [pc, #184]	; (80006cc <main+0x108>)
 8000612:	f44f 72c3 	mov.w	r2, #390	; 0x186
 8000616:	601a      	str	r2, [r3, #0]
	AMK_TxHeader_R.TransmitGlobalTime = DISABLE;
 8000618:	4b2c      	ldr	r3, [pc, #176]	; (80006cc <main+0x108>)
 800061a:	2200      	movs	r2, #0
 800061c:	751a      	strb	r2, [r3, #20]

	AMK_TxData_R[0] = 0x00;
 800061e:	4b2c      	ldr	r3, [pc, #176]	; (80006d0 <main+0x10c>)
 8000620:	2200      	movs	r2, #0
 8000622:	701a      	strb	r2, [r3, #0]
	AMK_TxData_R[1] = 0x00;
 8000624:	4b2a      	ldr	r3, [pc, #168]	; (80006d0 <main+0x10c>)
 8000626:	2200      	movs	r2, #0
 8000628:	705a      	strb	r2, [r3, #1]
	AMK_TxData_R[2] = 0x00;
 800062a:	4b29      	ldr	r3, [pc, #164]	; (80006d0 <main+0x10c>)
 800062c:	2200      	movs	r2, #0
 800062e:	709a      	strb	r2, [r3, #2]
	AMK_TxData_R[3] = 0x00;
 8000630:	4b27      	ldr	r3, [pc, #156]	; (80006d0 <main+0x10c>)
 8000632:	2200      	movs	r2, #0
 8000634:	70da      	strb	r2, [r3, #3]
	AMK_TxData_R[4] = 0x00;
 8000636:	4b26      	ldr	r3, [pc, #152]	; (80006d0 <main+0x10c>)
 8000638:	2200      	movs	r2, #0
 800063a:	711a      	strb	r2, [r3, #4]
	AMK_TxData_R[5] = 0x00;
 800063c:	4b24      	ldr	r3, [pc, #144]	; (80006d0 <main+0x10c>)
 800063e:	2200      	movs	r2, #0
 8000640:	715a      	strb	r2, [r3, #5]
	AMK_TxData_R[6] = 0x00;
 8000642:	4b23      	ldr	r3, [pc, #140]	; (80006d0 <main+0x10c>)
 8000644:	2200      	movs	r2, #0
 8000646:	719a      	strb	r2, [r3, #6]
	AMK_TxData_R[7] = 0x00;
 8000648:	4b21      	ldr	r3, [pc, #132]	; (80006d0 <main+0x10c>)
 800064a:	2200      	movs	r2, #0
 800064c:	71da      	strb	r2, [r3, #7]

	AMK_TxHeader_L.DLC = 8;
 800064e:	4b21      	ldr	r3, [pc, #132]	; (80006d4 <main+0x110>)
 8000650:	2208      	movs	r2, #8
 8000652:	611a      	str	r2, [r3, #16]
	AMK_TxHeader_L.IDE = CAN_ID_STD;
 8000654:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <main+0x110>)
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
	AMK_TxHeader_L.RTR = CAN_RTR_DATA;
 800065a:	4b1e      	ldr	r3, [pc, #120]	; (80006d4 <main+0x110>)
 800065c:	2200      	movs	r2, #0
 800065e:	60da      	str	r2, [r3, #12]
	AMK_TxHeader_L.StdId = 0x185;
 8000660:	4b1c      	ldr	r3, [pc, #112]	; (80006d4 <main+0x110>)
 8000662:	f240 1285 	movw	r2, #389	; 0x185
 8000666:	601a      	str	r2, [r3, #0]
	AMK_TxHeader_L.TransmitGlobalTime = DISABLE;
 8000668:	4b1a      	ldr	r3, [pc, #104]	; (80006d4 <main+0x110>)
 800066a:	2200      	movs	r2, #0
 800066c:	751a      	strb	r2, [r3, #20]

	AMK_TxData_L[0] = 0x00;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <main+0x114>)
 8000670:	2200      	movs	r2, #0
 8000672:	701a      	strb	r2, [r3, #0]
	AMK_TxData_L[1] = 0x00;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <main+0x114>)
 8000676:	2200      	movs	r2, #0
 8000678:	705a      	strb	r2, [r3, #1]
	AMK_TxData_L[2] = 0x00;
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <main+0x114>)
 800067c:	2200      	movs	r2, #0
 800067e:	709a      	strb	r2, [r3, #2]
	AMK_TxData_L[3] = 0x00;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <main+0x114>)
 8000682:	2200      	movs	r2, #0
 8000684:	70da      	strb	r2, [r3, #3]
	AMK_TxData_L[4] = 0x00;
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <main+0x114>)
 8000688:	2200      	movs	r2, #0
 800068a:	711a      	strb	r2, [r3, #4]
	AMK_TxData_L[5] = 0x00;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <main+0x114>)
 800068e:	2200      	movs	r2, #0
 8000690:	715a      	strb	r2, [r3, #5]
	AMK_TxData_L[6] = 0x00;
 8000692:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <main+0x114>)
 8000694:	2200      	movs	r2, #0
 8000696:	719a      	strb	r2, [r3, #6]
	AMK_TxData_L[7] = 0x00;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <main+0x114>)
 800069a:	2200      	movs	r2, #0
 800069c:	71da      	strb	r2, [r3, #7]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800069e:	f003 fca3 	bl	8003fe8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of controllerStart */
  controllerStartHandle = osThreadNew(Start_FRT_controller, NULL, &controllerStart_attributes);
 80006a2:	4a0e      	ldr	r2, [pc, #56]	; (80006dc <main+0x118>)
 80006a4:	2100      	movs	r1, #0
 80006a6:	480e      	ldr	r0, [pc, #56]	; (80006e0 <main+0x11c>)
 80006a8:	f003 fd08 	bl	80040bc <osThreadNew>
 80006ac:	4603      	mov	r3, r0
 80006ae:	4a0d      	ldr	r2, [pc, #52]	; (80006e4 <main+0x120>)
 80006b0:	6013      	str	r3, [r2, #0]

  /* creation of motorControl */
  motorControlHandle = osThreadNew(Start_AMK, NULL, &motorControl_attributes);
 80006b2:	4a0d      	ldr	r2, [pc, #52]	; (80006e8 <main+0x124>)
 80006b4:	2100      	movs	r1, #0
 80006b6:	480d      	ldr	r0, [pc, #52]	; (80006ec <main+0x128>)
 80006b8:	f003 fd00 	bl	80040bc <osThreadNew>
 80006bc:	4603      	mov	r3, r0
 80006be:	4a0c      	ldr	r2, [pc, #48]	; (80006f0 <main+0x12c>)
 80006c0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006c2:	f003 fcc5 	bl	8004050 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006c6:	e7fe      	b.n	80006c6 <main+0x102>
 80006c8:	20000168 	.word	0x20000168
 80006cc:	200001c0 	.word	0x200001c0
 80006d0:	2000020c 	.word	0x2000020c
 80006d4:	200001d8 	.word	0x200001d8
 80006d8:	20000214 	.word	0x20000214
 80006dc:	08007108 	.word	0x08007108
 80006e0:	08000d31 	.word	0x08000d31
 80006e4:	200001b8 	.word	0x200001b8
 80006e8:	0800712c 	.word	0x0800712c
 80006ec:	08000e2d 	.word	0x08000e2d
 80006f0:	200001bc 	.word	0x200001bc

080006f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b094      	sub	sp, #80	; 0x50
 80006f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fa:	f107 031c 	add.w	r3, r7, #28
 80006fe:	2234      	movs	r2, #52	; 0x34
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f006 fc0e 	bl	8006f24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000708:	f107 0308 	add.w	r3, r7, #8
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000718:	4b28      	ldr	r3, [pc, #160]	; (80007bc <SystemClock_Config+0xc8>)
 800071a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071c:	4a27      	ldr	r2, [pc, #156]	; (80007bc <SystemClock_Config+0xc8>)
 800071e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000722:	6413      	str	r3, [r2, #64]	; 0x40
 8000724:	4b25      	ldr	r3, [pc, #148]	; (80007bc <SystemClock_Config+0xc8>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000730:	4b23      	ldr	r3, [pc, #140]	; (80007c0 <SystemClock_Config+0xcc>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000738:	4a21      	ldr	r2, [pc, #132]	; (80007c0 <SystemClock_Config+0xcc>)
 800073a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800073e:	6013      	str	r3, [r2, #0]
 8000740:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <SystemClock_Config+0xcc>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000748:	603b      	str	r3, [r7, #0]
 800074a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800074c:	2302      	movs	r3, #2
 800074e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000750:	2301      	movs	r3, #1
 8000752:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000754:	2310      	movs	r3, #16
 8000756:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000758:	2302      	movs	r3, #2
 800075a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800075c:	2300      	movs	r3, #0
 800075e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000760:	2308      	movs	r3, #8
 8000762:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000764:	2360      	movs	r3, #96	; 0x60
 8000766:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8000768:	2306      	movs	r3, #6
 800076a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800076c:	2302      	movs	r3, #2
 800076e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000770:	2302      	movs	r3, #2
 8000772:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000774:	f107 031c 	add.w	r3, r7, #28
 8000778:	4618      	mov	r0, r3
 800077a:	f002 fc5b 	bl	8003034 <HAL_RCC_OscConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000784:	f000 fc94 	bl	80010b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000788:	230f      	movs	r3, #15
 800078a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078c:	2302      	movs	r3, #2
 800078e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000790:	2380      	movs	r3, #128	; 0x80
 8000792:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000794:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000798:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800079a:	2300      	movs	r3, #0
 800079c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800079e:	f107 0308 	add.w	r3, r7, #8
 80007a2:	2100      	movs	r1, #0
 80007a4:	4618      	mov	r0, r3
 80007a6:	f002 fef3 	bl	8003590 <HAL_RCC_ClockConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007b0:	f000 fc7e 	bl	80010b0 <Error_Handler>
  }
}
 80007b4:	bf00      	nop
 80007b6:	3750      	adds	r7, #80	; 0x50
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40007000 	.word	0x40007000

080007c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ca:	463b      	mov	r3, r7
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007d6:	4b21      	ldr	r3, [pc, #132]	; (800085c <MX_ADC1_Init+0x98>)
 80007d8:	4a21      	ldr	r2, [pc, #132]	; (8000860 <MX_ADC1_Init+0x9c>)
 80007da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007dc:	4b1f      	ldr	r3, [pc, #124]	; (800085c <MX_ADC1_Init+0x98>)
 80007de:	2200      	movs	r2, #0
 80007e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007e2:	4b1e      	ldr	r3, [pc, #120]	; (800085c <MX_ADC1_Init+0x98>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007e8:	4b1c      	ldr	r3, [pc, #112]	; (800085c <MX_ADC1_Init+0x98>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007ee:	4b1b      	ldr	r3, [pc, #108]	; (800085c <MX_ADC1_Init+0x98>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007f4:	4b19      	ldr	r3, [pc, #100]	; (800085c <MX_ADC1_Init+0x98>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007fc:	4b17      	ldr	r3, [pc, #92]	; (800085c <MX_ADC1_Init+0x98>)
 80007fe:	2200      	movs	r2, #0
 8000800:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000802:	4b16      	ldr	r3, [pc, #88]	; (800085c <MX_ADC1_Init+0x98>)
 8000804:	4a17      	ldr	r2, [pc, #92]	; (8000864 <MX_ADC1_Init+0xa0>)
 8000806:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000808:	4b14      	ldr	r3, [pc, #80]	; (800085c <MX_ADC1_Init+0x98>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800080e:	4b13      	ldr	r3, [pc, #76]	; (800085c <MX_ADC1_Init+0x98>)
 8000810:	2201      	movs	r2, #1
 8000812:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000814:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_ADC1_Init+0x98>)
 8000816:	2200      	movs	r2, #0
 8000818:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <MX_ADC1_Init+0x98>)
 800081e:	2201      	movs	r2, #1
 8000820:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000822:	480e      	ldr	r0, [pc, #56]	; (800085c <MX_ADC1_Init+0x98>)
 8000824:	f000 fe9a 	bl	800155c <HAL_ADC_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800082e:	f000 fc3f 	bl	80010b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000832:	230a      	movs	r3, #10
 8000834:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000836:	2301      	movs	r3, #1
 8000838:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800083a:	2300      	movs	r3, #0
 800083c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800083e:	463b      	mov	r3, r7
 8000840:	4619      	mov	r1, r3
 8000842:	4806      	ldr	r0, [pc, #24]	; (800085c <MX_ADC1_Init+0x98>)
 8000844:	f001 f868 	bl	8001918 <HAL_ADC_ConfigChannel>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800084e:	f000 fc2f 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000090 	.word	0x20000090
 8000860:	40012000 	.word	0x40012000
 8000864:	0f000001 	.word	0x0f000001

08000868 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800086e:	463b      	mov	r3, r7
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800087a:	4b21      	ldr	r3, [pc, #132]	; (8000900 <MX_ADC2_Init+0x98>)
 800087c:	4a21      	ldr	r2, [pc, #132]	; (8000904 <MX_ADC2_Init+0x9c>)
 800087e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000880:	4b1f      	ldr	r3, [pc, #124]	; (8000900 <MX_ADC2_Init+0x98>)
 8000882:	2200      	movs	r2, #0
 8000884:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000886:	4b1e      	ldr	r3, [pc, #120]	; (8000900 <MX_ADC2_Init+0x98>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800088c:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <MX_ADC2_Init+0x98>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000892:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <MX_ADC2_Init+0x98>)
 8000894:	2201      	movs	r2, #1
 8000896:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000898:	4b19      	ldr	r3, [pc, #100]	; (8000900 <MX_ADC2_Init+0x98>)
 800089a:	2200      	movs	r2, #0
 800089c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008a0:	4b17      	ldr	r3, [pc, #92]	; (8000900 <MX_ADC2_Init+0x98>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008a6:	4b16      	ldr	r3, [pc, #88]	; (8000900 <MX_ADC2_Init+0x98>)
 80008a8:	4a17      	ldr	r2, [pc, #92]	; (8000908 <MX_ADC2_Init+0xa0>)
 80008aa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008ac:	4b14      	ldr	r3, [pc, #80]	; (8000900 <MX_ADC2_Init+0x98>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80008b2:	4b13      	ldr	r3, [pc, #76]	; (8000900 <MX_ADC2_Init+0x98>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80008b8:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_ADC2_Init+0x98>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <MX_ADC2_Init+0x98>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80008c6:	480e      	ldr	r0, [pc, #56]	; (8000900 <MX_ADC2_Init+0x98>)
 80008c8:	f000 fe48 	bl	800155c <HAL_ADC_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 80008d2:	f000 fbed 	bl	80010b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80008d6:	230b      	movs	r3, #11
 80008d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008da:	2301      	movs	r3, #1
 80008dc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008de:	2300      	movs	r3, #0
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008e2:	463b      	mov	r3, r7
 80008e4:	4619      	mov	r1, r3
 80008e6:	4806      	ldr	r0, [pc, #24]	; (8000900 <MX_ADC2_Init+0x98>)
 80008e8:	f001 f816 	bl	8001918 <HAL_ADC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80008f2:	f000 fbdd 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	3710      	adds	r7, #16
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	200000d8 	.word	0x200000d8
 8000904:	40012100 	.word	0x40012100
 8000908:	0f000001 	.word	0x0f000001

0800090c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000912:	463b      	mov	r3, r7
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800091e:	4b21      	ldr	r3, [pc, #132]	; (80009a4 <MX_ADC3_Init+0x98>)
 8000920:	4a21      	ldr	r2, [pc, #132]	; (80009a8 <MX_ADC3_Init+0x9c>)
 8000922:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000924:	4b1f      	ldr	r3, [pc, #124]	; (80009a4 <MX_ADC3_Init+0x98>)
 8000926:	2200      	movs	r2, #0
 8000928:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800092a:	4b1e      	ldr	r3, [pc, #120]	; (80009a4 <MX_ADC3_Init+0x98>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000930:	4b1c      	ldr	r3, [pc, #112]	; (80009a4 <MX_ADC3_Init+0x98>)
 8000932:	2200      	movs	r2, #0
 8000934:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000936:	4b1b      	ldr	r3, [pc, #108]	; (80009a4 <MX_ADC3_Init+0x98>)
 8000938:	2200      	movs	r2, #0
 800093a:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800093c:	4b19      	ldr	r3, [pc, #100]	; (80009a4 <MX_ADC3_Init+0x98>)
 800093e:	2200      	movs	r2, #0
 8000940:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000944:	4b17      	ldr	r3, [pc, #92]	; (80009a4 <MX_ADC3_Init+0x98>)
 8000946:	2200      	movs	r2, #0
 8000948:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800094a:	4b16      	ldr	r3, [pc, #88]	; (80009a4 <MX_ADC3_Init+0x98>)
 800094c:	4a17      	ldr	r2, [pc, #92]	; (80009ac <MX_ADC3_Init+0xa0>)
 800094e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000950:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <MX_ADC3_Init+0x98>)
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000956:	4b13      	ldr	r3, [pc, #76]	; (80009a4 <MX_ADC3_Init+0x98>)
 8000958:	2201      	movs	r2, #1
 800095a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800095c:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <MX_ADC3_Init+0x98>)
 800095e:	2200      	movs	r2, #0
 8000960:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000964:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <MX_ADC3_Init+0x98>)
 8000966:	2201      	movs	r2, #1
 8000968:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800096a:	480e      	ldr	r0, [pc, #56]	; (80009a4 <MX_ADC3_Init+0x98>)
 800096c:	f000 fdf6 	bl	800155c <HAL_ADC_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8000976:	f000 fb9b 	bl	80010b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800097a:	230c      	movs	r3, #12
 800097c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800097e:	2301      	movs	r3, #1
 8000980:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000982:	2300      	movs	r3, #0
 8000984:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000986:	463b      	mov	r3, r7
 8000988:	4619      	mov	r1, r3
 800098a:	4806      	ldr	r0, [pc, #24]	; (80009a4 <MX_ADC3_Init+0x98>)
 800098c:	f000 ffc4 	bl	8001918 <HAL_ADC_ConfigChannel>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8000996:	f000 fb8b 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	3710      	adds	r7, #16
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000120 	.word	0x20000120
 80009a8:	40012200 	.word	0x40012200
 80009ac:	0f000001 	.word	0x0f000001

080009b0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80009b4:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <MX_CAN1_Init+0x64>)
 80009b6:	4a18      	ldr	r2, [pc, #96]	; (8000a18 <MX_CAN1_Init+0x68>)
 80009b8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1;
 80009ba:	4b16      	ldr	r3, [pc, #88]	; (8000a14 <MX_CAN1_Init+0x64>)
 80009bc:	2201      	movs	r2, #1
 80009be:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80009c0:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <MX_CAN1_Init+0x64>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80009c6:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <MX_CAN1_Init+0x64>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80009cc:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <MX_CAN1_Init+0x64>)
 80009ce:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80009d2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80009d4:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <MX_CAN1_Init+0x64>)
 80009d6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80009da:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80009dc:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <MX_CAN1_Init+0x64>)
 80009de:	2200      	movs	r2, #0
 80009e0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 80009e2:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <MX_CAN1_Init+0x64>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80009e8:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <MX_CAN1_Init+0x64>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80009ee:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <MX_CAN1_Init+0x64>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80009f4:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <MX_CAN1_Init+0x64>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <MX_CAN1_Init+0x64>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a00:	4804      	ldr	r0, [pc, #16]	; (8000a14 <MX_CAN1_Init+0x64>)
 8000a02:	f001 f9d9 	bl	8001db8 <HAL_CAN_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000a0c:	f000 fb50 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000168 	.word	0x20000168
 8000a18:	40006400 	.word	0x40006400

08000a1c <MX_CAN3_Init>:
  * @brief CAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN3_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 8000a20:	4b17      	ldr	r3, [pc, #92]	; (8000a80 <MX_CAN3_Init+0x64>)
 8000a22:	4a18      	ldr	r2, [pc, #96]	; (8000a84 <MX_CAN3_Init+0x68>)
 8000a24:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 1;
 8000a26:	4b16      	ldr	r3, [pc, #88]	; (8000a80 <MX_CAN3_Init+0x64>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8000a2c:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <MX_CAN3_Init+0x64>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a32:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <MX_CAN3_Init+0x64>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000a38:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <MX_CAN3_Init+0x64>)
 8000a3a:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000a3e:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000a40:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <MX_CAN3_Init+0x64>)
 8000a42:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000a46:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8000a48:	4b0d      	ldr	r3, [pc, #52]	; (8000a80 <MX_CAN3_Init+0x64>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = ENABLE;
 8000a4e:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <MX_CAN3_Init+0x64>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8000a54:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <MX_CAN3_Init+0x64>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <MX_CAN3_Init+0x64>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8000a60:	4b07      	ldr	r3, [pc, #28]	; (8000a80 <MX_CAN3_Init+0x64>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <MX_CAN3_Init+0x64>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8000a6c:	4804      	ldr	r0, [pc, #16]	; (8000a80 <MX_CAN3_Init+0x64>)
 8000a6e:	f001 f9a3 	bl	8001db8 <HAL_CAN_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 8000a78:	f000 fb1a 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000190 	.word	0x20000190
 8000a84:	40003400 	.word	0x40003400

08000a88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8e:	f107 030c 	add.w	r3, r7, #12
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
 8000a9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9e:	4b2d      	ldr	r3, [pc, #180]	; (8000b54 <MX_GPIO_Init+0xcc>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a2c      	ldr	r2, [pc, #176]	; (8000b54 <MX_GPIO_Init+0xcc>)
 8000aa4:	f043 0304 	orr.w	r3, r3, #4
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b2a      	ldr	r3, [pc, #168]	; (8000b54 <MX_GPIO_Init+0xcc>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0304 	and.w	r3, r3, #4
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab6:	4b27      	ldr	r3, [pc, #156]	; (8000b54 <MX_GPIO_Init+0xcc>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a26      	ldr	r2, [pc, #152]	; (8000b54 <MX_GPIO_Init+0xcc>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b24      	ldr	r3, [pc, #144]	; (8000b54 <MX_GPIO_Init+0xcc>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ace:	4b21      	ldr	r3, [pc, #132]	; (8000b54 <MX_GPIO_Init+0xcc>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a20      	ldr	r2, [pc, #128]	; (8000b54 <MX_GPIO_Init+0xcc>)
 8000ad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b1e      	ldr	r3, [pc, #120]	; (8000b54 <MX_GPIO_Init+0xcc>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED_Pin|START_BTN_LED_EN_Pin, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2128      	movs	r1, #40	; 0x28
 8000aea:	481b      	ldr	r0, [pc, #108]	; (8000b58 <MX_GPIO_Init+0xd0>)
 8000aec:	f002 fa6e 	bl	8002fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BRAKE_LIGHT_EN_Pin|RTDS_EN_Pin, GPIO_PIN_RESET);
 8000af0:	2200      	movs	r2, #0
 8000af2:	2109      	movs	r1, #9
 8000af4:	4819      	ldr	r0, [pc, #100]	; (8000b5c <MX_GPIO_Init+0xd4>)
 8000af6:	f002 fa69 	bl	8002fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_LED_Pin START_BTN_LED_EN_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|START_BTN_LED_EN_Pin;
 8000afa:	2328      	movs	r3, #40	; 0x28
 8000afc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afe:	2301      	movs	r3, #1
 8000b00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0a:	f107 030c 	add.w	r3, r7, #12
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4811      	ldr	r0, [pc, #68]	; (8000b58 <MX_GPIO_Init+0xd0>)
 8000b12:	f002 f897 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : BRAKE_LIGHT_EN_Pin RTDS_EN_Pin */
  GPIO_InitStruct.Pin = BRAKE_LIGHT_EN_Pin|RTDS_EN_Pin;
 8000b16:	2309      	movs	r3, #9
 8000b18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b26:	f107 030c 	add.w	r3, r7, #12
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	480b      	ldr	r0, [pc, #44]	; (8000b5c <MX_GPIO_Init+0xd4>)
 8000b2e:	f002 f889 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BTN_n_Pin */
  GPIO_InitStruct.Pin = START_BTN_n_Pin;
 8000b32:	2340      	movs	r3, #64	; 0x40
 8000b34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b36:	2300      	movs	r3, #0
 8000b38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(START_BTN_n_GPIO_Port, &GPIO_InitStruct);
 8000b3e:	f107 030c 	add.w	r3, r7, #12
 8000b42:	4619      	mov	r1, r3
 8000b44:	4805      	ldr	r0, [pc, #20]	; (8000b5c <MX_GPIO_Init+0xd4>)
 8000b46:	f002 f87d 	bl	8002c44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b4a:	bf00      	nop
 8000b4c:	3720      	adds	r7, #32
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40023800 	.word	0x40023800
 8000b58:	40020000 	.word	0x40020000
 8000b5c:	40021800 	.word	0x40021800

08000b60 <CAN_Config>:

/* USER CODE BEGIN 4 */
static void CAN_Config(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	; 0x28
 8000b64:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 13;
 8000b66:	230d      	movs	r3, #13
 8000b68:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x284<<5;
 8000b72:	f44f 43a1 	mov.w	r3, #20608	; 0x5080
 8000b76:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0xFFE<<5; //Only ID 0x284 and 0x285 can pass through
 8000b7c:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <CAN_Config+0x6c>)
 8000b7e:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8000b80:	2300      	movs	r3, #0
 8000b82:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8000b90:	463b      	mov	r3, r7
 8000b92:	4619      	mov	r1, r3
 8000b94:	480e      	ldr	r0, [pc, #56]	; (8000bd0 <CAN_Config+0x70>)
 8000b96:	f001 fa0b 	bl	8001fb0 <HAL_CAN_ConfigFilter>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <CAN_Config+0x44>
	{
		/* Filter configuration Error */
		Error_Handler();
 8000ba0:	f000 fa86 	bl	80010b0 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8000ba4:	480a      	ldr	r0, [pc, #40]	; (8000bd0 <CAN_Config+0x70>)
 8000ba6:	f001 faef 	bl	8002188 <HAL_CAN_Start>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <CAN_Config+0x54>
	{
		/* Start Error */
		Error_Handler();
 8000bb0:	f000 fa7e 	bl	80010b0 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan3) != HAL_OK)
 8000bb4:	4807      	ldr	r0, [pc, #28]	; (8000bd4 <CAN_Config+0x74>)
 8000bb6:	f001 fae7 	bl	8002188 <HAL_CAN_Start>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <CAN_Config+0x64>
	{
		/* Start Error */
		Error_Handler();
 8000bc0:	f000 fa76 	bl	80010b0 <Error_Handler>
	}
}
 8000bc4:	bf00      	nop
 8000bc6:	3728      	adds	r7, #40	; 0x28
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	0001ffc0 	.word	0x0001ffc0
 8000bd0:	20000168 	.word	0x20000168
 8000bd4:	20000190 	.word	0x20000190

08000bd8 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
	//Get Rx message
	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8000be0:	4b4e      	ldr	r3, [pc, #312]	; (8000d1c <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000be2:	4a4f      	ldr	r2, [pc, #316]	; (8000d20 <HAL_CAN_RxFifo0MsgPendingCallback+0x148>)
 8000be4:	2100      	movs	r1, #0
 8000be6:	484f      	ldr	r0, [pc, #316]	; (8000d24 <HAL_CAN_RxFifo0MsgPendingCallback+0x14c>)
 8000be8:	f001 fbe2 	bl	80023b0 <HAL_CAN_GetRxMessage>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
		Error_Handler();
 8000bf2:	f000 fa5d 	bl	80010b0 <Error_Handler>
	}

	if (RxHeader.StdId == 0x285) {
 8000bf6:	4b4a      	ldr	r3, [pc, #296]	; (8000d20 <HAL_CAN_RxFifo0MsgPendingCallback+0x148>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f240 2285 	movw	r2, #645	; 0x285
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d142      	bne.n	8000c88 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>
		if ((RxData[1] >> 1) & 1) {
 8000c02:	4b46      	ldr	r3, [pc, #280]	; (8000d1c <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000c04:	785b      	ldrb	r3, [r3, #1]
 8000c06:	085b      	lsrs	r3, r3, #1
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d003      	beq.n	8000c1a <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
			MotorStatus_R = STATUS_ERROR;
 8000c12:	4b45      	ldr	r3, [pc, #276]	; (8000d28 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000c14:	2207      	movs	r2, #7
 8000c16:	701a      	strb	r2, [r3, #0]
			return;
 8000c18:	e07d      	b.n	8000d16 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
		} else if (RxData[1] >> 7 & 1){
 8000c1a:	4b40      	ldr	r3, [pc, #256]	; (8000d1c <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000c1c:	785b      	ldrb	r3, [r3, #1]
 8000c1e:	09db      	lsrs	r3, r3, #7
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d003      	beq.n	8000c32 <HAL_CAN_RxFifo0MsgPendingCallback+0x5a>
			MotorStatus_R = STATUS_DERATING;
 8000c2a:	4b3f      	ldr	r3, [pc, #252]	; (8000d28 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000c2c:	2206      	movs	r2, #6
 8000c2e:	701a      	strb	r2, [r3, #0]
			return;
 8000c30:	e071      	b.n	8000d16 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
		} else {
			switch(RxData[1]) {
 8000c32:	4b3a      	ldr	r3, [pc, #232]	; (8000d1c <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000c34:	785b      	ldrb	r3, [r3, #1]
 8000c36:	2b79      	cmp	r3, #121	; 0x79
 8000c38:	d01e      	beq.n	8000c78 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>
 8000c3a:	2b79      	cmp	r3, #121	; 0x79
 8000c3c:	dc20      	bgt.n	8000c80 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
 8000c3e:	2b59      	cmp	r3, #89	; 0x59
 8000c40:	d016      	beq.n	8000c70 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>
 8000c42:	2b59      	cmp	r3, #89	; 0x59
 8000c44:	dc1c      	bgt.n	8000c80 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
 8000c46:	2b19      	cmp	r3, #25
 8000c48:	d00e      	beq.n	8000c68 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>
 8000c4a:	2b19      	cmp	r3, #25
 8000c4c:	dc18      	bgt.n	8000c80 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d002      	beq.n	8000c58 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>
 8000c52:	2b11      	cmp	r3, #17
 8000c54:	d004      	beq.n	8000c60 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>
 8000c56:	e013      	b.n	8000c80 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
				case 0x01:
					MotorStatus_R = STATUS_SYSTEM_READY;
 8000c58:	4b33      	ldr	r3, [pc, #204]	; (8000d28 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	701a      	strb	r2, [r3, #0]
					break;
 8000c5e:	e05a      	b.n	8000d16 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x11:
					MotorStatus_R = STATUS_DC_ON;
 8000c60:	4b31      	ldr	r3, [pc, #196]	; (8000d28 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000c62:	2202      	movs	r2, #2
 8000c64:	701a      	strb	r2, [r3, #0]
					break;
 8000c66:	e056      	b.n	8000d16 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x19:
					MotorStatus_R = STATUS_QUIT_DC_ON;
 8000c68:	4b2f      	ldr	r3, [pc, #188]	; (8000d28 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000c6a:	2203      	movs	r2, #3
 8000c6c:	701a      	strb	r2, [r3, #0]
					break;
 8000c6e:	e052      	b.n	8000d16 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x59:
					MotorStatus_R = STATUS_INVERTER_ON;
 8000c70:	4b2d      	ldr	r3, [pc, #180]	; (8000d28 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000c72:	2204      	movs	r2, #4
 8000c74:	701a      	strb	r2, [r3, #0]
					break;
 8000c76:	e04e      	b.n	8000d16 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x79:
					MotorStatus_R = STATUS_QUIT_INVERTER_ON;
 8000c78:	4b2b      	ldr	r3, [pc, #172]	; (8000d28 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000c7a:	2205      	movs	r2, #5
 8000c7c:	701a      	strb	r2, [r3, #0]
					break;
 8000c7e:	e04a      	b.n	8000d16 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				default:
					MotorStatus_R = STATUS_UNKNOWN;
 8000c80:	4b29      	ldr	r3, [pc, #164]	; (8000d28 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	701a      	strb	r2, [r3, #0]
 8000c86:	e046      	b.n	8000d16 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
			}
		}
	}
	else if (RxHeader.StdId == 0x284) {
 8000c88:	4b25      	ldr	r3, [pc, #148]	; (8000d20 <HAL_CAN_RxFifo0MsgPendingCallback+0x148>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f5b3 7f21 	cmp.w	r3, #644	; 0x284
 8000c90:	d141      	bne.n	8000d16 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
		if ((RxData[1] >> 1) & 1) {
 8000c92:	4b22      	ldr	r3, [pc, #136]	; (8000d1c <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000c94:	785b      	ldrb	r3, [r3, #1]
 8000c96:	085b      	lsrs	r3, r3, #1
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d003      	beq.n	8000caa <HAL_CAN_RxFifo0MsgPendingCallback+0xd2>
			MotorStatus_L = STATUS_ERROR;
 8000ca2:	4b22      	ldr	r3, [pc, #136]	; (8000d2c <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000ca4:	2207      	movs	r2, #7
 8000ca6:	701a      	strb	r2, [r3, #0]
			return;
 8000ca8:	e035      	b.n	8000d16 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
		} else if (RxData[1] >> 7 & 1){
 8000caa:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000cac:	785b      	ldrb	r3, [r3, #1]
 8000cae:	09db      	lsrs	r3, r3, #7
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d003      	beq.n	8000cc2 <HAL_CAN_RxFifo0MsgPendingCallback+0xea>
			MotorStatus_L = STATUS_DERATING;
 8000cba:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000cbc:	2206      	movs	r2, #6
 8000cbe:	701a      	strb	r2, [r3, #0]
			return;
 8000cc0:	e029      	b.n	8000d16 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
		} else {
			switch(RxData[1]) {
 8000cc2:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000cc4:	785b      	ldrb	r3, [r3, #1]
 8000cc6:	2b79      	cmp	r3, #121	; 0x79
 8000cc8:	d01e      	beq.n	8000d08 <HAL_CAN_RxFifo0MsgPendingCallback+0x130>
 8000cca:	2b79      	cmp	r3, #121	; 0x79
 8000ccc:	dc20      	bgt.n	8000d10 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>
 8000cce:	2b59      	cmp	r3, #89	; 0x59
 8000cd0:	d016      	beq.n	8000d00 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>
 8000cd2:	2b59      	cmp	r3, #89	; 0x59
 8000cd4:	dc1c      	bgt.n	8000d10 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>
 8000cd6:	2b19      	cmp	r3, #25
 8000cd8:	d00e      	beq.n	8000cf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>
 8000cda:	2b19      	cmp	r3, #25
 8000cdc:	dc18      	bgt.n	8000d10 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d002      	beq.n	8000ce8 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>
 8000ce2:	2b11      	cmp	r3, #17
 8000ce4:	d004      	beq.n	8000cf0 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>
 8000ce6:	e013      	b.n	8000d10 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>
				case 0x01:
					MotorStatus_L = STATUS_SYSTEM_READY;
 8000ce8:	4b10      	ldr	r3, [pc, #64]	; (8000d2c <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000cea:	2201      	movs	r2, #1
 8000cec:	701a      	strb	r2, [r3, #0]
					break;
 8000cee:	e012      	b.n	8000d16 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x11:
					MotorStatus_L = STATUS_DC_ON;
 8000cf0:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000cf2:	2202      	movs	r2, #2
 8000cf4:	701a      	strb	r2, [r3, #0]
					break;
 8000cf6:	e00e      	b.n	8000d16 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x19:
					MotorStatus_L = STATUS_QUIT_DC_ON;
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000cfa:	2203      	movs	r2, #3
 8000cfc:	701a      	strb	r2, [r3, #0]
					break;
 8000cfe:	e00a      	b.n	8000d16 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x59:
					MotorStatus_L = STATUS_INVERTER_ON;
 8000d00:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000d02:	2204      	movs	r2, #4
 8000d04:	701a      	strb	r2, [r3, #0]
					break;
 8000d06:	e006      	b.n	8000d16 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x79:
					MotorStatus_L = STATUS_QUIT_INVERTER_ON;
 8000d08:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000d0a:	2205      	movs	r2, #5
 8000d0c:	701a      	strb	r2, [r3, #0]
					break;
 8000d0e:	e002      	b.n	8000d16 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				default:
					MotorStatus_L = STATUS_UNKNOWN;
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	2000021c 	.word	0x2000021c
 8000d20:	200001f0 	.word	0x200001f0
 8000d24:	20000168 	.word	0x20000168
 8000d28:	20000228 	.word	0x20000228
 8000d2c:	20000229 	.word	0x20000229

08000d30 <Start_FRT_controller>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_FRT_controller */
void Start_FRT_controller(void *argument)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(50);
 8000d38:	2032      	movs	r0, #50	; 0x32
 8000d3a:	f003 facd 	bl	80042d8 <osDelay>
    if (HAL_GPIO_ReadPin(START_BTN_n_GPIO_Port, START_BTN_n_Pin) == 0) {
 8000d3e:	2140      	movs	r1, #64	; 0x40
 8000d40:	4832      	ldr	r0, [pc, #200]	; (8000e0c <Start_FRT_controller+0xdc>)
 8000d42:	f002 f92b 	bl	8002f9c <HAL_GPIO_ReadPin>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d102      	bne.n	8000d52 <Start_FRT_controller+0x22>
    	//Read Ready to Drive button
    	TsOn_n = 1;
 8000d4c:	4b30      	ldr	r3, [pc, #192]	; (8000e10 <Start_FRT_controller+0xe0>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	701a      	strb	r2, [r3, #0]
    }
    if (RxData[1] == 0x79 && TsOn_n && BrakeOn) {
 8000d52:	4b30      	ldr	r3, [pc, #192]	; (8000e14 <Start_FRT_controller+0xe4>)
 8000d54:	785b      	ldrb	r3, [r3, #1]
 8000d56:	2b79      	cmp	r3, #121	; 0x79
 8000d58:	d11e      	bne.n	8000d98 <Start_FRT_controller+0x68>
 8000d5a:	4b2d      	ldr	r3, [pc, #180]	; (8000e10 <Start_FRT_controller+0xe0>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d01a      	beq.n	8000d98 <Start_FRT_controller+0x68>
 8000d62:	4b2d      	ldr	r3, [pc, #180]	; (8000e18 <Start_FRT_controller+0xe8>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d016      	beq.n	8000d98 <Start_FRT_controller+0x68>
    	//Set ready to drive flag when all procedures are met
    	ReadyToDrive = 1;
 8000d6a:	4b2c      	ldr	r3, [pc, #176]	; (8000e1c <Start_FRT_controller+0xec>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	701a      	strb	r2, [r3, #0]
    	//Sound read to drive speaker for 2s

    	//HAL_GPIO_WritePin(RTDS_EN_GPIO_Port, RTDS_EN_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(RTDS_EN_GPIO_Port, RTDS_EN_Pin, GPIO_PIN_SET);
 8000d70:	2201      	movs	r2, #1
 8000d72:	2108      	movs	r1, #8
 8000d74:	4825      	ldr	r0, [pc, #148]	; (8000e0c <Start_FRT_controller+0xdc>)
 8000d76:	f002 f929 	bl	8002fcc <HAL_GPIO_WritePin>
    	osDelay(2000);
 8000d7a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d7e:	f003 faab 	bl	80042d8 <osDelay>
    	//HAL_GPIO_WritePin(RTDS_EN_GPIO_Port, RTDS_EN_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RTDS_EN_GPIO_Port, RTDS_EN_Pin, GPIO_PIN_RESET);
 8000d82:	2200      	movs	r2, #0
 8000d84:	2108      	movs	r1, #8
 8000d86:	4821      	ldr	r0, [pc, #132]	; (8000e0c <Start_FRT_controller+0xdc>)
 8000d88:	f002 f920 	bl	8002fcc <HAL_GPIO_WritePin>

		//Terminate thread when vehicle is ready to drive
    	osThreadSuspend(controllerStartHandle);
 8000d8c:	4b24      	ldr	r3, [pc, #144]	; (8000e20 <Start_FRT_controller+0xf0>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f003 fa39 	bl	8004208 <osThreadSuspend>
 8000d96:	e038      	b.n	8000e0a <Start_FRT_controller+0xda>
    } else if ((RxData[1] & 1) && !TsOn_n) {
 8000d98:	4b1e      	ldr	r3, [pc, #120]	; (8000e14 <Start_FRT_controller+0xe4>)
 8000d9a:	785b      	ldrb	r3, [r3, #1]
 8000d9c:	f003 0301 	and.w	r3, r3, #1
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d019      	beq.n	8000dd8 <Start_FRT_controller+0xa8>
 8000da4:	4b1a      	ldr	r3, [pc, #104]	; (8000e10 <Start_FRT_controller+0xe0>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	f083 0301 	eor.w	r3, r3, #1
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d012      	beq.n	8000dd8 <Start_FRT_controller+0xa8>
    	//Blink the status LED when AMK is ready
		HAL_GPIO_WritePin(START_BTN_LED_EN_GPIO_Port, START_BTN_LED_EN_Pin, GPIO_PIN_SET);
 8000db2:	2201      	movs	r2, #1
 8000db4:	2120      	movs	r1, #32
 8000db6:	481b      	ldr	r0, [pc, #108]	; (8000e24 <Start_FRT_controller+0xf4>)
 8000db8:	f002 f908 	bl	8002fcc <HAL_GPIO_WritePin>
		osDelay(500);
 8000dbc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dc0:	f003 fa8a 	bl	80042d8 <osDelay>
		HAL_GPIO_WritePin(START_BTN_LED_EN_GPIO_Port, START_BTN_LED_EN_Pin, GPIO_PIN_RESET);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2120      	movs	r1, #32
 8000dc8:	4816      	ldr	r0, [pc, #88]	; (8000e24 <Start_FRT_controller+0xf4>)
 8000dca:	f002 f8ff 	bl	8002fcc <HAL_GPIO_WritePin>
		osDelay(450);
 8000dce:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8000dd2:	f003 fa81 	bl	80042d8 <osDelay>
 8000dd6:	e018      	b.n	8000e0a <Start_FRT_controller+0xda>
    } else if (TsOn_n) {
 8000dd8:	4b0d      	ldr	r3, [pc, #52]	; (8000e10 <Start_FRT_controller+0xe0>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d0ab      	beq.n	8000d38 <Start_FRT_controller+0x8>
    	//Send CAN messages to close AIRs
    	while ((MotorStatus_R == STATUS_DERATING) && (MotorStatus_R == STATUS_DERATING)) {
 8000de0:	e006      	b.n	8000df0 <Start_FRT_controller+0xc0>
    		osDelay(50);
 8000de2:	2032      	movs	r0, #50	; 0x32
 8000de4:	f003 fa78 	bl	80042d8 <osDelay>
    		HAL_GPIO_TogglePin(START_BTN_LED_EN_GPIO_Port, START_BTN_LED_EN_Pin);
 8000de8:	2120      	movs	r1, #32
 8000dea:	480e      	ldr	r0, [pc, #56]	; (8000e24 <Start_FRT_controller+0xf4>)
 8000dec:	f002 f907 	bl	8002ffe <HAL_GPIO_TogglePin>
    	while ((MotorStatus_R == STATUS_DERATING) && (MotorStatus_R == STATUS_DERATING)) {
 8000df0:	4b0d      	ldr	r3, [pc, #52]	; (8000e28 <Start_FRT_controller+0xf8>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b06      	cmp	r3, #6
 8000df6:	d103      	bne.n	8000e00 <Start_FRT_controller+0xd0>
 8000df8:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <Start_FRT_controller+0xf8>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	2b06      	cmp	r3, #6
 8000dfe:	d0f0      	beq.n	8000de2 <Start_FRT_controller+0xb2>
    	}
		HAL_GPIO_WritePin(START_BTN_LED_EN_GPIO_Port, START_BTN_LED_EN_Pin, GPIO_PIN_SET);
 8000e00:	2201      	movs	r2, #1
 8000e02:	2120      	movs	r1, #32
 8000e04:	4807      	ldr	r0, [pc, #28]	; (8000e24 <Start_FRT_controller+0xf4>)
 8000e06:	f002 f8e1 	bl	8002fcc <HAL_GPIO_WritePin>
    osDelay(50);
 8000e0a:	e795      	b.n	8000d38 <Start_FRT_controller+0x8>
 8000e0c:	40021800 	.word	0x40021800
 8000e10:	2000022b 	.word	0x2000022b
 8000e14:	2000021c 	.word	0x2000021c
 8000e18:	2000022c 	.word	0x2000022c
 8000e1c:	2000022d 	.word	0x2000022d
 8000e20:	200001b8 	.word	0x200001b8
 8000e24:	40020000 	.word	0x40020000
 8000e28:	20000228 	.word	0x20000228

08000e2c <Start_AMK>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_AMK */
void Start_AMK(void *argument)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_AMK */
  /* Infinite loop */
  for(;;)
  {

    osDelay(5);
 8000e34:	2005      	movs	r0, #5
 8000e36:	f003 fa4f 	bl	80042d8 <osDelay>
    //Read accelerator position
    APPS1_VAL = APPS1_ADC_Percent()*500;
 8000e3a:	f7ff fb83 	bl	8000544 <APPS1_ADC_Percent>
 8000e3e:	eef0 7a40 	vmov.f32	s15, s0
 8000e42:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8001044 <Start_AMK+0x218>
 8000e46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e4e:	ee17 3a90 	vmov	r3, s15
 8000e52:	b29a      	uxth	r2, r3
 8000e54:	4b7c      	ldr	r3, [pc, #496]	; (8001048 <Start_AMK+0x21c>)
 8000e56:	801a      	strh	r2, [r3, #0]
    //Read brake pressure
    if (APPS1_VAL >= 450) {
 8000e58:	4b7b      	ldr	r3, [pc, #492]	; (8001048 <Start_AMK+0x21c>)
 8000e5a:	881b      	ldrh	r3, [r3, #0]
 8000e5c:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8000e60:	d308      	bcc.n	8000e74 <Start_AMK+0x48>
    	BrakeOn = 1;
 8000e62:	4b7a      	ldr	r3, [pc, #488]	; (800104c <Start_AMK+0x220>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	701a      	strb	r2, [r3, #0]
    	HAL_GPIO_WritePin(BRAKE_LIGHT_EN_GPIO_Port, BRAKE_LIGHT_EN_Pin, GPIO_PIN_SET);
 8000e68:	2201      	movs	r2, #1
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	4878      	ldr	r0, [pc, #480]	; (8001050 <Start_AMK+0x224>)
 8000e6e:	f002 f8ad 	bl	8002fcc <HAL_GPIO_WritePin>
 8000e72:	e007      	b.n	8000e84 <Start_AMK+0x58>
    } else {
    	BrakeOn = 0;
 8000e74:	4b75      	ldr	r3, [pc, #468]	; (800104c <Start_AMK+0x220>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	701a      	strb	r2, [r3, #0]
    	HAL_GPIO_WritePin(BRAKE_LIGHT_EN_GPIO_Port, BRAKE_LIGHT_EN_Pin, GPIO_PIN_RESET);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	4874      	ldr	r0, [pc, #464]	; (8001050 <Start_AMK+0x224>)
 8000e80:	f002 f8a4 	bl	8002fcc <HAL_GPIO_WritePin>
    }

	//HAL_GPIO_WritePin(BRAKE_LIGHT_EN_GPIO_Port, BRAKE_LIGHT_EN_Pin, GPIO_PIN_SET);
	//HAL_GPIO_WritePin(RTDS_EN_GPIO_Port, RTDS_EN_Pin, GPIO_PIN_SET);

    if ((MotorStatus_R == STATUS_SYSTEM_READY) && (MotorStatus_L == STATUS_SYSTEM_READY)) {
 8000e84:	4b73      	ldr	r3, [pc, #460]	; (8001054 <Start_AMK+0x228>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d10d      	bne.n	8000ea8 <Start_AMK+0x7c>
 8000e8c:	4b72      	ldr	r3, [pc, #456]	; (8001058 <Start_AMK+0x22c>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d109      	bne.n	8000ea8 <Start_AMK+0x7c>
    	//Perform AMK start-up sequence
    	AMK_TxData_R[1] = 0x02;
 8000e94:	4b71      	ldr	r3, [pc, #452]	; (800105c <Start_AMK+0x230>)
 8000e96:	2202      	movs	r2, #2
 8000e98:	705a      	strb	r2, [r3, #1]
    	AMK_TxData_L[1] = 0x02;
 8000e9a:	4b71      	ldr	r3, [pc, #452]	; (8001060 <Start_AMK+0x234>)
 8000e9c:	2202      	movs	r2, #2
 8000e9e:	705a      	strb	r2, [r3, #1]
		ControlStatus = CONTROL_DC_ON;
 8000ea0:	4b70      	ldr	r3, [pc, #448]	; (8001064 <Start_AMK+0x238>)
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	701a      	strb	r2, [r3, #0]
 8000ea6:	e0b6      	b.n	8001016 <Start_AMK+0x1ea>
    } else if ((MotorStatus_R == STATUS_QUIT_DC_ON) && (MotorStatus_L == STATUS_QUIT_DC_ON)) {
 8000ea8:	4b6a      	ldr	r3, [pc, #424]	; (8001054 <Start_AMK+0x228>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b03      	cmp	r3, #3
 8000eae:	d117      	bne.n	8000ee0 <Start_AMK+0xb4>
 8000eb0:	4b69      	ldr	r3, [pc, #420]	; (8001058 <Start_AMK+0x22c>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b03      	cmp	r3, #3
 8000eb6:	d113      	bne.n	8000ee0 <Start_AMK+0xb4>
		AMK_TxData_L[1] = 0x07;
 8000eb8:	4b69      	ldr	r3, [pc, #420]	; (8001060 <Start_AMK+0x234>)
 8000eba:	2207      	movs	r2, #7
 8000ebc:	705a      	strb	r2, [r3, #1]
		AMK_TxData_R[1] = 0x07;
 8000ebe:	4b67      	ldr	r3, [pc, #412]	; (800105c <Start_AMK+0x230>)
 8000ec0:	2207      	movs	r2, #7
 8000ec2:	705a      	strb	r2, [r3, #1]
		memset(&AMK_TxData_R[2],0x00, 4*sizeof(uint8_t));
 8000ec4:	2204      	movs	r2, #4
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4867      	ldr	r0, [pc, #412]	; (8001068 <Start_AMK+0x23c>)
 8000eca:	f006 f82b 	bl	8006f24 <memset>
		memset(&AMK_TxData_L[2],0x00, 4*sizeof(uint8_t));
 8000ece:	2204      	movs	r2, #4
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4866      	ldr	r0, [pc, #408]	; (800106c <Start_AMK+0x240>)
 8000ed4:	f006 f826 	bl	8006f24 <memset>
		ControlStatus = CONTROL_ENABLE;
 8000ed8:	4b62      	ldr	r3, [pc, #392]	; (8001064 <Start_AMK+0x238>)
 8000eda:	2202      	movs	r2, #2
 8000edc:	701a      	strb	r2, [r3, #0]
 8000ede:	e09a      	b.n	8001016 <Start_AMK+0x1ea>
    } else if ((MotorStatus_R == STATUS_INVERTER_ON) && (MotorStatus_L == STATUS_INVERTER_ON)) {
 8000ee0:	4b5c      	ldr	r3, [pc, #368]	; (8001054 <Start_AMK+0x228>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2b04      	cmp	r3, #4
 8000ee6:	d11c      	bne.n	8000f22 <Start_AMK+0xf6>
 8000ee8:	4b5b      	ldr	r3, [pc, #364]	; (8001058 <Start_AMK+0x22c>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b04      	cmp	r3, #4
 8000eee:	d118      	bne.n	8000f22 <Start_AMK+0xf6>
    	osThreadResume(controllerStartHandle);
 8000ef0:	4b5f      	ldr	r3, [pc, #380]	; (8001070 <Start_AMK+0x244>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f003 f9bb 	bl	8004270 <osThreadResume>
    	AMK_TxData_L[1] = 0x07;
 8000efa:	4b59      	ldr	r3, [pc, #356]	; (8001060 <Start_AMK+0x234>)
 8000efc:	2207      	movs	r2, #7
 8000efe:	705a      	strb	r2, [r3, #1]
    	AMK_TxData_R[1] = 0x07;
 8000f00:	4b56      	ldr	r3, [pc, #344]	; (800105c <Start_AMK+0x230>)
 8000f02:	2207      	movs	r2, #7
 8000f04:	705a      	strb	r2, [r3, #1]
    	memset(&AMK_TxData_R[2],0x00, 4*sizeof(uint8_t));
 8000f06:	2204      	movs	r2, #4
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4857      	ldr	r0, [pc, #348]	; (8001068 <Start_AMK+0x23c>)
 8000f0c:	f006 f80a 	bl	8006f24 <memset>
    	memset(&AMK_TxData_L[2],0x00, 4*sizeof(uint8_t));
 8000f10:	2204      	movs	r2, #4
 8000f12:	2100      	movs	r1, #0
 8000f14:	4855      	ldr	r0, [pc, #340]	; (800106c <Start_AMK+0x240>)
 8000f16:	f006 f805 	bl	8006f24 <memset>
    	ControlStatus = CONTROL_INVERTER_ON;
 8000f1a:	4b52      	ldr	r3, [pc, #328]	; (8001064 <Start_AMK+0x238>)
 8000f1c:	2203      	movs	r2, #3
 8000f1e:	701a      	strb	r2, [r3, #0]
 8000f20:	e079      	b.n	8001016 <Start_AMK+0x1ea>
    } else if ((MotorStatus_R == STATUS_QUIT_INVERTER_ON) && (MotorStatus_L == STATUS_QUIT_INVERTER_ON) && TsOn_n) {
 8000f22:	4b4c      	ldr	r3, [pc, #304]	; (8001054 <Start_AMK+0x228>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2b05      	cmp	r3, #5
 8000f28:	d13b      	bne.n	8000fa2 <Start_AMK+0x176>
 8000f2a:	4b4b      	ldr	r3, [pc, #300]	; (8001058 <Start_AMK+0x22c>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2b05      	cmp	r3, #5
 8000f30:	d137      	bne.n	8000fa2 <Start_AMK+0x176>
 8000f32:	4b50      	ldr	r3, [pc, #320]	; (8001074 <Start_AMK+0x248>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d033      	beq.n	8000fa2 <Start_AMK+0x176>
    	if (ReadyToDrive) {
 8000f3a:	4b4f      	ldr	r3, [pc, #316]	; (8001078 <Start_AMK+0x24c>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d01b      	beq.n	8000f7a <Start_AMK+0x14e>
    		AMK_TxData_R[1] = 0x07;
 8000f42:	4b46      	ldr	r3, [pc, #280]	; (800105c <Start_AMK+0x230>)
 8000f44:	2207      	movs	r2, #7
 8000f46:	705a      	strb	r2, [r3, #1]
			AMK_TxData_L[1] = 0x07;
 8000f48:	4b45      	ldr	r3, [pc, #276]	; (8001060 <Start_AMK+0x234>)
 8000f4a:	2207      	movs	r2, #7
 8000f4c:	705a      	strb	r2, [r3, #1]

//			AMK_TxData_R[2] = APPS2_VAL & 0xFF;
//			AMK_TxData_R[3] = (APPS2_VAL >> 8) & 0xFF;
			AMK_TxData_R[2] = 0xFF;
 8000f4e:	4b43      	ldr	r3, [pc, #268]	; (800105c <Start_AMK+0x230>)
 8000f50:	22ff      	movs	r2, #255	; 0xff
 8000f52:	709a      	strb	r2, [r3, #2]
			AMK_TxData_R[3] = 0x01;
 8000f54:	4b41      	ldr	r3, [pc, #260]	; (800105c <Start_AMK+0x230>)
 8000f56:	2201      	movs	r2, #1
 8000f58:	70da      	strb	r2, [r3, #3]
			AMK_TxData_R[4] = 0x32; //set positive torque request to 50
 8000f5a:	4b40      	ldr	r3, [pc, #256]	; (800105c <Start_AMK+0x230>)
 8000f5c:	2232      	movs	r2, #50	; 0x32
 8000f5e:	711a      	strb	r2, [r3, #4]

//			AMK_TxData_L[2] = APPS2_VAL & 0xFF;
//			AMK_TxData_L[3] = (APPS2_VAL >> 8) & 0xFF;
			AMK_TxData_L[2] = 0xFF;
 8000f60:	4b3f      	ldr	r3, [pc, #252]	; (8001060 <Start_AMK+0x234>)
 8000f62:	22ff      	movs	r2, #255	; 0xff
 8000f64:	709a      	strb	r2, [r3, #2]
			AMK_TxData_L[3] = 0x01;
 8000f66:	4b3e      	ldr	r3, [pc, #248]	; (8001060 <Start_AMK+0x234>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	70da      	strb	r2, [r3, #3]
			AMK_TxData_L[4] = 0x32;
 8000f6c:	4b3c      	ldr	r3, [pc, #240]	; (8001060 <Start_AMK+0x234>)
 8000f6e:	2232      	movs	r2, #50	; 0x32
 8000f70:	711a      	strb	r2, [r3, #4]
			ControlStatus = CONTROL_RUNNING;
 8000f72:	4b3c      	ldr	r3, [pc, #240]	; (8001064 <Start_AMK+0x238>)
 8000f74:	2207      	movs	r2, #7
 8000f76:	701a      	strb	r2, [r3, #0]
    	if (ReadyToDrive) {
 8000f78:	e04d      	b.n	8001016 <Start_AMK+0x1ea>
    	} else {
    		AMK_TxData_R[1] = 0x07;
 8000f7a:	4b38      	ldr	r3, [pc, #224]	; (800105c <Start_AMK+0x230>)
 8000f7c:	2207      	movs	r2, #7
 8000f7e:	705a      	strb	r2, [r3, #1]
    		AMK_TxData_L[1] = 0x07;
 8000f80:	4b37      	ldr	r3, [pc, #220]	; (8001060 <Start_AMK+0x234>)
 8000f82:	2207      	movs	r2, #7
 8000f84:	705a      	strb	r2, [r3, #1]
    		memset(&AMK_TxData_R[2],0x00, 4*sizeof(uint8_t));
 8000f86:	2204      	movs	r2, #4
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4837      	ldr	r0, [pc, #220]	; (8001068 <Start_AMK+0x23c>)
 8000f8c:	f005 ffca 	bl	8006f24 <memset>
    		memset(&AMK_TxData_L[2],0x00, 4*sizeof(uint8_t));
 8000f90:	2204      	movs	r2, #4
 8000f92:	2100      	movs	r1, #0
 8000f94:	4835      	ldr	r0, [pc, #212]	; (800106c <Start_AMK+0x240>)
 8000f96:	f005 ffc5 	bl	8006f24 <memset>
    		ControlStatus = CONTROL_TS_READY;
 8000f9a:	4b32      	ldr	r3, [pc, #200]	; (8001064 <Start_AMK+0x238>)
 8000f9c:	2204      	movs	r2, #4
 8000f9e:	701a      	strb	r2, [r3, #0]
    	if (ReadyToDrive) {
 8000fa0:	e039      	b.n	8001016 <Start_AMK+0x1ea>
    	}
    } else if (MotorStatus_R == STATUS_ERROR) {
 8000fa2:	4b2c      	ldr	r3, [pc, #176]	; (8001054 <Start_AMK+0x228>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b07      	cmp	r3, #7
 8000fa8:	d109      	bne.n	8000fbe <Start_AMK+0x192>
    	ReadyToDrive = 0;
 8000faa:	4b33      	ldr	r3, [pc, #204]	; (8001078 <Start_AMK+0x24c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	701a      	strb	r2, [r3, #0]
    	AMK_TxData_R[1] = 0x08;
 8000fb0:	4b2a      	ldr	r3, [pc, #168]	; (800105c <Start_AMK+0x230>)
 8000fb2:	2208      	movs	r2, #8
 8000fb4:	705a      	strb	r2, [r3, #1]
		ControlStatus = CONTROL_ERROR_RESET_RIGHT;
 8000fb6:	4b2b      	ldr	r3, [pc, #172]	; (8001064 <Start_AMK+0x238>)
 8000fb8:	2205      	movs	r2, #5
 8000fba:	701a      	strb	r2, [r3, #0]
 8000fbc:	e02b      	b.n	8001016 <Start_AMK+0x1ea>
    } else if (MotorStatus_L == STATUS_ERROR) {
 8000fbe:	4b26      	ldr	r3, [pc, #152]	; (8001058 <Start_AMK+0x22c>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	2b07      	cmp	r3, #7
 8000fc4:	d109      	bne.n	8000fda <Start_AMK+0x1ae>
    	ReadyToDrive = 0;
 8000fc6:	4b2c      	ldr	r3, [pc, #176]	; (8001078 <Start_AMK+0x24c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	701a      	strb	r2, [r3, #0]
    	AMK_TxData_L[1] = 0x08;
 8000fcc:	4b24      	ldr	r3, [pc, #144]	; (8001060 <Start_AMK+0x234>)
 8000fce:	2208      	movs	r2, #8
 8000fd0:	705a      	strb	r2, [r3, #1]
		ControlStatus = CONTROL_ERROR_RESET_LEFT;
 8000fd2:	4b24      	ldr	r3, [pc, #144]	; (8001064 <Start_AMK+0x238>)
 8000fd4:	2206      	movs	r2, #6
 8000fd6:	701a      	strb	r2, [r3, #0]
 8000fd8:	e01d      	b.n	8001016 <Start_AMK+0x1ea>
    } else if ((MotorStatus_R == STATUS_DERATING) && (MotorStatus_L == STATUS_DERATING)) {
 8000fda:	4b1e      	ldr	r3, [pc, #120]	; (8001054 <Start_AMK+0x228>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b06      	cmp	r3, #6
 8000fe0:	d103      	bne.n	8000fea <Start_AMK+0x1be>
 8000fe2:	4b1d      	ldr	r3, [pc, #116]	; (8001058 <Start_AMK+0x22c>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b06      	cmp	r3, #6
 8000fe8:	d015      	beq.n	8001016 <Start_AMK+0x1ea>
    	//TsOn_n = 0;
    } else {
    	ReadyToDrive = 0;
 8000fea:	4b23      	ldr	r3, [pc, #140]	; (8001078 <Start_AMK+0x24c>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	701a      	strb	r2, [r3, #0]
    	AMK_TxData_L[1] = 0x07;
 8000ff0:	4b1b      	ldr	r3, [pc, #108]	; (8001060 <Start_AMK+0x234>)
 8000ff2:	2207      	movs	r2, #7
 8000ff4:	705a      	strb	r2, [r3, #1]
		AMK_TxData_R[1] = 0x07;
 8000ff6:	4b19      	ldr	r3, [pc, #100]	; (800105c <Start_AMK+0x230>)
 8000ff8:	2207      	movs	r2, #7
 8000ffa:	705a      	strb	r2, [r3, #1]
		memset(&AMK_TxData_R[2],0x00, 4*sizeof(uint8_t));
 8000ffc:	2204      	movs	r2, #4
 8000ffe:	2100      	movs	r1, #0
 8001000:	4819      	ldr	r0, [pc, #100]	; (8001068 <Start_AMK+0x23c>)
 8001002:	f005 ff8f 	bl	8006f24 <memset>
		memset(&AMK_TxData_L[2],0x00, 4*sizeof(uint8_t));
 8001006:	2204      	movs	r2, #4
 8001008:	2100      	movs	r1, #0
 800100a:	4818      	ldr	r0, [pc, #96]	; (800106c <Start_AMK+0x240>)
 800100c:	f005 ff8a 	bl	8006f24 <memset>
    	ControlStatus = CONTROL_UNKNOWN;
 8001010:	4b14      	ldr	r3, [pc, #80]	; (8001064 <Start_AMK+0x238>)
 8001012:	2200      	movs	r2, #0
 8001014:	701a      	strb	r2, [r3, #0]
    }

	HAL_CAN_AddTxMessage(&hcan1, &AMK_TxHeader_R, AMK_TxData_R, &TxMailbox);
 8001016:	4b19      	ldr	r3, [pc, #100]	; (800107c <Start_AMK+0x250>)
 8001018:	4a10      	ldr	r2, [pc, #64]	; (800105c <Start_AMK+0x230>)
 800101a:	4919      	ldr	r1, [pc, #100]	; (8001080 <Start_AMK+0x254>)
 800101c:	4819      	ldr	r0, [pc, #100]	; (8001084 <Start_AMK+0x258>)
 800101e:	f001 f8f7 	bl	8002210 <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&hcan1, &AMK_TxHeader_L, AMK_TxData_L, &TxMailbox);
 8001022:	4b16      	ldr	r3, [pc, #88]	; (800107c <Start_AMK+0x250>)
 8001024:	4a0e      	ldr	r2, [pc, #56]	; (8001060 <Start_AMK+0x234>)
 8001026:	4918      	ldr	r1, [pc, #96]	; (8001088 <Start_AMK+0x25c>)
 8001028:	4816      	ldr	r0, [pc, #88]	; (8001084 <Start_AMK+0x258>)
 800102a:	f001 f8f1 	bl	8002210 <HAL_CAN_AddTxMessage>
	memset(&AMK_TxData_R[0],0x00, 8*sizeof(uint8_t));
 800102e:	2208      	movs	r2, #8
 8001030:	2100      	movs	r1, #0
 8001032:	480a      	ldr	r0, [pc, #40]	; (800105c <Start_AMK+0x230>)
 8001034:	f005 ff76 	bl	8006f24 <memset>
	memset(&AMK_TxData_L[0],0x00, 8*sizeof(uint8_t));
 8001038:	2208      	movs	r2, #8
 800103a:	2100      	movs	r1, #0
 800103c:	4808      	ldr	r0, [pc, #32]	; (8001060 <Start_AMK+0x234>)
 800103e:	f005 ff71 	bl	8006f24 <memset>
    osDelay(5);
 8001042:	e6f7      	b.n	8000e34 <Start_AMK+0x8>
 8001044:	43fa0000 	.word	0x43fa0000
 8001048:	2000022e 	.word	0x2000022e
 800104c:	2000022c 	.word	0x2000022c
 8001050:	40021800 	.word	0x40021800
 8001054:	20000228 	.word	0x20000228
 8001058:	20000229 	.word	0x20000229
 800105c:	2000020c 	.word	0x2000020c
 8001060:	20000214 	.word	0x20000214
 8001064:	2000022a 	.word	0x2000022a
 8001068:	2000020e 	.word	0x2000020e
 800106c:	20000216 	.word	0x20000216
 8001070:	200001b8 	.word	0x200001b8
 8001074:	2000022b 	.word	0x2000022b
 8001078:	2000022d 	.word	0x2000022d
 800107c:	20000224 	.word	0x20000224
 8001080:	200001c0 	.word	0x200001c0
 8001084:	20000168 	.word	0x20000168
 8001088:	200001d8 	.word	0x200001d8

0800108c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a04      	ldr	r2, [pc, #16]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d101      	bne.n	80010a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800109e:	f000 fa3d 	bl	800151c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40001000 	.word	0x40001000

080010b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b4:	b672      	cpsid	i
}
 80010b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 1);
 80010b8:	2201      	movs	r2, #1
 80010ba:	2108      	movs	r1, #8
 80010bc:	4801      	ldr	r0, [pc, #4]	; (80010c4 <Error_Handler+0x14>)
 80010be:	f001 ff85 	bl	8002fcc <HAL_GPIO_WritePin>
  while (1)
 80010c2:	e7fe      	b.n	80010c2 <Error_Handler+0x12>
 80010c4:	40020000 	.word	0x40020000

080010c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80010ce:	4b11      	ldr	r3, [pc, #68]	; (8001114 <HAL_MspInit+0x4c>)
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	4a10      	ldr	r2, [pc, #64]	; (8001114 <HAL_MspInit+0x4c>)
 80010d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d8:	6413      	str	r3, [r2, #64]	; 0x40
 80010da:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <HAL_MspInit+0x4c>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e6:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <HAL_MspInit+0x4c>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <HAL_MspInit+0x4c>)
 80010ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f0:	6453      	str	r3, [r2, #68]	; 0x44
 80010f2:	4b08      	ldr	r3, [pc, #32]	; (8001114 <HAL_MspInit+0x4c>)
 80010f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010fa:	603b      	str	r3, [r7, #0]
 80010fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010fe:	2200      	movs	r2, #0
 8001100:	210f      	movs	r1, #15
 8001102:	f06f 0001 	mvn.w	r0, #1
 8001106:	f001 fd73 	bl	8002bf0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40023800 	.word	0x40023800

08001118 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b08e      	sub	sp, #56	; 0x38
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001120:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a3f      	ldr	r2, [pc, #252]	; (8001234 <HAL_ADC_MspInit+0x11c>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d124      	bne.n	8001184 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800113a:	4b3f      	ldr	r3, [pc, #252]	; (8001238 <HAL_ADC_MspInit+0x120>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113e:	4a3e      	ldr	r2, [pc, #248]	; (8001238 <HAL_ADC_MspInit+0x120>)
 8001140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001144:	6453      	str	r3, [r2, #68]	; 0x44
 8001146:	4b3c      	ldr	r3, [pc, #240]	; (8001238 <HAL_ADC_MspInit+0x120>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800114e:	623b      	str	r3, [r7, #32]
 8001150:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001152:	4b39      	ldr	r3, [pc, #228]	; (8001238 <HAL_ADC_MspInit+0x120>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a38      	ldr	r2, [pc, #224]	; (8001238 <HAL_ADC_MspInit+0x120>)
 8001158:	f043 0304 	orr.w	r3, r3, #4
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b36      	ldr	r3, [pc, #216]	; (8001238 <HAL_ADC_MspInit+0x120>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0304 	and.w	r3, r3, #4
 8001166:	61fb      	str	r3, [r7, #28]
 8001168:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = APPS1_Pin;
 800116a:	2301      	movs	r3, #1
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800116e:	2303      	movs	r3, #3
 8001170:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(APPS1_GPIO_Port, &GPIO_InitStruct);
 8001176:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800117a:	4619      	mov	r1, r3
 800117c:	482f      	ldr	r0, [pc, #188]	; (800123c <HAL_ADC_MspInit+0x124>)
 800117e:	f001 fd61 	bl	8002c44 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001182:	e052      	b.n	800122a <HAL_ADC_MspInit+0x112>
  else if(hadc->Instance==ADC2)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a2d      	ldr	r2, [pc, #180]	; (8001240 <HAL_ADC_MspInit+0x128>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d124      	bne.n	80011d8 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800118e:	4b2a      	ldr	r3, [pc, #168]	; (8001238 <HAL_ADC_MspInit+0x120>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	4a29      	ldr	r2, [pc, #164]	; (8001238 <HAL_ADC_MspInit+0x120>)
 8001194:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001198:	6453      	str	r3, [r2, #68]	; 0x44
 800119a:	4b27      	ldr	r3, [pc, #156]	; (8001238 <HAL_ADC_MspInit+0x120>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011a2:	61bb      	str	r3, [r7, #24]
 80011a4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a6:	4b24      	ldr	r3, [pc, #144]	; (8001238 <HAL_ADC_MspInit+0x120>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a23      	ldr	r2, [pc, #140]	; (8001238 <HAL_ADC_MspInit+0x120>)
 80011ac:	f043 0304 	orr.w	r3, r3, #4
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b21      	ldr	r3, [pc, #132]	; (8001238 <HAL_ADC_MspInit+0x120>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0304 	and.w	r3, r3, #4
 80011ba:	617b      	str	r3, [r7, #20]
 80011bc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = APPS2_Pin;
 80011be:	2302      	movs	r3, #2
 80011c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011c2:	2303      	movs	r3, #3
 80011c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(APPS2_GPIO_Port, &GPIO_InitStruct);
 80011ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ce:	4619      	mov	r1, r3
 80011d0:	481a      	ldr	r0, [pc, #104]	; (800123c <HAL_ADC_MspInit+0x124>)
 80011d2:	f001 fd37 	bl	8002c44 <HAL_GPIO_Init>
}
 80011d6:	e028      	b.n	800122a <HAL_ADC_MspInit+0x112>
  else if(hadc->Instance==ADC3)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a19      	ldr	r2, [pc, #100]	; (8001244 <HAL_ADC_MspInit+0x12c>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d123      	bne.n	800122a <HAL_ADC_MspInit+0x112>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80011e2:	4b15      	ldr	r3, [pc, #84]	; (8001238 <HAL_ADC_MspInit+0x120>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	4a14      	ldr	r2, [pc, #80]	; (8001238 <HAL_ADC_MspInit+0x120>)
 80011e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011ec:	6453      	str	r3, [r2, #68]	; 0x44
 80011ee:	4b12      	ldr	r3, [pc, #72]	; (8001238 <HAL_ADC_MspInit+0x120>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011f6:	613b      	str	r3, [r7, #16]
 80011f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011fa:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <HAL_ADC_MspInit+0x120>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	4a0e      	ldr	r2, [pc, #56]	; (8001238 <HAL_ADC_MspInit+0x120>)
 8001200:	f043 0304 	orr.w	r3, r3, #4
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
 8001206:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <HAL_ADC_MspInit+0x120>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f003 0304 	and.w	r3, r3, #4
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEERING_ANGLE_SENSOR_Pin|BPPS_BUFFERED_Pin;
 8001212:	230c      	movs	r3, #12
 8001214:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001216:	2303      	movs	r3, #3
 8001218:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800121e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001222:	4619      	mov	r1, r3
 8001224:	4805      	ldr	r0, [pc, #20]	; (800123c <HAL_ADC_MspInit+0x124>)
 8001226:	f001 fd0d 	bl	8002c44 <HAL_GPIO_Init>
}
 800122a:	bf00      	nop
 800122c:	3738      	adds	r7, #56	; 0x38
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40012000 	.word	0x40012000
 8001238:	40023800 	.word	0x40023800
 800123c:	40020800 	.word	0x40020800
 8001240:	40012100 	.word	0x40012100
 8001244:	40012200 	.word	0x40012200

08001248 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08c      	sub	sp, #48	; 0x30
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	f107 031c 	add.w	r3, r7, #28
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a33      	ldr	r2, [pc, #204]	; (8001334 <HAL_CAN_MspInit+0xec>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d131      	bne.n	80012ce <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800126a:	4b33      	ldr	r3, [pc, #204]	; (8001338 <HAL_CAN_MspInit+0xf0>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	4a32      	ldr	r2, [pc, #200]	; (8001338 <HAL_CAN_MspInit+0xf0>)
 8001270:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001274:	6413      	str	r3, [r2, #64]	; 0x40
 8001276:	4b30      	ldr	r3, [pc, #192]	; (8001338 <HAL_CAN_MspInit+0xf0>)
 8001278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800127e:	61bb      	str	r3, [r7, #24]
 8001280:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001282:	4b2d      	ldr	r3, [pc, #180]	; (8001338 <HAL_CAN_MspInit+0xf0>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a2c      	ldr	r2, [pc, #176]	; (8001338 <HAL_CAN_MspInit+0xf0>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b2a      	ldr	r3, [pc, #168]	; (8001338 <HAL_CAN_MspInit+0xf0>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800129a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800129e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a0:	2302      	movs	r3, #2
 80012a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a8:	2303      	movs	r3, #3
 80012aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80012ac:	2309      	movs	r3, #9
 80012ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b0:	f107 031c 	add.w	r3, r7, #28
 80012b4:	4619      	mov	r1, r3
 80012b6:	4821      	ldr	r0, [pc, #132]	; (800133c <HAL_CAN_MspInit+0xf4>)
 80012b8:	f001 fcc4 	bl	8002c44 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80012bc:	2200      	movs	r2, #0
 80012be:	2105      	movs	r1, #5
 80012c0:	2014      	movs	r0, #20
 80012c2:	f001 fc95 	bl	8002bf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80012c6:	2014      	movs	r0, #20
 80012c8:	f001 fcae 	bl	8002c28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }

}
 80012cc:	e02d      	b.n	800132a <HAL_CAN_MspInit+0xe2>
  else if(hcan->Instance==CAN3)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a1b      	ldr	r2, [pc, #108]	; (8001340 <HAL_CAN_MspInit+0xf8>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d128      	bne.n	800132a <HAL_CAN_MspInit+0xe2>
    __HAL_RCC_CAN3_CLK_ENABLE();
 80012d8:	4b17      	ldr	r3, [pc, #92]	; (8001338 <HAL_CAN_MspInit+0xf0>)
 80012da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012dc:	4a16      	ldr	r2, [pc, #88]	; (8001338 <HAL_CAN_MspInit+0xf0>)
 80012de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012e2:	6413      	str	r3, [r2, #64]	; 0x40
 80012e4:	4b14      	ldr	r3, [pc, #80]	; (8001338 <HAL_CAN_MspInit+0xf0>)
 80012e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f0:	4b11      	ldr	r3, [pc, #68]	; (8001338 <HAL_CAN_MspInit+0xf0>)
 80012f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f4:	4a10      	ldr	r2, [pc, #64]	; (8001338 <HAL_CAN_MspInit+0xf0>)
 80012f6:	f043 0301 	orr.w	r3, r3, #1
 80012fa:	6313      	str	r3, [r2, #48]	; 0x30
 80012fc:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <HAL_CAN_MspInit+0xf0>)
 80012fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001300:	f003 0301 	and.w	r3, r3, #1
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8001308:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 800130c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130e:	2302      	movs	r3, #2
 8001310:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001316:	2303      	movs	r3, #3
 8001318:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 800131a:	230b      	movs	r3, #11
 800131c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131e:	f107 031c 	add.w	r3, r7, #28
 8001322:	4619      	mov	r1, r3
 8001324:	4805      	ldr	r0, [pc, #20]	; (800133c <HAL_CAN_MspInit+0xf4>)
 8001326:	f001 fc8d 	bl	8002c44 <HAL_GPIO_Init>
}
 800132a:	bf00      	nop
 800132c:	3730      	adds	r7, #48	; 0x30
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40006400 	.word	0x40006400
 8001338:	40023800 	.word	0x40023800
 800133c:	40020000 	.word	0x40020000
 8001340:	40003400 	.word	0x40003400

08001344 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08e      	sub	sp, #56	; 0x38
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800134c:	2300      	movs	r3, #0
 800134e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001350:	2300      	movs	r3, #0
 8001352:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001354:	4b33      	ldr	r3, [pc, #204]	; (8001424 <HAL_InitTick+0xe0>)
 8001356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001358:	4a32      	ldr	r2, [pc, #200]	; (8001424 <HAL_InitTick+0xe0>)
 800135a:	f043 0310 	orr.w	r3, r3, #16
 800135e:	6413      	str	r3, [r2, #64]	; 0x40
 8001360:	4b30      	ldr	r3, [pc, #192]	; (8001424 <HAL_InitTick+0xe0>)
 8001362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001364:	f003 0310 	and.w	r3, r3, #16
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800136c:	f107 0210 	add.w	r2, r7, #16
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	4611      	mov	r1, r2
 8001376:	4618      	mov	r0, r3
 8001378:	f002 fb1c 	bl	80039b4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800137c:	6a3b      	ldr	r3, [r7, #32]
 800137e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001382:	2b00      	cmp	r3, #0
 8001384:	d103      	bne.n	800138e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001386:	f002 fb01 	bl	800398c <HAL_RCC_GetPCLK1Freq>
 800138a:	6378      	str	r0, [r7, #52]	; 0x34
 800138c:	e004      	b.n	8001398 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800138e:	f002 fafd 	bl	800398c <HAL_RCC_GetPCLK1Freq>
 8001392:	4603      	mov	r3, r0
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800139a:	4a23      	ldr	r2, [pc, #140]	; (8001428 <HAL_InitTick+0xe4>)
 800139c:	fba2 2303 	umull	r2, r3, r2, r3
 80013a0:	0c9b      	lsrs	r3, r3, #18
 80013a2:	3b01      	subs	r3, #1
 80013a4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80013a6:	4b21      	ldr	r3, [pc, #132]	; (800142c <HAL_InitTick+0xe8>)
 80013a8:	4a21      	ldr	r2, [pc, #132]	; (8001430 <HAL_InitTick+0xec>)
 80013aa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80013ac:	4b1f      	ldr	r3, [pc, #124]	; (800142c <HAL_InitTick+0xe8>)
 80013ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013b2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80013b4:	4a1d      	ldr	r2, [pc, #116]	; (800142c <HAL_InitTick+0xe8>)
 80013b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013b8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80013ba:	4b1c      	ldr	r3, [pc, #112]	; (800142c <HAL_InitTick+0xe8>)
 80013bc:	2200      	movs	r2, #0
 80013be:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c0:	4b1a      	ldr	r3, [pc, #104]	; (800142c <HAL_InitTick+0xe8>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c6:	4b19      	ldr	r3, [pc, #100]	; (800142c <HAL_InitTick+0xe8>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80013cc:	4817      	ldr	r0, [pc, #92]	; (800142c <HAL_InitTick+0xe8>)
 80013ce:	f002 fb23 	bl	8003a18 <HAL_TIM_Base_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80013d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d11b      	bne.n	8001418 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80013e0:	4812      	ldr	r0, [pc, #72]	; (800142c <HAL_InitTick+0xe8>)
 80013e2:	f002 fb7b 	bl	8003adc <HAL_TIM_Base_Start_IT>
 80013e6:	4603      	mov	r3, r0
 80013e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80013ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d111      	bne.n	8001418 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013f4:	2036      	movs	r0, #54	; 0x36
 80013f6:	f001 fc17 	bl	8002c28 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2b0f      	cmp	r3, #15
 80013fe:	d808      	bhi.n	8001412 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001400:	2200      	movs	r2, #0
 8001402:	6879      	ldr	r1, [r7, #4]
 8001404:	2036      	movs	r0, #54	; 0x36
 8001406:	f001 fbf3 	bl	8002bf0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800140a:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <HAL_InitTick+0xf0>)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6013      	str	r3, [r2, #0]
 8001410:	e002      	b.n	8001418 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001418:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800141c:	4618      	mov	r0, r3
 800141e:	3738      	adds	r7, #56	; 0x38
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40023800 	.word	0x40023800
 8001428:	431bde83 	.word	0x431bde83
 800142c:	20000230 	.word	0x20000230
 8001430:	40001000 	.word	0x40001000
 8001434:	20000004 	.word	0x20000004

08001438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800143c:	e7fe      	b.n	800143c <NMI_Handler+0x4>

0800143e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001442:	e7fe      	b.n	8001442 <HardFault_Handler+0x4>

08001444 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001448:	e7fe      	b.n	8001448 <MemManage_Handler+0x4>

0800144a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800144e:	e7fe      	b.n	800144e <BusFault_Handler+0x4>

08001450 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001454:	e7fe      	b.n	8001454 <UsageFault_Handler+0x4>

08001456 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001468:	4802      	ldr	r0, [pc, #8]	; (8001474 <CAN1_RX0_IRQHandler+0x10>)
 800146a:	f001 f8d9 	bl	8002620 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000168 	.word	0x20000168

08001478 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800147c:	4802      	ldr	r0, [pc, #8]	; (8001488 <TIM6_DAC_IRQHandler+0x10>)
 800147e:	f002 fba5 	bl	8003bcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000230 	.word	0x20000230

0800148c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001490:	4b06      	ldr	r3, [pc, #24]	; (80014ac <SystemInit+0x20>)
 8001492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001496:	4a05      	ldr	r2, [pc, #20]	; (80014ac <SystemInit+0x20>)
 8001498:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800149c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014b4:	480d      	ldr	r0, [pc, #52]	; (80014ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014b6:	490e      	ldr	r1, [pc, #56]	; (80014f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014b8:	4a0e      	ldr	r2, [pc, #56]	; (80014f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014bc:	e002      	b.n	80014c4 <LoopCopyDataInit>

080014be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014c2:	3304      	adds	r3, #4

080014c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014c8:	d3f9      	bcc.n	80014be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ca:	4a0b      	ldr	r2, [pc, #44]	; (80014f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014cc:	4c0b      	ldr	r4, [pc, #44]	; (80014fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80014ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014d0:	e001      	b.n	80014d6 <LoopFillZerobss>

080014d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d4:	3204      	adds	r2, #4

080014d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014d8:	d3fb      	bcc.n	80014d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014da:	f7ff ffd7 	bl	800148c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014de:	f005 fced 	bl	8006ebc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014e2:	f7ff f86f 	bl	80005c4 <main>
  bx  lr    
 80014e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014e8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80014ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014f0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80014f4:	080071d8 	.word	0x080071d8
  ldr r2, =_sbss
 80014f8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80014fc:	20004c90 	.word	0x20004c90

08001500 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001500:	e7fe      	b.n	8001500 <ADC_IRQHandler>

08001502 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001506:	2003      	movs	r0, #3
 8001508:	f001 fb67 	bl	8002bda <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800150c:	200f      	movs	r0, #15
 800150e:	f7ff ff19 	bl	8001344 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001512:	f7ff fdd9 	bl	80010c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001516:	2300      	movs	r3, #0
}
 8001518:	4618      	mov	r0, r3
 800151a:	bd80      	pop	{r7, pc}

0800151c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <HAL_IncTick+0x20>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	461a      	mov	r2, r3
 8001526:	4b06      	ldr	r3, [pc, #24]	; (8001540 <HAL_IncTick+0x24>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4413      	add	r3, r2
 800152c:	4a04      	ldr	r2, [pc, #16]	; (8001540 <HAL_IncTick+0x24>)
 800152e:	6013      	str	r3, [r2, #0]
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	20000008 	.word	0x20000008
 8001540:	2000027c 	.word	0x2000027c

08001544 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  return uwTick;
 8001548:	4b03      	ldr	r3, [pc, #12]	; (8001558 <HAL_GetTick+0x14>)
 800154a:	681b      	ldr	r3, [r3, #0]
}
 800154c:	4618      	mov	r0, r3
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	2000027c 	.word	0x2000027c

0800155c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001564:	2300      	movs	r3, #0
 8001566:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d101      	bne.n	8001572 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e031      	b.n	80015d6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	2b00      	cmp	r3, #0
 8001578:	d109      	bne.n	800158e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff fdcc 	bl	8001118 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	f003 0310 	and.w	r3, r3, #16
 8001596:	2b00      	cmp	r3, #0
 8001598:	d116      	bne.n	80015c8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800159e:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <HAL_ADC_Init+0x84>)
 80015a0:	4013      	ands	r3, r2
 80015a2:	f043 0202 	orr.w	r2, r3, #2
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f000 fb0a 	bl	8001bc4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	f023 0303 	bic.w	r3, r3, #3
 80015be:	f043 0201 	orr.w	r2, r3, #1
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	641a      	str	r2, [r3, #64]	; 0x40
 80015c6:	e001      	b.n	80015cc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	ffffeefd 	.word	0xffffeefd

080015e4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d101      	bne.n	80015fe <HAL_ADC_Start+0x1a>
 80015fa:	2302      	movs	r3, #2
 80015fc:	e0ad      	b.n	800175a <HAL_ADC_Start+0x176>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2201      	movs	r2, #1
 8001602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	2b01      	cmp	r3, #1
 8001612:	d018      	beq.n	8001646 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	689a      	ldr	r2, [r3, #8]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f042 0201 	orr.w	r2, r2, #1
 8001622:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001624:	4b50      	ldr	r3, [pc, #320]	; (8001768 <HAL_ADC_Start+0x184>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a50      	ldr	r2, [pc, #320]	; (800176c <HAL_ADC_Start+0x188>)
 800162a:	fba2 2303 	umull	r2, r3, r2, r3
 800162e:	0c9a      	lsrs	r2, r3, #18
 8001630:	4613      	mov	r3, r2
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	4413      	add	r3, r2
 8001636:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001638:	e002      	b.n	8001640 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	3b01      	subs	r3, #1
 800163e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1f9      	bne.n	800163a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f003 0301 	and.w	r3, r3, #1
 8001650:	2b01      	cmp	r3, #1
 8001652:	d175      	bne.n	8001740 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001658:	4b45      	ldr	r3, [pc, #276]	; (8001770 <HAL_ADC_Start+0x18c>)
 800165a:	4013      	ands	r3, r2
 800165c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800166e:	2b00      	cmp	r3, #0
 8001670:	d007      	beq.n	8001682 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800167a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800168a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800168e:	d106      	bne.n	800169e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001694:	f023 0206 	bic.w	r2, r3, #6
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	645a      	str	r2, [r3, #68]	; 0x44
 800169c:	e002      	b.n	80016a4 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2200      	movs	r2, #0
 80016a2:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2200      	movs	r2, #0
 80016a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80016b4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80016b6:	4b2f      	ldr	r3, [pc, #188]	; (8001774 <HAL_ADC_Start+0x190>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f003 031f 	and.w	r3, r3, #31
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d10f      	bne.n	80016e2 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d143      	bne.n	8001758 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	689a      	ldr	r2, [r3, #8]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	e03a      	b.n	8001758 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a24      	ldr	r2, [pc, #144]	; (8001778 <HAL_ADC_Start+0x194>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d10e      	bne.n	800170a <HAL_ADC_Start+0x126>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d107      	bne.n	800170a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001708:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800170a:	4b1a      	ldr	r3, [pc, #104]	; (8001774 <HAL_ADC_Start+0x190>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f003 0310 	and.w	r3, r3, #16
 8001712:	2b00      	cmp	r3, #0
 8001714:	d120      	bne.n	8001758 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a18      	ldr	r2, [pc, #96]	; (800177c <HAL_ADC_Start+0x198>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d11b      	bne.n	8001758 <HAL_ADC_Start+0x174>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d114      	bne.n	8001758 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	689a      	ldr	r2, [r3, #8]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800173c:	609a      	str	r2, [r3, #8]
 800173e:	e00b      	b.n	8001758 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001744:	f043 0210 	orr.w	r2, r3, #16
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001750:	f043 0201 	orr.w	r2, r3, #1
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3714      	adds	r7, #20
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	20000000 	.word	0x20000000
 800176c:	431bde83 	.word	0x431bde83
 8001770:	fffff8fe 	.word	0xfffff8fe
 8001774:	40012300 	.word	0x40012300
 8001778:	40012000 	.word	0x40012000
 800177c:	40012200 	.word	0x40012200

08001780 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800178e:	2b01      	cmp	r3, #1
 8001790:	d101      	bne.n	8001796 <HAL_ADC_Stop+0x16>
 8001792:	2302      	movs	r3, #2
 8001794:	e01f      	b.n	80017d6 <HAL_ADC_Stop+0x56>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2201      	movs	r2, #1
 800179a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	689a      	ldr	r2, [r3, #8]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f022 0201 	bic.w	r2, r2, #1
 80017ac:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d107      	bne.n	80017cc <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017c0:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <HAL_ADC_Stop+0x64>)
 80017c2:	4013      	ands	r3, r2
 80017c4:	f043 0201 	orr.w	r2, r3, #1
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	ffffeefe 	.word	0xffffeefe

080017e8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001800:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001804:	d113      	bne.n	800182e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001814:	d10b      	bne.n	800182e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	f043 0220 	orr.w	r2, r3, #32
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e063      	b.n	80018f6 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800182e:	f7ff fe89 	bl	8001544 <HAL_GetTick>
 8001832:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001834:	e021      	b.n	800187a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800183c:	d01d      	beq.n	800187a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d007      	beq.n	8001854 <HAL_ADC_PollForConversion+0x6c>
 8001844:	f7ff fe7e 	bl	8001544 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	429a      	cmp	r2, r3
 8001852:	d212      	bcs.n	800187a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b02      	cmp	r3, #2
 8001860:	d00b      	beq.n	800187a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	f043 0204 	orr.w	r2, r3, #4
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e03d      	b.n	80018f6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	2b02      	cmp	r3, #2
 8001886:	d1d6      	bne.n	8001836 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f06f 0212 	mvn.w	r2, #18
 8001890:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d123      	bne.n	80018f4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d11f      	bne.n	80018f4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d006      	beq.n	80018d0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d111      	bne.n	80018f4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d105      	bne.n	80018f4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ec:	f043 0201 	orr.w	r2, r3, #1
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80018fe:	b480      	push	{r7}
 8001900:	b083      	sub	sp, #12
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800190c:	4618      	mov	r0, r3
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800192c:	2b01      	cmp	r3, #1
 800192e:	d101      	bne.n	8001934 <HAL_ADC_ConfigChannel+0x1c>
 8001930:	2302      	movs	r3, #2
 8001932:	e136      	b.n	8001ba2 <HAL_ADC_ConfigChannel+0x28a>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b09      	cmp	r3, #9
 8001942:	d93a      	bls.n	80019ba <HAL_ADC_ConfigChannel+0xa2>
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800194c:	d035      	beq.n	80019ba <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	68d9      	ldr	r1, [r3, #12]
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	b29b      	uxth	r3, r3
 800195a:	461a      	mov	r2, r3
 800195c:	4613      	mov	r3, r2
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	4413      	add	r3, r2
 8001962:	3b1e      	subs	r3, #30
 8001964:	2207      	movs	r2, #7
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	43da      	mvns	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	400a      	ands	r2, r1
 8001972:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a8d      	ldr	r2, [pc, #564]	; (8001bb0 <HAL_ADC_ConfigChannel+0x298>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d10a      	bne.n	8001994 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68d9      	ldr	r1, [r3, #12]
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	061a      	lsls	r2, r3, #24
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	430a      	orrs	r2, r1
 8001990:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001992:	e035      	b.n	8001a00 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	68d9      	ldr	r1, [r3, #12]
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	689a      	ldr	r2, [r3, #8]
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	4618      	mov	r0, r3
 80019a6:	4603      	mov	r3, r0
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	4403      	add	r3, r0
 80019ac:	3b1e      	subs	r3, #30
 80019ae:	409a      	lsls	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	430a      	orrs	r2, r1
 80019b6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019b8:	e022      	b.n	8001a00 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6919      	ldr	r1, [r3, #16]
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	461a      	mov	r2, r3
 80019c8:	4613      	mov	r3, r2
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	4413      	add	r3, r2
 80019ce:	2207      	movs	r2, #7
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43da      	mvns	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	400a      	ands	r2, r1
 80019dc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	6919      	ldr	r1, [r3, #16]
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	689a      	ldr	r2, [r3, #8]
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	4618      	mov	r0, r3
 80019f0:	4603      	mov	r3, r0
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	4403      	add	r3, r0
 80019f6:	409a      	lsls	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	430a      	orrs	r2, r1
 80019fe:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	2b06      	cmp	r3, #6
 8001a06:	d824      	bhi.n	8001a52 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685a      	ldr	r2, [r3, #4]
 8001a12:	4613      	mov	r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	4413      	add	r3, r2
 8001a18:	3b05      	subs	r3, #5
 8001a1a:	221f      	movs	r2, #31
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	43da      	mvns	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	400a      	ands	r2, r1
 8001a28:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	4618      	mov	r0, r3
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685a      	ldr	r2, [r3, #4]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4413      	add	r3, r2
 8001a42:	3b05      	subs	r3, #5
 8001a44:	fa00 f203 	lsl.w	r2, r0, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	635a      	str	r2, [r3, #52]	; 0x34
 8001a50:	e04c      	b.n	8001aec <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b0c      	cmp	r3, #12
 8001a58:	d824      	bhi.n	8001aa4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685a      	ldr	r2, [r3, #4]
 8001a64:	4613      	mov	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	3b23      	subs	r3, #35	; 0x23
 8001a6c:	221f      	movs	r2, #31
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43da      	mvns	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	400a      	ands	r2, r1
 8001a7a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	4618      	mov	r0, r3
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685a      	ldr	r2, [r3, #4]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4413      	add	r3, r2
 8001a94:	3b23      	subs	r3, #35	; 0x23
 8001a96:	fa00 f203 	lsl.w	r2, r0, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	631a      	str	r2, [r3, #48]	; 0x30
 8001aa2:	e023      	b.n	8001aec <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685a      	ldr	r2, [r3, #4]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	3b41      	subs	r3, #65	; 0x41
 8001ab6:	221f      	movs	r2, #31
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43da      	mvns	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	400a      	ands	r2, r1
 8001ac4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685a      	ldr	r2, [r3, #4]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	3b41      	subs	r3, #65	; 0x41
 8001ae0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a30      	ldr	r2, [pc, #192]	; (8001bb4 <HAL_ADC_ConfigChannel+0x29c>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d10a      	bne.n	8001b0c <HAL_ADC_ConfigChannel+0x1f4>
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001afe:	d105      	bne.n	8001b0c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001b00:	4b2d      	ldr	r3, [pc, #180]	; (8001bb8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	4a2c      	ldr	r2, [pc, #176]	; (8001bb8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001b06:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001b0a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a28      	ldr	r2, [pc, #160]	; (8001bb4 <HAL_ADC_ConfigChannel+0x29c>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d10f      	bne.n	8001b36 <HAL_ADC_ConfigChannel+0x21e>
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2b12      	cmp	r3, #18
 8001b1c:	d10b      	bne.n	8001b36 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001b1e:	4b26      	ldr	r3, [pc, #152]	; (8001bb8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	4a25      	ldr	r2, [pc, #148]	; (8001bb8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001b24:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001b28:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001b2a:	4b23      	ldr	r3, [pc, #140]	; (8001bb8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	4a22      	ldr	r2, [pc, #136]	; (8001bb8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001b30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b34:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a1e      	ldr	r2, [pc, #120]	; (8001bb4 <HAL_ADC_ConfigChannel+0x29c>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d12b      	bne.n	8001b98 <HAL_ADC_ConfigChannel+0x280>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a1a      	ldr	r2, [pc, #104]	; (8001bb0 <HAL_ADC_ConfigChannel+0x298>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d003      	beq.n	8001b52 <HAL_ADC_ConfigChannel+0x23a>
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2b11      	cmp	r3, #17
 8001b50:	d122      	bne.n	8001b98 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001b52:	4b19      	ldr	r3, [pc, #100]	; (8001bb8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	4a18      	ldr	r2, [pc, #96]	; (8001bb8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001b58:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001b5c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001b5e:	4b16      	ldr	r3, [pc, #88]	; (8001bb8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	4a15      	ldr	r2, [pc, #84]	; (8001bb8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001b64:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b68:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a10      	ldr	r2, [pc, #64]	; (8001bb0 <HAL_ADC_ConfigChannel+0x298>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d111      	bne.n	8001b98 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001b74:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <HAL_ADC_ConfigChannel+0x2a4>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a11      	ldr	r2, [pc, #68]	; (8001bc0 <HAL_ADC_ConfigChannel+0x2a8>)
 8001b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7e:	0c9a      	lsrs	r2, r3, #18
 8001b80:	4613      	mov	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4413      	add	r3, r2
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001b8a:	e002      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1f9      	bne.n	8001b8c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3714      	adds	r7, #20
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	10000012 	.word	0x10000012
 8001bb4:	40012000 	.word	0x40012000
 8001bb8:	40012300 	.word	0x40012300
 8001bbc:	20000000 	.word	0x20000000
 8001bc0:	431bde83 	.word	0x431bde83

08001bc4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001bcc:	4b78      	ldr	r3, [pc, #480]	; (8001db0 <ADC_Init+0x1ec>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	4a77      	ldr	r2, [pc, #476]	; (8001db0 <ADC_Init+0x1ec>)
 8001bd2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001bd6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001bd8:	4b75      	ldr	r3, [pc, #468]	; (8001db0 <ADC_Init+0x1ec>)
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	4973      	ldr	r1, [pc, #460]	; (8001db0 <ADC_Init+0x1ec>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	685a      	ldr	r2, [r3, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bf4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6859      	ldr	r1, [r3, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	021a      	lsls	r2, r3, #8
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	430a      	orrs	r2, r1
 8001c08:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	685a      	ldr	r2, [r3, #4]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001c18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	6859      	ldr	r1, [r3, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	689a      	ldr	r2, [r3, #8]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6899      	ldr	r1, [r3, #8]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	68da      	ldr	r2, [r3, #12]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c52:	4a58      	ldr	r2, [pc, #352]	; (8001db4 <ADC_Init+0x1f0>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d022      	beq.n	8001c9e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	689a      	ldr	r2, [r3, #8]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c66:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6899      	ldr	r1, [r3, #8]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	430a      	orrs	r2, r1
 8001c78:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6899      	ldr	r1, [r3, #8]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	e00f      	b.n	8001cbe <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001cbc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 0202 	bic.w	r2, r2, #2
 8001ccc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6899      	ldr	r1, [r3, #8]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	005a      	lsls	r2, r3, #1
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d01b      	beq.n	8001d24 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	685a      	ldr	r2, [r3, #4]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cfa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	685a      	ldr	r2, [r3, #4]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001d0a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6859      	ldr	r1, [r3, #4]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d16:	3b01      	subs	r3, #1
 8001d18:	035a      	lsls	r2, r3, #13
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	e007      	b.n	8001d34 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d32:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001d42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	051a      	lsls	r2, r3, #20
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	430a      	orrs	r2, r1
 8001d58:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6899      	ldr	r1, [r3, #8]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d76:	025a      	lsls	r2, r3, #9
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	689a      	ldr	r2, [r3, #8]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6899      	ldr	r1, [r3, #8]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	029a      	lsls	r2, r3, #10
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	430a      	orrs	r2, r1
 8001da2:	609a      	str	r2, [r3, #8]
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	40012300 	.word	0x40012300
 8001db4:	0f000001 	.word	0x0f000001

08001db8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e0ed      	b.n	8001fa6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d102      	bne.n	8001ddc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7ff fa36 	bl	8001248 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f042 0201 	orr.w	r2, r2, #1
 8001dea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dec:	f7ff fbaa 	bl	8001544 <HAL_GetTick>
 8001df0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001df2:	e012      	b.n	8001e1a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001df4:	f7ff fba6 	bl	8001544 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b0a      	cmp	r3, #10
 8001e00:	d90b      	bls.n	8001e1a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e06:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2205      	movs	r2, #5
 8001e12:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e0c5      	b.n	8001fa6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0e5      	beq.n	8001df4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f022 0202 	bic.w	r2, r2, #2
 8001e36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e38:	f7ff fb84 	bl	8001544 <HAL_GetTick>
 8001e3c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e3e:	e012      	b.n	8001e66 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e40:	f7ff fb80 	bl	8001544 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b0a      	cmp	r3, #10
 8001e4c:	d90b      	bls.n	8001e66 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e52:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2205      	movs	r2, #5
 8001e5e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e09f      	b.n	8001fa6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1e5      	bne.n	8001e40 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	7e1b      	ldrb	r3, [r3, #24]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d108      	bne.n	8001e8e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	e007      	b.n	8001e9e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	7e5b      	ldrb	r3, [r3, #25]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d108      	bne.n	8001eb8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	e007      	b.n	8001ec8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ec6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	7e9b      	ldrb	r3, [r3, #26]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d108      	bne.n	8001ee2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f042 0220 	orr.w	r2, r2, #32
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	e007      	b.n	8001ef2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f022 0220 	bic.w	r2, r2, #32
 8001ef0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	7edb      	ldrb	r3, [r3, #27]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d108      	bne.n	8001f0c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f022 0210 	bic.w	r2, r2, #16
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	e007      	b.n	8001f1c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 0210 	orr.w	r2, r2, #16
 8001f1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	7f1b      	ldrb	r3, [r3, #28]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d108      	bne.n	8001f36 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f042 0208 	orr.w	r2, r2, #8
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	e007      	b.n	8001f46 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 0208 	bic.w	r2, r2, #8
 8001f44:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	7f5b      	ldrb	r3, [r3, #29]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d108      	bne.n	8001f60 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f042 0204 	orr.w	r2, r2, #4
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	e007      	b.n	8001f70 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 0204 	bic.w	r2, r2, #4
 8001f6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	431a      	orrs	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	695b      	ldr	r3, [r3, #20]
 8001f84:	ea42 0103 	orr.w	r1, r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	1e5a      	subs	r2, r3, #1
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
	...

08001fb0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b087      	sub	sp, #28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fc6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001fc8:	7cfb      	ldrb	r3, [r7, #19]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d003      	beq.n	8001fd6 <HAL_CAN_ConfigFilter+0x26>
 8001fce:	7cfb      	ldrb	r3, [r7, #19]
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	f040 80c7 	bne.w	8002164 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a69      	ldr	r2, [pc, #420]	; (8002180 <HAL_CAN_ConfigFilter+0x1d0>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d001      	beq.n	8001fe4 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001fe0:	4b68      	ldr	r3, [pc, #416]	; (8002184 <HAL_CAN_ConfigFilter+0x1d4>)
 8001fe2:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001fea:	f043 0201 	orr.w	r2, r3, #1
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	4a63      	ldr	r2, [pc, #396]	; (8002184 <HAL_CAN_ConfigFilter+0x1d4>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d111      	bne.n	8002020 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002002:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002016:	021b      	lsls	r3, r3, #8
 8002018:	431a      	orrs	r2, r3
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	695b      	ldr	r3, [r3, #20]
 8002024:	f003 031f 	and.w	r3, r3, #31
 8002028:	2201      	movs	r2, #1
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	43db      	mvns	r3, r3
 800203a:	401a      	ands	r2, r3
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	69db      	ldr	r3, [r3, #28]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d123      	bne.n	8002092 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	43db      	mvns	r3, r3
 8002054:	401a      	ands	r2, r3
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800206c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	3248      	adds	r2, #72	; 0x48
 8002072:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002086:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002088:	6979      	ldr	r1, [r7, #20]
 800208a:	3348      	adds	r3, #72	; 0x48
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	440b      	add	r3, r1
 8002090:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d122      	bne.n	80020e0 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	431a      	orrs	r2, r3
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80020ba:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	3248      	adds	r2, #72	; 0x48
 80020c0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80020d4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80020d6:	6979      	ldr	r1, [r7, #20]
 80020d8:	3348      	adds	r3, #72	; 0x48
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	440b      	add	r3, r1
 80020de:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d109      	bne.n	80020fc <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	43db      	mvns	r3, r3
 80020f2:	401a      	ands	r2, r3
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80020fa:	e007      	b.n	800210c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	431a      	orrs	r2, r3
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d109      	bne.n	8002128 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	43db      	mvns	r3, r3
 800211e:	401a      	ands	r2, r3
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002126:	e007      	b.n	8002138 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	431a      	orrs	r2, r3
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d107      	bne.n	8002150 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	431a      	orrs	r2, r3
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002156:	f023 0201 	bic.w	r2, r3, #1
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002160:	2300      	movs	r3, #0
 8002162:	e006      	b.n	8002172 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002168:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
  }
}
 8002172:	4618      	mov	r0, r3
 8002174:	371c      	adds	r7, #28
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	40003400 	.word	0x40003400
 8002184:	40006400 	.word	0x40006400

08002188 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b01      	cmp	r3, #1
 800219a:	d12e      	bne.n	80021fa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2202      	movs	r2, #2
 80021a0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f022 0201 	bic.w	r2, r2, #1
 80021b2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80021b4:	f7ff f9c6 	bl	8001544 <HAL_GetTick>
 80021b8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80021ba:	e012      	b.n	80021e2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021bc:	f7ff f9c2 	bl	8001544 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b0a      	cmp	r3, #10
 80021c8:	d90b      	bls.n	80021e2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2205      	movs	r2, #5
 80021da:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e012      	b.n	8002208 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1e5      	bne.n	80021bc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80021f6:	2300      	movs	r3, #0
 80021f8:	e006      	b.n	8002208 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
  }
}
 8002208:	4618      	mov	r0, r3
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002210:	b480      	push	{r7}
 8002212:	b089      	sub	sp, #36	; 0x24
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
 800221c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002224:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800222e:	7ffb      	ldrb	r3, [r7, #31]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d003      	beq.n	800223c <HAL_CAN_AddTxMessage+0x2c>
 8002234:	7ffb      	ldrb	r3, [r7, #31]
 8002236:	2b02      	cmp	r3, #2
 8002238:	f040 80ad 	bne.w	8002396 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d10a      	bne.n	800225c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800224c:	2b00      	cmp	r3, #0
 800224e:	d105      	bne.n	800225c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002256:	2b00      	cmp	r3, #0
 8002258:	f000 8095 	beq.w	8002386 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	0e1b      	lsrs	r3, r3, #24
 8002260:	f003 0303 	and.w	r3, r3, #3
 8002264:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002266:	2201      	movs	r2, #1
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	409a      	lsls	r2, r3
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d10d      	bne.n	8002294 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002282:	68f9      	ldr	r1, [r7, #12]
 8002284:	6809      	ldr	r1, [r1, #0]
 8002286:	431a      	orrs	r2, r3
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	3318      	adds	r3, #24
 800228c:	011b      	lsls	r3, r3, #4
 800228e:	440b      	add	r3, r1
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	e00f      	b.n	80022b4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800229e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80022a4:	68f9      	ldr	r1, [r7, #12]
 80022a6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80022a8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	3318      	adds	r3, #24
 80022ae:	011b      	lsls	r3, r3, #4
 80022b0:	440b      	add	r3, r1
 80022b2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6819      	ldr	r1, [r3, #0]
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	691a      	ldr	r2, [r3, #16]
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	3318      	adds	r3, #24
 80022c0:	011b      	lsls	r3, r3, #4
 80022c2:	440b      	add	r3, r1
 80022c4:	3304      	adds	r3, #4
 80022c6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	7d1b      	ldrb	r3, [r3, #20]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d111      	bne.n	80022f4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	3318      	adds	r3, #24
 80022d8:	011b      	lsls	r3, r3, #4
 80022da:	4413      	add	r3, r2
 80022dc:	3304      	adds	r3, #4
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	6811      	ldr	r1, [r2, #0]
 80022e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	3318      	adds	r3, #24
 80022ec:	011b      	lsls	r3, r3, #4
 80022ee:	440b      	add	r3, r1
 80022f0:	3304      	adds	r3, #4
 80022f2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3307      	adds	r3, #7
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	061a      	lsls	r2, r3, #24
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3306      	adds	r3, #6
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	041b      	lsls	r3, r3, #16
 8002304:	431a      	orrs	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	3305      	adds	r3, #5
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	021b      	lsls	r3, r3, #8
 800230e:	4313      	orrs	r3, r2
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	3204      	adds	r2, #4
 8002314:	7812      	ldrb	r2, [r2, #0]
 8002316:	4610      	mov	r0, r2
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	6811      	ldr	r1, [r2, #0]
 800231c:	ea43 0200 	orr.w	r2, r3, r0
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	011b      	lsls	r3, r3, #4
 8002324:	440b      	add	r3, r1
 8002326:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800232a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3303      	adds	r3, #3
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	061a      	lsls	r2, r3, #24
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3302      	adds	r3, #2
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	041b      	lsls	r3, r3, #16
 800233c:	431a      	orrs	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	3301      	adds	r3, #1
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	021b      	lsls	r3, r3, #8
 8002346:	4313      	orrs	r3, r2
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	7812      	ldrb	r2, [r2, #0]
 800234c:	4610      	mov	r0, r2
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	6811      	ldr	r1, [r2, #0]
 8002352:	ea43 0200 	orr.w	r2, r3, r0
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	011b      	lsls	r3, r3, #4
 800235a:	440b      	add	r3, r1
 800235c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002360:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	3318      	adds	r3, #24
 800236a:	011b      	lsls	r3, r3, #4
 800236c:	4413      	add	r3, r2
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	6811      	ldr	r1, [r2, #0]
 8002374:	f043 0201 	orr.w	r2, r3, #1
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	3318      	adds	r3, #24
 800237c:	011b      	lsls	r3, r3, #4
 800237e:	440b      	add	r3, r1
 8002380:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002382:	2300      	movs	r3, #0
 8002384:	e00e      	b.n	80023a4 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e006      	b.n	80023a4 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
  }
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3724      	adds	r7, #36	; 0x24
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80023b0:	b480      	push	{r7}
 80023b2:	b087      	sub	sp, #28
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
 80023bc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023c4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80023c6:	7dfb      	ldrb	r3, [r7, #23]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d003      	beq.n	80023d4 <HAL_CAN_GetRxMessage+0x24>
 80023cc:	7dfb      	ldrb	r3, [r7, #23]
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	f040 80f3 	bne.w	80025ba <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10e      	bne.n	80023f8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	f003 0303 	and.w	r3, r3, #3
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d116      	bne.n	8002416 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e0e7      	b.n	80025c8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	f003 0303 	and.w	r3, r3, #3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d107      	bne.n	8002416 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e0d8      	b.n	80025c8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	331b      	adds	r3, #27
 800241e:	011b      	lsls	r3, r3, #4
 8002420:	4413      	add	r3, r2
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0204 	and.w	r2, r3, #4
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d10c      	bne.n	800244e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	331b      	adds	r3, #27
 800243c:	011b      	lsls	r3, r3, #4
 800243e:	4413      	add	r3, r2
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	0d5b      	lsrs	r3, r3, #21
 8002444:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	e00b      	b.n	8002466 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	331b      	adds	r3, #27
 8002456:	011b      	lsls	r3, r3, #4
 8002458:	4413      	add	r3, r2
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	08db      	lsrs	r3, r3, #3
 800245e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	331b      	adds	r3, #27
 800246e:	011b      	lsls	r3, r3, #4
 8002470:	4413      	add	r3, r2
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0202 	and.w	r2, r3, #2
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	331b      	adds	r3, #27
 8002484:	011b      	lsls	r3, r3, #4
 8002486:	4413      	add	r3, r2
 8002488:	3304      	adds	r3, #4
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 020f 	and.w	r2, r3, #15
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	331b      	adds	r3, #27
 800249c:	011b      	lsls	r3, r3, #4
 800249e:	4413      	add	r3, r2
 80024a0:	3304      	adds	r3, #4
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	0a1b      	lsrs	r3, r3, #8
 80024a6:	b2da      	uxtb	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	331b      	adds	r3, #27
 80024b4:	011b      	lsls	r3, r3, #4
 80024b6:	4413      	add	r3, r2
 80024b8:	3304      	adds	r3, #4
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	0c1b      	lsrs	r3, r3, #16
 80024be:	b29a      	uxth	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	011b      	lsls	r3, r3, #4
 80024cc:	4413      	add	r3, r2
 80024ce:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	b2da      	uxtb	r2, r3
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	011b      	lsls	r3, r3, #4
 80024e2:	4413      	add	r3, r2
 80024e4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	0a1a      	lsrs	r2, r3, #8
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	3301      	adds	r3, #1
 80024f0:	b2d2      	uxtb	r2, r2
 80024f2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	011b      	lsls	r3, r3, #4
 80024fc:	4413      	add	r3, r2
 80024fe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	0c1a      	lsrs	r2, r3, #16
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	3302      	adds	r3, #2
 800250a:	b2d2      	uxtb	r2, r2
 800250c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	011b      	lsls	r3, r3, #4
 8002516:	4413      	add	r3, r2
 8002518:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	0e1a      	lsrs	r2, r3, #24
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	3303      	adds	r3, #3
 8002524:	b2d2      	uxtb	r2, r2
 8002526:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	011b      	lsls	r3, r3, #4
 8002530:	4413      	add	r3, r2
 8002532:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	3304      	adds	r3, #4
 800253c:	b2d2      	uxtb	r2, r2
 800253e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	011b      	lsls	r3, r3, #4
 8002548:	4413      	add	r3, r2
 800254a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	0a1a      	lsrs	r2, r3, #8
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	3305      	adds	r3, #5
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	011b      	lsls	r3, r3, #4
 8002562:	4413      	add	r3, r2
 8002564:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	0c1a      	lsrs	r2, r3, #16
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	3306      	adds	r3, #6
 8002570:	b2d2      	uxtb	r2, r2
 8002572:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	011b      	lsls	r3, r3, #4
 800257c:	4413      	add	r3, r2
 800257e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	0e1a      	lsrs	r2, r3, #24
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	3307      	adds	r3, #7
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d108      	bne.n	80025a6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68da      	ldr	r2, [r3, #12]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f042 0220 	orr.w	r2, r2, #32
 80025a2:	60da      	str	r2, [r3, #12]
 80025a4:	e007      	b.n	80025b6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	691a      	ldr	r2, [r3, #16]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f042 0220 	orr.w	r2, r2, #32
 80025b4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80025b6:	2300      	movs	r3, #0
 80025b8:	e006      	b.n	80025c8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025be:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
  }
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	371c      	adds	r7, #28
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025e4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80025e6:	7bfb      	ldrb	r3, [r7, #15]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d002      	beq.n	80025f2 <HAL_CAN_ActivateNotification+0x1e>
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d109      	bne.n	8002606 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6959      	ldr	r1, [r3, #20]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	430a      	orrs	r2, r1
 8002600:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002602:	2300      	movs	r3, #0
 8002604:	e006      	b.n	8002614 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
  }
}
 8002614:	4618      	mov	r0, r3
 8002616:	3714      	adds	r7, #20
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b08a      	sub	sp, #40	; 0x28
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002628:	2300      	movs	r3, #0
 800262a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800265c:	6a3b      	ldr	r3, [r7, #32]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b00      	cmp	r3, #0
 8002664:	d07c      	beq.n	8002760 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	2b00      	cmp	r3, #0
 800266e:	d023      	beq.n	80026b8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2201      	movs	r2, #1
 8002676:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 f983 	bl	800298e <HAL_CAN_TxMailbox0CompleteCallback>
 8002688:	e016      	b.n	80026b8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	f003 0304 	and.w	r3, r3, #4
 8002690:	2b00      	cmp	r3, #0
 8002692:	d004      	beq.n	800269e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800269a:	627b      	str	r3, [r7, #36]	; 0x24
 800269c:	e00c      	b.n	80026b8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	f003 0308 	and.w	r3, r3, #8
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d004      	beq.n	80026b2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026ae:	627b      	str	r3, [r7, #36]	; 0x24
 80026b0:	e002      	b.n	80026b8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f989 	bl	80029ca <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d024      	beq.n	800270c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026ca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 f963 	bl	80029a2 <HAL_CAN_TxMailbox1CompleteCallback>
 80026dc:	e016      	b.n	800270c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d004      	beq.n	80026f2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80026e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80026ee:	627b      	str	r3, [r7, #36]	; 0x24
 80026f0:	e00c      	b.n	800270c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d004      	beq.n	8002706 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002702:	627b      	str	r3, [r7, #36]	; 0x24
 8002704:	e002      	b.n	800270c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 f969 	bl	80029de <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d024      	beq.n	8002760 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800271e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 f943 	bl	80029b6 <HAL_CAN_TxMailbox2CompleteCallback>
 8002730:	e016      	b.n	8002760 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d004      	beq.n	8002746 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800273c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002742:	627b      	str	r3, [r7, #36]	; 0x24
 8002744:	e00c      	b.n	8002760 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d004      	beq.n	800275a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002756:	627b      	str	r3, [r7, #36]	; 0x24
 8002758:	e002      	b.n	8002760 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 f949 	bl	80029f2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002760:	6a3b      	ldr	r3, [r7, #32]
 8002762:	f003 0308 	and.w	r3, r3, #8
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00c      	beq.n	8002784 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	f003 0310 	and.w	r3, r3, #16
 8002770:	2b00      	cmp	r3, #0
 8002772:	d007      	beq.n	8002784 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800277a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2210      	movs	r2, #16
 8002782:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002784:	6a3b      	ldr	r3, [r7, #32]
 8002786:	f003 0304 	and.w	r3, r3, #4
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00b      	beq.n	80027a6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f003 0308 	and.w	r3, r3, #8
 8002794:	2b00      	cmp	r3, #0
 8002796:	d006      	beq.n	80027a6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2208      	movs	r2, #8
 800279e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 f930 	bl	8002a06 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80027a6:	6a3b      	ldr	r3, [r7, #32]
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d009      	beq.n	80027c4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	f003 0303 	and.w	r3, r3, #3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d002      	beq.n	80027c4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7fe fa0a 	bl	8000bd8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80027c4:	6a3b      	ldr	r3, [r7, #32]
 80027c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00c      	beq.n	80027e8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	f003 0310 	and.w	r3, r3, #16
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d007      	beq.n	80027e8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027de:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2210      	movs	r2, #16
 80027e6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80027e8:	6a3b      	ldr	r3, [r7, #32]
 80027ea:	f003 0320 	and.w	r3, r3, #32
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00b      	beq.n	800280a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	f003 0308 	and.w	r3, r3, #8
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d006      	beq.n	800280a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2208      	movs	r2, #8
 8002802:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 f912 	bl	8002a2e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800280a:	6a3b      	ldr	r3, [r7, #32]
 800280c:	f003 0310 	and.w	r3, r3, #16
 8002810:	2b00      	cmp	r3, #0
 8002812:	d009      	beq.n	8002828 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	f003 0303 	and.w	r3, r3, #3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d002      	beq.n	8002828 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 f8f9 	bl	8002a1a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002828:	6a3b      	ldr	r3, [r7, #32]
 800282a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00b      	beq.n	800284a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	f003 0310 	and.w	r3, r3, #16
 8002838:	2b00      	cmp	r3, #0
 800283a:	d006      	beq.n	800284a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2210      	movs	r2, #16
 8002842:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 f8fc 	bl	8002a42 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800284a:	6a3b      	ldr	r3, [r7, #32]
 800284c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d00b      	beq.n	800286c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	f003 0308 	and.w	r3, r3, #8
 800285a:	2b00      	cmp	r3, #0
 800285c:	d006      	beq.n	800286c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2208      	movs	r2, #8
 8002864:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 f8f5 	bl	8002a56 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800286c:	6a3b      	ldr	r3, [r7, #32]
 800286e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d07b      	beq.n	800296e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	2b00      	cmp	r3, #0
 800287e:	d072      	beq.n	8002966 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002880:	6a3b      	ldr	r3, [r7, #32]
 8002882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002886:	2b00      	cmp	r3, #0
 8002888:	d008      	beq.n	800289c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002890:	2b00      	cmp	r3, #0
 8002892:	d003      	beq.n	800289c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	f043 0301 	orr.w	r3, r3, #1
 800289a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800289c:	6a3b      	ldr	r3, [r7, #32]
 800289e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d008      	beq.n	80028b8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d003      	beq.n	80028b8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	f043 0302 	orr.w	r3, r3, #2
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80028b8:	6a3b      	ldr	r3, [r7, #32]
 80028ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d008      	beq.n	80028d4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d003      	beq.n	80028d4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80028cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ce:	f043 0304 	orr.w	r3, r3, #4
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80028d4:	6a3b      	ldr	r3, [r7, #32]
 80028d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d043      	beq.n	8002966 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d03e      	beq.n	8002966 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028ee:	2b60      	cmp	r3, #96	; 0x60
 80028f0:	d02b      	beq.n	800294a <HAL_CAN_IRQHandler+0x32a>
 80028f2:	2b60      	cmp	r3, #96	; 0x60
 80028f4:	d82e      	bhi.n	8002954 <HAL_CAN_IRQHandler+0x334>
 80028f6:	2b50      	cmp	r3, #80	; 0x50
 80028f8:	d022      	beq.n	8002940 <HAL_CAN_IRQHandler+0x320>
 80028fa:	2b50      	cmp	r3, #80	; 0x50
 80028fc:	d82a      	bhi.n	8002954 <HAL_CAN_IRQHandler+0x334>
 80028fe:	2b40      	cmp	r3, #64	; 0x40
 8002900:	d019      	beq.n	8002936 <HAL_CAN_IRQHandler+0x316>
 8002902:	2b40      	cmp	r3, #64	; 0x40
 8002904:	d826      	bhi.n	8002954 <HAL_CAN_IRQHandler+0x334>
 8002906:	2b30      	cmp	r3, #48	; 0x30
 8002908:	d010      	beq.n	800292c <HAL_CAN_IRQHandler+0x30c>
 800290a:	2b30      	cmp	r3, #48	; 0x30
 800290c:	d822      	bhi.n	8002954 <HAL_CAN_IRQHandler+0x334>
 800290e:	2b10      	cmp	r3, #16
 8002910:	d002      	beq.n	8002918 <HAL_CAN_IRQHandler+0x2f8>
 8002912:	2b20      	cmp	r3, #32
 8002914:	d005      	beq.n	8002922 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002916:	e01d      	b.n	8002954 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291a:	f043 0308 	orr.w	r3, r3, #8
 800291e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002920:	e019      	b.n	8002956 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	f043 0310 	orr.w	r3, r3, #16
 8002928:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800292a:	e014      	b.n	8002956 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800292c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292e:	f043 0320 	orr.w	r3, r3, #32
 8002932:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002934:	e00f      	b.n	8002956 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800293c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800293e:	e00a      	b.n	8002956 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002942:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002946:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002948:	e005      	b.n	8002956 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002950:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002952:	e000      	b.n	8002956 <HAL_CAN_IRQHandler+0x336>
            break;
 8002954:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	699a      	ldr	r2, [r3, #24]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002964:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2204      	movs	r2, #4
 800296c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	2b00      	cmp	r3, #0
 8002972:	d008      	beq.n	8002986 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	431a      	orrs	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 f872 	bl	8002a6a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002986:	bf00      	nop
 8002988:	3728      	adds	r7, #40	; 0x28
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800298e:	b480      	push	{r7}
 8002990:	b083      	sub	sp, #12
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002996:	bf00      	nop
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b083      	sub	sp, #12
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80029de:	b480      	push	{r7}
 80029e0:	b083      	sub	sp, #12
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b083      	sub	sp, #12
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80029fa:	bf00      	nop
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002a06:	b480      	push	{r7}
 8002a08:	b083      	sub	sp, #12
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002a0e:	bf00      	nop
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr

08002a1a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr

08002a2e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	b083      	sub	sp, #12
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002a36:	bf00      	nop
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b083      	sub	sp, #12
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b083      	sub	sp, #12
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b083      	sub	sp, #12
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
	...

08002a80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a90:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <__NVIC_SetPriorityGrouping+0x40>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a96:	68ba      	ldr	r2, [r7, #8]
 8002a98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002aa8:	4b06      	ldr	r3, [pc, #24]	; (8002ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aae:	4a04      	ldr	r2, [pc, #16]	; (8002ac0 <__NVIC_SetPriorityGrouping+0x40>)
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	60d3      	str	r3, [r2, #12]
}
 8002ab4:	bf00      	nop
 8002ab6:	3714      	adds	r7, #20
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr
 8002ac0:	e000ed00 	.word	0xe000ed00
 8002ac4:	05fa0000 	.word	0x05fa0000

08002ac8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002acc:	4b04      	ldr	r3, [pc, #16]	; (8002ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	0a1b      	lsrs	r3, r3, #8
 8002ad2:	f003 0307 	and.w	r3, r3, #7
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	e000ed00 	.word	0xe000ed00

08002ae4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	4603      	mov	r3, r0
 8002aec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	db0b      	blt.n	8002b0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002af6:	79fb      	ldrb	r3, [r7, #7]
 8002af8:	f003 021f 	and.w	r2, r3, #31
 8002afc:	4907      	ldr	r1, [pc, #28]	; (8002b1c <__NVIC_EnableIRQ+0x38>)
 8002afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b02:	095b      	lsrs	r3, r3, #5
 8002b04:	2001      	movs	r0, #1
 8002b06:	fa00 f202 	lsl.w	r2, r0, r2
 8002b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b0e:	bf00      	nop
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	e000e100 	.word	0xe000e100

08002b20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	4603      	mov	r3, r0
 8002b28:	6039      	str	r1, [r7, #0]
 8002b2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	db0a      	blt.n	8002b4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	490c      	ldr	r1, [pc, #48]	; (8002b6c <__NVIC_SetPriority+0x4c>)
 8002b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3e:	0112      	lsls	r2, r2, #4
 8002b40:	b2d2      	uxtb	r2, r2
 8002b42:	440b      	add	r3, r1
 8002b44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b48:	e00a      	b.n	8002b60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	4908      	ldr	r1, [pc, #32]	; (8002b70 <__NVIC_SetPriority+0x50>)
 8002b50:	79fb      	ldrb	r3, [r7, #7]
 8002b52:	f003 030f 	and.w	r3, r3, #15
 8002b56:	3b04      	subs	r3, #4
 8002b58:	0112      	lsls	r2, r2, #4
 8002b5a:	b2d2      	uxtb	r2, r2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	761a      	strb	r2, [r3, #24]
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	e000e100 	.word	0xe000e100
 8002b70:	e000ed00 	.word	0xe000ed00

08002b74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b089      	sub	sp, #36	; 0x24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f003 0307 	and.w	r3, r3, #7
 8002b86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	f1c3 0307 	rsb	r3, r3, #7
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	bf28      	it	cs
 8002b92:	2304      	movcs	r3, #4
 8002b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	3304      	adds	r3, #4
 8002b9a:	2b06      	cmp	r3, #6
 8002b9c:	d902      	bls.n	8002ba4 <NVIC_EncodePriority+0x30>
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	3b03      	subs	r3, #3
 8002ba2:	e000      	b.n	8002ba6 <NVIC_EncodePriority+0x32>
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	43da      	mvns	r2, r3
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	401a      	ands	r2, r3
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc6:	43d9      	mvns	r1, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bcc:	4313      	orrs	r3, r2
         );
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3724      	adds	r7, #36	; 0x24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b082      	sub	sp, #8
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f7ff ff4c 	bl	8002a80 <__NVIC_SetPriorityGrouping>
}
 8002be8:	bf00      	nop
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
 8002bfc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c02:	f7ff ff61 	bl	8002ac8 <__NVIC_GetPriorityGrouping>
 8002c06:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	68b9      	ldr	r1, [r7, #8]
 8002c0c:	6978      	ldr	r0, [r7, #20]
 8002c0e:	f7ff ffb1 	bl	8002b74 <NVIC_EncodePriority>
 8002c12:	4602      	mov	r2, r0
 8002c14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c18:	4611      	mov	r1, r2
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff ff80 	bl	8002b20 <__NVIC_SetPriority>
}
 8002c20:	bf00      	nop
 8002c22:	3718      	adds	r7, #24
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	4603      	mov	r3, r0
 8002c30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7ff ff54 	bl	8002ae4 <__NVIC_EnableIRQ>
}
 8002c3c:	bf00      	nop
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b089      	sub	sp, #36	; 0x24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002c52:	2300      	movs	r3, #0
 8002c54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002c56:	2300      	movs	r3, #0
 8002c58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c5e:	2300      	movs	r3, #0
 8002c60:	61fb      	str	r3, [r7, #28]
 8002c62:	e175      	b.n	8002f50 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002c64:	2201      	movs	r2, #1
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	4013      	ands	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c78:	693a      	ldr	r2, [r7, #16]
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	f040 8164 	bne.w	8002f4a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f003 0303 	and.w	r3, r3, #3
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d005      	beq.n	8002c9a <HAL_GPIO_Init+0x56>
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f003 0303 	and.w	r3, r3, #3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d130      	bne.n	8002cfc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	2203      	movs	r2, #3
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	43db      	mvns	r3, r3
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	68da      	ldr	r2, [r3, #12]
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	091b      	lsrs	r3, r3, #4
 8002ce6:	f003 0201 	and.w	r2, r3, #1
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f003 0303 	and.w	r3, r3, #3
 8002d04:	2b03      	cmp	r3, #3
 8002d06:	d017      	beq.n	8002d38 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	2203      	movs	r2, #3
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f003 0303 	and.w	r3, r3, #3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d123      	bne.n	8002d8c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	08da      	lsrs	r2, r3, #3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3208      	adds	r2, #8
 8002d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	f003 0307 	and.w	r3, r3, #7
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	220f      	movs	r2, #15
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	43db      	mvns	r3, r3
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	4013      	ands	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	691a      	ldr	r2, [r3, #16]
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	08da      	lsrs	r2, r3, #3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	3208      	adds	r2, #8
 8002d86:	69b9      	ldr	r1, [r7, #24]
 8002d88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	2203      	movs	r2, #3
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	4013      	ands	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f003 0203 	and.w	r2, r3, #3
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 80be 	beq.w	8002f4a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dce:	4b66      	ldr	r3, [pc, #408]	; (8002f68 <HAL_GPIO_Init+0x324>)
 8002dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd2:	4a65      	ldr	r2, [pc, #404]	; (8002f68 <HAL_GPIO_Init+0x324>)
 8002dd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8002dda:	4b63      	ldr	r3, [pc, #396]	; (8002f68 <HAL_GPIO_Init+0x324>)
 8002ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002de6:	4a61      	ldr	r2, [pc, #388]	; (8002f6c <HAL_GPIO_Init+0x328>)
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	089b      	lsrs	r3, r3, #2
 8002dec:	3302      	adds	r3, #2
 8002dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	f003 0303 	and.w	r3, r3, #3
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	220f      	movs	r2, #15
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	43db      	mvns	r3, r3
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	4013      	ands	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a58      	ldr	r2, [pc, #352]	; (8002f70 <HAL_GPIO_Init+0x32c>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d037      	beq.n	8002e82 <HAL_GPIO_Init+0x23e>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a57      	ldr	r2, [pc, #348]	; (8002f74 <HAL_GPIO_Init+0x330>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d031      	beq.n	8002e7e <HAL_GPIO_Init+0x23a>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a56      	ldr	r2, [pc, #344]	; (8002f78 <HAL_GPIO_Init+0x334>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d02b      	beq.n	8002e7a <HAL_GPIO_Init+0x236>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a55      	ldr	r2, [pc, #340]	; (8002f7c <HAL_GPIO_Init+0x338>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d025      	beq.n	8002e76 <HAL_GPIO_Init+0x232>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a54      	ldr	r2, [pc, #336]	; (8002f80 <HAL_GPIO_Init+0x33c>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d01f      	beq.n	8002e72 <HAL_GPIO_Init+0x22e>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a53      	ldr	r2, [pc, #332]	; (8002f84 <HAL_GPIO_Init+0x340>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d019      	beq.n	8002e6e <HAL_GPIO_Init+0x22a>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a52      	ldr	r2, [pc, #328]	; (8002f88 <HAL_GPIO_Init+0x344>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d013      	beq.n	8002e6a <HAL_GPIO_Init+0x226>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a51      	ldr	r2, [pc, #324]	; (8002f8c <HAL_GPIO_Init+0x348>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d00d      	beq.n	8002e66 <HAL_GPIO_Init+0x222>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a50      	ldr	r2, [pc, #320]	; (8002f90 <HAL_GPIO_Init+0x34c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d007      	beq.n	8002e62 <HAL_GPIO_Init+0x21e>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a4f      	ldr	r2, [pc, #316]	; (8002f94 <HAL_GPIO_Init+0x350>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d101      	bne.n	8002e5e <HAL_GPIO_Init+0x21a>
 8002e5a:	2309      	movs	r3, #9
 8002e5c:	e012      	b.n	8002e84 <HAL_GPIO_Init+0x240>
 8002e5e:	230a      	movs	r3, #10
 8002e60:	e010      	b.n	8002e84 <HAL_GPIO_Init+0x240>
 8002e62:	2308      	movs	r3, #8
 8002e64:	e00e      	b.n	8002e84 <HAL_GPIO_Init+0x240>
 8002e66:	2307      	movs	r3, #7
 8002e68:	e00c      	b.n	8002e84 <HAL_GPIO_Init+0x240>
 8002e6a:	2306      	movs	r3, #6
 8002e6c:	e00a      	b.n	8002e84 <HAL_GPIO_Init+0x240>
 8002e6e:	2305      	movs	r3, #5
 8002e70:	e008      	b.n	8002e84 <HAL_GPIO_Init+0x240>
 8002e72:	2304      	movs	r3, #4
 8002e74:	e006      	b.n	8002e84 <HAL_GPIO_Init+0x240>
 8002e76:	2303      	movs	r3, #3
 8002e78:	e004      	b.n	8002e84 <HAL_GPIO_Init+0x240>
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	e002      	b.n	8002e84 <HAL_GPIO_Init+0x240>
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e000      	b.n	8002e84 <HAL_GPIO_Init+0x240>
 8002e82:	2300      	movs	r3, #0
 8002e84:	69fa      	ldr	r2, [r7, #28]
 8002e86:	f002 0203 	and.w	r2, r2, #3
 8002e8a:	0092      	lsls	r2, r2, #2
 8002e8c:	4093      	lsls	r3, r2
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002e94:	4935      	ldr	r1, [pc, #212]	; (8002f6c <HAL_GPIO_Init+0x328>)
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	089b      	lsrs	r3, r3, #2
 8002e9a:	3302      	adds	r3, #2
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ea2:	4b3d      	ldr	r3, [pc, #244]	; (8002f98 <HAL_GPIO_Init+0x354>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	43db      	mvns	r3, r3
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ec6:	4a34      	ldr	r2, [pc, #208]	; (8002f98 <HAL_GPIO_Init+0x354>)
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ecc:	4b32      	ldr	r3, [pc, #200]	; (8002f98 <HAL_GPIO_Init+0x354>)
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d003      	beq.n	8002ef0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ef0:	4a29      	ldr	r2, [pc, #164]	; (8002f98 <HAL_GPIO_Init+0x354>)
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ef6:	4b28      	ldr	r3, [pc, #160]	; (8002f98 <HAL_GPIO_Init+0x354>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	43db      	mvns	r3, r3
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	4013      	ands	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d003      	beq.n	8002f1a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f1a:	4a1f      	ldr	r2, [pc, #124]	; (8002f98 <HAL_GPIO_Init+0x354>)
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f20:	4b1d      	ldr	r3, [pc, #116]	; (8002f98 <HAL_GPIO_Init+0x354>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d003      	beq.n	8002f44 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f44:	4a14      	ldr	r2, [pc, #80]	; (8002f98 <HAL_GPIO_Init+0x354>)
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	61fb      	str	r3, [r7, #28]
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	2b0f      	cmp	r3, #15
 8002f54:	f67f ae86 	bls.w	8002c64 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002f58:	bf00      	nop
 8002f5a:	bf00      	nop
 8002f5c:	3724      	adds	r7, #36	; 0x24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	40013800 	.word	0x40013800
 8002f70:	40020000 	.word	0x40020000
 8002f74:	40020400 	.word	0x40020400
 8002f78:	40020800 	.word	0x40020800
 8002f7c:	40020c00 	.word	0x40020c00
 8002f80:	40021000 	.word	0x40021000
 8002f84:	40021400 	.word	0x40021400
 8002f88:	40021800 	.word	0x40021800
 8002f8c:	40021c00 	.word	0x40021c00
 8002f90:	40022000 	.word	0x40022000
 8002f94:	40022400 	.word	0x40022400
 8002f98:	40013c00 	.word	0x40013c00

08002f9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	691a      	ldr	r2, [r3, #16]
 8002fac:	887b      	ldrh	r3, [r7, #2]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d002      	beq.n	8002fba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	73fb      	strb	r3, [r7, #15]
 8002fb8:	e001      	b.n	8002fbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3714      	adds	r7, #20
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	807b      	strh	r3, [r7, #2]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fdc:	787b      	ldrb	r3, [r7, #1]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fe2:	887a      	ldrh	r2, [r7, #2]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002fe8:	e003      	b.n	8002ff2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002fea:	887b      	ldrh	r3, [r7, #2]
 8002fec:	041a      	lsls	r2, r3, #16
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	619a      	str	r2, [r3, #24]
}
 8002ff2:	bf00      	nop
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b085      	sub	sp, #20
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
 8003006:	460b      	mov	r3, r1
 8003008:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003010:	887a      	ldrh	r2, [r7, #2]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	4013      	ands	r3, r2
 8003016:	041a      	lsls	r2, r3, #16
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	43d9      	mvns	r1, r3
 800301c:	887b      	ldrh	r3, [r7, #2]
 800301e:	400b      	ands	r3, r1
 8003020:	431a      	orrs	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	619a      	str	r2, [r3, #24]
}
 8003026:	bf00      	nop
 8003028:	3714      	adds	r7, #20
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
	...

08003034 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b086      	sub	sp, #24
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800303c:	2300      	movs	r3, #0
 800303e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e29b      	b.n	8003582 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b00      	cmp	r3, #0
 8003054:	f000 8087 	beq.w	8003166 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003058:	4b96      	ldr	r3, [pc, #600]	; (80032b4 <HAL_RCC_OscConfig+0x280>)
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f003 030c 	and.w	r3, r3, #12
 8003060:	2b04      	cmp	r3, #4
 8003062:	d00c      	beq.n	800307e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003064:	4b93      	ldr	r3, [pc, #588]	; (80032b4 <HAL_RCC_OscConfig+0x280>)
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f003 030c 	and.w	r3, r3, #12
 800306c:	2b08      	cmp	r3, #8
 800306e:	d112      	bne.n	8003096 <HAL_RCC_OscConfig+0x62>
 8003070:	4b90      	ldr	r3, [pc, #576]	; (80032b4 <HAL_RCC_OscConfig+0x280>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003078:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800307c:	d10b      	bne.n	8003096 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800307e:	4b8d      	ldr	r3, [pc, #564]	; (80032b4 <HAL_RCC_OscConfig+0x280>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d06c      	beq.n	8003164 <HAL_RCC_OscConfig+0x130>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d168      	bne.n	8003164 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e275      	b.n	8003582 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800309e:	d106      	bne.n	80030ae <HAL_RCC_OscConfig+0x7a>
 80030a0:	4b84      	ldr	r3, [pc, #528]	; (80032b4 <HAL_RCC_OscConfig+0x280>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a83      	ldr	r2, [pc, #524]	; (80032b4 <HAL_RCC_OscConfig+0x280>)
 80030a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030aa:	6013      	str	r3, [r2, #0]
 80030ac:	e02e      	b.n	800310c <HAL_RCC_OscConfig+0xd8>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10c      	bne.n	80030d0 <HAL_RCC_OscConfig+0x9c>
 80030b6:	4b7f      	ldr	r3, [pc, #508]	; (80032b4 <HAL_RCC_OscConfig+0x280>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a7e      	ldr	r2, [pc, #504]	; (80032b4 <HAL_RCC_OscConfig+0x280>)
 80030bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	4b7c      	ldr	r3, [pc, #496]	; (80032b4 <HAL_RCC_OscConfig+0x280>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a7b      	ldr	r2, [pc, #492]	; (80032b4 <HAL_RCC_OscConfig+0x280>)
 80030c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030cc:	6013      	str	r3, [r2, #0]
 80030ce:	e01d      	b.n	800310c <HAL_RCC_OscConfig+0xd8>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030d8:	d10c      	bne.n	80030f4 <HAL_RCC_OscConfig+0xc0>
 80030da:	4b76      	ldr	r3, [pc, #472]	; (80032b4 <HAL_RCC_OscConfig+0x280>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a75      	ldr	r2, [pc, #468]	; (80032b4 <HAL_RCC_OscConfig+0x280>)
 80030e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030e4:	6013      	str	r3, [r2, #0]
 80030e6:	4b73      	ldr	r3, [pc, #460]	; (80032b4 <HAL_RCC_OscConfig+0x280>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a72      	ldr	r2, [pc, #456]	; (80032b4 <HAL_RCC_OscConfig+0x280>)
 80030ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030f0:	6013      	str	r3, [r2, #0]
 80030f2:	e00b      	b.n	800310c <HAL_RCC_OscConfig+0xd8>
 80030f4:	4b6f      	ldr	r3, [pc, #444]	; (80032b4 <HAL_RCC_OscConfig+0x280>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a6e      	ldr	r2, [pc, #440]	; (80032b4 <HAL_RCC_OscConfig+0x280>)
 80030fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030fe:	6013      	str	r3, [r2, #0]
 8003100:	4b6c      	ldr	r3, [pc, #432]	; (80032b4 <HAL_RCC_OscConfig+0x280>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a6b      	ldr	r2, [pc, #428]	; (80032b4 <HAL_RCC_OscConfig+0x280>)
 8003106:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800310a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d013      	beq.n	800313c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003114:	f7fe fa16 	bl	8001544 <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800311a:	e008      	b.n	800312e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800311c:	f7fe fa12 	bl	8001544 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b64      	cmp	r3, #100	; 0x64
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e229      	b.n	8003582 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800312e:	4b61      	ldr	r3, [pc, #388]	; (80032b4 <HAL_RCC_OscConfig+0x280>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d0f0      	beq.n	800311c <HAL_RCC_OscConfig+0xe8>
 800313a:	e014      	b.n	8003166 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313c:	f7fe fa02 	bl	8001544 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003144:	f7fe f9fe 	bl	8001544 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b64      	cmp	r3, #100	; 0x64
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e215      	b.n	8003582 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003156:	4b57      	ldr	r3, [pc, #348]	; (80032b4 <HAL_RCC_OscConfig+0x280>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1f0      	bne.n	8003144 <HAL_RCC_OscConfig+0x110>
 8003162:	e000      	b.n	8003166 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003164:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d069      	beq.n	8003246 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003172:	4b50      	ldr	r3, [pc, #320]	; (80032b4 <HAL_RCC_OscConfig+0x280>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f003 030c 	and.w	r3, r3, #12
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00b      	beq.n	8003196 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800317e:	4b4d      	ldr	r3, [pc, #308]	; (80032b4 <HAL_RCC_OscConfig+0x280>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 030c 	and.w	r3, r3, #12
 8003186:	2b08      	cmp	r3, #8
 8003188:	d11c      	bne.n	80031c4 <HAL_RCC_OscConfig+0x190>
 800318a:	4b4a      	ldr	r3, [pc, #296]	; (80032b4 <HAL_RCC_OscConfig+0x280>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d116      	bne.n	80031c4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003196:	4b47      	ldr	r3, [pc, #284]	; (80032b4 <HAL_RCC_OscConfig+0x280>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d005      	beq.n	80031ae <HAL_RCC_OscConfig+0x17a>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d001      	beq.n	80031ae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e1e9      	b.n	8003582 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ae:	4b41      	ldr	r3, [pc, #260]	; (80032b4 <HAL_RCC_OscConfig+0x280>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	493d      	ldr	r1, [pc, #244]	; (80032b4 <HAL_RCC_OscConfig+0x280>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031c2:	e040      	b.n	8003246 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d023      	beq.n	8003214 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031cc:	4b39      	ldr	r3, [pc, #228]	; (80032b4 <HAL_RCC_OscConfig+0x280>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a38      	ldr	r2, [pc, #224]	; (80032b4 <HAL_RCC_OscConfig+0x280>)
 80031d2:	f043 0301 	orr.w	r3, r3, #1
 80031d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d8:	f7fe f9b4 	bl	8001544 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031e0:	f7fe f9b0 	bl	8001544 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e1c7      	b.n	8003582 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031f2:	4b30      	ldr	r3, [pc, #192]	; (80032b4 <HAL_RCC_OscConfig+0x280>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d0f0      	beq.n	80031e0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031fe:	4b2d      	ldr	r3, [pc, #180]	; (80032b4 <HAL_RCC_OscConfig+0x280>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	4929      	ldr	r1, [pc, #164]	; (80032b4 <HAL_RCC_OscConfig+0x280>)
 800320e:	4313      	orrs	r3, r2
 8003210:	600b      	str	r3, [r1, #0]
 8003212:	e018      	b.n	8003246 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003214:	4b27      	ldr	r3, [pc, #156]	; (80032b4 <HAL_RCC_OscConfig+0x280>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a26      	ldr	r2, [pc, #152]	; (80032b4 <HAL_RCC_OscConfig+0x280>)
 800321a:	f023 0301 	bic.w	r3, r3, #1
 800321e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003220:	f7fe f990 	bl	8001544 <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003226:	e008      	b.n	800323a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003228:	f7fe f98c 	bl	8001544 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e1a3      	b.n	8003582 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800323a:	4b1e      	ldr	r3, [pc, #120]	; (80032b4 <HAL_RCC_OscConfig+0x280>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1f0      	bne.n	8003228 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0308 	and.w	r3, r3, #8
 800324e:	2b00      	cmp	r3, #0
 8003250:	d038      	beq.n	80032c4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d019      	beq.n	800328e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800325a:	4b16      	ldr	r3, [pc, #88]	; (80032b4 <HAL_RCC_OscConfig+0x280>)
 800325c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800325e:	4a15      	ldr	r2, [pc, #84]	; (80032b4 <HAL_RCC_OscConfig+0x280>)
 8003260:	f043 0301 	orr.w	r3, r3, #1
 8003264:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003266:	f7fe f96d 	bl	8001544 <HAL_GetTick>
 800326a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800326c:	e008      	b.n	8003280 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800326e:	f7fe f969 	bl	8001544 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e180      	b.n	8003582 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003280:	4b0c      	ldr	r3, [pc, #48]	; (80032b4 <HAL_RCC_OscConfig+0x280>)
 8003282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d0f0      	beq.n	800326e <HAL_RCC_OscConfig+0x23a>
 800328c:	e01a      	b.n	80032c4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800328e:	4b09      	ldr	r3, [pc, #36]	; (80032b4 <HAL_RCC_OscConfig+0x280>)
 8003290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003292:	4a08      	ldr	r2, [pc, #32]	; (80032b4 <HAL_RCC_OscConfig+0x280>)
 8003294:	f023 0301 	bic.w	r3, r3, #1
 8003298:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800329a:	f7fe f953 	bl	8001544 <HAL_GetTick>
 800329e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032a0:	e00a      	b.n	80032b8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032a2:	f7fe f94f 	bl	8001544 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d903      	bls.n	80032b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e166      	b.n	8003582 <HAL_RCC_OscConfig+0x54e>
 80032b4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032b8:	4b92      	ldr	r3, [pc, #584]	; (8003504 <HAL_RCC_OscConfig+0x4d0>)
 80032ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1ee      	bne.n	80032a2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 80a4 	beq.w	800341a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032d2:	4b8c      	ldr	r3, [pc, #560]	; (8003504 <HAL_RCC_OscConfig+0x4d0>)
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d10d      	bne.n	80032fa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80032de:	4b89      	ldr	r3, [pc, #548]	; (8003504 <HAL_RCC_OscConfig+0x4d0>)
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	4a88      	ldr	r2, [pc, #544]	; (8003504 <HAL_RCC_OscConfig+0x4d0>)
 80032e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032e8:	6413      	str	r3, [r2, #64]	; 0x40
 80032ea:	4b86      	ldr	r3, [pc, #536]	; (8003504 <HAL_RCC_OscConfig+0x4d0>)
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f2:	60bb      	str	r3, [r7, #8]
 80032f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032f6:	2301      	movs	r3, #1
 80032f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032fa:	4b83      	ldr	r3, [pc, #524]	; (8003508 <HAL_RCC_OscConfig+0x4d4>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003302:	2b00      	cmp	r3, #0
 8003304:	d118      	bne.n	8003338 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003306:	4b80      	ldr	r3, [pc, #512]	; (8003508 <HAL_RCC_OscConfig+0x4d4>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a7f      	ldr	r2, [pc, #508]	; (8003508 <HAL_RCC_OscConfig+0x4d4>)
 800330c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003310:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003312:	f7fe f917 	bl	8001544 <HAL_GetTick>
 8003316:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003318:	e008      	b.n	800332c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800331a:	f7fe f913 	bl	8001544 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b64      	cmp	r3, #100	; 0x64
 8003326:	d901      	bls.n	800332c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e12a      	b.n	8003582 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800332c:	4b76      	ldr	r3, [pc, #472]	; (8003508 <HAL_RCC_OscConfig+0x4d4>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003334:	2b00      	cmp	r3, #0
 8003336:	d0f0      	beq.n	800331a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d106      	bne.n	800334e <HAL_RCC_OscConfig+0x31a>
 8003340:	4b70      	ldr	r3, [pc, #448]	; (8003504 <HAL_RCC_OscConfig+0x4d0>)
 8003342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003344:	4a6f      	ldr	r2, [pc, #444]	; (8003504 <HAL_RCC_OscConfig+0x4d0>)
 8003346:	f043 0301 	orr.w	r3, r3, #1
 800334a:	6713      	str	r3, [r2, #112]	; 0x70
 800334c:	e02d      	b.n	80033aa <HAL_RCC_OscConfig+0x376>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10c      	bne.n	8003370 <HAL_RCC_OscConfig+0x33c>
 8003356:	4b6b      	ldr	r3, [pc, #428]	; (8003504 <HAL_RCC_OscConfig+0x4d0>)
 8003358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335a:	4a6a      	ldr	r2, [pc, #424]	; (8003504 <HAL_RCC_OscConfig+0x4d0>)
 800335c:	f023 0301 	bic.w	r3, r3, #1
 8003360:	6713      	str	r3, [r2, #112]	; 0x70
 8003362:	4b68      	ldr	r3, [pc, #416]	; (8003504 <HAL_RCC_OscConfig+0x4d0>)
 8003364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003366:	4a67      	ldr	r2, [pc, #412]	; (8003504 <HAL_RCC_OscConfig+0x4d0>)
 8003368:	f023 0304 	bic.w	r3, r3, #4
 800336c:	6713      	str	r3, [r2, #112]	; 0x70
 800336e:	e01c      	b.n	80033aa <HAL_RCC_OscConfig+0x376>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	2b05      	cmp	r3, #5
 8003376:	d10c      	bne.n	8003392 <HAL_RCC_OscConfig+0x35e>
 8003378:	4b62      	ldr	r3, [pc, #392]	; (8003504 <HAL_RCC_OscConfig+0x4d0>)
 800337a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337c:	4a61      	ldr	r2, [pc, #388]	; (8003504 <HAL_RCC_OscConfig+0x4d0>)
 800337e:	f043 0304 	orr.w	r3, r3, #4
 8003382:	6713      	str	r3, [r2, #112]	; 0x70
 8003384:	4b5f      	ldr	r3, [pc, #380]	; (8003504 <HAL_RCC_OscConfig+0x4d0>)
 8003386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003388:	4a5e      	ldr	r2, [pc, #376]	; (8003504 <HAL_RCC_OscConfig+0x4d0>)
 800338a:	f043 0301 	orr.w	r3, r3, #1
 800338e:	6713      	str	r3, [r2, #112]	; 0x70
 8003390:	e00b      	b.n	80033aa <HAL_RCC_OscConfig+0x376>
 8003392:	4b5c      	ldr	r3, [pc, #368]	; (8003504 <HAL_RCC_OscConfig+0x4d0>)
 8003394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003396:	4a5b      	ldr	r2, [pc, #364]	; (8003504 <HAL_RCC_OscConfig+0x4d0>)
 8003398:	f023 0301 	bic.w	r3, r3, #1
 800339c:	6713      	str	r3, [r2, #112]	; 0x70
 800339e:	4b59      	ldr	r3, [pc, #356]	; (8003504 <HAL_RCC_OscConfig+0x4d0>)
 80033a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a2:	4a58      	ldr	r2, [pc, #352]	; (8003504 <HAL_RCC_OscConfig+0x4d0>)
 80033a4:	f023 0304 	bic.w	r3, r3, #4
 80033a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d015      	beq.n	80033de <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b2:	f7fe f8c7 	bl	8001544 <HAL_GetTick>
 80033b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033b8:	e00a      	b.n	80033d0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ba:	f7fe f8c3 	bl	8001544 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d901      	bls.n	80033d0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e0d8      	b.n	8003582 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d0:	4b4c      	ldr	r3, [pc, #304]	; (8003504 <HAL_RCC_OscConfig+0x4d0>)
 80033d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d0ee      	beq.n	80033ba <HAL_RCC_OscConfig+0x386>
 80033dc:	e014      	b.n	8003408 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033de:	f7fe f8b1 	bl	8001544 <HAL_GetTick>
 80033e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033e4:	e00a      	b.n	80033fc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033e6:	f7fe f8ad 	bl	8001544 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e0c2      	b.n	8003582 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033fc:	4b41      	ldr	r3, [pc, #260]	; (8003504 <HAL_RCC_OscConfig+0x4d0>)
 80033fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1ee      	bne.n	80033e6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003408:	7dfb      	ldrb	r3, [r7, #23]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d105      	bne.n	800341a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800340e:	4b3d      	ldr	r3, [pc, #244]	; (8003504 <HAL_RCC_OscConfig+0x4d0>)
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	4a3c      	ldr	r2, [pc, #240]	; (8003504 <HAL_RCC_OscConfig+0x4d0>)
 8003414:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003418:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	2b00      	cmp	r3, #0
 8003420:	f000 80ae 	beq.w	8003580 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003424:	4b37      	ldr	r3, [pc, #220]	; (8003504 <HAL_RCC_OscConfig+0x4d0>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f003 030c 	and.w	r3, r3, #12
 800342c:	2b08      	cmp	r3, #8
 800342e:	d06d      	beq.n	800350c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	2b02      	cmp	r3, #2
 8003436:	d14b      	bne.n	80034d0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003438:	4b32      	ldr	r3, [pc, #200]	; (8003504 <HAL_RCC_OscConfig+0x4d0>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a31      	ldr	r2, [pc, #196]	; (8003504 <HAL_RCC_OscConfig+0x4d0>)
 800343e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003442:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003444:	f7fe f87e 	bl	8001544 <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800344c:	f7fe f87a 	bl	8001544 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e091      	b.n	8003582 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800345e:	4b29      	ldr	r3, [pc, #164]	; (8003504 <HAL_RCC_OscConfig+0x4d0>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1f0      	bne.n	800344c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	69da      	ldr	r2, [r3, #28]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	431a      	orrs	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003478:	019b      	lsls	r3, r3, #6
 800347a:	431a      	orrs	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003480:	085b      	lsrs	r3, r3, #1
 8003482:	3b01      	subs	r3, #1
 8003484:	041b      	lsls	r3, r3, #16
 8003486:	431a      	orrs	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348c:	061b      	lsls	r3, r3, #24
 800348e:	431a      	orrs	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003494:	071b      	lsls	r3, r3, #28
 8003496:	491b      	ldr	r1, [pc, #108]	; (8003504 <HAL_RCC_OscConfig+0x4d0>)
 8003498:	4313      	orrs	r3, r2
 800349a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800349c:	4b19      	ldr	r3, [pc, #100]	; (8003504 <HAL_RCC_OscConfig+0x4d0>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a18      	ldr	r2, [pc, #96]	; (8003504 <HAL_RCC_OscConfig+0x4d0>)
 80034a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a8:	f7fe f84c 	bl	8001544 <HAL_GetTick>
 80034ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ae:	e008      	b.n	80034c2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034b0:	f7fe f848 	bl	8001544 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e05f      	b.n	8003582 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c2:	4b10      	ldr	r3, [pc, #64]	; (8003504 <HAL_RCC_OscConfig+0x4d0>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d0f0      	beq.n	80034b0 <HAL_RCC_OscConfig+0x47c>
 80034ce:	e057      	b.n	8003580 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d0:	4b0c      	ldr	r3, [pc, #48]	; (8003504 <HAL_RCC_OscConfig+0x4d0>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a0b      	ldr	r2, [pc, #44]	; (8003504 <HAL_RCC_OscConfig+0x4d0>)
 80034d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034dc:	f7fe f832 	bl	8001544 <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034e2:	e008      	b.n	80034f6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e4:	f7fe f82e 	bl	8001544 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e045      	b.n	8003582 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f6:	4b03      	ldr	r3, [pc, #12]	; (8003504 <HAL_RCC_OscConfig+0x4d0>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1f0      	bne.n	80034e4 <HAL_RCC_OscConfig+0x4b0>
 8003502:	e03d      	b.n	8003580 <HAL_RCC_OscConfig+0x54c>
 8003504:	40023800 	.word	0x40023800
 8003508:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800350c:	4b1f      	ldr	r3, [pc, #124]	; (800358c <HAL_RCC_OscConfig+0x558>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d030      	beq.n	800357c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003524:	429a      	cmp	r2, r3
 8003526:	d129      	bne.n	800357c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003532:	429a      	cmp	r2, r3
 8003534:	d122      	bne.n	800357c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800353c:	4013      	ands	r3, r2
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003542:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003544:	4293      	cmp	r3, r2
 8003546:	d119      	bne.n	800357c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003552:	085b      	lsrs	r3, r3, #1
 8003554:	3b01      	subs	r3, #1
 8003556:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003558:	429a      	cmp	r2, r3
 800355a:	d10f      	bne.n	800357c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003566:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003568:	429a      	cmp	r2, r3
 800356a:	d107      	bne.n	800357c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003576:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003578:	429a      	cmp	r2, r3
 800357a:	d001      	beq.n	8003580 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e000      	b.n	8003582 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3718      	adds	r7, #24
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	40023800 	.word	0x40023800

08003590 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800359a:	2300      	movs	r3, #0
 800359c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e0d0      	b.n	800374a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035a8:	4b6a      	ldr	r3, [pc, #424]	; (8003754 <HAL_RCC_ClockConfig+0x1c4>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 030f 	and.w	r3, r3, #15
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d910      	bls.n	80035d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035b6:	4b67      	ldr	r3, [pc, #412]	; (8003754 <HAL_RCC_ClockConfig+0x1c4>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f023 020f 	bic.w	r2, r3, #15
 80035be:	4965      	ldr	r1, [pc, #404]	; (8003754 <HAL_RCC_ClockConfig+0x1c4>)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035c6:	4b63      	ldr	r3, [pc, #396]	; (8003754 <HAL_RCC_ClockConfig+0x1c4>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 030f 	and.w	r3, r3, #15
 80035ce:	683a      	ldr	r2, [r7, #0]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d001      	beq.n	80035d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e0b8      	b.n	800374a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d020      	beq.n	8003626 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d005      	beq.n	80035fc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035f0:	4b59      	ldr	r3, [pc, #356]	; (8003758 <HAL_RCC_ClockConfig+0x1c8>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	4a58      	ldr	r2, [pc, #352]	; (8003758 <HAL_RCC_ClockConfig+0x1c8>)
 80035f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0308 	and.w	r3, r3, #8
 8003604:	2b00      	cmp	r3, #0
 8003606:	d005      	beq.n	8003614 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003608:	4b53      	ldr	r3, [pc, #332]	; (8003758 <HAL_RCC_ClockConfig+0x1c8>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	4a52      	ldr	r2, [pc, #328]	; (8003758 <HAL_RCC_ClockConfig+0x1c8>)
 800360e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003612:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003614:	4b50      	ldr	r3, [pc, #320]	; (8003758 <HAL_RCC_ClockConfig+0x1c8>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	494d      	ldr	r1, [pc, #308]	; (8003758 <HAL_RCC_ClockConfig+0x1c8>)
 8003622:	4313      	orrs	r3, r2
 8003624:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d040      	beq.n	80036b4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d107      	bne.n	800364a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800363a:	4b47      	ldr	r3, [pc, #284]	; (8003758 <HAL_RCC_ClockConfig+0x1c8>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d115      	bne.n	8003672 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e07f      	b.n	800374a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	2b02      	cmp	r3, #2
 8003650:	d107      	bne.n	8003662 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003652:	4b41      	ldr	r3, [pc, #260]	; (8003758 <HAL_RCC_ClockConfig+0x1c8>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d109      	bne.n	8003672 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e073      	b.n	800374a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003662:	4b3d      	ldr	r3, [pc, #244]	; (8003758 <HAL_RCC_ClockConfig+0x1c8>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e06b      	b.n	800374a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003672:	4b39      	ldr	r3, [pc, #228]	; (8003758 <HAL_RCC_ClockConfig+0x1c8>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f023 0203 	bic.w	r2, r3, #3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	4936      	ldr	r1, [pc, #216]	; (8003758 <HAL_RCC_ClockConfig+0x1c8>)
 8003680:	4313      	orrs	r3, r2
 8003682:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003684:	f7fd ff5e 	bl	8001544 <HAL_GetTick>
 8003688:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800368a:	e00a      	b.n	80036a2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800368c:	f7fd ff5a 	bl	8001544 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	f241 3288 	movw	r2, #5000	; 0x1388
 800369a:	4293      	cmp	r3, r2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e053      	b.n	800374a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036a2:	4b2d      	ldr	r3, [pc, #180]	; (8003758 <HAL_RCC_ClockConfig+0x1c8>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 020c 	and.w	r2, r3, #12
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d1eb      	bne.n	800368c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036b4:	4b27      	ldr	r3, [pc, #156]	; (8003754 <HAL_RCC_ClockConfig+0x1c4>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 030f 	and.w	r3, r3, #15
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d210      	bcs.n	80036e4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036c2:	4b24      	ldr	r3, [pc, #144]	; (8003754 <HAL_RCC_ClockConfig+0x1c4>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f023 020f 	bic.w	r2, r3, #15
 80036ca:	4922      	ldr	r1, [pc, #136]	; (8003754 <HAL_RCC_ClockConfig+0x1c4>)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036d2:	4b20      	ldr	r3, [pc, #128]	; (8003754 <HAL_RCC_ClockConfig+0x1c4>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 030f 	and.w	r3, r3, #15
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d001      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e032      	b.n	800374a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0304 	and.w	r3, r3, #4
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d008      	beq.n	8003702 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036f0:	4b19      	ldr	r3, [pc, #100]	; (8003758 <HAL_RCC_ClockConfig+0x1c8>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	4916      	ldr	r1, [pc, #88]	; (8003758 <HAL_RCC_ClockConfig+0x1c8>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0308 	and.w	r3, r3, #8
 800370a:	2b00      	cmp	r3, #0
 800370c:	d009      	beq.n	8003722 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800370e:	4b12      	ldr	r3, [pc, #72]	; (8003758 <HAL_RCC_ClockConfig+0x1c8>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	490e      	ldr	r1, [pc, #56]	; (8003758 <HAL_RCC_ClockConfig+0x1c8>)
 800371e:	4313      	orrs	r3, r2
 8003720:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003722:	f000 f821 	bl	8003768 <HAL_RCC_GetSysClockFreq>
 8003726:	4602      	mov	r2, r0
 8003728:	4b0b      	ldr	r3, [pc, #44]	; (8003758 <HAL_RCC_ClockConfig+0x1c8>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	091b      	lsrs	r3, r3, #4
 800372e:	f003 030f 	and.w	r3, r3, #15
 8003732:	490a      	ldr	r1, [pc, #40]	; (800375c <HAL_RCC_ClockConfig+0x1cc>)
 8003734:	5ccb      	ldrb	r3, [r1, r3]
 8003736:	fa22 f303 	lsr.w	r3, r2, r3
 800373a:	4a09      	ldr	r2, [pc, #36]	; (8003760 <HAL_RCC_ClockConfig+0x1d0>)
 800373c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800373e:	4b09      	ldr	r3, [pc, #36]	; (8003764 <HAL_RCC_ClockConfig+0x1d4>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f7fd fdfe 	bl	8001344 <HAL_InitTick>

  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	40023c00 	.word	0x40023c00
 8003758:	40023800 	.word	0x40023800
 800375c:	08007150 	.word	0x08007150
 8003760:	20000000 	.word	0x20000000
 8003764:	20000004 	.word	0x20000004

08003768 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800376c:	b094      	sub	sp, #80	; 0x50
 800376e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003770:	2300      	movs	r3, #0
 8003772:	647b      	str	r3, [r7, #68]	; 0x44
 8003774:	2300      	movs	r3, #0
 8003776:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003778:	2300      	movs	r3, #0
 800377a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800377c:	2300      	movs	r3, #0
 800377e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003780:	4b79      	ldr	r3, [pc, #484]	; (8003968 <HAL_RCC_GetSysClockFreq+0x200>)
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f003 030c 	and.w	r3, r3, #12
 8003788:	2b08      	cmp	r3, #8
 800378a:	d00d      	beq.n	80037a8 <HAL_RCC_GetSysClockFreq+0x40>
 800378c:	2b08      	cmp	r3, #8
 800378e:	f200 80e1 	bhi.w	8003954 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003792:	2b00      	cmp	r3, #0
 8003794:	d002      	beq.n	800379c <HAL_RCC_GetSysClockFreq+0x34>
 8003796:	2b04      	cmp	r3, #4
 8003798:	d003      	beq.n	80037a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800379a:	e0db      	b.n	8003954 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800379c:	4b73      	ldr	r3, [pc, #460]	; (800396c <HAL_RCC_GetSysClockFreq+0x204>)
 800379e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037a0:	e0db      	b.n	800395a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037a2:	4b73      	ldr	r3, [pc, #460]	; (8003970 <HAL_RCC_GetSysClockFreq+0x208>)
 80037a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037a6:	e0d8      	b.n	800395a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037a8:	4b6f      	ldr	r3, [pc, #444]	; (8003968 <HAL_RCC_GetSysClockFreq+0x200>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037b0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80037b2:	4b6d      	ldr	r3, [pc, #436]	; (8003968 <HAL_RCC_GetSysClockFreq+0x200>)
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d063      	beq.n	8003886 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037be:	4b6a      	ldr	r3, [pc, #424]	; (8003968 <HAL_RCC_GetSysClockFreq+0x200>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	099b      	lsrs	r3, r3, #6
 80037c4:	2200      	movs	r2, #0
 80037c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80037c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80037ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037d0:	633b      	str	r3, [r7, #48]	; 0x30
 80037d2:	2300      	movs	r3, #0
 80037d4:	637b      	str	r3, [r7, #52]	; 0x34
 80037d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80037da:	4622      	mov	r2, r4
 80037dc:	462b      	mov	r3, r5
 80037de:	f04f 0000 	mov.w	r0, #0
 80037e2:	f04f 0100 	mov.w	r1, #0
 80037e6:	0159      	lsls	r1, r3, #5
 80037e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037ec:	0150      	lsls	r0, r2, #5
 80037ee:	4602      	mov	r2, r0
 80037f0:	460b      	mov	r3, r1
 80037f2:	4621      	mov	r1, r4
 80037f4:	1a51      	subs	r1, r2, r1
 80037f6:	6139      	str	r1, [r7, #16]
 80037f8:	4629      	mov	r1, r5
 80037fa:	eb63 0301 	sbc.w	r3, r3, r1
 80037fe:	617b      	str	r3, [r7, #20]
 8003800:	f04f 0200 	mov.w	r2, #0
 8003804:	f04f 0300 	mov.w	r3, #0
 8003808:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800380c:	4659      	mov	r1, fp
 800380e:	018b      	lsls	r3, r1, #6
 8003810:	4651      	mov	r1, sl
 8003812:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003816:	4651      	mov	r1, sl
 8003818:	018a      	lsls	r2, r1, #6
 800381a:	4651      	mov	r1, sl
 800381c:	ebb2 0801 	subs.w	r8, r2, r1
 8003820:	4659      	mov	r1, fp
 8003822:	eb63 0901 	sbc.w	r9, r3, r1
 8003826:	f04f 0200 	mov.w	r2, #0
 800382a:	f04f 0300 	mov.w	r3, #0
 800382e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003832:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003836:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800383a:	4690      	mov	r8, r2
 800383c:	4699      	mov	r9, r3
 800383e:	4623      	mov	r3, r4
 8003840:	eb18 0303 	adds.w	r3, r8, r3
 8003844:	60bb      	str	r3, [r7, #8]
 8003846:	462b      	mov	r3, r5
 8003848:	eb49 0303 	adc.w	r3, r9, r3
 800384c:	60fb      	str	r3, [r7, #12]
 800384e:	f04f 0200 	mov.w	r2, #0
 8003852:	f04f 0300 	mov.w	r3, #0
 8003856:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800385a:	4629      	mov	r1, r5
 800385c:	024b      	lsls	r3, r1, #9
 800385e:	4621      	mov	r1, r4
 8003860:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003864:	4621      	mov	r1, r4
 8003866:	024a      	lsls	r2, r1, #9
 8003868:	4610      	mov	r0, r2
 800386a:	4619      	mov	r1, r3
 800386c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800386e:	2200      	movs	r2, #0
 8003870:	62bb      	str	r3, [r7, #40]	; 0x28
 8003872:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003874:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003878:	f7fc fce2 	bl	8000240 <__aeabi_uldivmod>
 800387c:	4602      	mov	r2, r0
 800387e:	460b      	mov	r3, r1
 8003880:	4613      	mov	r3, r2
 8003882:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003884:	e058      	b.n	8003938 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003886:	4b38      	ldr	r3, [pc, #224]	; (8003968 <HAL_RCC_GetSysClockFreq+0x200>)
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	099b      	lsrs	r3, r3, #6
 800388c:	2200      	movs	r2, #0
 800388e:	4618      	mov	r0, r3
 8003890:	4611      	mov	r1, r2
 8003892:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003896:	623b      	str	r3, [r7, #32]
 8003898:	2300      	movs	r3, #0
 800389a:	627b      	str	r3, [r7, #36]	; 0x24
 800389c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80038a0:	4642      	mov	r2, r8
 80038a2:	464b      	mov	r3, r9
 80038a4:	f04f 0000 	mov.w	r0, #0
 80038a8:	f04f 0100 	mov.w	r1, #0
 80038ac:	0159      	lsls	r1, r3, #5
 80038ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038b2:	0150      	lsls	r0, r2, #5
 80038b4:	4602      	mov	r2, r0
 80038b6:	460b      	mov	r3, r1
 80038b8:	4641      	mov	r1, r8
 80038ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80038be:	4649      	mov	r1, r9
 80038c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80038c4:	f04f 0200 	mov.w	r2, #0
 80038c8:	f04f 0300 	mov.w	r3, #0
 80038cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038d8:	ebb2 040a 	subs.w	r4, r2, sl
 80038dc:	eb63 050b 	sbc.w	r5, r3, fp
 80038e0:	f04f 0200 	mov.w	r2, #0
 80038e4:	f04f 0300 	mov.w	r3, #0
 80038e8:	00eb      	lsls	r3, r5, #3
 80038ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038ee:	00e2      	lsls	r2, r4, #3
 80038f0:	4614      	mov	r4, r2
 80038f2:	461d      	mov	r5, r3
 80038f4:	4643      	mov	r3, r8
 80038f6:	18e3      	adds	r3, r4, r3
 80038f8:	603b      	str	r3, [r7, #0]
 80038fa:	464b      	mov	r3, r9
 80038fc:	eb45 0303 	adc.w	r3, r5, r3
 8003900:	607b      	str	r3, [r7, #4]
 8003902:	f04f 0200 	mov.w	r2, #0
 8003906:	f04f 0300 	mov.w	r3, #0
 800390a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800390e:	4629      	mov	r1, r5
 8003910:	028b      	lsls	r3, r1, #10
 8003912:	4621      	mov	r1, r4
 8003914:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003918:	4621      	mov	r1, r4
 800391a:	028a      	lsls	r2, r1, #10
 800391c:	4610      	mov	r0, r2
 800391e:	4619      	mov	r1, r3
 8003920:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003922:	2200      	movs	r2, #0
 8003924:	61bb      	str	r3, [r7, #24]
 8003926:	61fa      	str	r2, [r7, #28]
 8003928:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800392c:	f7fc fc88 	bl	8000240 <__aeabi_uldivmod>
 8003930:	4602      	mov	r2, r0
 8003932:	460b      	mov	r3, r1
 8003934:	4613      	mov	r3, r2
 8003936:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003938:	4b0b      	ldr	r3, [pc, #44]	; (8003968 <HAL_RCC_GetSysClockFreq+0x200>)
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	0c1b      	lsrs	r3, r3, #16
 800393e:	f003 0303 	and.w	r3, r3, #3
 8003942:	3301      	adds	r3, #1
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003948:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800394a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800394c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003950:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003952:	e002      	b.n	800395a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003954:	4b05      	ldr	r3, [pc, #20]	; (800396c <HAL_RCC_GetSysClockFreq+0x204>)
 8003956:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003958:	bf00      	nop
    }
  }
  return sysclockfreq;
 800395a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800395c:	4618      	mov	r0, r3
 800395e:	3750      	adds	r7, #80	; 0x50
 8003960:	46bd      	mov	sp, r7
 8003962:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003966:	bf00      	nop
 8003968:	40023800 	.word	0x40023800
 800396c:	00f42400 	.word	0x00f42400
 8003970:	007a1200 	.word	0x007a1200

08003974 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003974:	b480      	push	{r7}
 8003976:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003978:	4b03      	ldr	r3, [pc, #12]	; (8003988 <HAL_RCC_GetHCLKFreq+0x14>)
 800397a:	681b      	ldr	r3, [r3, #0]
}
 800397c:	4618      	mov	r0, r3
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	20000000 	.word	0x20000000

0800398c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003990:	f7ff fff0 	bl	8003974 <HAL_RCC_GetHCLKFreq>
 8003994:	4602      	mov	r2, r0
 8003996:	4b05      	ldr	r3, [pc, #20]	; (80039ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	0a9b      	lsrs	r3, r3, #10
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	4903      	ldr	r1, [pc, #12]	; (80039b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039a2:	5ccb      	ldrb	r3, [r1, r3]
 80039a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	40023800 	.word	0x40023800
 80039b0:	08007160 	.word	0x08007160

080039b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	220f      	movs	r2, #15
 80039c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80039c4:	4b12      	ldr	r3, [pc, #72]	; (8003a10 <HAL_RCC_GetClockConfig+0x5c>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f003 0203 	and.w	r2, r3, #3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80039d0:	4b0f      	ldr	r3, [pc, #60]	; (8003a10 <HAL_RCC_GetClockConfig+0x5c>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80039dc:	4b0c      	ldr	r3, [pc, #48]	; (8003a10 <HAL_RCC_GetClockConfig+0x5c>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80039e8:	4b09      	ldr	r3, [pc, #36]	; (8003a10 <HAL_RCC_GetClockConfig+0x5c>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	08db      	lsrs	r3, r3, #3
 80039ee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80039f6:	4b07      	ldr	r3, [pc, #28]	; (8003a14 <HAL_RCC_GetClockConfig+0x60>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 020f 	and.w	r2, r3, #15
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	601a      	str	r2, [r3, #0]
}
 8003a02:	bf00      	nop
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	40023800 	.word	0x40023800
 8003a14:	40023c00 	.word	0x40023c00

08003a18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e049      	b.n	8003abe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d106      	bne.n	8003a44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 f841 	bl	8003ac6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2202      	movs	r2, #2
 8003a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	3304      	adds	r3, #4
 8003a54:	4619      	mov	r1, r3
 8003a56:	4610      	mov	r0, r2
 8003a58:	f000 fa00 	bl	8003e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b083      	sub	sp, #12
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003ace:	bf00      	nop
 8003ad0:	370c      	adds	r7, #12
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
	...

08003adc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d001      	beq.n	8003af4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e054      	b.n	8003b9e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2202      	movs	r2, #2
 8003af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68da      	ldr	r2, [r3, #12]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f042 0201 	orr.w	r2, r2, #1
 8003b0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a26      	ldr	r2, [pc, #152]	; (8003bac <HAL_TIM_Base_Start_IT+0xd0>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d022      	beq.n	8003b5c <HAL_TIM_Base_Start_IT+0x80>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b1e:	d01d      	beq.n	8003b5c <HAL_TIM_Base_Start_IT+0x80>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a22      	ldr	r2, [pc, #136]	; (8003bb0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d018      	beq.n	8003b5c <HAL_TIM_Base_Start_IT+0x80>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a21      	ldr	r2, [pc, #132]	; (8003bb4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d013      	beq.n	8003b5c <HAL_TIM_Base_Start_IT+0x80>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a1f      	ldr	r2, [pc, #124]	; (8003bb8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d00e      	beq.n	8003b5c <HAL_TIM_Base_Start_IT+0x80>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a1e      	ldr	r2, [pc, #120]	; (8003bbc <HAL_TIM_Base_Start_IT+0xe0>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d009      	beq.n	8003b5c <HAL_TIM_Base_Start_IT+0x80>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a1c      	ldr	r2, [pc, #112]	; (8003bc0 <HAL_TIM_Base_Start_IT+0xe4>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d004      	beq.n	8003b5c <HAL_TIM_Base_Start_IT+0x80>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a1b      	ldr	r2, [pc, #108]	; (8003bc4 <HAL_TIM_Base_Start_IT+0xe8>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d115      	bne.n	8003b88 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	689a      	ldr	r2, [r3, #8]
 8003b62:	4b19      	ldr	r3, [pc, #100]	; (8003bc8 <HAL_TIM_Base_Start_IT+0xec>)
 8003b64:	4013      	ands	r3, r2
 8003b66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2b06      	cmp	r3, #6
 8003b6c:	d015      	beq.n	8003b9a <HAL_TIM_Base_Start_IT+0xbe>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b74:	d011      	beq.n	8003b9a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f042 0201 	orr.w	r2, r2, #1
 8003b84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b86:	e008      	b.n	8003b9a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f042 0201 	orr.w	r2, r2, #1
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	e000      	b.n	8003b9c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b9a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3714      	adds	r7, #20
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	40010000 	.word	0x40010000
 8003bb0:	40000400 	.word	0x40000400
 8003bb4:	40000800 	.word	0x40000800
 8003bb8:	40000c00 	.word	0x40000c00
 8003bbc:	40010400 	.word	0x40010400
 8003bc0:	40014000 	.word	0x40014000
 8003bc4:	40001800 	.word	0x40001800
 8003bc8:	00010007 	.word	0x00010007

08003bcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d122      	bne.n	8003c28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	f003 0302 	and.w	r3, r3, #2
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d11b      	bne.n	8003c28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f06f 0202 	mvn.w	r2, #2
 8003bf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	f003 0303 	and.w	r3, r3, #3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f905 	bl	8003e1e <HAL_TIM_IC_CaptureCallback>
 8003c14:	e005      	b.n	8003c22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 f8f7 	bl	8003e0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 f908 	bl	8003e32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	f003 0304 	and.w	r3, r3, #4
 8003c32:	2b04      	cmp	r3, #4
 8003c34:	d122      	bne.n	8003c7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	f003 0304 	and.w	r3, r3, #4
 8003c40:	2b04      	cmp	r3, #4
 8003c42:	d11b      	bne.n	8003c7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f06f 0204 	mvn.w	r2, #4
 8003c4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2202      	movs	r2, #2
 8003c52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d003      	beq.n	8003c6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f8db 	bl	8003e1e <HAL_TIM_IC_CaptureCallback>
 8003c68:	e005      	b.n	8003c76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 f8cd 	bl	8003e0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 f8de 	bl	8003e32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	f003 0308 	and.w	r3, r3, #8
 8003c86:	2b08      	cmp	r3, #8
 8003c88:	d122      	bne.n	8003cd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	f003 0308 	and.w	r3, r3, #8
 8003c94:	2b08      	cmp	r3, #8
 8003c96:	d11b      	bne.n	8003cd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f06f 0208 	mvn.w	r2, #8
 8003ca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2204      	movs	r2, #4
 8003ca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	f003 0303 	and.w	r3, r3, #3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d003      	beq.n	8003cbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 f8b1 	bl	8003e1e <HAL_TIM_IC_CaptureCallback>
 8003cbc:	e005      	b.n	8003cca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 f8a3 	bl	8003e0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 f8b4 	bl	8003e32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	f003 0310 	and.w	r3, r3, #16
 8003cda:	2b10      	cmp	r3, #16
 8003cdc:	d122      	bne.n	8003d24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	f003 0310 	and.w	r3, r3, #16
 8003ce8:	2b10      	cmp	r3, #16
 8003cea:	d11b      	bne.n	8003d24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f06f 0210 	mvn.w	r2, #16
 8003cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2208      	movs	r2, #8
 8003cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	69db      	ldr	r3, [r3, #28]
 8003d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d003      	beq.n	8003d12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 f887 	bl	8003e1e <HAL_TIM_IC_CaptureCallback>
 8003d10:	e005      	b.n	8003d1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 f879 	bl	8003e0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 f88a 	bl	8003e32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d10e      	bne.n	8003d50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d107      	bne.n	8003d50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f06f 0201 	mvn.w	r2, #1
 8003d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7fd f99e 	bl	800108c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d5a:	2b80      	cmp	r3, #128	; 0x80
 8003d5c:	d10e      	bne.n	8003d7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d68:	2b80      	cmp	r3, #128	; 0x80
 8003d6a:	d107      	bne.n	8003d7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f91a 	bl	8003fb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d8a:	d10e      	bne.n	8003daa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d96:	2b80      	cmp	r3, #128	; 0x80
 8003d98:	d107      	bne.n	8003daa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003da2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 f90d 	bl	8003fc4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db4:	2b40      	cmp	r3, #64	; 0x40
 8003db6:	d10e      	bne.n	8003dd6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc2:	2b40      	cmp	r3, #64	; 0x40
 8003dc4:	d107      	bne.n	8003dd6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003dce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 f838 	bl	8003e46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	f003 0320 	and.w	r3, r3, #32
 8003de0:	2b20      	cmp	r3, #32
 8003de2:	d10e      	bne.n	8003e02 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	f003 0320 	and.w	r3, r3, #32
 8003dee:	2b20      	cmp	r3, #32
 8003df0:	d107      	bne.n	8003e02 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f06f 0220 	mvn.w	r2, #32
 8003dfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 f8cd 	bl	8003f9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e02:	bf00      	nop
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b083      	sub	sp, #12
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e12:	bf00      	nop
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr

08003e1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b083      	sub	sp, #12
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e26:	bf00      	nop
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e32:	b480      	push	{r7}
 8003e34:	b083      	sub	sp, #12
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e3a:	bf00      	nop
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e46:	b480      	push	{r7}
 8003e48:	b083      	sub	sp, #12
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e4e:	bf00      	nop
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
	...

08003e5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a40      	ldr	r2, [pc, #256]	; (8003f70 <TIM_Base_SetConfig+0x114>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d013      	beq.n	8003e9c <TIM_Base_SetConfig+0x40>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e7a:	d00f      	beq.n	8003e9c <TIM_Base_SetConfig+0x40>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a3d      	ldr	r2, [pc, #244]	; (8003f74 <TIM_Base_SetConfig+0x118>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d00b      	beq.n	8003e9c <TIM_Base_SetConfig+0x40>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a3c      	ldr	r2, [pc, #240]	; (8003f78 <TIM_Base_SetConfig+0x11c>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d007      	beq.n	8003e9c <TIM_Base_SetConfig+0x40>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a3b      	ldr	r2, [pc, #236]	; (8003f7c <TIM_Base_SetConfig+0x120>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d003      	beq.n	8003e9c <TIM_Base_SetConfig+0x40>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a3a      	ldr	r2, [pc, #232]	; (8003f80 <TIM_Base_SetConfig+0x124>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d108      	bne.n	8003eae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ea2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a2f      	ldr	r2, [pc, #188]	; (8003f70 <TIM_Base_SetConfig+0x114>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d02b      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ebc:	d027      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a2c      	ldr	r2, [pc, #176]	; (8003f74 <TIM_Base_SetConfig+0x118>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d023      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a2b      	ldr	r2, [pc, #172]	; (8003f78 <TIM_Base_SetConfig+0x11c>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d01f      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a2a      	ldr	r2, [pc, #168]	; (8003f7c <TIM_Base_SetConfig+0x120>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d01b      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a29      	ldr	r2, [pc, #164]	; (8003f80 <TIM_Base_SetConfig+0x124>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d017      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a28      	ldr	r2, [pc, #160]	; (8003f84 <TIM_Base_SetConfig+0x128>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d013      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a27      	ldr	r2, [pc, #156]	; (8003f88 <TIM_Base_SetConfig+0x12c>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d00f      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a26      	ldr	r2, [pc, #152]	; (8003f8c <TIM_Base_SetConfig+0x130>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d00b      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a25      	ldr	r2, [pc, #148]	; (8003f90 <TIM_Base_SetConfig+0x134>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d007      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a24      	ldr	r2, [pc, #144]	; (8003f94 <TIM_Base_SetConfig+0x138>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d003      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a23      	ldr	r2, [pc, #140]	; (8003f98 <TIM_Base_SetConfig+0x13c>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d108      	bne.n	8003f20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	689a      	ldr	r2, [r3, #8]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a0a      	ldr	r2, [pc, #40]	; (8003f70 <TIM_Base_SetConfig+0x114>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d003      	beq.n	8003f54 <TIM_Base_SetConfig+0xf8>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a0c      	ldr	r2, [pc, #48]	; (8003f80 <TIM_Base_SetConfig+0x124>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d103      	bne.n	8003f5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	691a      	ldr	r2, [r3, #16]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	615a      	str	r2, [r3, #20]
}
 8003f62:	bf00      	nop
 8003f64:	3714      	adds	r7, #20
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	40010000 	.word	0x40010000
 8003f74:	40000400 	.word	0x40000400
 8003f78:	40000800 	.word	0x40000800
 8003f7c:	40000c00 	.word	0x40000c00
 8003f80:	40010400 	.word	0x40010400
 8003f84:	40014000 	.word	0x40014000
 8003f88:	40014400 	.word	0x40014400
 8003f8c:	40014800 	.word	0x40014800
 8003f90:	40001800 	.word	0x40001800
 8003f94:	40001c00 	.word	0x40001c00
 8003f98:	40002000 	.word	0x40002000

08003f9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003fdc:	bf00      	nop
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
	...

08003fe8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fee:	f3ef 8305 	mrs	r3, IPSR
 8003ff2:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ff4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d10f      	bne.n	800401a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ffa:	f3ef 8310 	mrs	r3, PRIMASK
 8003ffe:	607b      	str	r3, [r7, #4]
  return(result);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d105      	bne.n	8004012 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004006:	f3ef 8311 	mrs	r3, BASEPRI
 800400a:	603b      	str	r3, [r7, #0]
  return(result);
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d007      	beq.n	8004022 <osKernelInitialize+0x3a>
 8004012:	4b0e      	ldr	r3, [pc, #56]	; (800404c <osKernelInitialize+0x64>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2b02      	cmp	r3, #2
 8004018:	d103      	bne.n	8004022 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800401a:	f06f 0305 	mvn.w	r3, #5
 800401e:	60fb      	str	r3, [r7, #12]
 8004020:	e00c      	b.n	800403c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004022:	4b0a      	ldr	r3, [pc, #40]	; (800404c <osKernelInitialize+0x64>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d105      	bne.n	8004036 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800402a:	4b08      	ldr	r3, [pc, #32]	; (800404c <osKernelInitialize+0x64>)
 800402c:	2201      	movs	r2, #1
 800402e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004030:	2300      	movs	r3, #0
 8004032:	60fb      	str	r3, [r7, #12]
 8004034:	e002      	b.n	800403c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004036:	f04f 33ff 	mov.w	r3, #4294967295
 800403a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800403c:	68fb      	ldr	r3, [r7, #12]
}
 800403e:	4618      	mov	r0, r3
 8004040:	3714      	adds	r7, #20
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	20000280 	.word	0x20000280

08004050 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004056:	f3ef 8305 	mrs	r3, IPSR
 800405a:	60bb      	str	r3, [r7, #8]
  return(result);
 800405c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10f      	bne.n	8004082 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004062:	f3ef 8310 	mrs	r3, PRIMASK
 8004066:	607b      	str	r3, [r7, #4]
  return(result);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d105      	bne.n	800407a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800406e:	f3ef 8311 	mrs	r3, BASEPRI
 8004072:	603b      	str	r3, [r7, #0]
  return(result);
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d007      	beq.n	800408a <osKernelStart+0x3a>
 800407a:	4b0f      	ldr	r3, [pc, #60]	; (80040b8 <osKernelStart+0x68>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2b02      	cmp	r3, #2
 8004080:	d103      	bne.n	800408a <osKernelStart+0x3a>
    stat = osErrorISR;
 8004082:	f06f 0305 	mvn.w	r3, #5
 8004086:	60fb      	str	r3, [r7, #12]
 8004088:	e010      	b.n	80040ac <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800408a:	4b0b      	ldr	r3, [pc, #44]	; (80040b8 <osKernelStart+0x68>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2b01      	cmp	r3, #1
 8004090:	d109      	bne.n	80040a6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004092:	f7ff ffa1 	bl	8003fd8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004096:	4b08      	ldr	r3, [pc, #32]	; (80040b8 <osKernelStart+0x68>)
 8004098:	2202      	movs	r2, #2
 800409a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800409c:	f001 fa3e 	bl	800551c <vTaskStartScheduler>
      stat = osOK;
 80040a0:	2300      	movs	r3, #0
 80040a2:	60fb      	str	r3, [r7, #12]
 80040a4:	e002      	b.n	80040ac <osKernelStart+0x5c>
    } else {
      stat = osError;
 80040a6:	f04f 33ff 	mov.w	r3, #4294967295
 80040aa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80040ac:	68fb      	ldr	r3, [r7, #12]
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	20000280 	.word	0x20000280

080040bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80040bc:	b580      	push	{r7, lr}
 80040be:	b090      	sub	sp, #64	; 0x40
 80040c0:	af04      	add	r7, sp, #16
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80040c8:	2300      	movs	r3, #0
 80040ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040cc:	f3ef 8305 	mrs	r3, IPSR
 80040d0:	61fb      	str	r3, [r7, #28]
  return(result);
 80040d2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f040 808f 	bne.w	80041f8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040da:	f3ef 8310 	mrs	r3, PRIMASK
 80040de:	61bb      	str	r3, [r7, #24]
  return(result);
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d105      	bne.n	80040f2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80040e6:	f3ef 8311 	mrs	r3, BASEPRI
 80040ea:	617b      	str	r3, [r7, #20]
  return(result);
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d003      	beq.n	80040fa <osThreadNew+0x3e>
 80040f2:	4b44      	ldr	r3, [pc, #272]	; (8004204 <osThreadNew+0x148>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d07e      	beq.n	80041f8 <osThreadNew+0x13c>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d07b      	beq.n	80041f8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004100:	2380      	movs	r3, #128	; 0x80
 8004102:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004104:	2318      	movs	r3, #24
 8004106:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8004108:	2300      	movs	r3, #0
 800410a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800410c:	f04f 33ff 	mov.w	r3, #4294967295
 8004110:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d045      	beq.n	80041a4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d002      	beq.n	8004126 <osThreadNew+0x6a>
        name = attr->name;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d002      	beq.n	8004134 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004136:	2b00      	cmp	r3, #0
 8004138:	d008      	beq.n	800414c <osThreadNew+0x90>
 800413a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413c:	2b38      	cmp	r3, #56	; 0x38
 800413e:	d805      	bhi.n	800414c <osThreadNew+0x90>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	2b00      	cmp	r3, #0
 800414a:	d001      	beq.n	8004150 <osThreadNew+0x94>
        return (NULL);
 800414c:	2300      	movs	r3, #0
 800414e:	e054      	b.n	80041fa <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	695b      	ldr	r3, [r3, #20]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d003      	beq.n	8004160 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	089b      	lsrs	r3, r3, #2
 800415e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00e      	beq.n	8004186 <osThreadNew+0xca>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	2bbb      	cmp	r3, #187	; 0xbb
 800416e:	d90a      	bls.n	8004186 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004174:	2b00      	cmp	r3, #0
 8004176:	d006      	beq.n	8004186 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	695b      	ldr	r3, [r3, #20]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d002      	beq.n	8004186 <osThreadNew+0xca>
        mem = 1;
 8004180:	2301      	movs	r3, #1
 8004182:	623b      	str	r3, [r7, #32]
 8004184:	e010      	b.n	80041a8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d10c      	bne.n	80041a8 <osThreadNew+0xec>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d108      	bne.n	80041a8 <osThreadNew+0xec>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d104      	bne.n	80041a8 <osThreadNew+0xec>
          mem = 0;
 800419e:	2300      	movs	r3, #0
 80041a0:	623b      	str	r3, [r7, #32]
 80041a2:	e001      	b.n	80041a8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80041a4:	2300      	movs	r3, #0
 80041a6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80041a8:	6a3b      	ldr	r3, [r7, #32]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d110      	bne.n	80041d0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80041b6:	9202      	str	r2, [sp, #8]
 80041b8:	9301      	str	r3, [sp, #4]
 80041ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041bc:	9300      	str	r3, [sp, #0]
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 fea7 	bl	8004f18 <xTaskCreateStatic>
 80041ca:	4603      	mov	r3, r0
 80041cc:	613b      	str	r3, [r7, #16]
 80041ce:	e013      	b.n	80041f8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80041d0:	6a3b      	ldr	r3, [r7, #32]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d110      	bne.n	80041f8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80041d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d8:	b29a      	uxth	r2, r3
 80041da:	f107 0310 	add.w	r3, r7, #16
 80041de:	9301      	str	r3, [sp, #4]
 80041e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f000 fef8 	bl	8004fde <xTaskCreate>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d001      	beq.n	80041f8 <osThreadNew+0x13c>
          hTask = NULL;
 80041f4:	2300      	movs	r3, #0
 80041f6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80041f8:	693b      	ldr	r3, [r7, #16]
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3730      	adds	r7, #48	; 0x30
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	20000280 	.word	0x20000280

08004208 <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8004208:	b580      	push	{r7, lr}
 800420a:	b088      	sub	sp, #32
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004214:	f3ef 8305 	mrs	r3, IPSR
 8004218:	617b      	str	r3, [r7, #20]
  return(result);
 800421a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800421c:	2b00      	cmp	r3, #0
 800421e:	d10f      	bne.n	8004240 <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004220:	f3ef 8310 	mrs	r3, PRIMASK
 8004224:	613b      	str	r3, [r7, #16]
  return(result);
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d105      	bne.n	8004238 <osThreadSuspend+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800422c:	f3ef 8311 	mrs	r3, BASEPRI
 8004230:	60fb      	str	r3, [r7, #12]
  return(result);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d007      	beq.n	8004248 <osThreadSuspend+0x40>
 8004238:	4b0c      	ldr	r3, [pc, #48]	; (800426c <osThreadSuspend+0x64>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2b02      	cmp	r3, #2
 800423e:	d103      	bne.n	8004248 <osThreadSuspend+0x40>
    stat = osErrorISR;
 8004240:	f06f 0305 	mvn.w	r3, #5
 8004244:	61fb      	str	r3, [r7, #28]
 8004246:	e00b      	b.n	8004260 <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d103      	bne.n	8004256 <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 800424e:	f06f 0303 	mvn.w	r3, #3
 8004252:	61fb      	str	r3, [r7, #28]
 8004254:	e004      	b.n	8004260 <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 8004256:	2300      	movs	r3, #0
 8004258:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 800425a:	69b8      	ldr	r0, [r7, #24]
 800425c:	f001 f852 	bl	8005304 <vTaskSuspend>
  }

  return (stat);
 8004260:	69fb      	ldr	r3, [r7, #28]
}
 8004262:	4618      	mov	r0, r3
 8004264:	3720      	adds	r7, #32
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	20000280 	.word	0x20000280

08004270 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8004270:	b580      	push	{r7, lr}
 8004272:	b088      	sub	sp, #32
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800427c:	f3ef 8305 	mrs	r3, IPSR
 8004280:	617b      	str	r3, [r7, #20]
  return(result);
 8004282:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10f      	bne.n	80042a8 <osThreadResume+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004288:	f3ef 8310 	mrs	r3, PRIMASK
 800428c:	613b      	str	r3, [r7, #16]
  return(result);
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d105      	bne.n	80042a0 <osThreadResume+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004294:	f3ef 8311 	mrs	r3, BASEPRI
 8004298:	60fb      	str	r3, [r7, #12]
  return(result);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d007      	beq.n	80042b0 <osThreadResume+0x40>
 80042a0:	4b0c      	ldr	r3, [pc, #48]	; (80042d4 <osThreadResume+0x64>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d103      	bne.n	80042b0 <osThreadResume+0x40>
    stat = osErrorISR;
 80042a8:	f06f 0305 	mvn.w	r3, #5
 80042ac:	61fb      	str	r3, [r7, #28]
 80042ae:	e00b      	b.n	80042c8 <osThreadResume+0x58>
  }
  else if (hTask == NULL) {
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d103      	bne.n	80042be <osThreadResume+0x4e>
    stat = osErrorParameter;
 80042b6:	f06f 0303 	mvn.w	r3, #3
 80042ba:	61fb      	str	r3, [r7, #28]
 80042bc:	e004      	b.n	80042c8 <osThreadResume+0x58>
  }
  else {
    stat = osOK;
 80042be:	2300      	movs	r3, #0
 80042c0:	61fb      	str	r3, [r7, #28]
    vTaskResume (hTask);
 80042c2:	69b8      	ldr	r0, [r7, #24]
 80042c4:	f001 f8ca 	bl	800545c <vTaskResume>
  }

  return (stat);
 80042c8:	69fb      	ldr	r3, [r7, #28]
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3720      	adds	r7, #32
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	20000280 	.word	0x20000280

080042d8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80042d8:	b580      	push	{r7, lr}
 80042da:	b086      	sub	sp, #24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042e0:	f3ef 8305 	mrs	r3, IPSR
 80042e4:	613b      	str	r3, [r7, #16]
  return(result);
 80042e6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10f      	bne.n	800430c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042ec:	f3ef 8310 	mrs	r3, PRIMASK
 80042f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d105      	bne.n	8004304 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80042f8:	f3ef 8311 	mrs	r3, BASEPRI
 80042fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d007      	beq.n	8004314 <osDelay+0x3c>
 8004304:	4b0a      	ldr	r3, [pc, #40]	; (8004330 <osDelay+0x58>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2b02      	cmp	r3, #2
 800430a:	d103      	bne.n	8004314 <osDelay+0x3c>
    stat = osErrorISR;
 800430c:	f06f 0305 	mvn.w	r3, #5
 8004310:	617b      	str	r3, [r7, #20]
 8004312:	e007      	b.n	8004324 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004314:	2300      	movs	r3, #0
 8004316:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d002      	beq.n	8004324 <osDelay+0x4c>
      vTaskDelay(ticks);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 ffba 	bl	8005298 <vTaskDelay>
    }
  }

  return (stat);
 8004324:	697b      	ldr	r3, [r7, #20]
}
 8004326:	4618      	mov	r0, r3
 8004328:	3718      	adds	r7, #24
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	20000280 	.word	0x20000280

08004334 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	4a07      	ldr	r2, [pc, #28]	; (8004360 <vApplicationGetIdleTaskMemory+0x2c>)
 8004344:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	4a06      	ldr	r2, [pc, #24]	; (8004364 <vApplicationGetIdleTaskMemory+0x30>)
 800434a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2280      	movs	r2, #128	; 0x80
 8004350:	601a      	str	r2, [r3, #0]
}
 8004352:	bf00      	nop
 8004354:	3714      	adds	r7, #20
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	20000284 	.word	0x20000284
 8004364:	20000340 	.word	0x20000340

08004368 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	4a07      	ldr	r2, [pc, #28]	; (8004394 <vApplicationGetTimerTaskMemory+0x2c>)
 8004378:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	4a06      	ldr	r2, [pc, #24]	; (8004398 <vApplicationGetTimerTaskMemory+0x30>)
 800437e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004386:	601a      	str	r2, [r3, #0]
}
 8004388:	bf00      	nop
 800438a:	3714      	adds	r7, #20
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr
 8004394:	20000540 	.word	0x20000540
 8004398:	200005fc 	.word	0x200005fc

0800439c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f103 0208 	add.w	r2, r3, #8
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f04f 32ff 	mov.w	r2, #4294967295
 80043b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f103 0208 	add.w	r2, r3, #8
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f103 0208 	add.w	r2, r3, #8
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80043ea:	bf00      	nop
 80043ec:	370c      	adds	r7, #12
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr

080043f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80043f6:	b480      	push	{r7}
 80043f8:	b085      	sub	sp, #20
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
 80043fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	689a      	ldr	r2, [r3, #8]
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	683a      	ldr	r2, [r7, #0]
 800441a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	683a      	ldr	r2, [r7, #0]
 8004420:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	1c5a      	adds	r2, r3, #1
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	601a      	str	r2, [r3, #0]
}
 8004432:	bf00      	nop
 8004434:	3714      	adds	r7, #20
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr

0800443e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800443e:	b480      	push	{r7}
 8004440:	b085      	sub	sp, #20
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
 8004446:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004454:	d103      	bne.n	800445e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	60fb      	str	r3, [r7, #12]
 800445c:	e00c      	b.n	8004478 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	3308      	adds	r3, #8
 8004462:	60fb      	str	r3, [r7, #12]
 8004464:	e002      	b.n	800446c <vListInsert+0x2e>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	60fb      	str	r3, [r7, #12]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	429a      	cmp	r2, r3
 8004476:	d2f6      	bcs.n	8004466 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	683a      	ldr	r2, [r7, #0]
 8004486:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	683a      	ldr	r2, [r7, #0]
 8004492:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	1c5a      	adds	r2, r3, #1
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	601a      	str	r2, [r3, #0]
}
 80044a4:	bf00      	nop
 80044a6:	3714      	adds	r7, #20
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	6892      	ldr	r2, [r2, #8]
 80044c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	6852      	ldr	r2, [r2, #4]
 80044d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d103      	bne.n	80044e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	1e5a      	subs	r2, r3, #1
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3714      	adds	r7, #20
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10c      	bne.n	8004532 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451c:	b672      	cpsid	i
 800451e:	f383 8811 	msr	BASEPRI, r3
 8004522:	f3bf 8f6f 	isb	sy
 8004526:	f3bf 8f4f 	dsb	sy
 800452a:	b662      	cpsie	i
 800452c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800452e:	bf00      	nop
 8004530:	e7fe      	b.n	8004530 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004532:	f002 f9b3 	bl	800689c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800453e:	68f9      	ldr	r1, [r7, #12]
 8004540:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004542:	fb01 f303 	mul.w	r3, r1, r3
 8004546:	441a      	add	r2, r3
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004562:	3b01      	subs	r3, #1
 8004564:	68f9      	ldr	r1, [r7, #12]
 8004566:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004568:	fb01 f303 	mul.w	r3, r1, r3
 800456c:	441a      	add	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	22ff      	movs	r2, #255	; 0xff
 8004576:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	22ff      	movs	r2, #255	; 0xff
 800457e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d114      	bne.n	80045b2 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d01a      	beq.n	80045c6 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	3310      	adds	r3, #16
 8004594:	4618      	mov	r0, r3
 8004596:	f001 fa69 	bl	8005a6c <xTaskRemoveFromEventList>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d012      	beq.n	80045c6 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80045a0:	4b0c      	ldr	r3, [pc, #48]	; (80045d4 <xQueueGenericReset+0xd0>)
 80045a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045a6:	601a      	str	r2, [r3, #0]
 80045a8:	f3bf 8f4f 	dsb	sy
 80045ac:	f3bf 8f6f 	isb	sy
 80045b0:	e009      	b.n	80045c6 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	3310      	adds	r3, #16
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7ff fef0 	bl	800439c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	3324      	adds	r3, #36	; 0x24
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7ff feeb 	bl	800439c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80045c6:	f002 f99d 	bl	8006904 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80045ca:	2301      	movs	r3, #1
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	e000ed04 	.word	0xe000ed04

080045d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b08e      	sub	sp, #56	; 0x38
 80045dc:	af02      	add	r7, sp, #8
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
 80045e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d10c      	bne.n	8004606 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80045ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f0:	b672      	cpsid	i
 80045f2:	f383 8811 	msr	BASEPRI, r3
 80045f6:	f3bf 8f6f 	isb	sy
 80045fa:	f3bf 8f4f 	dsb	sy
 80045fe:	b662      	cpsie	i
 8004600:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004602:	bf00      	nop
 8004604:	e7fe      	b.n	8004604 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d10c      	bne.n	8004626 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800460c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004610:	b672      	cpsid	i
 8004612:	f383 8811 	msr	BASEPRI, r3
 8004616:	f3bf 8f6f 	isb	sy
 800461a:	f3bf 8f4f 	dsb	sy
 800461e:	b662      	cpsie	i
 8004620:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004622:	bf00      	nop
 8004624:	e7fe      	b.n	8004624 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d002      	beq.n	8004632 <xQueueGenericCreateStatic+0x5a>
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d001      	beq.n	8004636 <xQueueGenericCreateStatic+0x5e>
 8004632:	2301      	movs	r3, #1
 8004634:	e000      	b.n	8004638 <xQueueGenericCreateStatic+0x60>
 8004636:	2300      	movs	r3, #0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d10c      	bne.n	8004656 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800463c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004640:	b672      	cpsid	i
 8004642:	f383 8811 	msr	BASEPRI, r3
 8004646:	f3bf 8f6f 	isb	sy
 800464a:	f3bf 8f4f 	dsb	sy
 800464e:	b662      	cpsie	i
 8004650:	623b      	str	r3, [r7, #32]
}
 8004652:	bf00      	nop
 8004654:	e7fe      	b.n	8004654 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d102      	bne.n	8004662 <xQueueGenericCreateStatic+0x8a>
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d101      	bne.n	8004666 <xQueueGenericCreateStatic+0x8e>
 8004662:	2301      	movs	r3, #1
 8004664:	e000      	b.n	8004668 <xQueueGenericCreateStatic+0x90>
 8004666:	2300      	movs	r3, #0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10c      	bne.n	8004686 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800466c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004670:	b672      	cpsid	i
 8004672:	f383 8811 	msr	BASEPRI, r3
 8004676:	f3bf 8f6f 	isb	sy
 800467a:	f3bf 8f4f 	dsb	sy
 800467e:	b662      	cpsie	i
 8004680:	61fb      	str	r3, [r7, #28]
}
 8004682:	bf00      	nop
 8004684:	e7fe      	b.n	8004684 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004686:	2350      	movs	r3, #80	; 0x50
 8004688:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	2b50      	cmp	r3, #80	; 0x50
 800468e:	d00c      	beq.n	80046aa <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8004690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004694:	b672      	cpsid	i
 8004696:	f383 8811 	msr	BASEPRI, r3
 800469a:	f3bf 8f6f 	isb	sy
 800469e:	f3bf 8f4f 	dsb	sy
 80046a2:	b662      	cpsie	i
 80046a4:	61bb      	str	r3, [r7, #24]
}
 80046a6:	bf00      	nop
 80046a8:	e7fe      	b.n	80046a8 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80046aa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80046b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00d      	beq.n	80046d2 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80046b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80046be:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80046c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c4:	9300      	str	r3, [sp, #0]
 80046c6:	4613      	mov	r3, r2
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	68b9      	ldr	r1, [r7, #8]
 80046cc:	68f8      	ldr	r0, [r7, #12]
 80046ce:	f000 f805 	bl	80046dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80046d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3730      	adds	r7, #48	; 0x30
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
 80046e8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d103      	bne.n	80046f8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	69ba      	ldr	r2, [r7, #24]
 80046f4:	601a      	str	r2, [r3, #0]
 80046f6:	e002      	b.n	80046fe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	68ba      	ldr	r2, [r7, #8]
 8004708:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800470a:	2101      	movs	r1, #1
 800470c:	69b8      	ldr	r0, [r7, #24]
 800470e:	f7ff fef9 	bl	8004504 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	78fa      	ldrb	r2, [r7, #3]
 8004716:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800471a:	bf00      	nop
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
	...

08004724 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b08e      	sub	sp, #56	; 0x38
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
 8004730:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004732:	2300      	movs	r3, #0
 8004734:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800473a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473c:	2b00      	cmp	r3, #0
 800473e:	d10c      	bne.n	800475a <xQueueGenericSend+0x36>
	__asm volatile
 8004740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004744:	b672      	cpsid	i
 8004746:	f383 8811 	msr	BASEPRI, r3
 800474a:	f3bf 8f6f 	isb	sy
 800474e:	f3bf 8f4f 	dsb	sy
 8004752:	b662      	cpsie	i
 8004754:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004756:	bf00      	nop
 8004758:	e7fe      	b.n	8004758 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d103      	bne.n	8004768 <xQueueGenericSend+0x44>
 8004760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004764:	2b00      	cmp	r3, #0
 8004766:	d101      	bne.n	800476c <xQueueGenericSend+0x48>
 8004768:	2301      	movs	r3, #1
 800476a:	e000      	b.n	800476e <xQueueGenericSend+0x4a>
 800476c:	2300      	movs	r3, #0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10c      	bne.n	800478c <xQueueGenericSend+0x68>
	__asm volatile
 8004772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004776:	b672      	cpsid	i
 8004778:	f383 8811 	msr	BASEPRI, r3
 800477c:	f3bf 8f6f 	isb	sy
 8004780:	f3bf 8f4f 	dsb	sy
 8004784:	b662      	cpsie	i
 8004786:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004788:	bf00      	nop
 800478a:	e7fe      	b.n	800478a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	2b02      	cmp	r3, #2
 8004790:	d103      	bne.n	800479a <xQueueGenericSend+0x76>
 8004792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004796:	2b01      	cmp	r3, #1
 8004798:	d101      	bne.n	800479e <xQueueGenericSend+0x7a>
 800479a:	2301      	movs	r3, #1
 800479c:	e000      	b.n	80047a0 <xQueueGenericSend+0x7c>
 800479e:	2300      	movs	r3, #0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d10c      	bne.n	80047be <xQueueGenericSend+0x9a>
	__asm volatile
 80047a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a8:	b672      	cpsid	i
 80047aa:	f383 8811 	msr	BASEPRI, r3
 80047ae:	f3bf 8f6f 	isb	sy
 80047b2:	f3bf 8f4f 	dsb	sy
 80047b6:	b662      	cpsie	i
 80047b8:	623b      	str	r3, [r7, #32]
}
 80047ba:	bf00      	nop
 80047bc:	e7fe      	b.n	80047bc <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80047be:	f001 fb1f 	bl	8005e00 <xTaskGetSchedulerState>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d102      	bne.n	80047ce <xQueueGenericSend+0xaa>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d101      	bne.n	80047d2 <xQueueGenericSend+0xae>
 80047ce:	2301      	movs	r3, #1
 80047d0:	e000      	b.n	80047d4 <xQueueGenericSend+0xb0>
 80047d2:	2300      	movs	r3, #0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10c      	bne.n	80047f2 <xQueueGenericSend+0xce>
	__asm volatile
 80047d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047dc:	b672      	cpsid	i
 80047de:	f383 8811 	msr	BASEPRI, r3
 80047e2:	f3bf 8f6f 	isb	sy
 80047e6:	f3bf 8f4f 	dsb	sy
 80047ea:	b662      	cpsie	i
 80047ec:	61fb      	str	r3, [r7, #28]
}
 80047ee:	bf00      	nop
 80047f0:	e7fe      	b.n	80047f0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80047f2:	f002 f853 	bl	800689c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80047f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047fe:	429a      	cmp	r2, r3
 8004800:	d302      	bcc.n	8004808 <xQueueGenericSend+0xe4>
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	2b02      	cmp	r3, #2
 8004806:	d129      	bne.n	800485c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004808:	683a      	ldr	r2, [r7, #0]
 800480a:	68b9      	ldr	r1, [r7, #8]
 800480c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800480e:	f000 fa15 	bl	8004c3c <prvCopyDataToQueue>
 8004812:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004818:	2b00      	cmp	r3, #0
 800481a:	d010      	beq.n	800483e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800481c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481e:	3324      	adds	r3, #36	; 0x24
 8004820:	4618      	mov	r0, r3
 8004822:	f001 f923 	bl	8005a6c <xTaskRemoveFromEventList>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d013      	beq.n	8004854 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800482c:	4b3f      	ldr	r3, [pc, #252]	; (800492c <xQueueGenericSend+0x208>)
 800482e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004832:	601a      	str	r2, [r3, #0]
 8004834:	f3bf 8f4f 	dsb	sy
 8004838:	f3bf 8f6f 	isb	sy
 800483c:	e00a      	b.n	8004854 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800483e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004840:	2b00      	cmp	r3, #0
 8004842:	d007      	beq.n	8004854 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004844:	4b39      	ldr	r3, [pc, #228]	; (800492c <xQueueGenericSend+0x208>)
 8004846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	f3bf 8f4f 	dsb	sy
 8004850:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004854:	f002 f856 	bl	8006904 <vPortExitCritical>
				return pdPASS;
 8004858:	2301      	movs	r3, #1
 800485a:	e063      	b.n	8004924 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d103      	bne.n	800486a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004862:	f002 f84f 	bl	8006904 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004866:	2300      	movs	r3, #0
 8004868:	e05c      	b.n	8004924 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800486a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800486c:	2b00      	cmp	r3, #0
 800486e:	d106      	bne.n	800487e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004870:	f107 0314 	add.w	r3, r7, #20
 8004874:	4618      	mov	r0, r3
 8004876:	f001 f95f 	bl	8005b38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800487a:	2301      	movs	r3, #1
 800487c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800487e:	f002 f841 	bl	8006904 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004882:	f000 febf 	bl	8005604 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004886:	f002 f809 	bl	800689c <vPortEnterCritical>
 800488a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004890:	b25b      	sxtb	r3, r3
 8004892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004896:	d103      	bne.n	80048a0 <xQueueGenericSend+0x17c>
 8004898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489a:	2200      	movs	r2, #0
 800489c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048a6:	b25b      	sxtb	r3, r3
 80048a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ac:	d103      	bne.n	80048b6 <xQueueGenericSend+0x192>
 80048ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048b6:	f002 f825 	bl	8006904 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80048ba:	1d3a      	adds	r2, r7, #4
 80048bc:	f107 0314 	add.w	r3, r7, #20
 80048c0:	4611      	mov	r1, r2
 80048c2:	4618      	mov	r0, r3
 80048c4:	f001 f94e 	bl	8005b64 <xTaskCheckForTimeOut>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d124      	bne.n	8004918 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80048ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048d0:	f000 faac 	bl	8004e2c <prvIsQueueFull>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d018      	beq.n	800490c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80048da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048dc:	3310      	adds	r3, #16
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	4611      	mov	r1, r2
 80048e2:	4618      	mov	r0, r3
 80048e4:	f001 f86e 	bl	80059c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80048e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048ea:	f000 fa37 	bl	8004d5c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80048ee:	f000 fe97 	bl	8005620 <xTaskResumeAll>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f47f af7c 	bne.w	80047f2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80048fa:	4b0c      	ldr	r3, [pc, #48]	; (800492c <xQueueGenericSend+0x208>)
 80048fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004900:	601a      	str	r2, [r3, #0]
 8004902:	f3bf 8f4f 	dsb	sy
 8004906:	f3bf 8f6f 	isb	sy
 800490a:	e772      	b.n	80047f2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800490c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800490e:	f000 fa25 	bl	8004d5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004912:	f000 fe85 	bl	8005620 <xTaskResumeAll>
 8004916:	e76c      	b.n	80047f2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004918:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800491a:	f000 fa1f 	bl	8004d5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800491e:	f000 fe7f 	bl	8005620 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004922:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004924:	4618      	mov	r0, r3
 8004926:	3738      	adds	r7, #56	; 0x38
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	e000ed04 	.word	0xe000ed04

08004930 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b08e      	sub	sp, #56	; 0x38
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
 800493c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10c      	bne.n	8004962 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8004948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494c:	b672      	cpsid	i
 800494e:	f383 8811 	msr	BASEPRI, r3
 8004952:	f3bf 8f6f 	isb	sy
 8004956:	f3bf 8f4f 	dsb	sy
 800495a:	b662      	cpsie	i
 800495c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800495e:	bf00      	nop
 8004960:	e7fe      	b.n	8004960 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d103      	bne.n	8004970 <xQueueGenericSendFromISR+0x40>
 8004968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800496a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496c:	2b00      	cmp	r3, #0
 800496e:	d101      	bne.n	8004974 <xQueueGenericSendFromISR+0x44>
 8004970:	2301      	movs	r3, #1
 8004972:	e000      	b.n	8004976 <xQueueGenericSendFromISR+0x46>
 8004974:	2300      	movs	r3, #0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d10c      	bne.n	8004994 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800497a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800497e:	b672      	cpsid	i
 8004980:	f383 8811 	msr	BASEPRI, r3
 8004984:	f3bf 8f6f 	isb	sy
 8004988:	f3bf 8f4f 	dsb	sy
 800498c:	b662      	cpsie	i
 800498e:	623b      	str	r3, [r7, #32]
}
 8004990:	bf00      	nop
 8004992:	e7fe      	b.n	8004992 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	2b02      	cmp	r3, #2
 8004998:	d103      	bne.n	80049a2 <xQueueGenericSendFromISR+0x72>
 800499a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d101      	bne.n	80049a6 <xQueueGenericSendFromISR+0x76>
 80049a2:	2301      	movs	r3, #1
 80049a4:	e000      	b.n	80049a8 <xQueueGenericSendFromISR+0x78>
 80049a6:	2300      	movs	r3, #0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d10c      	bne.n	80049c6 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80049ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b0:	b672      	cpsid	i
 80049b2:	f383 8811 	msr	BASEPRI, r3
 80049b6:	f3bf 8f6f 	isb	sy
 80049ba:	f3bf 8f4f 	dsb	sy
 80049be:	b662      	cpsie	i
 80049c0:	61fb      	str	r3, [r7, #28]
}
 80049c2:	bf00      	nop
 80049c4:	e7fe      	b.n	80049c4 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80049c6:	f002 f851 	bl	8006a6c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80049ca:	f3ef 8211 	mrs	r2, BASEPRI
 80049ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d2:	b672      	cpsid	i
 80049d4:	f383 8811 	msr	BASEPRI, r3
 80049d8:	f3bf 8f6f 	isb	sy
 80049dc:	f3bf 8f4f 	dsb	sy
 80049e0:	b662      	cpsie	i
 80049e2:	61ba      	str	r2, [r7, #24]
 80049e4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80049e6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80049e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80049ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d302      	bcc.n	80049fc <xQueueGenericSendFromISR+0xcc>
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d12c      	bne.n	8004a56 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80049fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a06:	683a      	ldr	r2, [r7, #0]
 8004a08:	68b9      	ldr	r1, [r7, #8]
 8004a0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a0c:	f000 f916 	bl	8004c3c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004a10:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a18:	d112      	bne.n	8004a40 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d016      	beq.n	8004a50 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a24:	3324      	adds	r3, #36	; 0x24
 8004a26:	4618      	mov	r0, r3
 8004a28:	f001 f820 	bl	8005a6c <xTaskRemoveFromEventList>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00e      	beq.n	8004a50 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00b      	beq.n	8004a50 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	601a      	str	r2, [r3, #0]
 8004a3e:	e007      	b.n	8004a50 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004a40:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004a44:	3301      	adds	r3, #1
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	b25a      	sxtb	r2, r3
 8004a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004a50:	2301      	movs	r3, #1
 8004a52:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004a54:	e001      	b.n	8004a5a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004a56:	2300      	movs	r3, #0
 8004a58:	637b      	str	r3, [r7, #52]	; 0x34
 8004a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a5c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004a64:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3738      	adds	r7, #56	; 0x38
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b08c      	sub	sp, #48	; 0x30
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d10c      	bne.n	8004aa4 <xQueueReceive+0x34>
	__asm volatile
 8004a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8e:	b672      	cpsid	i
 8004a90:	f383 8811 	msr	BASEPRI, r3
 8004a94:	f3bf 8f6f 	isb	sy
 8004a98:	f3bf 8f4f 	dsb	sy
 8004a9c:	b662      	cpsie	i
 8004a9e:	623b      	str	r3, [r7, #32]
}
 8004aa0:	bf00      	nop
 8004aa2:	e7fe      	b.n	8004aa2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d103      	bne.n	8004ab2 <xQueueReceive+0x42>
 8004aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d101      	bne.n	8004ab6 <xQueueReceive+0x46>
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e000      	b.n	8004ab8 <xQueueReceive+0x48>
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d10c      	bne.n	8004ad6 <xQueueReceive+0x66>
	__asm volatile
 8004abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac0:	b672      	cpsid	i
 8004ac2:	f383 8811 	msr	BASEPRI, r3
 8004ac6:	f3bf 8f6f 	isb	sy
 8004aca:	f3bf 8f4f 	dsb	sy
 8004ace:	b662      	cpsie	i
 8004ad0:	61fb      	str	r3, [r7, #28]
}
 8004ad2:	bf00      	nop
 8004ad4:	e7fe      	b.n	8004ad4 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ad6:	f001 f993 	bl	8005e00 <xTaskGetSchedulerState>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d102      	bne.n	8004ae6 <xQueueReceive+0x76>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <xQueueReceive+0x7a>
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e000      	b.n	8004aec <xQueueReceive+0x7c>
 8004aea:	2300      	movs	r3, #0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10c      	bne.n	8004b0a <xQueueReceive+0x9a>
	__asm volatile
 8004af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af4:	b672      	cpsid	i
 8004af6:	f383 8811 	msr	BASEPRI, r3
 8004afa:	f3bf 8f6f 	isb	sy
 8004afe:	f3bf 8f4f 	dsb	sy
 8004b02:	b662      	cpsie	i
 8004b04:	61bb      	str	r3, [r7, #24]
}
 8004b06:	bf00      	nop
 8004b08:	e7fe      	b.n	8004b08 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b0a:	f001 fec7 	bl	800689c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b12:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d01f      	beq.n	8004b5a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004b1a:	68b9      	ldr	r1, [r7, #8]
 8004b1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b1e:	f000 f8f7 	bl	8004d10 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b24:	1e5a      	subs	r2, r3, #1
 8004b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b28:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00f      	beq.n	8004b52 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b34:	3310      	adds	r3, #16
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 ff98 	bl	8005a6c <xTaskRemoveFromEventList>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d007      	beq.n	8004b52 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004b42:	4b3d      	ldr	r3, [pc, #244]	; (8004c38 <xQueueReceive+0x1c8>)
 8004b44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b48:	601a      	str	r2, [r3, #0]
 8004b4a:	f3bf 8f4f 	dsb	sy
 8004b4e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004b52:	f001 fed7 	bl	8006904 <vPortExitCritical>
				return pdPASS;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e069      	b.n	8004c2e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d103      	bne.n	8004b68 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b60:	f001 fed0 	bl	8006904 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004b64:	2300      	movs	r3, #0
 8004b66:	e062      	b.n	8004c2e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d106      	bne.n	8004b7c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b6e:	f107 0310 	add.w	r3, r7, #16
 8004b72:	4618      	mov	r0, r3
 8004b74:	f000 ffe0 	bl	8005b38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b7c:	f001 fec2 	bl	8006904 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b80:	f000 fd40 	bl	8005604 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b84:	f001 fe8a 	bl	800689c <vPortEnterCritical>
 8004b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b8e:	b25b      	sxtb	r3, r3
 8004b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b94:	d103      	bne.n	8004b9e <xQueueReceive+0x12e>
 8004b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ba4:	b25b      	sxtb	r3, r3
 8004ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004baa:	d103      	bne.n	8004bb4 <xQueueReceive+0x144>
 8004bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bb4:	f001 fea6 	bl	8006904 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004bb8:	1d3a      	adds	r2, r7, #4
 8004bba:	f107 0310 	add.w	r3, r7, #16
 8004bbe:	4611      	mov	r1, r2
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f000 ffcf 	bl	8005b64 <xTaskCheckForTimeOut>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d123      	bne.n	8004c14 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004bcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bce:	f000 f917 	bl	8004e00 <prvIsQueueEmpty>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d017      	beq.n	8004c08 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bda:	3324      	adds	r3, #36	; 0x24
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	4611      	mov	r1, r2
 8004be0:	4618      	mov	r0, r3
 8004be2:	f000 feef 	bl	80059c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004be6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004be8:	f000 f8b8 	bl	8004d5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004bec:	f000 fd18 	bl	8005620 <xTaskResumeAll>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d189      	bne.n	8004b0a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8004bf6:	4b10      	ldr	r3, [pc, #64]	; (8004c38 <xQueueReceive+0x1c8>)
 8004bf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bfc:	601a      	str	r2, [r3, #0]
 8004bfe:	f3bf 8f4f 	dsb	sy
 8004c02:	f3bf 8f6f 	isb	sy
 8004c06:	e780      	b.n	8004b0a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004c08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c0a:	f000 f8a7 	bl	8004d5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c0e:	f000 fd07 	bl	8005620 <xTaskResumeAll>
 8004c12:	e77a      	b.n	8004b0a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004c14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c16:	f000 f8a1 	bl	8004d5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c1a:	f000 fd01 	bl	8005620 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c20:	f000 f8ee 	bl	8004e00 <prvIsQueueEmpty>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	f43f af6f 	beq.w	8004b0a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004c2c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3730      	adds	r7, #48	; 0x30
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	e000ed04 	.word	0xe000ed04

08004c3c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b086      	sub	sp, #24
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c50:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d10d      	bne.n	8004c76 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d14d      	bne.n	8004cfe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f001 f8e8 	bl	8005e3c <xTaskPriorityDisinherit>
 8004c6c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	609a      	str	r2, [r3, #8]
 8004c74:	e043      	b.n	8004cfe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d119      	bne.n	8004cb0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6858      	ldr	r0, [r3, #4]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c84:	461a      	mov	r2, r3
 8004c86:	68b9      	ldr	r1, [r7, #8]
 8004c88:	f002 f93e 	bl	8006f08 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	685a      	ldr	r2, [r3, #4]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c94:	441a      	add	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d32b      	bcc.n	8004cfe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	605a      	str	r2, [r3, #4]
 8004cae:	e026      	b.n	8004cfe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	68d8      	ldr	r0, [r3, #12]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb8:	461a      	mov	r2, r3
 8004cba:	68b9      	ldr	r1, [r7, #8]
 8004cbc:	f002 f924 	bl	8006f08 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	68da      	ldr	r2, [r3, #12]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc8:	425b      	negs	r3, r3
 8004cca:	441a      	add	r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	68da      	ldr	r2, [r3, #12]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d207      	bcs.n	8004cec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	689a      	ldr	r2, [r3, #8]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce4:	425b      	negs	r3, r3
 8004ce6:	441a      	add	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d105      	bne.n	8004cfe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d002      	beq.n	8004cfe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	1c5a      	adds	r2, r3, #1
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004d06:	697b      	ldr	r3, [r7, #20]
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3718      	adds	r7, #24
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d018      	beq.n	8004d54 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	68da      	ldr	r2, [r3, #12]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2a:	441a      	add	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	68da      	ldr	r2, [r3, #12]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d303      	bcc.n	8004d44 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	68d9      	ldr	r1, [r3, #12]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	6838      	ldr	r0, [r7, #0]
 8004d50:	f002 f8da 	bl	8006f08 <memcpy>
	}
}
 8004d54:	bf00      	nop
 8004d56:	3708      	adds	r7, #8
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004d64:	f001 fd9a 	bl	800689c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d6e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d70:	e011      	b.n	8004d96 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d012      	beq.n	8004da0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	3324      	adds	r3, #36	; 0x24
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f000 fe74 	bl	8005a6c <xTaskRemoveFromEventList>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d001      	beq.n	8004d8e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004d8a:	f000 ff51 	bl	8005c30 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004d8e:	7bfb      	ldrb	r3, [r7, #15]
 8004d90:	3b01      	subs	r3, #1
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	dce9      	bgt.n	8004d72 <prvUnlockQueue+0x16>
 8004d9e:	e000      	b.n	8004da2 <prvUnlockQueue+0x46>
					break;
 8004da0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	22ff      	movs	r2, #255	; 0xff
 8004da6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004daa:	f001 fdab 	bl	8006904 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004dae:	f001 fd75 	bl	800689c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004db8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004dba:	e011      	b.n	8004de0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d012      	beq.n	8004dea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	3310      	adds	r3, #16
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f000 fe4f 	bl	8005a6c <xTaskRemoveFromEventList>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d001      	beq.n	8004dd8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004dd4:	f000 ff2c 	bl	8005c30 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004dd8:	7bbb      	ldrb	r3, [r7, #14]
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004de0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	dce9      	bgt.n	8004dbc <prvUnlockQueue+0x60>
 8004de8:	e000      	b.n	8004dec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004dea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	22ff      	movs	r2, #255	; 0xff
 8004df0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004df4:	f001 fd86 	bl	8006904 <vPortExitCritical>
}
 8004df8:	bf00      	nop
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e08:	f001 fd48 	bl	800689c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d102      	bne.n	8004e1a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004e14:	2301      	movs	r3, #1
 8004e16:	60fb      	str	r3, [r7, #12]
 8004e18:	e001      	b.n	8004e1e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e1e:	f001 fd71 	bl	8006904 <vPortExitCritical>

	return xReturn;
 8004e22:	68fb      	ldr	r3, [r7, #12]
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3710      	adds	r7, #16
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e34:	f001 fd32 	bl	800689c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d102      	bne.n	8004e4a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004e44:	2301      	movs	r3, #1
 8004e46:	60fb      	str	r3, [r7, #12]
 8004e48:	e001      	b.n	8004e4e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e4e:	f001 fd59 	bl	8006904 <vPortExitCritical>

	return xReturn;
 8004e52:	68fb      	ldr	r3, [r7, #12]
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b085      	sub	sp, #20
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e66:	2300      	movs	r3, #0
 8004e68:	60fb      	str	r3, [r7, #12]
 8004e6a:	e014      	b.n	8004e96 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004e6c:	4a0f      	ldr	r2, [pc, #60]	; (8004eac <vQueueAddToRegistry+0x50>)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d10b      	bne.n	8004e90 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004e78:	490c      	ldr	r1, [pc, #48]	; (8004eac <vQueueAddToRegistry+0x50>)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	683a      	ldr	r2, [r7, #0]
 8004e7e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004e82:	4a0a      	ldr	r2, [pc, #40]	; (8004eac <vQueueAddToRegistry+0x50>)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	00db      	lsls	r3, r3, #3
 8004e88:	4413      	add	r3, r2
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004e8e:	e006      	b.n	8004e9e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	3301      	adds	r3, #1
 8004e94:	60fb      	str	r3, [r7, #12]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2b07      	cmp	r3, #7
 8004e9a:	d9e7      	bls.n	8004e6c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004e9c:	bf00      	nop
 8004e9e:	bf00      	nop
 8004ea0:	3714      	adds	r7, #20
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	200009fc 	.word	0x200009fc

08004eb0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b086      	sub	sp, #24
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004ec0:	f001 fcec 	bl	800689c <vPortEnterCritical>
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004eca:	b25b      	sxtb	r3, r3
 8004ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed0:	d103      	bne.n	8004eda <vQueueWaitForMessageRestricted+0x2a>
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ee0:	b25b      	sxtb	r3, r3
 8004ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee6:	d103      	bne.n	8004ef0 <vQueueWaitForMessageRestricted+0x40>
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ef0:	f001 fd08 	bl	8006904 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d106      	bne.n	8004f0a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	3324      	adds	r3, #36	; 0x24
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	68b9      	ldr	r1, [r7, #8]
 8004f04:	4618      	mov	r0, r3
 8004f06:	f000 fd83 	bl	8005a10 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004f0a:	6978      	ldr	r0, [r7, #20]
 8004f0c:	f7ff ff26 	bl	8004d5c <prvUnlockQueue>
	}
 8004f10:	bf00      	nop
 8004f12:	3718      	adds	r7, #24
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b08e      	sub	sp, #56	; 0x38
 8004f1c:	af04      	add	r7, sp, #16
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]
 8004f24:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d10c      	bne.n	8004f46 <xTaskCreateStatic+0x2e>
	__asm volatile
 8004f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f30:	b672      	cpsid	i
 8004f32:	f383 8811 	msr	BASEPRI, r3
 8004f36:	f3bf 8f6f 	isb	sy
 8004f3a:	f3bf 8f4f 	dsb	sy
 8004f3e:	b662      	cpsie	i
 8004f40:	623b      	str	r3, [r7, #32]
}
 8004f42:	bf00      	nop
 8004f44:	e7fe      	b.n	8004f44 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8004f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d10c      	bne.n	8004f66 <xTaskCreateStatic+0x4e>
	__asm volatile
 8004f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f50:	b672      	cpsid	i
 8004f52:	f383 8811 	msr	BASEPRI, r3
 8004f56:	f3bf 8f6f 	isb	sy
 8004f5a:	f3bf 8f4f 	dsb	sy
 8004f5e:	b662      	cpsie	i
 8004f60:	61fb      	str	r3, [r7, #28]
}
 8004f62:	bf00      	nop
 8004f64:	e7fe      	b.n	8004f64 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004f66:	23bc      	movs	r3, #188	; 0xbc
 8004f68:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	2bbc      	cmp	r3, #188	; 0xbc
 8004f6e:	d00c      	beq.n	8004f8a <xTaskCreateStatic+0x72>
	__asm volatile
 8004f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f74:	b672      	cpsid	i
 8004f76:	f383 8811 	msr	BASEPRI, r3
 8004f7a:	f3bf 8f6f 	isb	sy
 8004f7e:	f3bf 8f4f 	dsb	sy
 8004f82:	b662      	cpsie	i
 8004f84:	61bb      	str	r3, [r7, #24]
}
 8004f86:	bf00      	nop
 8004f88:	e7fe      	b.n	8004f88 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004f8a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d01e      	beq.n	8004fd0 <xTaskCreateStatic+0xb8>
 8004f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d01b      	beq.n	8004fd0 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f9a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fa0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa4:	2202      	movs	r2, #2
 8004fa6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004faa:	2300      	movs	r3, #0
 8004fac:	9303      	str	r3, [sp, #12]
 8004fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb0:	9302      	str	r3, [sp, #8]
 8004fb2:	f107 0314 	add.w	r3, r7, #20
 8004fb6:	9301      	str	r3, [sp, #4]
 8004fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fba:	9300      	str	r3, [sp, #0]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	68b9      	ldr	r1, [r7, #8]
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f000 f850 	bl	8005068 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004fc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004fca:	f000 f8f5 	bl	80051b8 <prvAddNewTaskToReadyList>
 8004fce:	e001      	b.n	8004fd4 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004fd4:	697b      	ldr	r3, [r7, #20]
	}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3728      	adds	r7, #40	; 0x28
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b08c      	sub	sp, #48	; 0x30
 8004fe2:	af04      	add	r7, sp, #16
 8004fe4:	60f8      	str	r0, [r7, #12]
 8004fe6:	60b9      	str	r1, [r7, #8]
 8004fe8:	603b      	str	r3, [r7, #0]
 8004fea:	4613      	mov	r3, r2
 8004fec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004fee:	88fb      	ldrh	r3, [r7, #6]
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f001 fd7e 	bl	8006af4 <pvPortMalloc>
 8004ff8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00e      	beq.n	800501e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005000:	20bc      	movs	r0, #188	; 0xbc
 8005002:	f001 fd77 	bl	8006af4 <pvPortMalloc>
 8005006:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d003      	beq.n	8005016 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	631a      	str	r2, [r3, #48]	; 0x30
 8005014:	e005      	b.n	8005022 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005016:	6978      	ldr	r0, [r7, #20]
 8005018:	f001 fe36 	bl	8006c88 <vPortFree>
 800501c:	e001      	b.n	8005022 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800501e:	2300      	movs	r3, #0
 8005020:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d017      	beq.n	8005058 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005030:	88fa      	ldrh	r2, [r7, #6]
 8005032:	2300      	movs	r3, #0
 8005034:	9303      	str	r3, [sp, #12]
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	9302      	str	r3, [sp, #8]
 800503a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800503c:	9301      	str	r3, [sp, #4]
 800503e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005040:	9300      	str	r3, [sp, #0]
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	68b9      	ldr	r1, [r7, #8]
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	f000 f80e 	bl	8005068 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800504c:	69f8      	ldr	r0, [r7, #28]
 800504e:	f000 f8b3 	bl	80051b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005052:	2301      	movs	r3, #1
 8005054:	61bb      	str	r3, [r7, #24]
 8005056:	e002      	b.n	800505e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005058:	f04f 33ff 	mov.w	r3, #4294967295
 800505c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800505e:	69bb      	ldr	r3, [r7, #24]
	}
 8005060:	4618      	mov	r0, r3
 8005062:	3720      	adds	r7, #32
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b088      	sub	sp, #32
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
 8005074:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005078:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	461a      	mov	r2, r3
 8005080:	21a5      	movs	r1, #165	; 0xa5
 8005082:	f001 ff4f 	bl	8006f24 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005088:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800508a:	6879      	ldr	r1, [r7, #4]
 800508c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005090:	440b      	add	r3, r1
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	f023 0307 	bic.w	r3, r3, #7
 800509e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	f003 0307 	and.w	r3, r3, #7
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00c      	beq.n	80050c4 <prvInitialiseNewTask+0x5c>
	__asm volatile
 80050aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ae:	b672      	cpsid	i
 80050b0:	f383 8811 	msr	BASEPRI, r3
 80050b4:	f3bf 8f6f 	isb	sy
 80050b8:	f3bf 8f4f 	dsb	sy
 80050bc:	b662      	cpsie	i
 80050be:	617b      	str	r3, [r7, #20]
}
 80050c0:	bf00      	nop
 80050c2:	e7fe      	b.n	80050c2 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d01f      	beq.n	800510a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80050ca:	2300      	movs	r3, #0
 80050cc:	61fb      	str	r3, [r7, #28]
 80050ce:	e012      	b.n	80050f6 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80050d0:	68ba      	ldr	r2, [r7, #8]
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	4413      	add	r3, r2
 80050d6:	7819      	ldrb	r1, [r3, #0]
 80050d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	4413      	add	r3, r2
 80050de:	3334      	adds	r3, #52	; 0x34
 80050e0:	460a      	mov	r2, r1
 80050e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	4413      	add	r3, r2
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d006      	beq.n	80050fe <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	3301      	adds	r3, #1
 80050f4:	61fb      	str	r3, [r7, #28]
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	2b0f      	cmp	r3, #15
 80050fa:	d9e9      	bls.n	80050d0 <prvInitialiseNewTask+0x68>
 80050fc:	e000      	b.n	8005100 <prvInitialiseNewTask+0x98>
			{
				break;
 80050fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005102:	2200      	movs	r2, #0
 8005104:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005108:	e003      	b.n	8005112 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800510a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510c:	2200      	movs	r2, #0
 800510e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005114:	2b37      	cmp	r3, #55	; 0x37
 8005116:	d901      	bls.n	800511c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005118:	2337      	movs	r3, #55	; 0x37
 800511a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800511c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005120:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005124:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005126:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512a:	2200      	movs	r2, #0
 800512c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800512e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005130:	3304      	adds	r3, #4
 8005132:	4618      	mov	r0, r3
 8005134:	f7ff f952 	bl	80043dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513a:	3318      	adds	r3, #24
 800513c:	4618      	mov	r0, r3
 800513e:	f7ff f94d 	bl	80043dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005144:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005146:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800514e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005150:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005156:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515a:	2200      	movs	r2, #0
 800515c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005162:	2200      	movs	r2, #0
 8005164:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516a:	3354      	adds	r3, #84	; 0x54
 800516c:	2260      	movs	r2, #96	; 0x60
 800516e:	2100      	movs	r1, #0
 8005170:	4618      	mov	r0, r3
 8005172:	f001 fed7 	bl	8006f24 <memset>
 8005176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005178:	4a0c      	ldr	r2, [pc, #48]	; (80051ac <prvInitialiseNewTask+0x144>)
 800517a:	659a      	str	r2, [r3, #88]	; 0x58
 800517c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517e:	4a0c      	ldr	r2, [pc, #48]	; (80051b0 <prvInitialiseNewTask+0x148>)
 8005180:	65da      	str	r2, [r3, #92]	; 0x5c
 8005182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005184:	4a0b      	ldr	r2, [pc, #44]	; (80051b4 <prvInitialiseNewTask+0x14c>)
 8005186:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005188:	683a      	ldr	r2, [r7, #0]
 800518a:	68f9      	ldr	r1, [r7, #12]
 800518c:	69b8      	ldr	r0, [r7, #24]
 800518e:	f001 fa77 	bl	8006680 <pxPortInitialiseStack>
 8005192:	4602      	mov	r2, r0
 8005194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005196:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800519a:	2b00      	cmp	r3, #0
 800519c:	d002      	beq.n	80051a4 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800519e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051a2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051a4:	bf00      	nop
 80051a6:	3720      	adds	r7, #32
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}
 80051ac:	08007188 	.word	0x08007188
 80051b0:	080071a8 	.word	0x080071a8
 80051b4:	08007168 	.word	0x08007168

080051b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80051c0:	f001 fb6c 	bl	800689c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80051c4:	4b2d      	ldr	r3, [pc, #180]	; (800527c <prvAddNewTaskToReadyList+0xc4>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	3301      	adds	r3, #1
 80051ca:	4a2c      	ldr	r2, [pc, #176]	; (800527c <prvAddNewTaskToReadyList+0xc4>)
 80051cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80051ce:	4b2c      	ldr	r3, [pc, #176]	; (8005280 <prvAddNewTaskToReadyList+0xc8>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d109      	bne.n	80051ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80051d6:	4a2a      	ldr	r2, [pc, #168]	; (8005280 <prvAddNewTaskToReadyList+0xc8>)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80051dc:	4b27      	ldr	r3, [pc, #156]	; (800527c <prvAddNewTaskToReadyList+0xc4>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d110      	bne.n	8005206 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80051e4:	f000 fd48 	bl	8005c78 <prvInitialiseTaskLists>
 80051e8:	e00d      	b.n	8005206 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80051ea:	4b26      	ldr	r3, [pc, #152]	; (8005284 <prvAddNewTaskToReadyList+0xcc>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d109      	bne.n	8005206 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80051f2:	4b23      	ldr	r3, [pc, #140]	; (8005280 <prvAddNewTaskToReadyList+0xc8>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d802      	bhi.n	8005206 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005200:	4a1f      	ldr	r2, [pc, #124]	; (8005280 <prvAddNewTaskToReadyList+0xc8>)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005206:	4b20      	ldr	r3, [pc, #128]	; (8005288 <prvAddNewTaskToReadyList+0xd0>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	3301      	adds	r3, #1
 800520c:	4a1e      	ldr	r2, [pc, #120]	; (8005288 <prvAddNewTaskToReadyList+0xd0>)
 800520e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005210:	4b1d      	ldr	r3, [pc, #116]	; (8005288 <prvAddNewTaskToReadyList+0xd0>)
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800521c:	4b1b      	ldr	r3, [pc, #108]	; (800528c <prvAddNewTaskToReadyList+0xd4>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	429a      	cmp	r2, r3
 8005222:	d903      	bls.n	800522c <prvAddNewTaskToReadyList+0x74>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005228:	4a18      	ldr	r2, [pc, #96]	; (800528c <prvAddNewTaskToReadyList+0xd4>)
 800522a:	6013      	str	r3, [r2, #0]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005230:	4613      	mov	r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4413      	add	r3, r2
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	4a15      	ldr	r2, [pc, #84]	; (8005290 <prvAddNewTaskToReadyList+0xd8>)
 800523a:	441a      	add	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	3304      	adds	r3, #4
 8005240:	4619      	mov	r1, r3
 8005242:	4610      	mov	r0, r2
 8005244:	f7ff f8d7 	bl	80043f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005248:	f001 fb5c 	bl	8006904 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800524c:	4b0d      	ldr	r3, [pc, #52]	; (8005284 <prvAddNewTaskToReadyList+0xcc>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00e      	beq.n	8005272 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005254:	4b0a      	ldr	r3, [pc, #40]	; (8005280 <prvAddNewTaskToReadyList+0xc8>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525e:	429a      	cmp	r2, r3
 8005260:	d207      	bcs.n	8005272 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005262:	4b0c      	ldr	r3, [pc, #48]	; (8005294 <prvAddNewTaskToReadyList+0xdc>)
 8005264:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005268:	601a      	str	r2, [r3, #0]
 800526a:	f3bf 8f4f 	dsb	sy
 800526e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005272:	bf00      	nop
 8005274:	3708      	adds	r7, #8
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	20000f10 	.word	0x20000f10
 8005280:	20000a3c 	.word	0x20000a3c
 8005284:	20000f1c 	.word	0x20000f1c
 8005288:	20000f2c 	.word	0x20000f2c
 800528c:	20000f18 	.word	0x20000f18
 8005290:	20000a40 	.word	0x20000a40
 8005294:	e000ed04 	.word	0xe000ed04

08005298 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80052a0:	2300      	movs	r3, #0
 80052a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d019      	beq.n	80052de <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80052aa:	4b14      	ldr	r3, [pc, #80]	; (80052fc <vTaskDelay+0x64>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00c      	beq.n	80052cc <vTaskDelay+0x34>
	__asm volatile
 80052b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b6:	b672      	cpsid	i
 80052b8:	f383 8811 	msr	BASEPRI, r3
 80052bc:	f3bf 8f6f 	isb	sy
 80052c0:	f3bf 8f4f 	dsb	sy
 80052c4:	b662      	cpsie	i
 80052c6:	60bb      	str	r3, [r7, #8]
}
 80052c8:	bf00      	nop
 80052ca:	e7fe      	b.n	80052ca <vTaskDelay+0x32>
			vTaskSuspendAll();
 80052cc:	f000 f99a 	bl	8005604 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80052d0:	2100      	movs	r1, #0
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 fe24 	bl	8005f20 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80052d8:	f000 f9a2 	bl	8005620 <xTaskResumeAll>
 80052dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d107      	bne.n	80052f4 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80052e4:	4b06      	ldr	r3, [pc, #24]	; (8005300 <vTaskDelay+0x68>)
 80052e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052ea:	601a      	str	r2, [r3, #0]
 80052ec:	f3bf 8f4f 	dsb	sy
 80052f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80052f4:	bf00      	nop
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	20000f38 	.word	0x20000f38
 8005300:	e000ed04 	.word	0xe000ed04

08005304 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800530c:	f001 fac6 	bl	800689c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d102      	bne.n	800531c <vTaskSuspend+0x18>
 8005316:	4b31      	ldr	r3, [pc, #196]	; (80053dc <vTaskSuspend+0xd8>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	e000      	b.n	800531e <vTaskSuspend+0x1a>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	3304      	adds	r3, #4
 8005324:	4618      	mov	r0, r3
 8005326:	f7ff f8c3 	bl	80044b0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532e:	2b00      	cmp	r3, #0
 8005330:	d004      	beq.n	800533c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	3318      	adds	r3, #24
 8005336:	4618      	mov	r0, r3
 8005338:	f7ff f8ba 	bl	80044b0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	3304      	adds	r3, #4
 8005340:	4619      	mov	r1, r3
 8005342:	4827      	ldr	r0, [pc, #156]	; (80053e0 <vTaskSuspend+0xdc>)
 8005344:	f7ff f857 	bl	80043f6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800534e:	b2db      	uxtb	r3, r3
 8005350:	2b01      	cmp	r3, #1
 8005352:	d103      	bne.n	800535c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800535c:	f001 fad2 	bl	8006904 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8005360:	4b20      	ldr	r3, [pc, #128]	; (80053e4 <vTaskSuspend+0xe0>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d005      	beq.n	8005374 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8005368:	f001 fa98 	bl	800689c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800536c:	f000 fd28 	bl	8005dc0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8005370:	f001 fac8 	bl	8006904 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8005374:	4b19      	ldr	r3, [pc, #100]	; (80053dc <vTaskSuspend+0xd8>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	429a      	cmp	r2, r3
 800537c:	d129      	bne.n	80053d2 <vTaskSuspend+0xce>
		{
			if( xSchedulerRunning != pdFALSE )
 800537e:	4b19      	ldr	r3, [pc, #100]	; (80053e4 <vTaskSuspend+0xe0>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d019      	beq.n	80053ba <vTaskSuspend+0xb6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8005386:	4b18      	ldr	r3, [pc, #96]	; (80053e8 <vTaskSuspend+0xe4>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00c      	beq.n	80053a8 <vTaskSuspend+0xa4>
	__asm volatile
 800538e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005392:	b672      	cpsid	i
 8005394:	f383 8811 	msr	BASEPRI, r3
 8005398:	f3bf 8f6f 	isb	sy
 800539c:	f3bf 8f4f 	dsb	sy
 80053a0:	b662      	cpsie	i
 80053a2:	60bb      	str	r3, [r7, #8]
}
 80053a4:	bf00      	nop
 80053a6:	e7fe      	b.n	80053a6 <vTaskSuspend+0xa2>
				portYIELD_WITHIN_API();
 80053a8:	4b10      	ldr	r3, [pc, #64]	; (80053ec <vTaskSuspend+0xe8>)
 80053aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053ae:	601a      	str	r2, [r3, #0]
 80053b0:	f3bf 8f4f 	dsb	sy
 80053b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80053b8:	e00b      	b.n	80053d2 <vTaskSuspend+0xce>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80053ba:	4b09      	ldr	r3, [pc, #36]	; (80053e0 <vTaskSuspend+0xdc>)
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	4b0c      	ldr	r3, [pc, #48]	; (80053f0 <vTaskSuspend+0xec>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d103      	bne.n	80053ce <vTaskSuspend+0xca>
					pxCurrentTCB = NULL;
 80053c6:	4b05      	ldr	r3, [pc, #20]	; (80053dc <vTaskSuspend+0xd8>)
 80053c8:	2200      	movs	r2, #0
 80053ca:	601a      	str	r2, [r3, #0]
	}
 80053cc:	e001      	b.n	80053d2 <vTaskSuspend+0xce>
					vTaskSwitchContext();
 80053ce:	f000 fa93 	bl	80058f8 <vTaskSwitchContext>
	}
 80053d2:	bf00      	nop
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	20000a3c 	.word	0x20000a3c
 80053e0:	20000efc 	.word	0x20000efc
 80053e4:	20000f1c 	.word	0x20000f1c
 80053e8:	20000f38 	.word	0x20000f38
 80053ec:	e000ed04 	.word	0xe000ed04
 80053f0:	20000f10 	.word	0x20000f10

080053f4 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80053f4:	b480      	push	{r7}
 80053f6:	b087      	sub	sp, #28
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80053fc:	2300      	movs	r3, #0
 80053fe:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10c      	bne.n	8005424 <prvTaskIsTaskSuspended+0x30>
	__asm volatile
 800540a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540e:	b672      	cpsid	i
 8005410:	f383 8811 	msr	BASEPRI, r3
 8005414:	f3bf 8f6f 	isb	sy
 8005418:	f3bf 8f4f 	dsb	sy
 800541c:	b662      	cpsie	i
 800541e:	60fb      	str	r3, [r7, #12]
}
 8005420:	bf00      	nop
 8005422:	e7fe      	b.n	8005422 <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	695b      	ldr	r3, [r3, #20]
 8005428:	4a0a      	ldr	r2, [pc, #40]	; (8005454 <prvTaskIsTaskSuspended+0x60>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d10a      	bne.n	8005444 <prvTaskIsTaskSuspended+0x50>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005432:	4a09      	ldr	r2, [pc, #36]	; (8005458 <prvTaskIsTaskSuspended+0x64>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d005      	beq.n	8005444 <prvTaskIsTaskSuspended+0x50>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543c:	2b00      	cmp	r3, #0
 800543e:	d101      	bne.n	8005444 <prvTaskIsTaskSuspended+0x50>
				{
					xReturn = pdTRUE;
 8005440:	2301      	movs	r3, #1
 8005442:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005444:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8005446:	4618      	mov	r0, r3
 8005448:	371c      	adds	r7, #28
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	20000efc 	.word	0x20000efc
 8005458:	20000ed0 	.word	0x20000ed0

0800545c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d10c      	bne.n	8005488 <vTaskResume+0x2c>
	__asm volatile
 800546e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005472:	b672      	cpsid	i
 8005474:	f383 8811 	msr	BASEPRI, r3
 8005478:	f3bf 8f6f 	isb	sy
 800547c:	f3bf 8f4f 	dsb	sy
 8005480:	b662      	cpsie	i
 8005482:	60bb      	str	r3, [r7, #8]
}
 8005484:	bf00      	nop
 8005486:	e7fe      	b.n	8005486 <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8005488:	4b20      	ldr	r3, [pc, #128]	; (800550c <vTaskResume+0xb0>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	429a      	cmp	r2, r3
 8005490:	d038      	beq.n	8005504 <vTaskResume+0xa8>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d035      	beq.n	8005504 <vTaskResume+0xa8>
		{
			taskENTER_CRITICAL();
 8005498:	f001 fa00 	bl	800689c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800549c:	68f8      	ldr	r0, [r7, #12]
 800549e:	f7ff ffa9 	bl	80053f4 <prvTaskIsTaskSuspended>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d02b      	beq.n	8005500 <vTaskResume+0xa4>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	3304      	adds	r3, #4
 80054ac:	4618      	mov	r0, r3
 80054ae:	f7fe ffff 	bl	80044b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054b6:	4b16      	ldr	r3, [pc, #88]	; (8005510 <vTaskResume+0xb4>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d903      	bls.n	80054c6 <vTaskResume+0x6a>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c2:	4a13      	ldr	r2, [pc, #76]	; (8005510 <vTaskResume+0xb4>)
 80054c4:	6013      	str	r3, [r2, #0]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ca:	4613      	mov	r3, r2
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	4413      	add	r3, r2
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	4a10      	ldr	r2, [pc, #64]	; (8005514 <vTaskResume+0xb8>)
 80054d4:	441a      	add	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	3304      	adds	r3, #4
 80054da:	4619      	mov	r1, r3
 80054dc:	4610      	mov	r0, r2
 80054de:	f7fe ff8a 	bl	80043f6 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054e6:	4b09      	ldr	r3, [pc, #36]	; (800550c <vTaskResume+0xb0>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d307      	bcc.n	8005500 <vTaskResume+0xa4>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80054f0:	4b09      	ldr	r3, [pc, #36]	; (8005518 <vTaskResume+0xbc>)
 80054f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054f6:	601a      	str	r2, [r3, #0]
 80054f8:	f3bf 8f4f 	dsb	sy
 80054fc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8005500:	f001 fa00 	bl	8006904 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005504:	bf00      	nop
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	20000a3c 	.word	0x20000a3c
 8005510:	20000f18 	.word	0x20000f18
 8005514:	20000a40 	.word	0x20000a40
 8005518:	e000ed04 	.word	0xe000ed04

0800551c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b08a      	sub	sp, #40	; 0x28
 8005520:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005522:	2300      	movs	r3, #0
 8005524:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005526:	2300      	movs	r3, #0
 8005528:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800552a:	463a      	mov	r2, r7
 800552c:	1d39      	adds	r1, r7, #4
 800552e:	f107 0308 	add.w	r3, r7, #8
 8005532:	4618      	mov	r0, r3
 8005534:	f7fe fefe 	bl	8004334 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005538:	6839      	ldr	r1, [r7, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	68ba      	ldr	r2, [r7, #8]
 800553e:	9202      	str	r2, [sp, #8]
 8005540:	9301      	str	r3, [sp, #4]
 8005542:	2300      	movs	r3, #0
 8005544:	9300      	str	r3, [sp, #0]
 8005546:	2300      	movs	r3, #0
 8005548:	460a      	mov	r2, r1
 800554a:	4926      	ldr	r1, [pc, #152]	; (80055e4 <vTaskStartScheduler+0xc8>)
 800554c:	4826      	ldr	r0, [pc, #152]	; (80055e8 <vTaskStartScheduler+0xcc>)
 800554e:	f7ff fce3 	bl	8004f18 <xTaskCreateStatic>
 8005552:	4603      	mov	r3, r0
 8005554:	4a25      	ldr	r2, [pc, #148]	; (80055ec <vTaskStartScheduler+0xd0>)
 8005556:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005558:	4b24      	ldr	r3, [pc, #144]	; (80055ec <vTaskStartScheduler+0xd0>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d002      	beq.n	8005566 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005560:	2301      	movs	r3, #1
 8005562:	617b      	str	r3, [r7, #20]
 8005564:	e001      	b.n	800556a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005566:	2300      	movs	r3, #0
 8005568:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d102      	bne.n	8005576 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005570:	f000 fd2a 	bl	8005fc8 <xTimerCreateTimerTask>
 8005574:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d11d      	bne.n	80055b8 <vTaskStartScheduler+0x9c>
	__asm volatile
 800557c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005580:	b672      	cpsid	i
 8005582:	f383 8811 	msr	BASEPRI, r3
 8005586:	f3bf 8f6f 	isb	sy
 800558a:	f3bf 8f4f 	dsb	sy
 800558e:	b662      	cpsie	i
 8005590:	613b      	str	r3, [r7, #16]
}
 8005592:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005594:	4b16      	ldr	r3, [pc, #88]	; (80055f0 <vTaskStartScheduler+0xd4>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	3354      	adds	r3, #84	; 0x54
 800559a:	4a16      	ldr	r2, [pc, #88]	; (80055f4 <vTaskStartScheduler+0xd8>)
 800559c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800559e:	4b16      	ldr	r3, [pc, #88]	; (80055f8 <vTaskStartScheduler+0xdc>)
 80055a0:	f04f 32ff 	mov.w	r2, #4294967295
 80055a4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80055a6:	4b15      	ldr	r3, [pc, #84]	; (80055fc <vTaskStartScheduler+0xe0>)
 80055a8:	2201      	movs	r2, #1
 80055aa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80055ac:	4b14      	ldr	r3, [pc, #80]	; (8005600 <vTaskStartScheduler+0xe4>)
 80055ae:	2200      	movs	r2, #0
 80055b0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80055b2:	f001 f8f5 	bl	80067a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80055b6:	e010      	b.n	80055da <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055be:	d10c      	bne.n	80055da <vTaskStartScheduler+0xbe>
	__asm volatile
 80055c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c4:	b672      	cpsid	i
 80055c6:	f383 8811 	msr	BASEPRI, r3
 80055ca:	f3bf 8f6f 	isb	sy
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	b662      	cpsie	i
 80055d4:	60fb      	str	r3, [r7, #12]
}
 80055d6:	bf00      	nop
 80055d8:	e7fe      	b.n	80055d8 <vTaskStartScheduler+0xbc>
}
 80055da:	bf00      	nop
 80055dc:	3718      	adds	r7, #24
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	080070f0 	.word	0x080070f0
 80055e8:	08005c49 	.word	0x08005c49
 80055ec:	20000f34 	.word	0x20000f34
 80055f0:	20000a3c 	.word	0x20000a3c
 80055f4:	20000010 	.word	0x20000010
 80055f8:	20000f30 	.word	0x20000f30
 80055fc:	20000f1c 	.word	0x20000f1c
 8005600:	20000f14 	.word	0x20000f14

08005604 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005604:	b480      	push	{r7}
 8005606:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005608:	4b04      	ldr	r3, [pc, #16]	; (800561c <vTaskSuspendAll+0x18>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	3301      	adds	r3, #1
 800560e:	4a03      	ldr	r2, [pc, #12]	; (800561c <vTaskSuspendAll+0x18>)
 8005610:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005612:	bf00      	nop
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr
 800561c:	20000f38 	.word	0x20000f38

08005620 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005626:	2300      	movs	r3, #0
 8005628:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800562a:	2300      	movs	r3, #0
 800562c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800562e:	4b43      	ldr	r3, [pc, #268]	; (800573c <xTaskResumeAll+0x11c>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d10c      	bne.n	8005650 <xTaskResumeAll+0x30>
	__asm volatile
 8005636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563a:	b672      	cpsid	i
 800563c:	f383 8811 	msr	BASEPRI, r3
 8005640:	f3bf 8f6f 	isb	sy
 8005644:	f3bf 8f4f 	dsb	sy
 8005648:	b662      	cpsie	i
 800564a:	603b      	str	r3, [r7, #0]
}
 800564c:	bf00      	nop
 800564e:	e7fe      	b.n	800564e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005650:	f001 f924 	bl	800689c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005654:	4b39      	ldr	r3, [pc, #228]	; (800573c <xTaskResumeAll+0x11c>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	3b01      	subs	r3, #1
 800565a:	4a38      	ldr	r2, [pc, #224]	; (800573c <xTaskResumeAll+0x11c>)
 800565c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800565e:	4b37      	ldr	r3, [pc, #220]	; (800573c <xTaskResumeAll+0x11c>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d162      	bne.n	800572c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005666:	4b36      	ldr	r3, [pc, #216]	; (8005740 <xTaskResumeAll+0x120>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d05e      	beq.n	800572c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800566e:	e02f      	b.n	80056d0 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005670:	4b34      	ldr	r3, [pc, #208]	; (8005744 <xTaskResumeAll+0x124>)
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	3318      	adds	r3, #24
 800567c:	4618      	mov	r0, r3
 800567e:	f7fe ff17 	bl	80044b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	3304      	adds	r3, #4
 8005686:	4618      	mov	r0, r3
 8005688:	f7fe ff12 	bl	80044b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005690:	4b2d      	ldr	r3, [pc, #180]	; (8005748 <xTaskResumeAll+0x128>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	429a      	cmp	r2, r3
 8005696:	d903      	bls.n	80056a0 <xTaskResumeAll+0x80>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800569c:	4a2a      	ldr	r2, [pc, #168]	; (8005748 <xTaskResumeAll+0x128>)
 800569e:	6013      	str	r3, [r2, #0]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a4:	4613      	mov	r3, r2
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	4413      	add	r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	4a27      	ldr	r2, [pc, #156]	; (800574c <xTaskResumeAll+0x12c>)
 80056ae:	441a      	add	r2, r3
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	3304      	adds	r3, #4
 80056b4:	4619      	mov	r1, r3
 80056b6:	4610      	mov	r0, r2
 80056b8:	f7fe fe9d 	bl	80043f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056c0:	4b23      	ldr	r3, [pc, #140]	; (8005750 <xTaskResumeAll+0x130>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d302      	bcc.n	80056d0 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80056ca:	4b22      	ldr	r3, [pc, #136]	; (8005754 <xTaskResumeAll+0x134>)
 80056cc:	2201      	movs	r2, #1
 80056ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056d0:	4b1c      	ldr	r3, [pc, #112]	; (8005744 <xTaskResumeAll+0x124>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d1cb      	bne.n	8005670 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d001      	beq.n	80056e2 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80056de:	f000 fb6f 	bl	8005dc0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80056e2:	4b1d      	ldr	r3, [pc, #116]	; (8005758 <xTaskResumeAll+0x138>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d010      	beq.n	8005710 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80056ee:	f000 f847 	bl	8005780 <xTaskIncrementTick>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d002      	beq.n	80056fe <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80056f8:	4b16      	ldr	r3, [pc, #88]	; (8005754 <xTaskResumeAll+0x134>)
 80056fa:	2201      	movs	r2, #1
 80056fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	3b01      	subs	r3, #1
 8005702:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1f1      	bne.n	80056ee <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800570a:	4b13      	ldr	r3, [pc, #76]	; (8005758 <xTaskResumeAll+0x138>)
 800570c:	2200      	movs	r2, #0
 800570e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005710:	4b10      	ldr	r3, [pc, #64]	; (8005754 <xTaskResumeAll+0x134>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d009      	beq.n	800572c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005718:	2301      	movs	r3, #1
 800571a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800571c:	4b0f      	ldr	r3, [pc, #60]	; (800575c <xTaskResumeAll+0x13c>)
 800571e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005722:	601a      	str	r2, [r3, #0]
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800572c:	f001 f8ea 	bl	8006904 <vPortExitCritical>

	return xAlreadyYielded;
 8005730:	68bb      	ldr	r3, [r7, #8]
}
 8005732:	4618      	mov	r0, r3
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	20000f38 	.word	0x20000f38
 8005740:	20000f10 	.word	0x20000f10
 8005744:	20000ed0 	.word	0x20000ed0
 8005748:	20000f18 	.word	0x20000f18
 800574c:	20000a40 	.word	0x20000a40
 8005750:	20000a3c 	.word	0x20000a3c
 8005754:	20000f24 	.word	0x20000f24
 8005758:	20000f20 	.word	0x20000f20
 800575c:	e000ed04 	.word	0xe000ed04

08005760 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005766:	4b05      	ldr	r3, [pc, #20]	; (800577c <xTaskGetTickCount+0x1c>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800576c:	687b      	ldr	r3, [r7, #4]
}
 800576e:	4618      	mov	r0, r3
 8005770:	370c      	adds	r7, #12
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop
 800577c:	20000f14 	.word	0x20000f14

08005780 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b086      	sub	sp, #24
 8005784:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005786:	2300      	movs	r3, #0
 8005788:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800578a:	4b50      	ldr	r3, [pc, #320]	; (80058cc <xTaskIncrementTick+0x14c>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2b00      	cmp	r3, #0
 8005790:	f040 808b 	bne.w	80058aa <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005794:	4b4e      	ldr	r3, [pc, #312]	; (80058d0 <xTaskIncrementTick+0x150>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	3301      	adds	r3, #1
 800579a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800579c:	4a4c      	ldr	r2, [pc, #304]	; (80058d0 <xTaskIncrementTick+0x150>)
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d122      	bne.n	80057ee <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80057a8:	4b4a      	ldr	r3, [pc, #296]	; (80058d4 <xTaskIncrementTick+0x154>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00c      	beq.n	80057cc <xTaskIncrementTick+0x4c>
	__asm volatile
 80057b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b6:	b672      	cpsid	i
 80057b8:	f383 8811 	msr	BASEPRI, r3
 80057bc:	f3bf 8f6f 	isb	sy
 80057c0:	f3bf 8f4f 	dsb	sy
 80057c4:	b662      	cpsie	i
 80057c6:	603b      	str	r3, [r7, #0]
}
 80057c8:	bf00      	nop
 80057ca:	e7fe      	b.n	80057ca <xTaskIncrementTick+0x4a>
 80057cc:	4b41      	ldr	r3, [pc, #260]	; (80058d4 <xTaskIncrementTick+0x154>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	60fb      	str	r3, [r7, #12]
 80057d2:	4b41      	ldr	r3, [pc, #260]	; (80058d8 <xTaskIncrementTick+0x158>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a3f      	ldr	r2, [pc, #252]	; (80058d4 <xTaskIncrementTick+0x154>)
 80057d8:	6013      	str	r3, [r2, #0]
 80057da:	4a3f      	ldr	r2, [pc, #252]	; (80058d8 <xTaskIncrementTick+0x158>)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6013      	str	r3, [r2, #0]
 80057e0:	4b3e      	ldr	r3, [pc, #248]	; (80058dc <xTaskIncrementTick+0x15c>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	3301      	adds	r3, #1
 80057e6:	4a3d      	ldr	r2, [pc, #244]	; (80058dc <xTaskIncrementTick+0x15c>)
 80057e8:	6013      	str	r3, [r2, #0]
 80057ea:	f000 fae9 	bl	8005dc0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80057ee:	4b3c      	ldr	r3, [pc, #240]	; (80058e0 <xTaskIncrementTick+0x160>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d349      	bcc.n	800588c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057f8:	4b36      	ldr	r3, [pc, #216]	; (80058d4 <xTaskIncrementTick+0x154>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d104      	bne.n	800580c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005802:	4b37      	ldr	r3, [pc, #220]	; (80058e0 <xTaskIncrementTick+0x160>)
 8005804:	f04f 32ff 	mov.w	r2, #4294967295
 8005808:	601a      	str	r2, [r3, #0]
					break;
 800580a:	e03f      	b.n	800588c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800580c:	4b31      	ldr	r3, [pc, #196]	; (80058d4 <xTaskIncrementTick+0x154>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	429a      	cmp	r2, r3
 8005822:	d203      	bcs.n	800582c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005824:	4a2e      	ldr	r2, [pc, #184]	; (80058e0 <xTaskIncrementTick+0x160>)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800582a:	e02f      	b.n	800588c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	3304      	adds	r3, #4
 8005830:	4618      	mov	r0, r3
 8005832:	f7fe fe3d 	bl	80044b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800583a:	2b00      	cmp	r3, #0
 800583c:	d004      	beq.n	8005848 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	3318      	adds	r3, #24
 8005842:	4618      	mov	r0, r3
 8005844:	f7fe fe34 	bl	80044b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800584c:	4b25      	ldr	r3, [pc, #148]	; (80058e4 <xTaskIncrementTick+0x164>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	429a      	cmp	r2, r3
 8005852:	d903      	bls.n	800585c <xTaskIncrementTick+0xdc>
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005858:	4a22      	ldr	r2, [pc, #136]	; (80058e4 <xTaskIncrementTick+0x164>)
 800585a:	6013      	str	r3, [r2, #0]
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005860:	4613      	mov	r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4413      	add	r3, r2
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	4a1f      	ldr	r2, [pc, #124]	; (80058e8 <xTaskIncrementTick+0x168>)
 800586a:	441a      	add	r2, r3
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	3304      	adds	r3, #4
 8005870:	4619      	mov	r1, r3
 8005872:	4610      	mov	r0, r2
 8005874:	f7fe fdbf 	bl	80043f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800587c:	4b1b      	ldr	r3, [pc, #108]	; (80058ec <xTaskIncrementTick+0x16c>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005882:	429a      	cmp	r2, r3
 8005884:	d3b8      	bcc.n	80057f8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8005886:	2301      	movs	r3, #1
 8005888:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800588a:	e7b5      	b.n	80057f8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800588c:	4b17      	ldr	r3, [pc, #92]	; (80058ec <xTaskIncrementTick+0x16c>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005892:	4915      	ldr	r1, [pc, #84]	; (80058e8 <xTaskIncrementTick+0x168>)
 8005894:	4613      	mov	r3, r2
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	4413      	add	r3, r2
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	440b      	add	r3, r1
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d907      	bls.n	80058b4 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80058a4:	2301      	movs	r3, #1
 80058a6:	617b      	str	r3, [r7, #20]
 80058a8:	e004      	b.n	80058b4 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80058aa:	4b11      	ldr	r3, [pc, #68]	; (80058f0 <xTaskIncrementTick+0x170>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	3301      	adds	r3, #1
 80058b0:	4a0f      	ldr	r2, [pc, #60]	; (80058f0 <xTaskIncrementTick+0x170>)
 80058b2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80058b4:	4b0f      	ldr	r3, [pc, #60]	; (80058f4 <xTaskIncrementTick+0x174>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d001      	beq.n	80058c0 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80058bc:	2301      	movs	r3, #1
 80058be:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80058c0:	697b      	ldr	r3, [r7, #20]
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3718      	adds	r7, #24
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	20000f38 	.word	0x20000f38
 80058d0:	20000f14 	.word	0x20000f14
 80058d4:	20000ec8 	.word	0x20000ec8
 80058d8:	20000ecc 	.word	0x20000ecc
 80058dc:	20000f28 	.word	0x20000f28
 80058e0:	20000f30 	.word	0x20000f30
 80058e4:	20000f18 	.word	0x20000f18
 80058e8:	20000a40 	.word	0x20000a40
 80058ec:	20000a3c 	.word	0x20000a3c
 80058f0:	20000f20 	.word	0x20000f20
 80058f4:	20000f24 	.word	0x20000f24

080058f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80058fe:	4b2b      	ldr	r3, [pc, #172]	; (80059ac <vTaskSwitchContext+0xb4>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d003      	beq.n	800590e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005906:	4b2a      	ldr	r3, [pc, #168]	; (80059b0 <vTaskSwitchContext+0xb8>)
 8005908:	2201      	movs	r2, #1
 800590a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800590c:	e048      	b.n	80059a0 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800590e:	4b28      	ldr	r3, [pc, #160]	; (80059b0 <vTaskSwitchContext+0xb8>)
 8005910:	2200      	movs	r2, #0
 8005912:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005914:	4b27      	ldr	r3, [pc, #156]	; (80059b4 <vTaskSwitchContext+0xbc>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	60fb      	str	r3, [r7, #12]
 800591a:	e012      	b.n	8005942 <vTaskSwitchContext+0x4a>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d10c      	bne.n	800593c <vTaskSwitchContext+0x44>
	__asm volatile
 8005922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005926:	b672      	cpsid	i
 8005928:	f383 8811 	msr	BASEPRI, r3
 800592c:	f3bf 8f6f 	isb	sy
 8005930:	f3bf 8f4f 	dsb	sy
 8005934:	b662      	cpsie	i
 8005936:	607b      	str	r3, [r7, #4]
}
 8005938:	bf00      	nop
 800593a:	e7fe      	b.n	800593a <vTaskSwitchContext+0x42>
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	3b01      	subs	r3, #1
 8005940:	60fb      	str	r3, [r7, #12]
 8005942:	491d      	ldr	r1, [pc, #116]	; (80059b8 <vTaskSwitchContext+0xc0>)
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	4613      	mov	r3, r2
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	4413      	add	r3, r2
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	440b      	add	r3, r1
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d0e2      	beq.n	800591c <vTaskSwitchContext+0x24>
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	4613      	mov	r3, r2
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4413      	add	r3, r2
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	4a15      	ldr	r2, [pc, #84]	; (80059b8 <vTaskSwitchContext+0xc0>)
 8005962:	4413      	add	r3, r2
 8005964:	60bb      	str	r3, [r7, #8]
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	605a      	str	r2, [r3, #4]
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	685a      	ldr	r2, [r3, #4]
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	3308      	adds	r3, #8
 8005978:	429a      	cmp	r2, r3
 800597a:	d104      	bne.n	8005986 <vTaskSwitchContext+0x8e>
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	685a      	ldr	r2, [r3, #4]
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	605a      	str	r2, [r3, #4]
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	4a0b      	ldr	r2, [pc, #44]	; (80059bc <vTaskSwitchContext+0xc4>)
 800598e:	6013      	str	r3, [r2, #0]
 8005990:	4a08      	ldr	r2, [pc, #32]	; (80059b4 <vTaskSwitchContext+0xbc>)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005996:	4b09      	ldr	r3, [pc, #36]	; (80059bc <vTaskSwitchContext+0xc4>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	3354      	adds	r3, #84	; 0x54
 800599c:	4a08      	ldr	r2, [pc, #32]	; (80059c0 <vTaskSwitchContext+0xc8>)
 800599e:	6013      	str	r3, [r2, #0]
}
 80059a0:	bf00      	nop
 80059a2:	3714      	adds	r7, #20
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr
 80059ac:	20000f38 	.word	0x20000f38
 80059b0:	20000f24 	.word	0x20000f24
 80059b4:	20000f18 	.word	0x20000f18
 80059b8:	20000a40 	.word	0x20000a40
 80059bc:	20000a3c 	.word	0x20000a3c
 80059c0:	20000010 	.word	0x20000010

080059c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10c      	bne.n	80059ee <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80059d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d8:	b672      	cpsid	i
 80059da:	f383 8811 	msr	BASEPRI, r3
 80059de:	f3bf 8f6f 	isb	sy
 80059e2:	f3bf 8f4f 	dsb	sy
 80059e6:	b662      	cpsie	i
 80059e8:	60fb      	str	r3, [r7, #12]
}
 80059ea:	bf00      	nop
 80059ec:	e7fe      	b.n	80059ec <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80059ee:	4b07      	ldr	r3, [pc, #28]	; (8005a0c <vTaskPlaceOnEventList+0x48>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	3318      	adds	r3, #24
 80059f4:	4619      	mov	r1, r3
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f7fe fd21 	bl	800443e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80059fc:	2101      	movs	r1, #1
 80059fe:	6838      	ldr	r0, [r7, #0]
 8005a00:	f000 fa8e 	bl	8005f20 <prvAddCurrentTaskToDelayedList>
}
 8005a04:	bf00      	nop
 8005a06:	3710      	adds	r7, #16
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	20000a3c 	.word	0x20000a3c

08005a10 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b086      	sub	sp, #24
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d10c      	bne.n	8005a3c <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8005a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a26:	b672      	cpsid	i
 8005a28:	f383 8811 	msr	BASEPRI, r3
 8005a2c:	f3bf 8f6f 	isb	sy
 8005a30:	f3bf 8f4f 	dsb	sy
 8005a34:	b662      	cpsie	i
 8005a36:	617b      	str	r3, [r7, #20]
}
 8005a38:	bf00      	nop
 8005a3a:	e7fe      	b.n	8005a3a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a3c:	4b0a      	ldr	r3, [pc, #40]	; (8005a68 <vTaskPlaceOnEventListRestricted+0x58>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	3318      	adds	r3, #24
 8005a42:	4619      	mov	r1, r3
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	f7fe fcd6 	bl	80043f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d002      	beq.n	8005a56 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8005a50:	f04f 33ff 	mov.w	r3, #4294967295
 8005a54:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005a56:	6879      	ldr	r1, [r7, #4]
 8005a58:	68b8      	ldr	r0, [r7, #8]
 8005a5a:	f000 fa61 	bl	8005f20 <prvAddCurrentTaskToDelayedList>
	}
 8005a5e:	bf00      	nop
 8005a60:	3718      	adds	r7, #24
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	20000a3c 	.word	0x20000a3c

08005a6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b086      	sub	sp, #24
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10c      	bne.n	8005a9c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8005a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a86:	b672      	cpsid	i
 8005a88:	f383 8811 	msr	BASEPRI, r3
 8005a8c:	f3bf 8f6f 	isb	sy
 8005a90:	f3bf 8f4f 	dsb	sy
 8005a94:	b662      	cpsie	i
 8005a96:	60fb      	str	r3, [r7, #12]
}
 8005a98:	bf00      	nop
 8005a9a:	e7fe      	b.n	8005a9a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	3318      	adds	r3, #24
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7fe fd05 	bl	80044b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005aa6:	4b1e      	ldr	r3, [pc, #120]	; (8005b20 <xTaskRemoveFromEventList+0xb4>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d11d      	bne.n	8005aea <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	3304      	adds	r3, #4
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f7fe fcfc 	bl	80044b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005abc:	4b19      	ldr	r3, [pc, #100]	; (8005b24 <xTaskRemoveFromEventList+0xb8>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d903      	bls.n	8005acc <xTaskRemoveFromEventList+0x60>
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac8:	4a16      	ldr	r2, [pc, #88]	; (8005b24 <xTaskRemoveFromEventList+0xb8>)
 8005aca:	6013      	str	r3, [r2, #0]
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	4413      	add	r3, r2
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	4a13      	ldr	r2, [pc, #76]	; (8005b28 <xTaskRemoveFromEventList+0xbc>)
 8005ada:	441a      	add	r2, r3
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	3304      	adds	r3, #4
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	4610      	mov	r0, r2
 8005ae4:	f7fe fc87 	bl	80043f6 <vListInsertEnd>
 8005ae8:	e005      	b.n	8005af6 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	3318      	adds	r3, #24
 8005aee:	4619      	mov	r1, r3
 8005af0:	480e      	ldr	r0, [pc, #56]	; (8005b2c <xTaskRemoveFromEventList+0xc0>)
 8005af2:	f7fe fc80 	bl	80043f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005afa:	4b0d      	ldr	r3, [pc, #52]	; (8005b30 <xTaskRemoveFromEventList+0xc4>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d905      	bls.n	8005b10 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005b04:	2301      	movs	r3, #1
 8005b06:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005b08:	4b0a      	ldr	r3, [pc, #40]	; (8005b34 <xTaskRemoveFromEventList+0xc8>)
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	601a      	str	r2, [r3, #0]
 8005b0e:	e001      	b.n	8005b14 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8005b10:	2300      	movs	r3, #0
 8005b12:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005b14:	697b      	ldr	r3, [r7, #20]
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3718      	adds	r7, #24
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	20000f38 	.word	0x20000f38
 8005b24:	20000f18 	.word	0x20000f18
 8005b28:	20000a40 	.word	0x20000a40
 8005b2c:	20000ed0 	.word	0x20000ed0
 8005b30:	20000a3c 	.word	0x20000a3c
 8005b34:	20000f24 	.word	0x20000f24

08005b38 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005b40:	4b06      	ldr	r3, [pc, #24]	; (8005b5c <vTaskInternalSetTimeOutState+0x24>)
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005b48:	4b05      	ldr	r3, [pc, #20]	; (8005b60 <vTaskInternalSetTimeOutState+0x28>)
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	605a      	str	r2, [r3, #4]
}
 8005b50:	bf00      	nop
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr
 8005b5c:	20000f28 	.word	0x20000f28
 8005b60:	20000f14 	.word	0x20000f14

08005b64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b088      	sub	sp, #32
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d10c      	bne.n	8005b8e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8005b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b78:	b672      	cpsid	i
 8005b7a:	f383 8811 	msr	BASEPRI, r3
 8005b7e:	f3bf 8f6f 	isb	sy
 8005b82:	f3bf 8f4f 	dsb	sy
 8005b86:	b662      	cpsie	i
 8005b88:	613b      	str	r3, [r7, #16]
}
 8005b8a:	bf00      	nop
 8005b8c:	e7fe      	b.n	8005b8c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d10c      	bne.n	8005bae <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8005b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b98:	b672      	cpsid	i
 8005b9a:	f383 8811 	msr	BASEPRI, r3
 8005b9e:	f3bf 8f6f 	isb	sy
 8005ba2:	f3bf 8f4f 	dsb	sy
 8005ba6:	b662      	cpsie	i
 8005ba8:	60fb      	str	r3, [r7, #12]
}
 8005baa:	bf00      	nop
 8005bac:	e7fe      	b.n	8005bac <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8005bae:	f000 fe75 	bl	800689c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005bb2:	4b1d      	ldr	r3, [pc, #116]	; (8005c28 <xTaskCheckForTimeOut+0xc4>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	69ba      	ldr	r2, [r7, #24]
 8005bbe:	1ad3      	subs	r3, r2, r3
 8005bc0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bca:	d102      	bne.n	8005bd2 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	61fb      	str	r3, [r7, #28]
 8005bd0:	e023      	b.n	8005c1a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	4b15      	ldr	r3, [pc, #84]	; (8005c2c <xTaskCheckForTimeOut+0xc8>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d007      	beq.n	8005bee <xTaskCheckForTimeOut+0x8a>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	69ba      	ldr	r2, [r7, #24]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d302      	bcc.n	8005bee <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005be8:	2301      	movs	r3, #1
 8005bea:	61fb      	str	r3, [r7, #28]
 8005bec:	e015      	b.n	8005c1a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d20b      	bcs.n	8005c10 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	1ad2      	subs	r2, r2, r3
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f7ff ff97 	bl	8005b38 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	61fb      	str	r3, [r7, #28]
 8005c0e:	e004      	b.n	8005c1a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	2200      	movs	r2, #0
 8005c14:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005c16:	2301      	movs	r3, #1
 8005c18:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005c1a:	f000 fe73 	bl	8006904 <vPortExitCritical>

	return xReturn;
 8005c1e:	69fb      	ldr	r3, [r7, #28]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3720      	adds	r7, #32
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	20000f14 	.word	0x20000f14
 8005c2c:	20000f28 	.word	0x20000f28

08005c30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005c30:	b480      	push	{r7}
 8005c32:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005c34:	4b03      	ldr	r3, [pc, #12]	; (8005c44 <vTaskMissedYield+0x14>)
 8005c36:	2201      	movs	r2, #1
 8005c38:	601a      	str	r2, [r3, #0]
}
 8005c3a:	bf00      	nop
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr
 8005c44:	20000f24 	.word	0x20000f24

08005c48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005c50:	f000 f852 	bl	8005cf8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005c54:	4b06      	ldr	r3, [pc, #24]	; (8005c70 <prvIdleTask+0x28>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d9f9      	bls.n	8005c50 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005c5c:	4b05      	ldr	r3, [pc, #20]	; (8005c74 <prvIdleTask+0x2c>)
 8005c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c62:	601a      	str	r2, [r3, #0]
 8005c64:	f3bf 8f4f 	dsb	sy
 8005c68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005c6c:	e7f0      	b.n	8005c50 <prvIdleTask+0x8>
 8005c6e:	bf00      	nop
 8005c70:	20000a40 	.word	0x20000a40
 8005c74:	e000ed04 	.word	0xe000ed04

08005c78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c7e:	2300      	movs	r3, #0
 8005c80:	607b      	str	r3, [r7, #4]
 8005c82:	e00c      	b.n	8005c9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	4613      	mov	r3, r2
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	4413      	add	r3, r2
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	4a12      	ldr	r2, [pc, #72]	; (8005cd8 <prvInitialiseTaskLists+0x60>)
 8005c90:	4413      	add	r3, r2
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7fe fb82 	bl	800439c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	607b      	str	r3, [r7, #4]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2b37      	cmp	r3, #55	; 0x37
 8005ca2:	d9ef      	bls.n	8005c84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005ca4:	480d      	ldr	r0, [pc, #52]	; (8005cdc <prvInitialiseTaskLists+0x64>)
 8005ca6:	f7fe fb79 	bl	800439c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005caa:	480d      	ldr	r0, [pc, #52]	; (8005ce0 <prvInitialiseTaskLists+0x68>)
 8005cac:	f7fe fb76 	bl	800439c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005cb0:	480c      	ldr	r0, [pc, #48]	; (8005ce4 <prvInitialiseTaskLists+0x6c>)
 8005cb2:	f7fe fb73 	bl	800439c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005cb6:	480c      	ldr	r0, [pc, #48]	; (8005ce8 <prvInitialiseTaskLists+0x70>)
 8005cb8:	f7fe fb70 	bl	800439c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005cbc:	480b      	ldr	r0, [pc, #44]	; (8005cec <prvInitialiseTaskLists+0x74>)
 8005cbe:	f7fe fb6d 	bl	800439c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005cc2:	4b0b      	ldr	r3, [pc, #44]	; (8005cf0 <prvInitialiseTaskLists+0x78>)
 8005cc4:	4a05      	ldr	r2, [pc, #20]	; (8005cdc <prvInitialiseTaskLists+0x64>)
 8005cc6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005cc8:	4b0a      	ldr	r3, [pc, #40]	; (8005cf4 <prvInitialiseTaskLists+0x7c>)
 8005cca:	4a05      	ldr	r2, [pc, #20]	; (8005ce0 <prvInitialiseTaskLists+0x68>)
 8005ccc:	601a      	str	r2, [r3, #0]
}
 8005cce:	bf00      	nop
 8005cd0:	3708      	adds	r7, #8
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	20000a40 	.word	0x20000a40
 8005cdc:	20000ea0 	.word	0x20000ea0
 8005ce0:	20000eb4 	.word	0x20000eb4
 8005ce4:	20000ed0 	.word	0x20000ed0
 8005ce8:	20000ee4 	.word	0x20000ee4
 8005cec:	20000efc 	.word	0x20000efc
 8005cf0:	20000ec8 	.word	0x20000ec8
 8005cf4:	20000ecc 	.word	0x20000ecc

08005cf8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005cfe:	e019      	b.n	8005d34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005d00:	f000 fdcc 	bl	800689c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d04:	4b10      	ldr	r3, [pc, #64]	; (8005d48 <prvCheckTasksWaitingTermination+0x50>)
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	3304      	adds	r3, #4
 8005d10:	4618      	mov	r0, r3
 8005d12:	f7fe fbcd 	bl	80044b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005d16:	4b0d      	ldr	r3, [pc, #52]	; (8005d4c <prvCheckTasksWaitingTermination+0x54>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	4a0b      	ldr	r2, [pc, #44]	; (8005d4c <prvCheckTasksWaitingTermination+0x54>)
 8005d1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005d20:	4b0b      	ldr	r3, [pc, #44]	; (8005d50 <prvCheckTasksWaitingTermination+0x58>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	3b01      	subs	r3, #1
 8005d26:	4a0a      	ldr	r2, [pc, #40]	; (8005d50 <prvCheckTasksWaitingTermination+0x58>)
 8005d28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005d2a:	f000 fdeb 	bl	8006904 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 f810 	bl	8005d54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d34:	4b06      	ldr	r3, [pc, #24]	; (8005d50 <prvCheckTasksWaitingTermination+0x58>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d1e1      	bne.n	8005d00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005d3c:	bf00      	nop
 8005d3e:	bf00      	nop
 8005d40:	3708      	adds	r7, #8
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	20000ee4 	.word	0x20000ee4
 8005d4c:	20000f10 	.word	0x20000f10
 8005d50:	20000ef8 	.word	0x20000ef8

08005d54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	3354      	adds	r3, #84	; 0x54
 8005d60:	4618      	mov	r0, r3
 8005d62:	f001 f8f5 	bl	8006f50 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d108      	bne.n	8005d82 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d74:	4618      	mov	r0, r3
 8005d76:	f000 ff87 	bl	8006c88 <vPortFree>
				vPortFree( pxTCB );
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 ff84 	bl	8006c88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005d80:	e01a      	b.n	8005db8 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d103      	bne.n	8005d94 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 ff7b 	bl	8006c88 <vPortFree>
	}
 8005d92:	e011      	b.n	8005db8 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	d00c      	beq.n	8005db8 <prvDeleteTCB+0x64>
	__asm volatile
 8005d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da2:	b672      	cpsid	i
 8005da4:	f383 8811 	msr	BASEPRI, r3
 8005da8:	f3bf 8f6f 	isb	sy
 8005dac:	f3bf 8f4f 	dsb	sy
 8005db0:	b662      	cpsie	i
 8005db2:	60fb      	str	r3, [r7, #12]
}
 8005db4:	bf00      	nop
 8005db6:	e7fe      	b.n	8005db6 <prvDeleteTCB+0x62>
	}
 8005db8:	bf00      	nop
 8005dba:	3710      	adds	r7, #16
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dc6:	4b0c      	ldr	r3, [pc, #48]	; (8005df8 <prvResetNextTaskUnblockTime+0x38>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d104      	bne.n	8005dda <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005dd0:	4b0a      	ldr	r3, [pc, #40]	; (8005dfc <prvResetNextTaskUnblockTime+0x3c>)
 8005dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8005dd6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005dd8:	e008      	b.n	8005dec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dda:	4b07      	ldr	r3, [pc, #28]	; (8005df8 <prvResetNextTaskUnblockTime+0x38>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	4a04      	ldr	r2, [pc, #16]	; (8005dfc <prvResetNextTaskUnblockTime+0x3c>)
 8005dea:	6013      	str	r3, [r2, #0]
}
 8005dec:	bf00      	nop
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr
 8005df8:	20000ec8 	.word	0x20000ec8
 8005dfc:	20000f30 	.word	0x20000f30

08005e00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005e06:	4b0b      	ldr	r3, [pc, #44]	; (8005e34 <xTaskGetSchedulerState+0x34>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d102      	bne.n	8005e14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	607b      	str	r3, [r7, #4]
 8005e12:	e008      	b.n	8005e26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e14:	4b08      	ldr	r3, [pc, #32]	; (8005e38 <xTaskGetSchedulerState+0x38>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d102      	bne.n	8005e22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005e1c:	2302      	movs	r3, #2
 8005e1e:	607b      	str	r3, [r7, #4]
 8005e20:	e001      	b.n	8005e26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005e22:	2300      	movs	r3, #0
 8005e24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005e26:	687b      	ldr	r3, [r7, #4]
	}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr
 8005e34:	20000f1c 	.word	0x20000f1c
 8005e38:	20000f38 	.word	0x20000f38

08005e3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b086      	sub	sp, #24
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d05a      	beq.n	8005f08 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005e52:	4b30      	ldr	r3, [pc, #192]	; (8005f14 <xTaskPriorityDisinherit+0xd8>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d00c      	beq.n	8005e76 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8005e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e60:	b672      	cpsid	i
 8005e62:	f383 8811 	msr	BASEPRI, r3
 8005e66:	f3bf 8f6f 	isb	sy
 8005e6a:	f3bf 8f4f 	dsb	sy
 8005e6e:	b662      	cpsie	i
 8005e70:	60fb      	str	r3, [r7, #12]
}
 8005e72:	bf00      	nop
 8005e74:	e7fe      	b.n	8005e74 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d10c      	bne.n	8005e98 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8005e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e82:	b672      	cpsid	i
 8005e84:	f383 8811 	msr	BASEPRI, r3
 8005e88:	f3bf 8f6f 	isb	sy
 8005e8c:	f3bf 8f4f 	dsb	sy
 8005e90:	b662      	cpsie	i
 8005e92:	60bb      	str	r3, [r7, #8]
}
 8005e94:	bf00      	nop
 8005e96:	e7fe      	b.n	8005e96 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e9c:	1e5a      	subs	r2, r3, #1
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d02c      	beq.n	8005f08 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d128      	bne.n	8005f08 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	3304      	adds	r3, #4
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7fe faf8 	bl	80044b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ecc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ed8:	4b0f      	ldr	r3, [pc, #60]	; (8005f18 <xTaskPriorityDisinherit+0xdc>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d903      	bls.n	8005ee8 <xTaskPriorityDisinherit+0xac>
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee4:	4a0c      	ldr	r2, [pc, #48]	; (8005f18 <xTaskPriorityDisinherit+0xdc>)
 8005ee6:	6013      	str	r3, [r2, #0]
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eec:	4613      	mov	r3, r2
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	4413      	add	r3, r2
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	4a09      	ldr	r2, [pc, #36]	; (8005f1c <xTaskPriorityDisinherit+0xe0>)
 8005ef6:	441a      	add	r2, r3
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	3304      	adds	r3, #4
 8005efc:	4619      	mov	r1, r3
 8005efe:	4610      	mov	r0, r2
 8005f00:	f7fe fa79 	bl	80043f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005f04:	2301      	movs	r3, #1
 8005f06:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005f08:	697b      	ldr	r3, [r7, #20]
	}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3718      	adds	r7, #24
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	20000a3c 	.word	0x20000a3c
 8005f18:	20000f18 	.word	0x20000f18
 8005f1c:	20000a40 	.word	0x20000a40

08005f20 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005f2a:	4b21      	ldr	r3, [pc, #132]	; (8005fb0 <prvAddCurrentTaskToDelayedList+0x90>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f30:	4b20      	ldr	r3, [pc, #128]	; (8005fb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	3304      	adds	r3, #4
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7fe faba 	bl	80044b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f42:	d10a      	bne.n	8005f5a <prvAddCurrentTaskToDelayedList+0x3a>
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d007      	beq.n	8005f5a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f4a:	4b1a      	ldr	r3, [pc, #104]	; (8005fb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	3304      	adds	r3, #4
 8005f50:	4619      	mov	r1, r3
 8005f52:	4819      	ldr	r0, [pc, #100]	; (8005fb8 <prvAddCurrentTaskToDelayedList+0x98>)
 8005f54:	f7fe fa4f 	bl	80043f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005f58:	e026      	b.n	8005fa8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4413      	add	r3, r2
 8005f60:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f62:	4b14      	ldr	r3, [pc, #80]	; (8005fb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68ba      	ldr	r2, [r7, #8]
 8005f68:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005f6a:	68ba      	ldr	r2, [r7, #8]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d209      	bcs.n	8005f86 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f72:	4b12      	ldr	r3, [pc, #72]	; (8005fbc <prvAddCurrentTaskToDelayedList+0x9c>)
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	4b0f      	ldr	r3, [pc, #60]	; (8005fb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	3304      	adds	r3, #4
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	4610      	mov	r0, r2
 8005f80:	f7fe fa5d 	bl	800443e <vListInsert>
}
 8005f84:	e010      	b.n	8005fa8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f86:	4b0e      	ldr	r3, [pc, #56]	; (8005fc0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	4b0a      	ldr	r3, [pc, #40]	; (8005fb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	3304      	adds	r3, #4
 8005f90:	4619      	mov	r1, r3
 8005f92:	4610      	mov	r0, r2
 8005f94:	f7fe fa53 	bl	800443e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f98:	4b0a      	ldr	r3, [pc, #40]	; (8005fc4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68ba      	ldr	r2, [r7, #8]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d202      	bcs.n	8005fa8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005fa2:	4a08      	ldr	r2, [pc, #32]	; (8005fc4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	6013      	str	r3, [r2, #0]
}
 8005fa8:	bf00      	nop
 8005faa:	3710      	adds	r7, #16
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	20000f14 	.word	0x20000f14
 8005fb4:	20000a3c 	.word	0x20000a3c
 8005fb8:	20000efc 	.word	0x20000efc
 8005fbc:	20000ecc 	.word	0x20000ecc
 8005fc0:	20000ec8 	.word	0x20000ec8
 8005fc4:	20000f30 	.word	0x20000f30

08005fc8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b08a      	sub	sp, #40	; 0x28
 8005fcc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005fd2:	f000 fb15 	bl	8006600 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005fd6:	4b1d      	ldr	r3, [pc, #116]	; (800604c <xTimerCreateTimerTask+0x84>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d021      	beq.n	8006022 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005fe6:	1d3a      	adds	r2, r7, #4
 8005fe8:	f107 0108 	add.w	r1, r7, #8
 8005fec:	f107 030c 	add.w	r3, r7, #12
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f7fe f9b9 	bl	8004368 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005ff6:	6879      	ldr	r1, [r7, #4]
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	9202      	str	r2, [sp, #8]
 8005ffe:	9301      	str	r3, [sp, #4]
 8006000:	2302      	movs	r3, #2
 8006002:	9300      	str	r3, [sp, #0]
 8006004:	2300      	movs	r3, #0
 8006006:	460a      	mov	r2, r1
 8006008:	4911      	ldr	r1, [pc, #68]	; (8006050 <xTimerCreateTimerTask+0x88>)
 800600a:	4812      	ldr	r0, [pc, #72]	; (8006054 <xTimerCreateTimerTask+0x8c>)
 800600c:	f7fe ff84 	bl	8004f18 <xTaskCreateStatic>
 8006010:	4603      	mov	r3, r0
 8006012:	4a11      	ldr	r2, [pc, #68]	; (8006058 <xTimerCreateTimerTask+0x90>)
 8006014:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006016:	4b10      	ldr	r3, [pc, #64]	; (8006058 <xTimerCreateTimerTask+0x90>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d001      	beq.n	8006022 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800601e:	2301      	movs	r3, #1
 8006020:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d10c      	bne.n	8006042 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8006028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602c:	b672      	cpsid	i
 800602e:	f383 8811 	msr	BASEPRI, r3
 8006032:	f3bf 8f6f 	isb	sy
 8006036:	f3bf 8f4f 	dsb	sy
 800603a:	b662      	cpsie	i
 800603c:	613b      	str	r3, [r7, #16]
}
 800603e:	bf00      	nop
 8006040:	e7fe      	b.n	8006040 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8006042:	697b      	ldr	r3, [r7, #20]
}
 8006044:	4618      	mov	r0, r3
 8006046:	3718      	adds	r7, #24
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	20000f6c 	.word	0x20000f6c
 8006050:	080070f8 	.word	0x080070f8
 8006054:	08006199 	.word	0x08006199
 8006058:	20000f70 	.word	0x20000f70

0800605c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b08a      	sub	sp, #40	; 0x28
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]
 8006068:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800606a:	2300      	movs	r3, #0
 800606c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d10c      	bne.n	800608e <xTimerGenericCommand+0x32>
	__asm volatile
 8006074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006078:	b672      	cpsid	i
 800607a:	f383 8811 	msr	BASEPRI, r3
 800607e:	f3bf 8f6f 	isb	sy
 8006082:	f3bf 8f4f 	dsb	sy
 8006086:	b662      	cpsie	i
 8006088:	623b      	str	r3, [r7, #32]
}
 800608a:	bf00      	nop
 800608c:	e7fe      	b.n	800608c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800608e:	4b1a      	ldr	r3, [pc, #104]	; (80060f8 <xTimerGenericCommand+0x9c>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d02a      	beq.n	80060ec <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	2b05      	cmp	r3, #5
 80060a6:	dc18      	bgt.n	80060da <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80060a8:	f7ff feaa 	bl	8005e00 <xTaskGetSchedulerState>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	d109      	bne.n	80060c6 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80060b2:	4b11      	ldr	r3, [pc, #68]	; (80060f8 <xTimerGenericCommand+0x9c>)
 80060b4:	6818      	ldr	r0, [r3, #0]
 80060b6:	f107 0110 	add.w	r1, r7, #16
 80060ba:	2300      	movs	r3, #0
 80060bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060be:	f7fe fb31 	bl	8004724 <xQueueGenericSend>
 80060c2:	6278      	str	r0, [r7, #36]	; 0x24
 80060c4:	e012      	b.n	80060ec <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80060c6:	4b0c      	ldr	r3, [pc, #48]	; (80060f8 <xTimerGenericCommand+0x9c>)
 80060c8:	6818      	ldr	r0, [r3, #0]
 80060ca:	f107 0110 	add.w	r1, r7, #16
 80060ce:	2300      	movs	r3, #0
 80060d0:	2200      	movs	r2, #0
 80060d2:	f7fe fb27 	bl	8004724 <xQueueGenericSend>
 80060d6:	6278      	str	r0, [r7, #36]	; 0x24
 80060d8:	e008      	b.n	80060ec <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80060da:	4b07      	ldr	r3, [pc, #28]	; (80060f8 <xTimerGenericCommand+0x9c>)
 80060dc:	6818      	ldr	r0, [r3, #0]
 80060de:	f107 0110 	add.w	r1, r7, #16
 80060e2:	2300      	movs	r3, #0
 80060e4:	683a      	ldr	r2, [r7, #0]
 80060e6:	f7fe fc23 	bl	8004930 <xQueueGenericSendFromISR>
 80060ea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80060ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3728      	adds	r7, #40	; 0x28
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	20000f6c 	.word	0x20000f6c

080060fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b088      	sub	sp, #32
 8006100:	af02      	add	r7, sp, #8
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006106:	4b23      	ldr	r3, [pc, #140]	; (8006194 <prvProcessExpiredTimer+0x98>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	3304      	adds	r3, #4
 8006114:	4618      	mov	r0, r3
 8006116:	f7fe f9cb 	bl	80044b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006120:	f003 0304 	and.w	r3, r3, #4
 8006124:	2b00      	cmp	r3, #0
 8006126:	d024      	beq.n	8006172 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	699a      	ldr	r2, [r3, #24]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	18d1      	adds	r1, r2, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	683a      	ldr	r2, [r7, #0]
 8006134:	6978      	ldr	r0, [r7, #20]
 8006136:	f000 f8d3 	bl	80062e0 <prvInsertTimerInActiveList>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d021      	beq.n	8006184 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006140:	2300      	movs	r3, #0
 8006142:	9300      	str	r3, [sp, #0]
 8006144:	2300      	movs	r3, #0
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	2100      	movs	r1, #0
 800614a:	6978      	ldr	r0, [r7, #20]
 800614c:	f7ff ff86 	bl	800605c <xTimerGenericCommand>
 8006150:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d115      	bne.n	8006184 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8006158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800615c:	b672      	cpsid	i
 800615e:	f383 8811 	msr	BASEPRI, r3
 8006162:	f3bf 8f6f 	isb	sy
 8006166:	f3bf 8f4f 	dsb	sy
 800616a:	b662      	cpsie	i
 800616c:	60fb      	str	r3, [r7, #12]
}
 800616e:	bf00      	nop
 8006170:	e7fe      	b.n	8006170 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006178:	f023 0301 	bic.w	r3, r3, #1
 800617c:	b2da      	uxtb	r2, r3
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	6a1b      	ldr	r3, [r3, #32]
 8006188:	6978      	ldr	r0, [r7, #20]
 800618a:	4798      	blx	r3
}
 800618c:	bf00      	nop
 800618e:	3718      	adds	r7, #24
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}
 8006194:	20000f64 	.word	0x20000f64

08006198 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80061a0:	f107 0308 	add.w	r3, r7, #8
 80061a4:	4618      	mov	r0, r3
 80061a6:	f000 f857 	bl	8006258 <prvGetNextExpireTime>
 80061aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	4619      	mov	r1, r3
 80061b0:	68f8      	ldr	r0, [r7, #12]
 80061b2:	f000 f803 	bl	80061bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80061b6:	f000 f8d5 	bl	8006364 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80061ba:	e7f1      	b.n	80061a0 <prvTimerTask+0x8>

080061bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80061c6:	f7ff fa1d 	bl	8005604 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80061ca:	f107 0308 	add.w	r3, r7, #8
 80061ce:	4618      	mov	r0, r3
 80061d0:	f000 f866 	bl	80062a0 <prvSampleTimeNow>
 80061d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d130      	bne.n	800623e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d10a      	bne.n	80061f8 <prvProcessTimerOrBlockTask+0x3c>
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d806      	bhi.n	80061f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80061ea:	f7ff fa19 	bl	8005620 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80061ee:	68f9      	ldr	r1, [r7, #12]
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f7ff ff83 	bl	80060fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80061f6:	e024      	b.n	8006242 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d008      	beq.n	8006210 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80061fe:	4b13      	ldr	r3, [pc, #76]	; (800624c <prvProcessTimerOrBlockTask+0x90>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d101      	bne.n	800620c <prvProcessTimerOrBlockTask+0x50>
 8006208:	2301      	movs	r3, #1
 800620a:	e000      	b.n	800620e <prvProcessTimerOrBlockTask+0x52>
 800620c:	2300      	movs	r3, #0
 800620e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006210:	4b0f      	ldr	r3, [pc, #60]	; (8006250 <prvProcessTimerOrBlockTask+0x94>)
 8006212:	6818      	ldr	r0, [r3, #0]
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	683a      	ldr	r2, [r7, #0]
 800621c:	4619      	mov	r1, r3
 800621e:	f7fe fe47 	bl	8004eb0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006222:	f7ff f9fd 	bl	8005620 <xTaskResumeAll>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d10a      	bne.n	8006242 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800622c:	4b09      	ldr	r3, [pc, #36]	; (8006254 <prvProcessTimerOrBlockTask+0x98>)
 800622e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006232:	601a      	str	r2, [r3, #0]
 8006234:	f3bf 8f4f 	dsb	sy
 8006238:	f3bf 8f6f 	isb	sy
}
 800623c:	e001      	b.n	8006242 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800623e:	f7ff f9ef 	bl	8005620 <xTaskResumeAll>
}
 8006242:	bf00      	nop
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	20000f68 	.word	0x20000f68
 8006250:	20000f6c 	.word	0x20000f6c
 8006254:	e000ed04 	.word	0xe000ed04

08006258 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006258:	b480      	push	{r7}
 800625a:	b085      	sub	sp, #20
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006260:	4b0e      	ldr	r3, [pc, #56]	; (800629c <prvGetNextExpireTime+0x44>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d101      	bne.n	800626e <prvGetNextExpireTime+0x16>
 800626a:	2201      	movs	r2, #1
 800626c:	e000      	b.n	8006270 <prvGetNextExpireTime+0x18>
 800626e:	2200      	movs	r2, #0
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d105      	bne.n	8006288 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800627c:	4b07      	ldr	r3, [pc, #28]	; (800629c <prvGetNextExpireTime+0x44>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	60fb      	str	r3, [r7, #12]
 8006286:	e001      	b.n	800628c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006288:	2300      	movs	r3, #0
 800628a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800628c:	68fb      	ldr	r3, [r7, #12]
}
 800628e:	4618      	mov	r0, r3
 8006290:	3714      	adds	r7, #20
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	20000f64 	.word	0x20000f64

080062a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80062a8:	f7ff fa5a 	bl	8005760 <xTaskGetTickCount>
 80062ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80062ae:	4b0b      	ldr	r3, [pc, #44]	; (80062dc <prvSampleTimeNow+0x3c>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d205      	bcs.n	80062c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80062b8:	f000 f93c 	bl	8006534 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	601a      	str	r2, [r3, #0]
 80062c2:	e002      	b.n	80062ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80062ca:	4a04      	ldr	r2, [pc, #16]	; (80062dc <prvSampleTimeNow+0x3c>)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80062d0:	68fb      	ldr	r3, [r7, #12]
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3710      	adds	r7, #16
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	20000f74 	.word	0x20000f74

080062e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b086      	sub	sp, #24
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
 80062ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80062ee:	2300      	movs	r3, #0
 80062f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	68ba      	ldr	r2, [r7, #8]
 80062f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	68fa      	ldr	r2, [r7, #12]
 80062fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80062fe:	68ba      	ldr	r2, [r7, #8]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	429a      	cmp	r2, r3
 8006304:	d812      	bhi.n	800632c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	1ad2      	subs	r2, r2, r3
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	699b      	ldr	r3, [r3, #24]
 8006310:	429a      	cmp	r2, r3
 8006312:	d302      	bcc.n	800631a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006314:	2301      	movs	r3, #1
 8006316:	617b      	str	r3, [r7, #20]
 8006318:	e01b      	b.n	8006352 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800631a:	4b10      	ldr	r3, [pc, #64]	; (800635c <prvInsertTimerInActiveList+0x7c>)
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	3304      	adds	r3, #4
 8006322:	4619      	mov	r1, r3
 8006324:	4610      	mov	r0, r2
 8006326:	f7fe f88a 	bl	800443e <vListInsert>
 800632a:	e012      	b.n	8006352 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	429a      	cmp	r2, r3
 8006332:	d206      	bcs.n	8006342 <prvInsertTimerInActiveList+0x62>
 8006334:	68ba      	ldr	r2, [r7, #8]
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	429a      	cmp	r2, r3
 800633a:	d302      	bcc.n	8006342 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800633c:	2301      	movs	r3, #1
 800633e:	617b      	str	r3, [r7, #20]
 8006340:	e007      	b.n	8006352 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006342:	4b07      	ldr	r3, [pc, #28]	; (8006360 <prvInsertTimerInActiveList+0x80>)
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	3304      	adds	r3, #4
 800634a:	4619      	mov	r1, r3
 800634c:	4610      	mov	r0, r2
 800634e:	f7fe f876 	bl	800443e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006352:	697b      	ldr	r3, [r7, #20]
}
 8006354:	4618      	mov	r0, r3
 8006356:	3718      	adds	r7, #24
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	20000f68 	.word	0x20000f68
 8006360:	20000f64 	.word	0x20000f64

08006364 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b08e      	sub	sp, #56	; 0x38
 8006368:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800636a:	e0d0      	b.n	800650e <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2b00      	cmp	r3, #0
 8006370:	da1a      	bge.n	80063a8 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006372:	1d3b      	adds	r3, r7, #4
 8006374:	3304      	adds	r3, #4
 8006376:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800637a:	2b00      	cmp	r3, #0
 800637c:	d10c      	bne.n	8006398 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800637e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006382:	b672      	cpsid	i
 8006384:	f383 8811 	msr	BASEPRI, r3
 8006388:	f3bf 8f6f 	isb	sy
 800638c:	f3bf 8f4f 	dsb	sy
 8006390:	b662      	cpsie	i
 8006392:	61fb      	str	r3, [r7, #28]
}
 8006394:	bf00      	nop
 8006396:	e7fe      	b.n	8006396 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800639e:	6850      	ldr	r0, [r2, #4]
 80063a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063a2:	6892      	ldr	r2, [r2, #8]
 80063a4:	4611      	mov	r1, r2
 80063a6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	f2c0 80ae 	blt.w	800650c <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80063b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b6:	695b      	ldr	r3, [r3, #20]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d004      	beq.n	80063c6 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063be:	3304      	adds	r3, #4
 80063c0:	4618      	mov	r0, r3
 80063c2:	f7fe f875 	bl	80044b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80063c6:	463b      	mov	r3, r7
 80063c8:	4618      	mov	r0, r3
 80063ca:	f7ff ff69 	bl	80062a0 <prvSampleTimeNow>
 80063ce:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2b09      	cmp	r3, #9
 80063d4:	f200 809b 	bhi.w	800650e <prvProcessReceivedCommands+0x1aa>
 80063d8:	a201      	add	r2, pc, #4	; (adr r2, 80063e0 <prvProcessReceivedCommands+0x7c>)
 80063da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063de:	bf00      	nop
 80063e0:	08006409 	.word	0x08006409
 80063e4:	08006409 	.word	0x08006409
 80063e8:	08006409 	.word	0x08006409
 80063ec:	08006481 	.word	0x08006481
 80063f0:	08006495 	.word	0x08006495
 80063f4:	080064e3 	.word	0x080064e3
 80063f8:	08006409 	.word	0x08006409
 80063fc:	08006409 	.word	0x08006409
 8006400:	08006481 	.word	0x08006481
 8006404:	08006495 	.word	0x08006495
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800640e:	f043 0301 	orr.w	r3, r3, #1
 8006412:	b2da      	uxtb	r2, r3
 8006414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006416:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800641a:	68ba      	ldr	r2, [r7, #8]
 800641c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	18d1      	adds	r1, r2, r3
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006426:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006428:	f7ff ff5a 	bl	80062e0 <prvInsertTimerInActiveList>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d06d      	beq.n	800650e <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006434:	6a1b      	ldr	r3, [r3, #32]
 8006436:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006438:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800643a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006440:	f003 0304 	and.w	r3, r3, #4
 8006444:	2b00      	cmp	r3, #0
 8006446:	d062      	beq.n	800650e <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006448:	68ba      	ldr	r2, [r7, #8]
 800644a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644c:	699b      	ldr	r3, [r3, #24]
 800644e:	441a      	add	r2, r3
 8006450:	2300      	movs	r3, #0
 8006452:	9300      	str	r3, [sp, #0]
 8006454:	2300      	movs	r3, #0
 8006456:	2100      	movs	r1, #0
 8006458:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800645a:	f7ff fdff 	bl	800605c <xTimerGenericCommand>
 800645e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006460:	6a3b      	ldr	r3, [r7, #32]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d153      	bne.n	800650e <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8006466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800646a:	b672      	cpsid	i
 800646c:	f383 8811 	msr	BASEPRI, r3
 8006470:	f3bf 8f6f 	isb	sy
 8006474:	f3bf 8f4f 	dsb	sy
 8006478:	b662      	cpsie	i
 800647a:	61bb      	str	r3, [r7, #24]
}
 800647c:	bf00      	nop
 800647e:	e7fe      	b.n	800647e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006482:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006486:	f023 0301 	bic.w	r3, r3, #1
 800648a:	b2da      	uxtb	r2, r3
 800648c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006492:	e03c      	b.n	800650e <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006496:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800649a:	f043 0301 	orr.w	r3, r3, #1
 800649e:	b2da      	uxtb	r2, r3
 80064a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80064a6:	68ba      	ldr	r2, [r7, #8]
 80064a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064aa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80064ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ae:	699b      	ldr	r3, [r3, #24]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d10c      	bne.n	80064ce <prvProcessReceivedCommands+0x16a>
	__asm volatile
 80064b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b8:	b672      	cpsid	i
 80064ba:	f383 8811 	msr	BASEPRI, r3
 80064be:	f3bf 8f6f 	isb	sy
 80064c2:	f3bf 8f4f 	dsb	sy
 80064c6:	b662      	cpsie	i
 80064c8:	617b      	str	r3, [r7, #20]
}
 80064ca:	bf00      	nop
 80064cc:	e7fe      	b.n	80064cc <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80064ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d0:	699a      	ldr	r2, [r3, #24]
 80064d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d4:	18d1      	adds	r1, r2, r3
 80064d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064dc:	f7ff ff00 	bl	80062e0 <prvInsertTimerInActiveList>
					break;
 80064e0:	e015      	b.n	800650e <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80064e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064e8:	f003 0302 	and.w	r3, r3, #2
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d103      	bne.n	80064f8 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 80064f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064f2:	f000 fbc9 	bl	8006c88 <vPortFree>
 80064f6:	e00a      	b.n	800650e <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80064f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064fe:	f023 0301 	bic.w	r3, r3, #1
 8006502:	b2da      	uxtb	r2, r3
 8006504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006506:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800650a:	e000      	b.n	800650e <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800650c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800650e:	4b08      	ldr	r3, [pc, #32]	; (8006530 <prvProcessReceivedCommands+0x1cc>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	1d39      	adds	r1, r7, #4
 8006514:	2200      	movs	r2, #0
 8006516:	4618      	mov	r0, r3
 8006518:	f7fe faaa 	bl	8004a70 <xQueueReceive>
 800651c:	4603      	mov	r3, r0
 800651e:	2b00      	cmp	r3, #0
 8006520:	f47f af24 	bne.w	800636c <prvProcessReceivedCommands+0x8>
	}
}
 8006524:	bf00      	nop
 8006526:	bf00      	nop
 8006528:	3730      	adds	r7, #48	; 0x30
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	20000f6c 	.word	0x20000f6c

08006534 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b088      	sub	sp, #32
 8006538:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800653a:	e04a      	b.n	80065d2 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800653c:	4b2e      	ldr	r3, [pc, #184]	; (80065f8 <prvSwitchTimerLists+0xc4>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006546:	4b2c      	ldr	r3, [pc, #176]	; (80065f8 <prvSwitchTimerLists+0xc4>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	3304      	adds	r3, #4
 8006554:	4618      	mov	r0, r3
 8006556:	f7fd ffab 	bl	80044b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6a1b      	ldr	r3, [r3, #32]
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006568:	f003 0304 	and.w	r3, r3, #4
 800656c:	2b00      	cmp	r3, #0
 800656e:	d030      	beq.n	80065d2 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	699b      	ldr	r3, [r3, #24]
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	4413      	add	r3, r2
 8006578:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	429a      	cmp	r2, r3
 8006580:	d90e      	bls.n	80065a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	68ba      	ldr	r2, [r7, #8]
 8006586:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800658e:	4b1a      	ldr	r3, [pc, #104]	; (80065f8 <prvSwitchTimerLists+0xc4>)
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	3304      	adds	r3, #4
 8006596:	4619      	mov	r1, r3
 8006598:	4610      	mov	r0, r2
 800659a:	f7fd ff50 	bl	800443e <vListInsert>
 800659e:	e018      	b.n	80065d2 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80065a0:	2300      	movs	r3, #0
 80065a2:	9300      	str	r3, [sp, #0]
 80065a4:	2300      	movs	r3, #0
 80065a6:	693a      	ldr	r2, [r7, #16]
 80065a8:	2100      	movs	r1, #0
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f7ff fd56 	bl	800605c <xTimerGenericCommand>
 80065b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d10c      	bne.n	80065d2 <prvSwitchTimerLists+0x9e>
	__asm volatile
 80065b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065bc:	b672      	cpsid	i
 80065be:	f383 8811 	msr	BASEPRI, r3
 80065c2:	f3bf 8f6f 	isb	sy
 80065c6:	f3bf 8f4f 	dsb	sy
 80065ca:	b662      	cpsie	i
 80065cc:	603b      	str	r3, [r7, #0]
}
 80065ce:	bf00      	nop
 80065d0:	e7fe      	b.n	80065d0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80065d2:	4b09      	ldr	r3, [pc, #36]	; (80065f8 <prvSwitchTimerLists+0xc4>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d1af      	bne.n	800653c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80065dc:	4b06      	ldr	r3, [pc, #24]	; (80065f8 <prvSwitchTimerLists+0xc4>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80065e2:	4b06      	ldr	r3, [pc, #24]	; (80065fc <prvSwitchTimerLists+0xc8>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a04      	ldr	r2, [pc, #16]	; (80065f8 <prvSwitchTimerLists+0xc4>)
 80065e8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80065ea:	4a04      	ldr	r2, [pc, #16]	; (80065fc <prvSwitchTimerLists+0xc8>)
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	6013      	str	r3, [r2, #0]
}
 80065f0:	bf00      	nop
 80065f2:	3718      	adds	r7, #24
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	20000f64 	.word	0x20000f64
 80065fc:	20000f68 	.word	0x20000f68

08006600 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006606:	f000 f949 	bl	800689c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800660a:	4b15      	ldr	r3, [pc, #84]	; (8006660 <prvCheckForValidListAndQueue+0x60>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d120      	bne.n	8006654 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006612:	4814      	ldr	r0, [pc, #80]	; (8006664 <prvCheckForValidListAndQueue+0x64>)
 8006614:	f7fd fec2 	bl	800439c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006618:	4813      	ldr	r0, [pc, #76]	; (8006668 <prvCheckForValidListAndQueue+0x68>)
 800661a:	f7fd febf 	bl	800439c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800661e:	4b13      	ldr	r3, [pc, #76]	; (800666c <prvCheckForValidListAndQueue+0x6c>)
 8006620:	4a10      	ldr	r2, [pc, #64]	; (8006664 <prvCheckForValidListAndQueue+0x64>)
 8006622:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006624:	4b12      	ldr	r3, [pc, #72]	; (8006670 <prvCheckForValidListAndQueue+0x70>)
 8006626:	4a10      	ldr	r2, [pc, #64]	; (8006668 <prvCheckForValidListAndQueue+0x68>)
 8006628:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800662a:	2300      	movs	r3, #0
 800662c:	9300      	str	r3, [sp, #0]
 800662e:	4b11      	ldr	r3, [pc, #68]	; (8006674 <prvCheckForValidListAndQueue+0x74>)
 8006630:	4a11      	ldr	r2, [pc, #68]	; (8006678 <prvCheckForValidListAndQueue+0x78>)
 8006632:	2110      	movs	r1, #16
 8006634:	200a      	movs	r0, #10
 8006636:	f7fd ffcf 	bl	80045d8 <xQueueGenericCreateStatic>
 800663a:	4603      	mov	r3, r0
 800663c:	4a08      	ldr	r2, [pc, #32]	; (8006660 <prvCheckForValidListAndQueue+0x60>)
 800663e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006640:	4b07      	ldr	r3, [pc, #28]	; (8006660 <prvCheckForValidListAndQueue+0x60>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d005      	beq.n	8006654 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006648:	4b05      	ldr	r3, [pc, #20]	; (8006660 <prvCheckForValidListAndQueue+0x60>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	490b      	ldr	r1, [pc, #44]	; (800667c <prvCheckForValidListAndQueue+0x7c>)
 800664e:	4618      	mov	r0, r3
 8006650:	f7fe fc04 	bl	8004e5c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006654:	f000 f956 	bl	8006904 <vPortExitCritical>
}
 8006658:	bf00      	nop
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	20000f6c 	.word	0x20000f6c
 8006664:	20000f3c 	.word	0x20000f3c
 8006668:	20000f50 	.word	0x20000f50
 800666c:	20000f64 	.word	0x20000f64
 8006670:	20000f68 	.word	0x20000f68
 8006674:	20001018 	.word	0x20001018
 8006678:	20000f78 	.word	0x20000f78
 800667c:	08007100 	.word	0x08007100

08006680 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006680:	b480      	push	{r7}
 8006682:	b085      	sub	sp, #20
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	3b04      	subs	r3, #4
 8006690:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006698:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	3b04      	subs	r3, #4
 800669e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	f023 0201 	bic.w	r2, r3, #1
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	3b04      	subs	r3, #4
 80066ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80066b0:	4a0c      	ldr	r2, [pc, #48]	; (80066e4 <pxPortInitialiseStack+0x64>)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	3b14      	subs	r3, #20
 80066ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	3b04      	subs	r3, #4
 80066c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f06f 0202 	mvn.w	r2, #2
 80066ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	3b20      	subs	r3, #32
 80066d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80066d6:	68fb      	ldr	r3, [r7, #12]
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3714      	adds	r7, #20
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr
 80066e4:	080066e9 	.word	0x080066e9

080066e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80066ee:	2300      	movs	r3, #0
 80066f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80066f2:	4b14      	ldr	r3, [pc, #80]	; (8006744 <prvTaskExitError+0x5c>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066fa:	d00c      	beq.n	8006716 <prvTaskExitError+0x2e>
	__asm volatile
 80066fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006700:	b672      	cpsid	i
 8006702:	f383 8811 	msr	BASEPRI, r3
 8006706:	f3bf 8f6f 	isb	sy
 800670a:	f3bf 8f4f 	dsb	sy
 800670e:	b662      	cpsie	i
 8006710:	60fb      	str	r3, [r7, #12]
}
 8006712:	bf00      	nop
 8006714:	e7fe      	b.n	8006714 <prvTaskExitError+0x2c>
	__asm volatile
 8006716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671a:	b672      	cpsid	i
 800671c:	f383 8811 	msr	BASEPRI, r3
 8006720:	f3bf 8f6f 	isb	sy
 8006724:	f3bf 8f4f 	dsb	sy
 8006728:	b662      	cpsie	i
 800672a:	60bb      	str	r3, [r7, #8]
}
 800672c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800672e:	bf00      	nop
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d0fc      	beq.n	8006730 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006736:	bf00      	nop
 8006738:	bf00      	nop
 800673a:	3714      	adds	r7, #20
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr
 8006744:	2000000c 	.word	0x2000000c
	...

08006750 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006750:	4b07      	ldr	r3, [pc, #28]	; (8006770 <pxCurrentTCBConst2>)
 8006752:	6819      	ldr	r1, [r3, #0]
 8006754:	6808      	ldr	r0, [r1, #0]
 8006756:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800675a:	f380 8809 	msr	PSP, r0
 800675e:	f3bf 8f6f 	isb	sy
 8006762:	f04f 0000 	mov.w	r0, #0
 8006766:	f380 8811 	msr	BASEPRI, r0
 800676a:	4770      	bx	lr
 800676c:	f3af 8000 	nop.w

08006770 <pxCurrentTCBConst2>:
 8006770:	20000a3c 	.word	0x20000a3c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006774:	bf00      	nop
 8006776:	bf00      	nop

08006778 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006778:	4808      	ldr	r0, [pc, #32]	; (800679c <prvPortStartFirstTask+0x24>)
 800677a:	6800      	ldr	r0, [r0, #0]
 800677c:	6800      	ldr	r0, [r0, #0]
 800677e:	f380 8808 	msr	MSP, r0
 8006782:	f04f 0000 	mov.w	r0, #0
 8006786:	f380 8814 	msr	CONTROL, r0
 800678a:	b662      	cpsie	i
 800678c:	b661      	cpsie	f
 800678e:	f3bf 8f4f 	dsb	sy
 8006792:	f3bf 8f6f 	isb	sy
 8006796:	df00      	svc	0
 8006798:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800679a:	bf00      	nop
 800679c:	e000ed08 	.word	0xe000ed08

080067a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80067a6:	4b37      	ldr	r3, [pc, #220]	; (8006884 <xPortStartScheduler+0xe4>)
 80067a8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	22ff      	movs	r2, #255	; 0xff
 80067b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80067c0:	78fb      	ldrb	r3, [r7, #3]
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80067c8:	b2da      	uxtb	r2, r3
 80067ca:	4b2f      	ldr	r3, [pc, #188]	; (8006888 <xPortStartScheduler+0xe8>)
 80067cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80067ce:	4b2f      	ldr	r3, [pc, #188]	; (800688c <xPortStartScheduler+0xec>)
 80067d0:	2207      	movs	r2, #7
 80067d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067d4:	e009      	b.n	80067ea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80067d6:	4b2d      	ldr	r3, [pc, #180]	; (800688c <xPortStartScheduler+0xec>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	3b01      	subs	r3, #1
 80067dc:	4a2b      	ldr	r2, [pc, #172]	; (800688c <xPortStartScheduler+0xec>)
 80067de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80067e0:	78fb      	ldrb	r3, [r7, #3]
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	005b      	lsls	r3, r3, #1
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067ea:	78fb      	ldrb	r3, [r7, #3]
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067f2:	2b80      	cmp	r3, #128	; 0x80
 80067f4:	d0ef      	beq.n	80067d6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80067f6:	4b25      	ldr	r3, [pc, #148]	; (800688c <xPortStartScheduler+0xec>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f1c3 0307 	rsb	r3, r3, #7
 80067fe:	2b04      	cmp	r3, #4
 8006800:	d00c      	beq.n	800681c <xPortStartScheduler+0x7c>
	__asm volatile
 8006802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006806:	b672      	cpsid	i
 8006808:	f383 8811 	msr	BASEPRI, r3
 800680c:	f3bf 8f6f 	isb	sy
 8006810:	f3bf 8f4f 	dsb	sy
 8006814:	b662      	cpsie	i
 8006816:	60bb      	str	r3, [r7, #8]
}
 8006818:	bf00      	nop
 800681a:	e7fe      	b.n	800681a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800681c:	4b1b      	ldr	r3, [pc, #108]	; (800688c <xPortStartScheduler+0xec>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	021b      	lsls	r3, r3, #8
 8006822:	4a1a      	ldr	r2, [pc, #104]	; (800688c <xPortStartScheduler+0xec>)
 8006824:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006826:	4b19      	ldr	r3, [pc, #100]	; (800688c <xPortStartScheduler+0xec>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800682e:	4a17      	ldr	r2, [pc, #92]	; (800688c <xPortStartScheduler+0xec>)
 8006830:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	b2da      	uxtb	r2, r3
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800683a:	4b15      	ldr	r3, [pc, #84]	; (8006890 <xPortStartScheduler+0xf0>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a14      	ldr	r2, [pc, #80]	; (8006890 <xPortStartScheduler+0xf0>)
 8006840:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006844:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006846:	4b12      	ldr	r3, [pc, #72]	; (8006890 <xPortStartScheduler+0xf0>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a11      	ldr	r2, [pc, #68]	; (8006890 <xPortStartScheduler+0xf0>)
 800684c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006850:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006852:	f000 f8dd 	bl	8006a10 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006856:	4b0f      	ldr	r3, [pc, #60]	; (8006894 <xPortStartScheduler+0xf4>)
 8006858:	2200      	movs	r2, #0
 800685a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800685c:	f000 f8fc 	bl	8006a58 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006860:	4b0d      	ldr	r3, [pc, #52]	; (8006898 <xPortStartScheduler+0xf8>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a0c      	ldr	r2, [pc, #48]	; (8006898 <xPortStartScheduler+0xf8>)
 8006866:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800686a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800686c:	f7ff ff84 	bl	8006778 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006870:	f7ff f842 	bl	80058f8 <vTaskSwitchContext>
	prvTaskExitError();
 8006874:	f7ff ff38 	bl	80066e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3710      	adds	r7, #16
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	e000e400 	.word	0xe000e400
 8006888:	20001068 	.word	0x20001068
 800688c:	2000106c 	.word	0x2000106c
 8006890:	e000ed20 	.word	0xe000ed20
 8006894:	2000000c 	.word	0x2000000c
 8006898:	e000ef34 	.word	0xe000ef34

0800689c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
	__asm volatile
 80068a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a6:	b672      	cpsid	i
 80068a8:	f383 8811 	msr	BASEPRI, r3
 80068ac:	f3bf 8f6f 	isb	sy
 80068b0:	f3bf 8f4f 	dsb	sy
 80068b4:	b662      	cpsie	i
 80068b6:	607b      	str	r3, [r7, #4]
}
 80068b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80068ba:	4b10      	ldr	r3, [pc, #64]	; (80068fc <vPortEnterCritical+0x60>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	3301      	adds	r3, #1
 80068c0:	4a0e      	ldr	r2, [pc, #56]	; (80068fc <vPortEnterCritical+0x60>)
 80068c2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80068c4:	4b0d      	ldr	r3, [pc, #52]	; (80068fc <vPortEnterCritical+0x60>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d111      	bne.n	80068f0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80068cc:	4b0c      	ldr	r3, [pc, #48]	; (8006900 <vPortEnterCritical+0x64>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d00c      	beq.n	80068f0 <vPortEnterCritical+0x54>
	__asm volatile
 80068d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068da:	b672      	cpsid	i
 80068dc:	f383 8811 	msr	BASEPRI, r3
 80068e0:	f3bf 8f6f 	isb	sy
 80068e4:	f3bf 8f4f 	dsb	sy
 80068e8:	b662      	cpsie	i
 80068ea:	603b      	str	r3, [r7, #0]
}
 80068ec:	bf00      	nop
 80068ee:	e7fe      	b.n	80068ee <vPortEnterCritical+0x52>
	}
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr
 80068fc:	2000000c 	.word	0x2000000c
 8006900:	e000ed04 	.word	0xe000ed04

08006904 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800690a:	4b13      	ldr	r3, [pc, #76]	; (8006958 <vPortExitCritical+0x54>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d10c      	bne.n	800692c <vPortExitCritical+0x28>
	__asm volatile
 8006912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006916:	b672      	cpsid	i
 8006918:	f383 8811 	msr	BASEPRI, r3
 800691c:	f3bf 8f6f 	isb	sy
 8006920:	f3bf 8f4f 	dsb	sy
 8006924:	b662      	cpsie	i
 8006926:	607b      	str	r3, [r7, #4]
}
 8006928:	bf00      	nop
 800692a:	e7fe      	b.n	800692a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800692c:	4b0a      	ldr	r3, [pc, #40]	; (8006958 <vPortExitCritical+0x54>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	3b01      	subs	r3, #1
 8006932:	4a09      	ldr	r2, [pc, #36]	; (8006958 <vPortExitCritical+0x54>)
 8006934:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006936:	4b08      	ldr	r3, [pc, #32]	; (8006958 <vPortExitCritical+0x54>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d105      	bne.n	800694a <vPortExitCritical+0x46>
 800693e:	2300      	movs	r3, #0
 8006940:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	f383 8811 	msr	BASEPRI, r3
}
 8006948:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800694a:	bf00      	nop
 800694c:	370c      	adds	r7, #12
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr
 8006956:	bf00      	nop
 8006958:	2000000c 	.word	0x2000000c
 800695c:	00000000 	.word	0x00000000

08006960 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006960:	f3ef 8009 	mrs	r0, PSP
 8006964:	f3bf 8f6f 	isb	sy
 8006968:	4b15      	ldr	r3, [pc, #84]	; (80069c0 <pxCurrentTCBConst>)
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	f01e 0f10 	tst.w	lr, #16
 8006970:	bf08      	it	eq
 8006972:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006976:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800697a:	6010      	str	r0, [r2, #0]
 800697c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006980:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006984:	b672      	cpsid	i
 8006986:	f380 8811 	msr	BASEPRI, r0
 800698a:	f3bf 8f4f 	dsb	sy
 800698e:	f3bf 8f6f 	isb	sy
 8006992:	b662      	cpsie	i
 8006994:	f7fe ffb0 	bl	80058f8 <vTaskSwitchContext>
 8006998:	f04f 0000 	mov.w	r0, #0
 800699c:	f380 8811 	msr	BASEPRI, r0
 80069a0:	bc09      	pop	{r0, r3}
 80069a2:	6819      	ldr	r1, [r3, #0]
 80069a4:	6808      	ldr	r0, [r1, #0]
 80069a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069aa:	f01e 0f10 	tst.w	lr, #16
 80069ae:	bf08      	it	eq
 80069b0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80069b4:	f380 8809 	msr	PSP, r0
 80069b8:	f3bf 8f6f 	isb	sy
 80069bc:	4770      	bx	lr
 80069be:	bf00      	nop

080069c0 <pxCurrentTCBConst>:
 80069c0:	20000a3c 	.word	0x20000a3c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80069c4:	bf00      	nop
 80069c6:	bf00      	nop

080069c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
	__asm volatile
 80069ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d2:	b672      	cpsid	i
 80069d4:	f383 8811 	msr	BASEPRI, r3
 80069d8:	f3bf 8f6f 	isb	sy
 80069dc:	f3bf 8f4f 	dsb	sy
 80069e0:	b662      	cpsie	i
 80069e2:	607b      	str	r3, [r7, #4]
}
 80069e4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80069e6:	f7fe fecb 	bl	8005780 <xTaskIncrementTick>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d003      	beq.n	80069f8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80069f0:	4b06      	ldr	r3, [pc, #24]	; (8006a0c <SysTick_Handler+0x44>)
 80069f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069f6:	601a      	str	r2, [r3, #0]
 80069f8:	2300      	movs	r3, #0
 80069fa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	f383 8811 	msr	BASEPRI, r3
}
 8006a02:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006a04:	bf00      	nop
 8006a06:	3708      	adds	r7, #8
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	e000ed04 	.word	0xe000ed04

08006a10 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006a10:	b480      	push	{r7}
 8006a12:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006a14:	4b0b      	ldr	r3, [pc, #44]	; (8006a44 <vPortSetupTimerInterrupt+0x34>)
 8006a16:	2200      	movs	r2, #0
 8006a18:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006a1a:	4b0b      	ldr	r3, [pc, #44]	; (8006a48 <vPortSetupTimerInterrupt+0x38>)
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006a20:	4b0a      	ldr	r3, [pc, #40]	; (8006a4c <vPortSetupTimerInterrupt+0x3c>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a0a      	ldr	r2, [pc, #40]	; (8006a50 <vPortSetupTimerInterrupt+0x40>)
 8006a26:	fba2 2303 	umull	r2, r3, r2, r3
 8006a2a:	099b      	lsrs	r3, r3, #6
 8006a2c:	4a09      	ldr	r2, [pc, #36]	; (8006a54 <vPortSetupTimerInterrupt+0x44>)
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006a32:	4b04      	ldr	r3, [pc, #16]	; (8006a44 <vPortSetupTimerInterrupt+0x34>)
 8006a34:	2207      	movs	r2, #7
 8006a36:	601a      	str	r2, [r3, #0]
}
 8006a38:	bf00      	nop
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr
 8006a42:	bf00      	nop
 8006a44:	e000e010 	.word	0xe000e010
 8006a48:	e000e018 	.word	0xe000e018
 8006a4c:	20000000 	.word	0x20000000
 8006a50:	10624dd3 	.word	0x10624dd3
 8006a54:	e000e014 	.word	0xe000e014

08006a58 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006a58:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006a68 <vPortEnableVFP+0x10>
 8006a5c:	6801      	ldr	r1, [r0, #0]
 8006a5e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006a62:	6001      	str	r1, [r0, #0]
 8006a64:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006a66:	bf00      	nop
 8006a68:	e000ed88 	.word	0xe000ed88

08006a6c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b085      	sub	sp, #20
 8006a70:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006a72:	f3ef 8305 	mrs	r3, IPSR
 8006a76:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2b0f      	cmp	r3, #15
 8006a7c:	d916      	bls.n	8006aac <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006a7e:	4a19      	ldr	r2, [pc, #100]	; (8006ae4 <vPortValidateInterruptPriority+0x78>)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	4413      	add	r3, r2
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006a88:	4b17      	ldr	r3, [pc, #92]	; (8006ae8 <vPortValidateInterruptPriority+0x7c>)
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	7afa      	ldrb	r2, [r7, #11]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d20c      	bcs.n	8006aac <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8006a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a96:	b672      	cpsid	i
 8006a98:	f383 8811 	msr	BASEPRI, r3
 8006a9c:	f3bf 8f6f 	isb	sy
 8006aa0:	f3bf 8f4f 	dsb	sy
 8006aa4:	b662      	cpsie	i
 8006aa6:	607b      	str	r3, [r7, #4]
}
 8006aa8:	bf00      	nop
 8006aaa:	e7fe      	b.n	8006aaa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006aac:	4b0f      	ldr	r3, [pc, #60]	; (8006aec <vPortValidateInterruptPriority+0x80>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006ab4:	4b0e      	ldr	r3, [pc, #56]	; (8006af0 <vPortValidateInterruptPriority+0x84>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d90c      	bls.n	8006ad6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8006abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac0:	b672      	cpsid	i
 8006ac2:	f383 8811 	msr	BASEPRI, r3
 8006ac6:	f3bf 8f6f 	isb	sy
 8006aca:	f3bf 8f4f 	dsb	sy
 8006ace:	b662      	cpsie	i
 8006ad0:	603b      	str	r3, [r7, #0]
}
 8006ad2:	bf00      	nop
 8006ad4:	e7fe      	b.n	8006ad4 <vPortValidateInterruptPriority+0x68>
	}
 8006ad6:	bf00      	nop
 8006ad8:	3714      	adds	r7, #20
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	e000e3f0 	.word	0xe000e3f0
 8006ae8:	20001068 	.word	0x20001068
 8006aec:	e000ed0c 	.word	0xe000ed0c
 8006af0:	2000106c 	.word	0x2000106c

08006af4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b08a      	sub	sp, #40	; 0x28
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006afc:	2300      	movs	r3, #0
 8006afe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006b00:	f7fe fd80 	bl	8005604 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006b04:	4b5b      	ldr	r3, [pc, #364]	; (8006c74 <pvPortMalloc+0x180>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d101      	bne.n	8006b10 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006b0c:	f000 f91a 	bl	8006d44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006b10:	4b59      	ldr	r3, [pc, #356]	; (8006c78 <pvPortMalloc+0x184>)
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4013      	ands	r3, r2
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f040 8092 	bne.w	8006c42 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d01f      	beq.n	8006b64 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8006b24:	2208      	movs	r2, #8
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4413      	add	r3, r2
 8006b2a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f003 0307 	and.w	r3, r3, #7
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d016      	beq.n	8006b64 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f023 0307 	bic.w	r3, r3, #7
 8006b3c:	3308      	adds	r3, #8
 8006b3e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f003 0307 	and.w	r3, r3, #7
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00c      	beq.n	8006b64 <pvPortMalloc+0x70>
	__asm volatile
 8006b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4e:	b672      	cpsid	i
 8006b50:	f383 8811 	msr	BASEPRI, r3
 8006b54:	f3bf 8f6f 	isb	sy
 8006b58:	f3bf 8f4f 	dsb	sy
 8006b5c:	b662      	cpsie	i
 8006b5e:	617b      	str	r3, [r7, #20]
}
 8006b60:	bf00      	nop
 8006b62:	e7fe      	b.n	8006b62 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d06b      	beq.n	8006c42 <pvPortMalloc+0x14e>
 8006b6a:	4b44      	ldr	r3, [pc, #272]	; (8006c7c <pvPortMalloc+0x188>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d866      	bhi.n	8006c42 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006b74:	4b42      	ldr	r3, [pc, #264]	; (8006c80 <pvPortMalloc+0x18c>)
 8006b76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006b78:	4b41      	ldr	r3, [pc, #260]	; (8006c80 <pvPortMalloc+0x18c>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b7e:	e004      	b.n	8006b8a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8006b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d903      	bls.n	8006b9c <pvPortMalloc+0xa8>
 8006b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d1f1      	bne.n	8006b80 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006b9c:	4b35      	ldr	r3, [pc, #212]	; (8006c74 <pvPortMalloc+0x180>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d04d      	beq.n	8006c42 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006ba6:	6a3b      	ldr	r3, [r7, #32]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2208      	movs	r2, #8
 8006bac:	4413      	add	r3, r2
 8006bae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	6a3b      	ldr	r3, [r7, #32]
 8006bb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bba:	685a      	ldr	r2, [r3, #4]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	1ad2      	subs	r2, r2, r3
 8006bc0:	2308      	movs	r3, #8
 8006bc2:	005b      	lsls	r3, r3, #1
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d921      	bls.n	8006c0c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4413      	add	r3, r2
 8006bce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	f003 0307 	and.w	r3, r3, #7
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d00c      	beq.n	8006bf4 <pvPortMalloc+0x100>
	__asm volatile
 8006bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bde:	b672      	cpsid	i
 8006be0:	f383 8811 	msr	BASEPRI, r3
 8006be4:	f3bf 8f6f 	isb	sy
 8006be8:	f3bf 8f4f 	dsb	sy
 8006bec:	b662      	cpsie	i
 8006bee:	613b      	str	r3, [r7, #16]
}
 8006bf0:	bf00      	nop
 8006bf2:	e7fe      	b.n	8006bf2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf6:	685a      	ldr	r2, [r3, #4]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	1ad2      	subs	r2, r2, r3
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006c06:	69b8      	ldr	r0, [r7, #24]
 8006c08:	f000 f8fe 	bl	8006e08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006c0c:	4b1b      	ldr	r3, [pc, #108]	; (8006c7c <pvPortMalloc+0x188>)
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	4a19      	ldr	r2, [pc, #100]	; (8006c7c <pvPortMalloc+0x188>)
 8006c18:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006c1a:	4b18      	ldr	r3, [pc, #96]	; (8006c7c <pvPortMalloc+0x188>)
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	4b19      	ldr	r3, [pc, #100]	; (8006c84 <pvPortMalloc+0x190>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d203      	bcs.n	8006c2e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006c26:	4b15      	ldr	r3, [pc, #84]	; (8006c7c <pvPortMalloc+0x188>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a16      	ldr	r2, [pc, #88]	; (8006c84 <pvPortMalloc+0x190>)
 8006c2c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c30:	685a      	ldr	r2, [r3, #4]
 8006c32:	4b11      	ldr	r3, [pc, #68]	; (8006c78 <pvPortMalloc+0x184>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	431a      	orrs	r2, r3
 8006c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3e:	2200      	movs	r2, #0
 8006c40:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006c42:	f7fe fced 	bl	8005620 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	f003 0307 	and.w	r3, r3, #7
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d00c      	beq.n	8006c6a <pvPortMalloc+0x176>
	__asm volatile
 8006c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c54:	b672      	cpsid	i
 8006c56:	f383 8811 	msr	BASEPRI, r3
 8006c5a:	f3bf 8f6f 	isb	sy
 8006c5e:	f3bf 8f4f 	dsb	sy
 8006c62:	b662      	cpsie	i
 8006c64:	60fb      	str	r3, [r7, #12]
}
 8006c66:	bf00      	nop
 8006c68:	e7fe      	b.n	8006c68 <pvPortMalloc+0x174>
	return pvReturn;
 8006c6a:	69fb      	ldr	r3, [r7, #28]
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3728      	adds	r7, #40	; 0x28
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	20004c78 	.word	0x20004c78
 8006c78:	20004c84 	.word	0x20004c84
 8006c7c:	20004c7c 	.word	0x20004c7c
 8006c80:	20004c70 	.word	0x20004c70
 8006c84:	20004c80 	.word	0x20004c80

08006c88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b086      	sub	sp, #24
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d04c      	beq.n	8006d34 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006c9a:	2308      	movs	r3, #8
 8006c9c:	425b      	negs	r3, r3
 8006c9e:	697a      	ldr	r2, [r7, #20]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	685a      	ldr	r2, [r3, #4]
 8006cac:	4b23      	ldr	r3, [pc, #140]	; (8006d3c <vPortFree+0xb4>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4013      	ands	r3, r2
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d10c      	bne.n	8006cd0 <vPortFree+0x48>
	__asm volatile
 8006cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cba:	b672      	cpsid	i
 8006cbc:	f383 8811 	msr	BASEPRI, r3
 8006cc0:	f3bf 8f6f 	isb	sy
 8006cc4:	f3bf 8f4f 	dsb	sy
 8006cc8:	b662      	cpsie	i
 8006cca:	60fb      	str	r3, [r7, #12]
}
 8006ccc:	bf00      	nop
 8006cce:	e7fe      	b.n	8006cce <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d00c      	beq.n	8006cf2 <vPortFree+0x6a>
	__asm volatile
 8006cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cdc:	b672      	cpsid	i
 8006cde:	f383 8811 	msr	BASEPRI, r3
 8006ce2:	f3bf 8f6f 	isb	sy
 8006ce6:	f3bf 8f4f 	dsb	sy
 8006cea:	b662      	cpsie	i
 8006cec:	60bb      	str	r3, [r7, #8]
}
 8006cee:	bf00      	nop
 8006cf0:	e7fe      	b.n	8006cf0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	685a      	ldr	r2, [r3, #4]
 8006cf6:	4b11      	ldr	r3, [pc, #68]	; (8006d3c <vPortFree+0xb4>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d019      	beq.n	8006d34 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d115      	bne.n	8006d34 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	685a      	ldr	r2, [r3, #4]
 8006d0c:	4b0b      	ldr	r3, [pc, #44]	; (8006d3c <vPortFree+0xb4>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	43db      	mvns	r3, r3
 8006d12:	401a      	ands	r2, r3
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006d18:	f7fe fc74 	bl	8005604 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	685a      	ldr	r2, [r3, #4]
 8006d20:	4b07      	ldr	r3, [pc, #28]	; (8006d40 <vPortFree+0xb8>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4413      	add	r3, r2
 8006d26:	4a06      	ldr	r2, [pc, #24]	; (8006d40 <vPortFree+0xb8>)
 8006d28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006d2a:	6938      	ldr	r0, [r7, #16]
 8006d2c:	f000 f86c 	bl	8006e08 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006d30:	f7fe fc76 	bl	8005620 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006d34:	bf00      	nop
 8006d36:	3718      	adds	r7, #24
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	20004c84 	.word	0x20004c84
 8006d40:	20004c7c 	.word	0x20004c7c

08006d44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006d44:	b480      	push	{r7}
 8006d46:	b085      	sub	sp, #20
 8006d48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006d4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006d4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006d50:	4b27      	ldr	r3, [pc, #156]	; (8006df0 <prvHeapInit+0xac>)
 8006d52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f003 0307 	and.w	r3, r3, #7
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d00c      	beq.n	8006d78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	3307      	adds	r3, #7
 8006d62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f023 0307 	bic.w	r3, r3, #7
 8006d6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006d6c:	68ba      	ldr	r2, [r7, #8]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	4a1f      	ldr	r2, [pc, #124]	; (8006df0 <prvHeapInit+0xac>)
 8006d74:	4413      	add	r3, r2
 8006d76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006d7c:	4a1d      	ldr	r2, [pc, #116]	; (8006df4 <prvHeapInit+0xb0>)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006d82:	4b1c      	ldr	r3, [pc, #112]	; (8006df4 <prvHeapInit+0xb0>)
 8006d84:	2200      	movs	r2, #0
 8006d86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	68ba      	ldr	r2, [r7, #8]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006d90:	2208      	movs	r2, #8
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	1a9b      	subs	r3, r3, r2
 8006d96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f023 0307 	bic.w	r3, r3, #7
 8006d9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	4a15      	ldr	r2, [pc, #84]	; (8006df8 <prvHeapInit+0xb4>)
 8006da4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006da6:	4b14      	ldr	r3, [pc, #80]	; (8006df8 <prvHeapInit+0xb4>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2200      	movs	r2, #0
 8006dac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006dae:	4b12      	ldr	r3, [pc, #72]	; (8006df8 <prvHeapInit+0xb4>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2200      	movs	r2, #0
 8006db4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	1ad2      	subs	r2, r2, r3
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006dc4:	4b0c      	ldr	r3, [pc, #48]	; (8006df8 <prvHeapInit+0xb4>)
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	4a0a      	ldr	r2, [pc, #40]	; (8006dfc <prvHeapInit+0xb8>)
 8006dd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	4a09      	ldr	r2, [pc, #36]	; (8006e00 <prvHeapInit+0xbc>)
 8006dda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006ddc:	4b09      	ldr	r3, [pc, #36]	; (8006e04 <prvHeapInit+0xc0>)
 8006dde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006de2:	601a      	str	r2, [r3, #0]
}
 8006de4:	bf00      	nop
 8006de6:	3714      	adds	r7, #20
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr
 8006df0:	20001070 	.word	0x20001070
 8006df4:	20004c70 	.word	0x20004c70
 8006df8:	20004c78 	.word	0x20004c78
 8006dfc:	20004c80 	.word	0x20004c80
 8006e00:	20004c7c 	.word	0x20004c7c
 8006e04:	20004c84 	.word	0x20004c84

08006e08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006e10:	4b28      	ldr	r3, [pc, #160]	; (8006eb4 <prvInsertBlockIntoFreeList+0xac>)
 8006e12:	60fb      	str	r3, [r7, #12]
 8006e14:	e002      	b.n	8006e1c <prvInsertBlockIntoFreeList+0x14>
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	60fb      	str	r3, [r7, #12]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d8f7      	bhi.n	8006e16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	68ba      	ldr	r2, [r7, #8]
 8006e30:	4413      	add	r3, r2
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d108      	bne.n	8006e4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	685a      	ldr	r2, [r3, #4]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	441a      	add	r2, r3
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	68ba      	ldr	r2, [r7, #8]
 8006e54:	441a      	add	r2, r3
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d118      	bne.n	8006e90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	4b15      	ldr	r3, [pc, #84]	; (8006eb8 <prvInsertBlockIntoFreeList+0xb0>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d00d      	beq.n	8006e86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	685a      	ldr	r2, [r3, #4]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	441a      	add	r2, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	601a      	str	r2, [r3, #0]
 8006e84:	e008      	b.n	8006e98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e86:	4b0c      	ldr	r3, [pc, #48]	; (8006eb8 <prvInsertBlockIntoFreeList+0xb0>)
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	601a      	str	r2, [r3, #0]
 8006e8e:	e003      	b.n	8006e98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006e98:	68fa      	ldr	r2, [r7, #12]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d002      	beq.n	8006ea6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ea6:	bf00      	nop
 8006ea8:	3714      	adds	r7, #20
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr
 8006eb2:	bf00      	nop
 8006eb4:	20004c70 	.word	0x20004c70
 8006eb8:	20004c78 	.word	0x20004c78

08006ebc <__libc_init_array>:
 8006ebc:	b570      	push	{r4, r5, r6, lr}
 8006ebe:	4d0d      	ldr	r5, [pc, #52]	; (8006ef4 <__libc_init_array+0x38>)
 8006ec0:	4c0d      	ldr	r4, [pc, #52]	; (8006ef8 <__libc_init_array+0x3c>)
 8006ec2:	1b64      	subs	r4, r4, r5
 8006ec4:	10a4      	asrs	r4, r4, #2
 8006ec6:	2600      	movs	r6, #0
 8006ec8:	42a6      	cmp	r6, r4
 8006eca:	d109      	bne.n	8006ee0 <__libc_init_array+0x24>
 8006ecc:	4d0b      	ldr	r5, [pc, #44]	; (8006efc <__libc_init_array+0x40>)
 8006ece:	4c0c      	ldr	r4, [pc, #48]	; (8006f00 <__libc_init_array+0x44>)
 8006ed0:	f000 f8f2 	bl	80070b8 <_init>
 8006ed4:	1b64      	subs	r4, r4, r5
 8006ed6:	10a4      	asrs	r4, r4, #2
 8006ed8:	2600      	movs	r6, #0
 8006eda:	42a6      	cmp	r6, r4
 8006edc:	d105      	bne.n	8006eea <__libc_init_array+0x2e>
 8006ede:	bd70      	pop	{r4, r5, r6, pc}
 8006ee0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ee4:	4798      	blx	r3
 8006ee6:	3601      	adds	r6, #1
 8006ee8:	e7ee      	b.n	8006ec8 <__libc_init_array+0xc>
 8006eea:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eee:	4798      	blx	r3
 8006ef0:	3601      	adds	r6, #1
 8006ef2:	e7f2      	b.n	8006eda <__libc_init_array+0x1e>
 8006ef4:	080071d0 	.word	0x080071d0
 8006ef8:	080071d0 	.word	0x080071d0
 8006efc:	080071d0 	.word	0x080071d0
 8006f00:	080071d4 	.word	0x080071d4

08006f04 <__retarget_lock_acquire_recursive>:
 8006f04:	4770      	bx	lr

08006f06 <__retarget_lock_release_recursive>:
 8006f06:	4770      	bx	lr

08006f08 <memcpy>:
 8006f08:	440a      	add	r2, r1
 8006f0a:	4291      	cmp	r1, r2
 8006f0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f10:	d100      	bne.n	8006f14 <memcpy+0xc>
 8006f12:	4770      	bx	lr
 8006f14:	b510      	push	{r4, lr}
 8006f16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f1e:	4291      	cmp	r1, r2
 8006f20:	d1f9      	bne.n	8006f16 <memcpy+0xe>
 8006f22:	bd10      	pop	{r4, pc}

08006f24 <memset>:
 8006f24:	4402      	add	r2, r0
 8006f26:	4603      	mov	r3, r0
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d100      	bne.n	8006f2e <memset+0xa>
 8006f2c:	4770      	bx	lr
 8006f2e:	f803 1b01 	strb.w	r1, [r3], #1
 8006f32:	e7f9      	b.n	8006f28 <memset+0x4>

08006f34 <cleanup_glue>:
 8006f34:	b538      	push	{r3, r4, r5, lr}
 8006f36:	460c      	mov	r4, r1
 8006f38:	6809      	ldr	r1, [r1, #0]
 8006f3a:	4605      	mov	r5, r0
 8006f3c:	b109      	cbz	r1, 8006f42 <cleanup_glue+0xe>
 8006f3e:	f7ff fff9 	bl	8006f34 <cleanup_glue>
 8006f42:	4621      	mov	r1, r4
 8006f44:	4628      	mov	r0, r5
 8006f46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f4a:	f000 b869 	b.w	8007020 <_free_r>
	...

08006f50 <_reclaim_reent>:
 8006f50:	4b2c      	ldr	r3, [pc, #176]	; (8007004 <_reclaim_reent+0xb4>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4283      	cmp	r3, r0
 8006f56:	b570      	push	{r4, r5, r6, lr}
 8006f58:	4604      	mov	r4, r0
 8006f5a:	d051      	beq.n	8007000 <_reclaim_reent+0xb0>
 8006f5c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006f5e:	b143      	cbz	r3, 8006f72 <_reclaim_reent+0x22>
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d14a      	bne.n	8006ffc <_reclaim_reent+0xac>
 8006f66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f68:	6819      	ldr	r1, [r3, #0]
 8006f6a:	b111      	cbz	r1, 8006f72 <_reclaim_reent+0x22>
 8006f6c:	4620      	mov	r0, r4
 8006f6e:	f000 f857 	bl	8007020 <_free_r>
 8006f72:	6961      	ldr	r1, [r4, #20]
 8006f74:	b111      	cbz	r1, 8006f7c <_reclaim_reent+0x2c>
 8006f76:	4620      	mov	r0, r4
 8006f78:	f000 f852 	bl	8007020 <_free_r>
 8006f7c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006f7e:	b111      	cbz	r1, 8006f86 <_reclaim_reent+0x36>
 8006f80:	4620      	mov	r0, r4
 8006f82:	f000 f84d 	bl	8007020 <_free_r>
 8006f86:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006f88:	b111      	cbz	r1, 8006f90 <_reclaim_reent+0x40>
 8006f8a:	4620      	mov	r0, r4
 8006f8c:	f000 f848 	bl	8007020 <_free_r>
 8006f90:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006f92:	b111      	cbz	r1, 8006f9a <_reclaim_reent+0x4a>
 8006f94:	4620      	mov	r0, r4
 8006f96:	f000 f843 	bl	8007020 <_free_r>
 8006f9a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006f9c:	b111      	cbz	r1, 8006fa4 <_reclaim_reent+0x54>
 8006f9e:	4620      	mov	r0, r4
 8006fa0:	f000 f83e 	bl	8007020 <_free_r>
 8006fa4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006fa6:	b111      	cbz	r1, 8006fae <_reclaim_reent+0x5e>
 8006fa8:	4620      	mov	r0, r4
 8006faa:	f000 f839 	bl	8007020 <_free_r>
 8006fae:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006fb0:	b111      	cbz	r1, 8006fb8 <_reclaim_reent+0x68>
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	f000 f834 	bl	8007020 <_free_r>
 8006fb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fba:	b111      	cbz	r1, 8006fc2 <_reclaim_reent+0x72>
 8006fbc:	4620      	mov	r0, r4
 8006fbe:	f000 f82f 	bl	8007020 <_free_r>
 8006fc2:	69a3      	ldr	r3, [r4, #24]
 8006fc4:	b1e3      	cbz	r3, 8007000 <_reclaim_reent+0xb0>
 8006fc6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006fc8:	4620      	mov	r0, r4
 8006fca:	4798      	blx	r3
 8006fcc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006fce:	b1b9      	cbz	r1, 8007000 <_reclaim_reent+0xb0>
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006fd6:	f7ff bfad 	b.w	8006f34 <cleanup_glue>
 8006fda:	5949      	ldr	r1, [r1, r5]
 8006fdc:	b941      	cbnz	r1, 8006ff0 <_reclaim_reent+0xa0>
 8006fde:	3504      	adds	r5, #4
 8006fe0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fe2:	2d80      	cmp	r5, #128	; 0x80
 8006fe4:	68d9      	ldr	r1, [r3, #12]
 8006fe6:	d1f8      	bne.n	8006fda <_reclaim_reent+0x8a>
 8006fe8:	4620      	mov	r0, r4
 8006fea:	f000 f819 	bl	8007020 <_free_r>
 8006fee:	e7ba      	b.n	8006f66 <_reclaim_reent+0x16>
 8006ff0:	680e      	ldr	r6, [r1, #0]
 8006ff2:	4620      	mov	r0, r4
 8006ff4:	f000 f814 	bl	8007020 <_free_r>
 8006ff8:	4631      	mov	r1, r6
 8006ffa:	e7ef      	b.n	8006fdc <_reclaim_reent+0x8c>
 8006ffc:	2500      	movs	r5, #0
 8006ffe:	e7ef      	b.n	8006fe0 <_reclaim_reent+0x90>
 8007000:	bd70      	pop	{r4, r5, r6, pc}
 8007002:	bf00      	nop
 8007004:	20000010 	.word	0x20000010

08007008 <__malloc_lock>:
 8007008:	4801      	ldr	r0, [pc, #4]	; (8007010 <__malloc_lock+0x8>)
 800700a:	f7ff bf7b 	b.w	8006f04 <__retarget_lock_acquire_recursive>
 800700e:	bf00      	nop
 8007010:	20004c88 	.word	0x20004c88

08007014 <__malloc_unlock>:
 8007014:	4801      	ldr	r0, [pc, #4]	; (800701c <__malloc_unlock+0x8>)
 8007016:	f7ff bf76 	b.w	8006f06 <__retarget_lock_release_recursive>
 800701a:	bf00      	nop
 800701c:	20004c88 	.word	0x20004c88

08007020 <_free_r>:
 8007020:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007022:	2900      	cmp	r1, #0
 8007024:	d044      	beq.n	80070b0 <_free_r+0x90>
 8007026:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800702a:	9001      	str	r0, [sp, #4]
 800702c:	2b00      	cmp	r3, #0
 800702e:	f1a1 0404 	sub.w	r4, r1, #4
 8007032:	bfb8      	it	lt
 8007034:	18e4      	addlt	r4, r4, r3
 8007036:	f7ff ffe7 	bl	8007008 <__malloc_lock>
 800703a:	4a1e      	ldr	r2, [pc, #120]	; (80070b4 <_free_r+0x94>)
 800703c:	9801      	ldr	r0, [sp, #4]
 800703e:	6813      	ldr	r3, [r2, #0]
 8007040:	b933      	cbnz	r3, 8007050 <_free_r+0x30>
 8007042:	6063      	str	r3, [r4, #4]
 8007044:	6014      	str	r4, [r2, #0]
 8007046:	b003      	add	sp, #12
 8007048:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800704c:	f7ff bfe2 	b.w	8007014 <__malloc_unlock>
 8007050:	42a3      	cmp	r3, r4
 8007052:	d908      	bls.n	8007066 <_free_r+0x46>
 8007054:	6825      	ldr	r5, [r4, #0]
 8007056:	1961      	adds	r1, r4, r5
 8007058:	428b      	cmp	r3, r1
 800705a:	bf01      	itttt	eq
 800705c:	6819      	ldreq	r1, [r3, #0]
 800705e:	685b      	ldreq	r3, [r3, #4]
 8007060:	1949      	addeq	r1, r1, r5
 8007062:	6021      	streq	r1, [r4, #0]
 8007064:	e7ed      	b.n	8007042 <_free_r+0x22>
 8007066:	461a      	mov	r2, r3
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	b10b      	cbz	r3, 8007070 <_free_r+0x50>
 800706c:	42a3      	cmp	r3, r4
 800706e:	d9fa      	bls.n	8007066 <_free_r+0x46>
 8007070:	6811      	ldr	r1, [r2, #0]
 8007072:	1855      	adds	r5, r2, r1
 8007074:	42a5      	cmp	r5, r4
 8007076:	d10b      	bne.n	8007090 <_free_r+0x70>
 8007078:	6824      	ldr	r4, [r4, #0]
 800707a:	4421      	add	r1, r4
 800707c:	1854      	adds	r4, r2, r1
 800707e:	42a3      	cmp	r3, r4
 8007080:	6011      	str	r1, [r2, #0]
 8007082:	d1e0      	bne.n	8007046 <_free_r+0x26>
 8007084:	681c      	ldr	r4, [r3, #0]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	6053      	str	r3, [r2, #4]
 800708a:	4421      	add	r1, r4
 800708c:	6011      	str	r1, [r2, #0]
 800708e:	e7da      	b.n	8007046 <_free_r+0x26>
 8007090:	d902      	bls.n	8007098 <_free_r+0x78>
 8007092:	230c      	movs	r3, #12
 8007094:	6003      	str	r3, [r0, #0]
 8007096:	e7d6      	b.n	8007046 <_free_r+0x26>
 8007098:	6825      	ldr	r5, [r4, #0]
 800709a:	1961      	adds	r1, r4, r5
 800709c:	428b      	cmp	r3, r1
 800709e:	bf04      	itt	eq
 80070a0:	6819      	ldreq	r1, [r3, #0]
 80070a2:	685b      	ldreq	r3, [r3, #4]
 80070a4:	6063      	str	r3, [r4, #4]
 80070a6:	bf04      	itt	eq
 80070a8:	1949      	addeq	r1, r1, r5
 80070aa:	6021      	streq	r1, [r4, #0]
 80070ac:	6054      	str	r4, [r2, #4]
 80070ae:	e7ca      	b.n	8007046 <_free_r+0x26>
 80070b0:	b003      	add	sp, #12
 80070b2:	bd30      	pop	{r4, r5, pc}
 80070b4:	20004c8c 	.word	0x20004c8c

080070b8 <_init>:
 80070b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ba:	bf00      	nop
 80070bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070be:	bc08      	pop	{r3}
 80070c0:	469e      	mov	lr, r3
 80070c2:	4770      	bx	lr

080070c4 <_fini>:
 80070c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070c6:	bf00      	nop
 80070c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ca:	bc08      	pop	{r3}
 80070cc:	469e      	mov	lr, r3
 80070ce:	4770      	bx	lr
