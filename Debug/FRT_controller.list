
FRT_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007090  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08007290  08007290  00017290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073a8  080073a8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080073a8  080073a8  000173a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073b0  080073b0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073b0  080073b0  000173b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073b4  080073b4  000173b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080073b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c20  20000078  08007430  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c98  08007430  00024c98  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019229  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031c7  00000000  00000000  000392cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a8  00000000  00000000  0003c498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001260  00000000  00000000  0003d840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000344e  00000000  00000000  0003eaa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015ab0  00000000  00000000  00041eee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010735d  00000000  00000000  0005799e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015ecfb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005620  00000000  00000000  0015ed4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000078 	.word	0x20000078
 800021c:	00000000 	.word	0x00000000
 8000220:	08007278 	.word	0x08007278

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000007c 	.word	0x2000007c
 800023c:	08007278 	.word	0x08007278

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b974 	b.w	8000540 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <APPS2_ADC_Percent>:
	ADC_VAL = HAL_ADC_GetValue(&hadc1);
	HAL_ADC_Stop(&hadc1);
	return (float)ADC_VAL/4095; //returns ADC percentage ranges from 0-1
}

float APPS2_ADC_Percent(void) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
	uint16_t ADC_VAL;

	HAL_ADC_Start(&hadc2);
 800054a:	480f      	ldr	r0, [pc, #60]	; (8000588 <APPS2_ADC_Percent+0x44>)
 800054c:	f000 fffa 	bl	8001544 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 10);
 8000550:	210a      	movs	r1, #10
 8000552:	480d      	ldr	r0, [pc, #52]	; (8000588 <APPS2_ADC_Percent+0x44>)
 8000554:	f001 f8f8 	bl	8001748 <HAL_ADC_PollForConversion>
	ADC_VAL = HAL_ADC_GetValue(&hadc2);
 8000558:	480b      	ldr	r0, [pc, #44]	; (8000588 <APPS2_ADC_Percent+0x44>)
 800055a:	f001 f980 	bl	800185e <HAL_ADC_GetValue>
 800055e:	4603      	mov	r3, r0
 8000560:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc2);
 8000562:	4809      	ldr	r0, [pc, #36]	; (8000588 <APPS2_ADC_Percent+0x44>)
 8000564:	f001 f8bc 	bl	80016e0 <HAL_ADC_Stop>
	return (float)ADC_VAL/4095;
 8000568:	88fb      	ldrh	r3, [r7, #6]
 800056a:	ee07 3a90 	vmov	s15, r3
 800056e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000572:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800058c <APPS2_ADC_Percent+0x48>
 8000576:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800057a:	eef0 7a66 	vmov.f32	s15, s13
}
 800057e:	eeb0 0a67 	vmov.f32	s0, s15
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	200000dc 	.word	0x200000dc
 800058c:	457ff000 	.word	0x457ff000

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000594:	f000 ff65 	bl	8001462 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000598:	f000 f89e 	bl	80006d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059c:	f000 fa66 	bl	8000a6c <MX_GPIO_Init>
  MX_CAN1_Init();
 80005a0:	f000 f9f8 	bl	8000994 <MX_CAN1_Init>
  MX_ADC1_Init();
 80005a4:	f000 f900 	bl	80007a8 <MX_ADC1_Init>
  MX_ADC2_Init();
 80005a8:	f000 f950 	bl	800084c <MX_ADC2_Init>
  MX_ADC3_Init();
 80005ac:	f000 f9a0 	bl	80008f0 <MX_ADC3_Init>
  MX_CAN3_Init();
 80005b0:	f000 fa26 	bl	8000a00 <MX_CAN3_Init>
  /* USER CODE BEGIN 2 */
  	CAN_Config();
 80005b4:	f000 fac6 	bl	8000b44 <CAN_Config>

	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80005b8:	2102      	movs	r1, #2
 80005ba:	483a      	ldr	r0, [pc, #232]	; (80006a4 <main+0x114>)
 80005bc:	f001 ffba 	bl	8002534 <HAL_CAN_ActivateNotification>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <main+0x3a>
	{
	  Error_Handler();
 80005c6:	f000 fd23 	bl	8001010 <Error_Handler>
	}
	// Initialize TxHeader and TxData
	AMK_TxHeader_R.DLC = 8;
 80005ca:	4b37      	ldr	r3, [pc, #220]	; (80006a8 <main+0x118>)
 80005cc:	2208      	movs	r2, #8
 80005ce:	611a      	str	r2, [r3, #16]
	AMK_TxHeader_R.IDE = CAN_ID_STD;
 80005d0:	4b35      	ldr	r3, [pc, #212]	; (80006a8 <main+0x118>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
	AMK_TxHeader_R.RTR = CAN_RTR_DATA;
 80005d6:	4b34      	ldr	r3, [pc, #208]	; (80006a8 <main+0x118>)
 80005d8:	2200      	movs	r2, #0
 80005da:	60da      	str	r2, [r3, #12]
	AMK_TxHeader_R.StdId = 0x186;
 80005dc:	4b32      	ldr	r3, [pc, #200]	; (80006a8 <main+0x118>)
 80005de:	f44f 72c3 	mov.w	r2, #390	; 0x186
 80005e2:	601a      	str	r2, [r3, #0]
	AMK_TxHeader_R.TransmitGlobalTime = DISABLE;
 80005e4:	4b30      	ldr	r3, [pc, #192]	; (80006a8 <main+0x118>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	751a      	strb	r2, [r3, #20]

	AMK_TxData_R[0] = 0x00;
 80005ea:	4b30      	ldr	r3, [pc, #192]	; (80006ac <main+0x11c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	AMK_TxData_R[1] = 0x00;
 80005f0:	4b2e      	ldr	r3, [pc, #184]	; (80006ac <main+0x11c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	705a      	strb	r2, [r3, #1]
	AMK_TxData_R[2] = 0x00;
 80005f6:	4b2d      	ldr	r3, [pc, #180]	; (80006ac <main+0x11c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	709a      	strb	r2, [r3, #2]
	AMK_TxData_R[3] = 0x00;
 80005fc:	4b2b      	ldr	r3, [pc, #172]	; (80006ac <main+0x11c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	70da      	strb	r2, [r3, #3]
	AMK_TxData_R[4] = 0x00;
 8000602:	4b2a      	ldr	r3, [pc, #168]	; (80006ac <main+0x11c>)
 8000604:	2200      	movs	r2, #0
 8000606:	711a      	strb	r2, [r3, #4]
	AMK_TxData_R[5] = 0x00;
 8000608:	4b28      	ldr	r3, [pc, #160]	; (80006ac <main+0x11c>)
 800060a:	2200      	movs	r2, #0
 800060c:	715a      	strb	r2, [r3, #5]
	AMK_TxData_R[6] = 0x00;
 800060e:	4b27      	ldr	r3, [pc, #156]	; (80006ac <main+0x11c>)
 8000610:	2200      	movs	r2, #0
 8000612:	719a      	strb	r2, [r3, #6]
	AMK_TxData_R[7] = 0x00;
 8000614:	4b25      	ldr	r3, [pc, #148]	; (80006ac <main+0x11c>)
 8000616:	2200      	movs	r2, #0
 8000618:	71da      	strb	r2, [r3, #7]

	AMK_TxHeader_L.DLC = 8;
 800061a:	4b25      	ldr	r3, [pc, #148]	; (80006b0 <main+0x120>)
 800061c:	2208      	movs	r2, #8
 800061e:	611a      	str	r2, [r3, #16]
	AMK_TxHeader_L.IDE = CAN_ID_STD;
 8000620:	4b23      	ldr	r3, [pc, #140]	; (80006b0 <main+0x120>)
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
	AMK_TxHeader_L.RTR = CAN_RTR_DATA;
 8000626:	4b22      	ldr	r3, [pc, #136]	; (80006b0 <main+0x120>)
 8000628:	2200      	movs	r2, #0
 800062a:	60da      	str	r2, [r3, #12]
	AMK_TxHeader_L.StdId = 0x185;
 800062c:	4b20      	ldr	r3, [pc, #128]	; (80006b0 <main+0x120>)
 800062e:	f240 1285 	movw	r2, #389	; 0x185
 8000632:	601a      	str	r2, [r3, #0]
	AMK_TxHeader_L.TransmitGlobalTime = DISABLE;
 8000634:	4b1e      	ldr	r3, [pc, #120]	; (80006b0 <main+0x120>)
 8000636:	2200      	movs	r2, #0
 8000638:	751a      	strb	r2, [r3, #20]

	AMK_TxData_L[0] = 0x00;
 800063a:	4b1e      	ldr	r3, [pc, #120]	; (80006b4 <main+0x124>)
 800063c:	2200      	movs	r2, #0
 800063e:	701a      	strb	r2, [r3, #0]
	AMK_TxData_L[1] = 0x00;
 8000640:	4b1c      	ldr	r3, [pc, #112]	; (80006b4 <main+0x124>)
 8000642:	2200      	movs	r2, #0
 8000644:	705a      	strb	r2, [r3, #1]
	AMK_TxData_L[2] = 0x00;
 8000646:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <main+0x124>)
 8000648:	2200      	movs	r2, #0
 800064a:	709a      	strb	r2, [r3, #2]
	AMK_TxData_L[3] = 0x00;
 800064c:	4b19      	ldr	r3, [pc, #100]	; (80006b4 <main+0x124>)
 800064e:	2200      	movs	r2, #0
 8000650:	70da      	strb	r2, [r3, #3]
	AMK_TxData_L[4] = 0x00;
 8000652:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <main+0x124>)
 8000654:	2200      	movs	r2, #0
 8000656:	711a      	strb	r2, [r3, #4]
	AMK_TxData_L[5] = 0x00;
 8000658:	4b16      	ldr	r3, [pc, #88]	; (80006b4 <main+0x124>)
 800065a:	2200      	movs	r2, #0
 800065c:	715a      	strb	r2, [r3, #5]
	AMK_TxData_L[6] = 0x00;
 800065e:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <main+0x124>)
 8000660:	2200      	movs	r2, #0
 8000662:	719a      	strb	r2, [r3, #6]
	AMK_TxData_L[7] = 0x00;
 8000664:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <main+0x124>)
 8000666:	2200      	movs	r2, #0
 8000668:	71da      	strb	r2, [r3, #7]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800066a:	f003 fc53 	bl	8003f14 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of semReadytoDrive */
  semReadytoDriveHandle = osSemaphoreNew(1, 1, &semReadytoDrive_attributes);
 800066e:	4a12      	ldr	r2, [pc, #72]	; (80006b8 <main+0x128>)
 8000670:	2101      	movs	r1, #1
 8000672:	2001      	movs	r0, #1
 8000674:	f003 fdcc 	bl	8004210 <osSemaphoreNew>
 8000678:	4603      	mov	r3, r0
 800067a:	4a10      	ldr	r2, [pc, #64]	; (80006bc <main+0x12c>)
 800067c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of controllerStart */
  controllerStartHandle = osThreadNew(Start_FRT_controller, NULL, &controllerStart_attributes);
 800067e:	4a10      	ldr	r2, [pc, #64]	; (80006c0 <main+0x130>)
 8000680:	2100      	movs	r1, #0
 8000682:	4810      	ldr	r0, [pc, #64]	; (80006c4 <main+0x134>)
 8000684:	f003 fcb0 	bl	8003fe8 <osThreadNew>
 8000688:	4603      	mov	r3, r0
 800068a:	4a0f      	ldr	r2, [pc, #60]	; (80006c8 <main+0x138>)
 800068c:	6013      	str	r3, [r2, #0]

  /* creation of motorControl */
  motorControlHandle = osThreadNew(Start_AMK, NULL, &motorControl_attributes);
 800068e:	4a0f      	ldr	r2, [pc, #60]	; (80006cc <main+0x13c>)
 8000690:	2100      	movs	r1, #0
 8000692:	480f      	ldr	r0, [pc, #60]	; (80006d0 <main+0x140>)
 8000694:	f003 fca8 	bl	8003fe8 <osThreadNew>
 8000698:	4603      	mov	r3, r0
 800069a:	4a0e      	ldr	r2, [pc, #56]	; (80006d4 <main+0x144>)
 800069c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800069e:	f003 fc6d 	bl	8003f7c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a2:	e7fe      	b.n	80006a2 <main+0x112>
 80006a4:	2000016c 	.word	0x2000016c
 80006a8:	200001c8 	.word	0x200001c8
 80006ac:	20000214 	.word	0x20000214
 80006b0:	200001e0 	.word	0x200001e0
 80006b4:	2000021c 	.word	0x2000021c
 80006b8:	08007320 	.word	0x08007320
 80006bc:	200001c4 	.word	0x200001c4
 80006c0:	080072d8 	.word	0x080072d8
 80006c4:	08000d15 	.word	0x08000d15
 80006c8:	200001bc 	.word	0x200001bc
 80006cc:	080072fc 	.word	0x080072fc
 80006d0:	08000ded 	.word	0x08000ded
 80006d4:	200001c0 	.word	0x200001c0

080006d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b094      	sub	sp, #80	; 0x50
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 031c 	add.w	r3, r7, #28
 80006e2:	2234      	movs	r2, #52	; 0x34
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f006 fcfc 	bl	80070e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	f107 0308 	add.w	r3, r7, #8
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fc:	4b28      	ldr	r3, [pc, #160]	; (80007a0 <SystemClock_Config+0xc8>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000700:	4a27      	ldr	r2, [pc, #156]	; (80007a0 <SystemClock_Config+0xc8>)
 8000702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000706:	6413      	str	r3, [r2, #64]	; 0x40
 8000708:	4b25      	ldr	r3, [pc, #148]	; (80007a0 <SystemClock_Config+0xc8>)
 800070a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000714:	4b23      	ldr	r3, [pc, #140]	; (80007a4 <SystemClock_Config+0xcc>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800071c:	4a21      	ldr	r2, [pc, #132]	; (80007a4 <SystemClock_Config+0xcc>)
 800071e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000722:	6013      	str	r3, [r2, #0]
 8000724:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <SystemClock_Config+0xcc>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800072c:	603b      	str	r3, [r7, #0]
 800072e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000730:	2302      	movs	r3, #2
 8000732:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000734:	2301      	movs	r3, #1
 8000736:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000738:	2310      	movs	r3, #16
 800073a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073c:	2302      	movs	r3, #2
 800073e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000740:	2300      	movs	r3, #0
 8000742:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000744:	2308      	movs	r3, #8
 8000746:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000748:	2360      	movs	r3, #96	; 0x60
 800074a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 800074c:	2306      	movs	r3, #6
 800074e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000750:	2302      	movs	r3, #2
 8000752:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000754:	2302      	movs	r3, #2
 8000756:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000758:	f107 031c 	add.w	r3, r7, #28
 800075c:	4618      	mov	r0, r3
 800075e:	f002 fbff 	bl	8002f60 <HAL_RCC_OscConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000768:	f000 fc52 	bl	8001010 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076c:	230f      	movs	r3, #15
 800076e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000770:	2302      	movs	r3, #2
 8000772:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000774:	2380      	movs	r3, #128	; 0x80
 8000776:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000778:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800077c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077e:	2300      	movs	r3, #0
 8000780:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000782:	f107 0308 	add.w	r3, r7, #8
 8000786:	2100      	movs	r1, #0
 8000788:	4618      	mov	r0, r3
 800078a:	f002 fe97 	bl	80034bc <HAL_RCC_ClockConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000794:	f000 fc3c 	bl	8001010 <Error_Handler>
  }
}
 8000798:	bf00      	nop
 800079a:	3750      	adds	r7, #80	; 0x50
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40007000 	.word	0x40007000

080007a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ae:	463b      	mov	r3, r7
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007ba:	4b21      	ldr	r3, [pc, #132]	; (8000840 <MX_ADC1_Init+0x98>)
 80007bc:	4a21      	ldr	r2, [pc, #132]	; (8000844 <MX_ADC1_Init+0x9c>)
 80007be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007c0:	4b1f      	ldr	r3, [pc, #124]	; (8000840 <MX_ADC1_Init+0x98>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007c6:	4b1e      	ldr	r3, [pc, #120]	; (8000840 <MX_ADC1_Init+0x98>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007cc:	4b1c      	ldr	r3, [pc, #112]	; (8000840 <MX_ADC1_Init+0x98>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007d2:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <MX_ADC1_Init+0x98>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007d8:	4b19      	ldr	r3, [pc, #100]	; (8000840 <MX_ADC1_Init+0x98>)
 80007da:	2200      	movs	r2, #0
 80007dc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007e0:	4b17      	ldr	r3, [pc, #92]	; (8000840 <MX_ADC1_Init+0x98>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007e6:	4b16      	ldr	r3, [pc, #88]	; (8000840 <MX_ADC1_Init+0x98>)
 80007e8:	4a17      	ldr	r2, [pc, #92]	; (8000848 <MX_ADC1_Init+0xa0>)
 80007ea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007ec:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_ADC1_Init+0x98>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007f2:	4b13      	ldr	r3, [pc, #76]	; (8000840 <MX_ADC1_Init+0x98>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007f8:	4b11      	ldr	r3, [pc, #68]	; (8000840 <MX_ADC1_Init+0x98>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000800:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <MX_ADC1_Init+0x98>)
 8000802:	2201      	movs	r2, #1
 8000804:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000806:	480e      	ldr	r0, [pc, #56]	; (8000840 <MX_ADC1_Init+0x98>)
 8000808:	f000 fe58 	bl	80014bc <HAL_ADC_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000812:	f000 fbfd 	bl	8001010 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000816:	230a      	movs	r3, #10
 8000818:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800081a:	2301      	movs	r3, #1
 800081c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800081e:	2300      	movs	r3, #0
 8000820:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000822:	463b      	mov	r3, r7
 8000824:	4619      	mov	r1, r3
 8000826:	4806      	ldr	r0, [pc, #24]	; (8000840 <MX_ADC1_Init+0x98>)
 8000828:	f001 f826 	bl	8001878 <HAL_ADC_ConfigChannel>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000832:	f000 fbed 	bl	8001010 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	3710      	adds	r7, #16
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000094 	.word	0x20000094
 8000844:	40012000 	.word	0x40012000
 8000848:	0f000001 	.word	0x0f000001

0800084c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000852:	463b      	mov	r3, r7
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800085e:	4b21      	ldr	r3, [pc, #132]	; (80008e4 <MX_ADC2_Init+0x98>)
 8000860:	4a21      	ldr	r2, [pc, #132]	; (80008e8 <MX_ADC2_Init+0x9c>)
 8000862:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000864:	4b1f      	ldr	r3, [pc, #124]	; (80008e4 <MX_ADC2_Init+0x98>)
 8000866:	2200      	movs	r2, #0
 8000868:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800086a:	4b1e      	ldr	r3, [pc, #120]	; (80008e4 <MX_ADC2_Init+0x98>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000870:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <MX_ADC2_Init+0x98>)
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000876:	4b1b      	ldr	r3, [pc, #108]	; (80008e4 <MX_ADC2_Init+0x98>)
 8000878:	2201      	movs	r2, #1
 800087a:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800087c:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <MX_ADC2_Init+0x98>)
 800087e:	2200      	movs	r2, #0
 8000880:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000884:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <MX_ADC2_Init+0x98>)
 8000886:	2200      	movs	r2, #0
 8000888:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800088a:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <MX_ADC2_Init+0x98>)
 800088c:	4a17      	ldr	r2, [pc, #92]	; (80008ec <MX_ADC2_Init+0xa0>)
 800088e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000890:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <MX_ADC2_Init+0x98>)
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000896:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <MX_ADC2_Init+0x98>)
 8000898:	2201      	movs	r2, #1
 800089a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800089c:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_ADC2_Init+0x98>)
 800089e:	2200      	movs	r2, #0
 80008a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <MX_ADC2_Init+0x98>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80008aa:	480e      	ldr	r0, [pc, #56]	; (80008e4 <MX_ADC2_Init+0x98>)
 80008ac:	f000 fe06 	bl	80014bc <HAL_ADC_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 80008b6:	f000 fbab 	bl	8001010 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80008ba:	230b      	movs	r3, #11
 80008bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008be:	2301      	movs	r3, #1
 80008c0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008c2:	2300      	movs	r3, #0
 80008c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008c6:	463b      	mov	r3, r7
 80008c8:	4619      	mov	r1, r3
 80008ca:	4806      	ldr	r0, [pc, #24]	; (80008e4 <MX_ADC2_Init+0x98>)
 80008cc:	f000 ffd4 	bl	8001878 <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80008d6:	f000 fb9b 	bl	8001010 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	200000dc 	.word	0x200000dc
 80008e8:	40012100 	.word	0x40012100
 80008ec:	0f000001 	.word	0x0f000001

080008f0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008f6:	463b      	mov	r3, r7
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000902:	4b21      	ldr	r3, [pc, #132]	; (8000988 <MX_ADC3_Init+0x98>)
 8000904:	4a21      	ldr	r2, [pc, #132]	; (800098c <MX_ADC3_Init+0x9c>)
 8000906:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000908:	4b1f      	ldr	r3, [pc, #124]	; (8000988 <MX_ADC3_Init+0x98>)
 800090a:	2200      	movs	r2, #0
 800090c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800090e:	4b1e      	ldr	r3, [pc, #120]	; (8000988 <MX_ADC3_Init+0x98>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000914:	4b1c      	ldr	r3, [pc, #112]	; (8000988 <MX_ADC3_Init+0x98>)
 8000916:	2200      	movs	r2, #0
 8000918:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800091a:	4b1b      	ldr	r3, [pc, #108]	; (8000988 <MX_ADC3_Init+0x98>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000920:	4b19      	ldr	r3, [pc, #100]	; (8000988 <MX_ADC3_Init+0x98>)
 8000922:	2200      	movs	r2, #0
 8000924:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000928:	4b17      	ldr	r3, [pc, #92]	; (8000988 <MX_ADC3_Init+0x98>)
 800092a:	2200      	movs	r2, #0
 800092c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800092e:	4b16      	ldr	r3, [pc, #88]	; (8000988 <MX_ADC3_Init+0x98>)
 8000930:	4a17      	ldr	r2, [pc, #92]	; (8000990 <MX_ADC3_Init+0xa0>)
 8000932:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000934:	4b14      	ldr	r3, [pc, #80]	; (8000988 <MX_ADC3_Init+0x98>)
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800093a:	4b13      	ldr	r3, [pc, #76]	; (8000988 <MX_ADC3_Init+0x98>)
 800093c:	2201      	movs	r2, #1
 800093e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000940:	4b11      	ldr	r3, [pc, #68]	; (8000988 <MX_ADC3_Init+0x98>)
 8000942:	2200      	movs	r2, #0
 8000944:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000948:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <MX_ADC3_Init+0x98>)
 800094a:	2201      	movs	r2, #1
 800094c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800094e:	480e      	ldr	r0, [pc, #56]	; (8000988 <MX_ADC3_Init+0x98>)
 8000950:	f000 fdb4 	bl	80014bc <HAL_ADC_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 800095a:	f000 fb59 	bl	8001010 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800095e:	230c      	movs	r3, #12
 8000960:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000962:	2301      	movs	r3, #1
 8000964:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000966:	2300      	movs	r3, #0
 8000968:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800096a:	463b      	mov	r3, r7
 800096c:	4619      	mov	r1, r3
 800096e:	4806      	ldr	r0, [pc, #24]	; (8000988 <MX_ADC3_Init+0x98>)
 8000970:	f000 ff82 	bl	8001878 <HAL_ADC_ConfigChannel>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 800097a:	f000 fb49 	bl	8001010 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800097e:	bf00      	nop
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000124 	.word	0x20000124
 800098c:	40012200 	.word	0x40012200
 8000990:	0f000001 	.word	0x0f000001

08000994 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000998:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <MX_CAN1_Init+0x64>)
 800099a:	4a18      	ldr	r2, [pc, #96]	; (80009fc <MX_CAN1_Init+0x68>)
 800099c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1;
 800099e:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <MX_CAN1_Init+0x64>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80009a4:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <MX_CAN1_Init+0x64>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80009aa:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <MX_CAN1_Init+0x64>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80009b0:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <MX_CAN1_Init+0x64>)
 80009b2:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80009b6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <MX_CAN1_Init+0x64>)
 80009ba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80009be:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80009c0:	4b0d      	ldr	r3, [pc, #52]	; (80009f8 <MX_CAN1_Init+0x64>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 80009c6:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <MX_CAN1_Init+0x64>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80009cc:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <MX_CAN1_Init+0x64>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80009d2:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <MX_CAN1_Init+0x64>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80009d8:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <MX_CAN1_Init+0x64>)
 80009da:	2200      	movs	r2, #0
 80009dc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <MX_CAN1_Init+0x64>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80009e4:	4804      	ldr	r0, [pc, #16]	; (80009f8 <MX_CAN1_Init+0x64>)
 80009e6:	f001 f997 	bl	8001d18 <HAL_CAN_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80009f0:	f000 fb0e 	bl	8001010 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	2000016c 	.word	0x2000016c
 80009fc:	40006400 	.word	0x40006400

08000a00 <MX_CAN3_Init>:
  * @brief CAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN3_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 8000a04:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <MX_CAN3_Init+0x64>)
 8000a06:	4a18      	ldr	r2, [pc, #96]	; (8000a68 <MX_CAN3_Init+0x68>)
 8000a08:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 1;
 8000a0a:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <MX_CAN3_Init+0x64>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8000a10:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <MX_CAN3_Init+0x64>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a16:	4b13      	ldr	r3, [pc, #76]	; (8000a64 <MX_CAN3_Init+0x64>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000a1c:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <MX_CAN3_Init+0x64>)
 8000a1e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000a22:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000a24:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <MX_CAN3_Init+0x64>)
 8000a26:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000a2a:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8000a2c:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <MX_CAN3_Init+0x64>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = ENABLE;
 8000a32:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <MX_CAN3_Init+0x64>)
 8000a34:	2201      	movs	r2, #1
 8000a36:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8000a38:	4b0a      	ldr	r3, [pc, #40]	; (8000a64 <MX_CAN3_Init+0x64>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8000a3e:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <MX_CAN3_Init+0x64>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8000a44:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <MX_CAN3_Init+0x64>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 8000a4a:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <MX_CAN3_Init+0x64>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8000a50:	4804      	ldr	r0, [pc, #16]	; (8000a64 <MX_CAN3_Init+0x64>)
 8000a52:	f001 f961 	bl	8001d18 <HAL_CAN_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 8000a5c:	f000 fad8 	bl	8001010 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20000194 	.word	0x20000194
 8000a68:	40003400 	.word	0x40003400

08000a6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b088      	sub	sp, #32
 8000a70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a72:	f107 030c 	add.w	r3, r7, #12
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a82:	4b2d      	ldr	r3, [pc, #180]	; (8000b38 <MX_GPIO_Init+0xcc>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a2c      	ldr	r2, [pc, #176]	; (8000b38 <MX_GPIO_Init+0xcc>)
 8000a88:	f043 0304 	orr.w	r3, r3, #4
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b2a      	ldr	r3, [pc, #168]	; (8000b38 <MX_GPIO_Init+0xcc>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0304 	and.w	r3, r3, #4
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	4b27      	ldr	r3, [pc, #156]	; (8000b38 <MX_GPIO_Init+0xcc>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a26      	ldr	r2, [pc, #152]	; (8000b38 <MX_GPIO_Init+0xcc>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b24      	ldr	r3, [pc, #144]	; (8000b38 <MX_GPIO_Init+0xcc>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ab2:	4b21      	ldr	r3, [pc, #132]	; (8000b38 <MX_GPIO_Init+0xcc>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a20      	ldr	r2, [pc, #128]	; (8000b38 <MX_GPIO_Init+0xcc>)
 8000ab8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b1e      	ldr	r3, [pc, #120]	; (8000b38 <MX_GPIO_Init+0xcc>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ac6:	603b      	str	r3, [r7, #0]
 8000ac8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED_Pin|START_BTN_LED_EN_Pin, GPIO_PIN_RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2128      	movs	r1, #40	; 0x28
 8000ace:	481b      	ldr	r0, [pc, #108]	; (8000b3c <MX_GPIO_Init+0xd0>)
 8000ad0:	f002 fa2c 	bl	8002f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BRAKE_LIGHT_EN_Pin|RTDS_EN_Pin, GPIO_PIN_RESET);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2109      	movs	r1, #9
 8000ad8:	4819      	ldr	r0, [pc, #100]	; (8000b40 <MX_GPIO_Init+0xd4>)
 8000ada:	f002 fa27 	bl	8002f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_LED_Pin START_BTN_LED_EN_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|START_BTN_LED_EN_Pin;
 8000ade:	2328      	movs	r3, #40	; 0x28
 8000ae0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	2300      	movs	r3, #0
 8000aec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aee:	f107 030c 	add.w	r3, r7, #12
 8000af2:	4619      	mov	r1, r3
 8000af4:	4811      	ldr	r0, [pc, #68]	; (8000b3c <MX_GPIO_Init+0xd0>)
 8000af6:	f002 f855 	bl	8002ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BRAKE_LIGHT_EN_Pin RTDS_EN_Pin */
  GPIO_InitStruct.Pin = BRAKE_LIGHT_EN_Pin|RTDS_EN_Pin;
 8000afa:	2309      	movs	r3, #9
 8000afc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afe:	2301      	movs	r3, #1
 8000b00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b0a:	f107 030c 	add.w	r3, r7, #12
 8000b0e:	4619      	mov	r1, r3
 8000b10:	480b      	ldr	r0, [pc, #44]	; (8000b40 <MX_GPIO_Init+0xd4>)
 8000b12:	f002 f847 	bl	8002ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BTN_n_Pin */
  GPIO_InitStruct.Pin = START_BTN_n_Pin;
 8000b16:	2340      	movs	r3, #64	; 0x40
 8000b18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(START_BTN_n_GPIO_Port, &GPIO_InitStruct);
 8000b22:	f107 030c 	add.w	r3, r7, #12
 8000b26:	4619      	mov	r1, r3
 8000b28:	4805      	ldr	r0, [pc, #20]	; (8000b40 <MX_GPIO_Init+0xd4>)
 8000b2a:	f002 f83b 	bl	8002ba4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b2e:	bf00      	nop
 8000b30:	3720      	adds	r7, #32
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40020000 	.word	0x40020000
 8000b40:	40021800 	.word	0x40021800

08000b44 <CAN_Config>:

/* USER CODE BEGIN 4 */
static void CAN_Config(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08a      	sub	sp, #40	; 0x28
 8000b48:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 13;
 8000b4a:	230d      	movs	r3, #13
 8000b4c:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000b52:	2301      	movs	r3, #1
 8000b54:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x284<<5;
 8000b56:	f44f 43a1 	mov.w	r3, #20608	; 0x5080
 8000b5a:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0xFFE<<5; //Only ID 0x284 and 0x285 can pass through
 8000b60:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <CAN_Config+0x6c>)
 8000b62:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8000b64:	2300      	movs	r3, #0
 8000b66:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8000b74:	463b      	mov	r3, r7
 8000b76:	4619      	mov	r1, r3
 8000b78:	480e      	ldr	r0, [pc, #56]	; (8000bb4 <CAN_Config+0x70>)
 8000b7a:	f001 f9c9 	bl	8001f10 <HAL_CAN_ConfigFilter>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <CAN_Config+0x44>
	{
		/* Filter configuration Error */
		Error_Handler();
 8000b84:	f000 fa44 	bl	8001010 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8000b88:	480a      	ldr	r0, [pc, #40]	; (8000bb4 <CAN_Config+0x70>)
 8000b8a:	f001 faad 	bl	80020e8 <HAL_CAN_Start>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <CAN_Config+0x54>
	{
		/* Start Error */
		Error_Handler();
 8000b94:	f000 fa3c 	bl	8001010 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan3) != HAL_OK)
 8000b98:	4807      	ldr	r0, [pc, #28]	; (8000bb8 <CAN_Config+0x74>)
 8000b9a:	f001 faa5 	bl	80020e8 <HAL_CAN_Start>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <CAN_Config+0x64>
	{
		/* Start Error */
		Error_Handler();
 8000ba4:	f000 fa34 	bl	8001010 <Error_Handler>
	}
}
 8000ba8:	bf00      	nop
 8000baa:	3728      	adds	r7, #40	; 0x28
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	0001ffc0 	.word	0x0001ffc0
 8000bb4:	2000016c 	.word	0x2000016c
 8000bb8:	20000194 	.word	0x20000194

08000bbc <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
	//Get Rx message
	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8000bc4:	4b4e      	ldr	r3, [pc, #312]	; (8000d00 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000bc6:	4a4f      	ldr	r2, [pc, #316]	; (8000d04 <HAL_CAN_RxFifo0MsgPendingCallback+0x148>)
 8000bc8:	2100      	movs	r1, #0
 8000bca:	484f      	ldr	r0, [pc, #316]	; (8000d08 <HAL_CAN_RxFifo0MsgPendingCallback+0x14c>)
 8000bcc:	f001 fba0 	bl	8002310 <HAL_CAN_GetRxMessage>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
		Error_Handler();
 8000bd6:	f000 fa1b 	bl	8001010 <Error_Handler>
	}

	if (RxHeader.StdId == 0x285) {
 8000bda:	4b4a      	ldr	r3, [pc, #296]	; (8000d04 <HAL_CAN_RxFifo0MsgPendingCallback+0x148>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f240 2285 	movw	r2, #645	; 0x285
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d142      	bne.n	8000c6c <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>
		if ((RxData[1] >> 1) & 1) {
 8000be6:	4b46      	ldr	r3, [pc, #280]	; (8000d00 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000be8:	785b      	ldrb	r3, [r3, #1]
 8000bea:	085b      	lsrs	r3, r3, #1
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d003      	beq.n	8000bfe <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
			MotorStatus_R = STATUS_ERROR;
 8000bf6:	4b45      	ldr	r3, [pc, #276]	; (8000d0c <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000bf8:	2207      	movs	r2, #7
 8000bfa:	701a      	strb	r2, [r3, #0]
			return;
 8000bfc:	e07d      	b.n	8000cfa <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
		} else if (RxData[1] >> 7 & 1){
 8000bfe:	4b40      	ldr	r3, [pc, #256]	; (8000d00 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000c00:	785b      	ldrb	r3, [r3, #1]
 8000c02:	09db      	lsrs	r3, r3, #7
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d003      	beq.n	8000c16 <HAL_CAN_RxFifo0MsgPendingCallback+0x5a>
			MotorStatus_R = STATUS_DERATING;
 8000c0e:	4b3f      	ldr	r3, [pc, #252]	; (8000d0c <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000c10:	2206      	movs	r2, #6
 8000c12:	701a      	strb	r2, [r3, #0]
			return;
 8000c14:	e071      	b.n	8000cfa <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
		} else {
			switch(RxData[1]) {
 8000c16:	4b3a      	ldr	r3, [pc, #232]	; (8000d00 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000c18:	785b      	ldrb	r3, [r3, #1]
 8000c1a:	2b79      	cmp	r3, #121	; 0x79
 8000c1c:	d01e      	beq.n	8000c5c <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>
 8000c1e:	2b79      	cmp	r3, #121	; 0x79
 8000c20:	dc20      	bgt.n	8000c64 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
 8000c22:	2b59      	cmp	r3, #89	; 0x59
 8000c24:	d016      	beq.n	8000c54 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>
 8000c26:	2b59      	cmp	r3, #89	; 0x59
 8000c28:	dc1c      	bgt.n	8000c64 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
 8000c2a:	2b19      	cmp	r3, #25
 8000c2c:	d00e      	beq.n	8000c4c <HAL_CAN_RxFifo0MsgPendingCallback+0x90>
 8000c2e:	2b19      	cmp	r3, #25
 8000c30:	dc18      	bgt.n	8000c64 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d002      	beq.n	8000c3c <HAL_CAN_RxFifo0MsgPendingCallback+0x80>
 8000c36:	2b11      	cmp	r3, #17
 8000c38:	d004      	beq.n	8000c44 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>
 8000c3a:	e013      	b.n	8000c64 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
				case 0x01:
					MotorStatus_R = STATUS_SYSTEM_READY;
 8000c3c:	4b33      	ldr	r3, [pc, #204]	; (8000d0c <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	701a      	strb	r2, [r3, #0]
					break;
 8000c42:	e05a      	b.n	8000cfa <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x11:
					MotorStatus_R = STATUS_DC_ON;
 8000c44:	4b31      	ldr	r3, [pc, #196]	; (8000d0c <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000c46:	2202      	movs	r2, #2
 8000c48:	701a      	strb	r2, [r3, #0]
					break;
 8000c4a:	e056      	b.n	8000cfa <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x19:
					MotorStatus_R = STATUS_QUIT_DC_ON;
 8000c4c:	4b2f      	ldr	r3, [pc, #188]	; (8000d0c <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000c4e:	2203      	movs	r2, #3
 8000c50:	701a      	strb	r2, [r3, #0]
					break;
 8000c52:	e052      	b.n	8000cfa <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x59:
					MotorStatus_R = STATUS_INVERTER_ON;
 8000c54:	4b2d      	ldr	r3, [pc, #180]	; (8000d0c <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000c56:	2204      	movs	r2, #4
 8000c58:	701a      	strb	r2, [r3, #0]
					break;
 8000c5a:	e04e      	b.n	8000cfa <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x79:
					MotorStatus_R = STATUS_QUIT_INVERTER_ON;
 8000c5c:	4b2b      	ldr	r3, [pc, #172]	; (8000d0c <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000c5e:	2205      	movs	r2, #5
 8000c60:	701a      	strb	r2, [r3, #0]
					break;
 8000c62:	e04a      	b.n	8000cfa <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				default:
					MotorStatus_R = STATUS_UNKNOWN;
 8000c64:	4b29      	ldr	r3, [pc, #164]	; (8000d0c <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	701a      	strb	r2, [r3, #0]
 8000c6a:	e046      	b.n	8000cfa <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
			}
		}
	}
	else if (RxHeader.StdId == 0x284) {
 8000c6c:	4b25      	ldr	r3, [pc, #148]	; (8000d04 <HAL_CAN_RxFifo0MsgPendingCallback+0x148>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f5b3 7f21 	cmp.w	r3, #644	; 0x284
 8000c74:	d141      	bne.n	8000cfa <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
		if ((RxData[1] >> 1) & 1) {
 8000c76:	4b22      	ldr	r3, [pc, #136]	; (8000d00 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000c78:	785b      	ldrb	r3, [r3, #1]
 8000c7a:	085b      	lsrs	r3, r3, #1
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d003      	beq.n	8000c8e <HAL_CAN_RxFifo0MsgPendingCallback+0xd2>
			MotorStatus_L = STATUS_ERROR;
 8000c86:	4b22      	ldr	r3, [pc, #136]	; (8000d10 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000c88:	2207      	movs	r2, #7
 8000c8a:	701a      	strb	r2, [r3, #0]
			return;
 8000c8c:	e035      	b.n	8000cfa <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
		} else if (RxData[1] >> 7 & 1){
 8000c8e:	4b1c      	ldr	r3, [pc, #112]	; (8000d00 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000c90:	785b      	ldrb	r3, [r3, #1]
 8000c92:	09db      	lsrs	r3, r3, #7
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d003      	beq.n	8000ca6 <HAL_CAN_RxFifo0MsgPendingCallback+0xea>
			MotorStatus_L = STATUS_DERATING;
 8000c9e:	4b1c      	ldr	r3, [pc, #112]	; (8000d10 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000ca0:	2206      	movs	r2, #6
 8000ca2:	701a      	strb	r2, [r3, #0]
			return;
 8000ca4:	e029      	b.n	8000cfa <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
		} else {
			switch(RxData[1]) {
 8000ca6:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000ca8:	785b      	ldrb	r3, [r3, #1]
 8000caa:	2b79      	cmp	r3, #121	; 0x79
 8000cac:	d01e      	beq.n	8000cec <HAL_CAN_RxFifo0MsgPendingCallback+0x130>
 8000cae:	2b79      	cmp	r3, #121	; 0x79
 8000cb0:	dc20      	bgt.n	8000cf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>
 8000cb2:	2b59      	cmp	r3, #89	; 0x59
 8000cb4:	d016      	beq.n	8000ce4 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>
 8000cb6:	2b59      	cmp	r3, #89	; 0x59
 8000cb8:	dc1c      	bgt.n	8000cf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>
 8000cba:	2b19      	cmp	r3, #25
 8000cbc:	d00e      	beq.n	8000cdc <HAL_CAN_RxFifo0MsgPendingCallback+0x120>
 8000cbe:	2b19      	cmp	r3, #25
 8000cc0:	dc18      	bgt.n	8000cf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d002      	beq.n	8000ccc <HAL_CAN_RxFifo0MsgPendingCallback+0x110>
 8000cc6:	2b11      	cmp	r3, #17
 8000cc8:	d004      	beq.n	8000cd4 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>
 8000cca:	e013      	b.n	8000cf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>
				case 0x01:
					MotorStatus_L = STATUS_SYSTEM_READY;
 8000ccc:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000cce:	2201      	movs	r2, #1
 8000cd0:	701a      	strb	r2, [r3, #0]
					break;
 8000cd2:	e012      	b.n	8000cfa <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x11:
					MotorStatus_L = STATUS_DC_ON;
 8000cd4:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000cd6:	2202      	movs	r2, #2
 8000cd8:	701a      	strb	r2, [r3, #0]
					break;
 8000cda:	e00e      	b.n	8000cfa <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x19:
					MotorStatus_L = STATUS_QUIT_DC_ON;
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000cde:	2203      	movs	r2, #3
 8000ce0:	701a      	strb	r2, [r3, #0]
					break;
 8000ce2:	e00a      	b.n	8000cfa <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x59:
					MotorStatus_L = STATUS_INVERTER_ON;
 8000ce4:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000ce6:	2204      	movs	r2, #4
 8000ce8:	701a      	strb	r2, [r3, #0]
					break;
 8000cea:	e006      	b.n	8000cfa <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x79:
					MotorStatus_L = STATUS_QUIT_INVERTER_ON;
 8000cec:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000cee:	2205      	movs	r2, #5
 8000cf0:	701a      	strb	r2, [r3, #0]
					break;
 8000cf2:	e002      	b.n	8000cfa <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				default:
					MotorStatus_L = STATUS_UNKNOWN;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20000224 	.word	0x20000224
 8000d04:	200001f8 	.word	0x200001f8
 8000d08:	2000016c 	.word	0x2000016c
 8000d0c:	20000230 	.word	0x20000230
 8000d10:	20000231 	.word	0x20000231

08000d14 <Start_FRT_controller>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_FRT_controller */
void Start_FRT_controller(void *argument)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(50);
 8000d1c:	2032      	movs	r0, #50	; 0x32
 8000d1e:	f003 fa49 	bl	80041b4 <osDelay>
    if (HAL_GPIO_ReadPin(START_BTN_n_GPIO_Port, START_BTN_n_Pin) == 0) {
 8000d22:	2140      	movs	r1, #64	; 0x40
 8000d24:	482a      	ldr	r0, [pc, #168]	; (8000dd0 <Start_FRT_controller+0xbc>)
 8000d26:	f002 f8e9 	bl	8002efc <HAL_GPIO_ReadPin>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d102      	bne.n	8000d36 <Start_FRT_controller+0x22>
    	//Read Ready to Drive button
    	TsOn_n = 1;
 8000d30:	4b28      	ldr	r3, [pc, #160]	; (8000dd4 <Start_FRT_controller+0xc0>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	701a      	strb	r2, [r3, #0]
    }
    if (RxData[1] == 0x79 && TsOn_n && BrakeOn) {
 8000d36:	4b28      	ldr	r3, [pc, #160]	; (8000dd8 <Start_FRT_controller+0xc4>)
 8000d38:	785b      	ldrb	r3, [r3, #1]
 8000d3a:	2b79      	cmp	r3, #121	; 0x79
 8000d3c:	d11e      	bne.n	8000d7c <Start_FRT_controller+0x68>
 8000d3e:	4b25      	ldr	r3, [pc, #148]	; (8000dd4 <Start_FRT_controller+0xc0>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d01a      	beq.n	8000d7c <Start_FRT_controller+0x68>
 8000d46:	4b25      	ldr	r3, [pc, #148]	; (8000ddc <Start_FRT_controller+0xc8>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d016      	beq.n	8000d7c <Start_FRT_controller+0x68>
    	ReadyToDrive = 1;
 8000d4e:	4b24      	ldr	r3, [pc, #144]	; (8000de0 <Start_FRT_controller+0xcc>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	701a      	strb	r2, [r3, #0]
    	//osSemaphoreRelease(semReadytoDriveHandle);
    	//HAL_GPIO_WritePin(RTDS_EN_GPIO_Port, RTDS_EN_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(BRAKE_LIGHT_EN_GPIO_Port, BRAKE_LIGHT_EN_Pin, GPIO_PIN_SET);
 8000d54:	2201      	movs	r2, #1
 8000d56:	2101      	movs	r1, #1
 8000d58:	481d      	ldr	r0, [pc, #116]	; (8000dd0 <Start_FRT_controller+0xbc>)
 8000d5a:	f002 f8e7 	bl	8002f2c <HAL_GPIO_WritePin>
    	osDelay(1500);
 8000d5e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000d62:	f003 fa27 	bl	80041b4 <osDelay>
    	//HAL_GPIO_WritePin(RTDS_EN_GPIO_Port, RTDS_EN_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(BRAKE_LIGHT_EN_GPIO_Port, BRAKE_LIGHT_EN_Pin, GPIO_PIN_RESET);
 8000d66:	2200      	movs	r2, #0
 8000d68:	2101      	movs	r1, #1
 8000d6a:	4819      	ldr	r0, [pc, #100]	; (8000dd0 <Start_FRT_controller+0xbc>)
 8000d6c:	f002 f8de 	bl	8002f2c <HAL_GPIO_WritePin>
    	osThreadTerminate(controllerStartHandle);
 8000d70:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <Start_FRT_controller+0xd0>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f003 f9dd 	bl	8004134 <osThreadTerminate>
 8000d7a:	e028      	b.n	8000dce <Start_FRT_controller+0xba>
    } else if ((RxData[1] & 1) && !TsOn_n) {
 8000d7c:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <Start_FRT_controller+0xc4>)
 8000d7e:	785b      	ldrb	r3, [r3, #1]
 8000d80:	f003 0301 	and.w	r3, r3, #1
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d019      	beq.n	8000dbc <Start_FRT_controller+0xa8>
 8000d88:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <Start_FRT_controller+0xc0>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	f083 0301 	eor.w	r3, r3, #1
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d012      	beq.n	8000dbc <Start_FRT_controller+0xa8>
		HAL_GPIO_WritePin(START_BTN_LED_EN_GPIO_Port, START_BTN_LED_EN_Pin, GPIO_PIN_SET);
 8000d96:	2201      	movs	r2, #1
 8000d98:	2120      	movs	r1, #32
 8000d9a:	4813      	ldr	r0, [pc, #76]	; (8000de8 <Start_FRT_controller+0xd4>)
 8000d9c:	f002 f8c6 	bl	8002f2c <HAL_GPIO_WritePin>
		osDelay(500);
 8000da0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000da4:	f003 fa06 	bl	80041b4 <osDelay>
		HAL_GPIO_WritePin(START_BTN_LED_EN_GPIO_Port, START_BTN_LED_EN_Pin, GPIO_PIN_RESET);
 8000da8:	2200      	movs	r2, #0
 8000daa:	2120      	movs	r1, #32
 8000dac:	480e      	ldr	r0, [pc, #56]	; (8000de8 <Start_FRT_controller+0xd4>)
 8000dae:	f002 f8bd 	bl	8002f2c <HAL_GPIO_WritePin>
		osDelay(450);
 8000db2:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8000db6:	f003 f9fd 	bl	80041b4 <osDelay>
 8000dba:	e008      	b.n	8000dce <Start_FRT_controller+0xba>
    } else if (TsOn_n) {
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <Start_FRT_controller+0xc0>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d0ab      	beq.n	8000d1c <Start_FRT_controller+0x8>
    	//Send CAN messages to close AIRs
		HAL_GPIO_WritePin(START_BTN_LED_EN_GPIO_Port, START_BTN_LED_EN_Pin, GPIO_PIN_SET);
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	2120      	movs	r1, #32
 8000dc8:	4807      	ldr	r0, [pc, #28]	; (8000de8 <Start_FRT_controller+0xd4>)
 8000dca:	f002 f8af 	bl	8002f2c <HAL_GPIO_WritePin>
    osDelay(50);
 8000dce:	e7a5      	b.n	8000d1c <Start_FRT_controller+0x8>
 8000dd0:	40021800 	.word	0x40021800
 8000dd4:	20000233 	.word	0x20000233
 8000dd8:	20000224 	.word	0x20000224
 8000ddc:	20000000 	.word	0x20000000
 8000de0:	20000234 	.word	0x20000234
 8000de4:	200001bc 	.word	0x200001bc
 8000de8:	40020000 	.word	0x40020000

08000dec <Start_AMK>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_AMK */
void Start_AMK(void *argument)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_AMK */
  /* Infinite loop */
  for(;;)
  {

    osDelay(5);
 8000df4:	2005      	movs	r0, #5
 8000df6:	f003 f9dd 	bl	80041b4 <osDelay>
    APPS2_VAL = APPS2_ADC_Percent()*500;
 8000dfa:	f7ff fba3 	bl	8000544 <APPS2_ADC_Percent>
 8000dfe:	eef0 7a40 	vmov.f32	s15, s0
 8000e02:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8000fb0 <Start_AMK+0x1c4>
 8000e06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e0e:	ee17 3a90 	vmov	r3, s15
 8000e12:	b29a      	uxth	r2, r3
 8000e14:	4b67      	ldr	r3, [pc, #412]	; (8000fb4 <Start_AMK+0x1c8>)
 8000e16:	801a      	strh	r2, [r3, #0]

	//HAL_GPIO_WritePin(BRAKE_LIGHT_EN_GPIO_Port, BRAKE_LIGHT_EN_Pin, GPIO_PIN_SET);
	//HAL_GPIO_WritePin(RTDS_EN_GPIO_Port, RTDS_EN_Pin, GPIO_PIN_SET);

    if ((MotorStatus_R == STATUS_SYSTEM_READY) && (MotorStatus_L == STATUS_SYSTEM_READY)) {
 8000e18:	4b67      	ldr	r3, [pc, #412]	; (8000fb8 <Start_AMK+0x1cc>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d10d      	bne.n	8000e3c <Start_AMK+0x50>
 8000e20:	4b66      	ldr	r3, [pc, #408]	; (8000fbc <Start_AMK+0x1d0>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d109      	bne.n	8000e3c <Start_AMK+0x50>
    	AMK_TxData_R[1] = 0x02;
 8000e28:	4b65      	ldr	r3, [pc, #404]	; (8000fc0 <Start_AMK+0x1d4>)
 8000e2a:	2202      	movs	r2, #2
 8000e2c:	705a      	strb	r2, [r3, #1]
    	AMK_TxData_L[1] = 0x02;
 8000e2e:	4b65      	ldr	r3, [pc, #404]	; (8000fc4 <Start_AMK+0x1d8>)
 8000e30:	2202      	movs	r2, #2
 8000e32:	705a      	strb	r2, [r3, #1]
		ControlStatus = CONTROL_DC_ON;
 8000e34:	4b64      	ldr	r3, [pc, #400]	; (8000fc8 <Start_AMK+0x1dc>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	701a      	strb	r2, [r3, #0]
 8000e3a:	e0a2      	b.n	8000f82 <Start_AMK+0x196>
    } else if ((MotorStatus_R == STATUS_QUIT_DC_ON) && (MotorStatus_L == STATUS_QUIT_DC_ON)) {
 8000e3c:	4b5e      	ldr	r3, [pc, #376]	; (8000fb8 <Start_AMK+0x1cc>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b03      	cmp	r3, #3
 8000e42:	d117      	bne.n	8000e74 <Start_AMK+0x88>
 8000e44:	4b5d      	ldr	r3, [pc, #372]	; (8000fbc <Start_AMK+0x1d0>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b03      	cmp	r3, #3
 8000e4a:	d113      	bne.n	8000e74 <Start_AMK+0x88>
		AMK_TxData_L[1] = 0x07;
 8000e4c:	4b5d      	ldr	r3, [pc, #372]	; (8000fc4 <Start_AMK+0x1d8>)
 8000e4e:	2207      	movs	r2, #7
 8000e50:	705a      	strb	r2, [r3, #1]
		AMK_TxData_R[1] = 0x07;
 8000e52:	4b5b      	ldr	r3, [pc, #364]	; (8000fc0 <Start_AMK+0x1d4>)
 8000e54:	2207      	movs	r2, #7
 8000e56:	705a      	strb	r2, [r3, #1]
		memset(&AMK_TxData_R[2],0x00, 4*sizeof(uint8_t));
 8000e58:	2204      	movs	r2, #4
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	485b      	ldr	r0, [pc, #364]	; (8000fcc <Start_AMK+0x1e0>)
 8000e5e:	f006 f941 	bl	80070e4 <memset>
		memset(&AMK_TxData_L[2],0x00, 4*sizeof(uint8_t));
 8000e62:	2204      	movs	r2, #4
 8000e64:	2100      	movs	r1, #0
 8000e66:	485a      	ldr	r0, [pc, #360]	; (8000fd0 <Start_AMK+0x1e4>)
 8000e68:	f006 f93c 	bl	80070e4 <memset>
		ControlStatus = CONTROL_ENABLE;
 8000e6c:	4b56      	ldr	r3, [pc, #344]	; (8000fc8 <Start_AMK+0x1dc>)
 8000e6e:	2202      	movs	r2, #2
 8000e70:	701a      	strb	r2, [r3, #0]
 8000e72:	e086      	b.n	8000f82 <Start_AMK+0x196>
    } else if ((MotorStatus_R == STATUS_INVERTER_ON) && (MotorStatus_L == STATUS_INVERTER_ON)) {
 8000e74:	4b50      	ldr	r3, [pc, #320]	; (8000fb8 <Start_AMK+0x1cc>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2b04      	cmp	r3, #4
 8000e7a:	d117      	bne.n	8000eac <Start_AMK+0xc0>
 8000e7c:	4b4f      	ldr	r3, [pc, #316]	; (8000fbc <Start_AMK+0x1d0>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b04      	cmp	r3, #4
 8000e82:	d113      	bne.n	8000eac <Start_AMK+0xc0>
    	AMK_TxData_L[1] = 0x07;
 8000e84:	4b4f      	ldr	r3, [pc, #316]	; (8000fc4 <Start_AMK+0x1d8>)
 8000e86:	2207      	movs	r2, #7
 8000e88:	705a      	strb	r2, [r3, #1]
    	AMK_TxData_R[1] = 0x07;
 8000e8a:	4b4d      	ldr	r3, [pc, #308]	; (8000fc0 <Start_AMK+0x1d4>)
 8000e8c:	2207      	movs	r2, #7
 8000e8e:	705a      	strb	r2, [r3, #1]
    	memset(&AMK_TxData_R[2],0x00, 4*sizeof(uint8_t));
 8000e90:	2204      	movs	r2, #4
 8000e92:	2100      	movs	r1, #0
 8000e94:	484d      	ldr	r0, [pc, #308]	; (8000fcc <Start_AMK+0x1e0>)
 8000e96:	f006 f925 	bl	80070e4 <memset>
    	memset(&AMK_TxData_L[2],0x00, 4*sizeof(uint8_t));
 8000e9a:	2204      	movs	r2, #4
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	484c      	ldr	r0, [pc, #304]	; (8000fd0 <Start_AMK+0x1e4>)
 8000ea0:	f006 f920 	bl	80070e4 <memset>
    	ControlStatus = CONTROL_INVERTER_ON;
 8000ea4:	4b48      	ldr	r3, [pc, #288]	; (8000fc8 <Start_AMK+0x1dc>)
 8000ea6:	2203      	movs	r2, #3
 8000ea8:	701a      	strb	r2, [r3, #0]
 8000eaa:	e06a      	b.n	8000f82 <Start_AMK+0x196>
    } else if ((MotorStatus_R == STATUS_QUIT_INVERTER_ON) && (MotorStatus_L == STATUS_QUIT_INVERTER_ON) && TsOn_n) {
 8000eac:	4b42      	ldr	r3, [pc, #264]	; (8000fb8 <Start_AMK+0x1cc>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b05      	cmp	r3, #5
 8000eb2:	d13d      	bne.n	8000f30 <Start_AMK+0x144>
 8000eb4:	4b41      	ldr	r3, [pc, #260]	; (8000fbc <Start_AMK+0x1d0>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b05      	cmp	r3, #5
 8000eba:	d139      	bne.n	8000f30 <Start_AMK+0x144>
 8000ebc:	4b45      	ldr	r3, [pc, #276]	; (8000fd4 <Start_AMK+0x1e8>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d035      	beq.n	8000f30 <Start_AMK+0x144>
    	if (ReadyToDrive) {
 8000ec4:	4b44      	ldr	r3, [pc, #272]	; (8000fd8 <Start_AMK+0x1ec>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d027      	beq.n	8000f1c <Start_AMK+0x130>
    		AMK_TxData_R[1] = 0x07;
 8000ecc:	4b3c      	ldr	r3, [pc, #240]	; (8000fc0 <Start_AMK+0x1d4>)
 8000ece:	2207      	movs	r2, #7
 8000ed0:	705a      	strb	r2, [r3, #1]
			AMK_TxData_L[1] = 0x07;
 8000ed2:	4b3c      	ldr	r3, [pc, #240]	; (8000fc4 <Start_AMK+0x1d8>)
 8000ed4:	2207      	movs	r2, #7
 8000ed6:	705a      	strb	r2, [r3, #1]

			AMK_TxData_R[2] = APPS2_VAL & 0xFF;
 8000ed8:	4b36      	ldr	r3, [pc, #216]	; (8000fb4 <Start_AMK+0x1c8>)
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	4b38      	ldr	r3, [pc, #224]	; (8000fc0 <Start_AMK+0x1d4>)
 8000ee0:	709a      	strb	r2, [r3, #2]
			AMK_TxData_R[3] = (APPS2_VAL >> 8) & 0xFF;
 8000ee2:	4b34      	ldr	r3, [pc, #208]	; (8000fb4 <Start_AMK+0x1c8>)
 8000ee4:	881b      	ldrh	r3, [r3, #0]
 8000ee6:	0a1b      	lsrs	r3, r3, #8
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	4b34      	ldr	r3, [pc, #208]	; (8000fc0 <Start_AMK+0x1d4>)
 8000eee:	70da      	strb	r2, [r3, #3]
			AMK_TxData_R[4] = 0x32; //set positive torque request to 50
 8000ef0:	4b33      	ldr	r3, [pc, #204]	; (8000fc0 <Start_AMK+0x1d4>)
 8000ef2:	2232      	movs	r2, #50	; 0x32
 8000ef4:	711a      	strb	r2, [r3, #4]

			AMK_TxData_L[2] = APPS2_VAL & 0xFF;
 8000ef6:	4b2f      	ldr	r3, [pc, #188]	; (8000fb4 <Start_AMK+0x1c8>)
 8000ef8:	881b      	ldrh	r3, [r3, #0]
 8000efa:	b2da      	uxtb	r2, r3
 8000efc:	4b31      	ldr	r3, [pc, #196]	; (8000fc4 <Start_AMK+0x1d8>)
 8000efe:	709a      	strb	r2, [r3, #2]
			AMK_TxData_L[3] = (APPS2_VAL >> 8) & 0xFF;
 8000f00:	4b2c      	ldr	r3, [pc, #176]	; (8000fb4 <Start_AMK+0x1c8>)
 8000f02:	881b      	ldrh	r3, [r3, #0]
 8000f04:	0a1b      	lsrs	r3, r3, #8
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	4b2e      	ldr	r3, [pc, #184]	; (8000fc4 <Start_AMK+0x1d8>)
 8000f0c:	70da      	strb	r2, [r3, #3]
			AMK_TxData_L[4] = 0x32;
 8000f0e:	4b2d      	ldr	r3, [pc, #180]	; (8000fc4 <Start_AMK+0x1d8>)
 8000f10:	2232      	movs	r2, #50	; 0x32
 8000f12:	711a      	strb	r2, [r3, #4]
			ControlStatus = CONTROL_RUNNING;
 8000f14:	4b2c      	ldr	r3, [pc, #176]	; (8000fc8 <Start_AMK+0x1dc>)
 8000f16:	2207      	movs	r2, #7
 8000f18:	701a      	strb	r2, [r3, #0]
    	if (ReadyToDrive) {
 8000f1a:	e032      	b.n	8000f82 <Start_AMK+0x196>
    	} else {
    		AMK_TxData_R[1] = 0x07;
 8000f1c:	4b28      	ldr	r3, [pc, #160]	; (8000fc0 <Start_AMK+0x1d4>)
 8000f1e:	2207      	movs	r2, #7
 8000f20:	705a      	strb	r2, [r3, #1]
    		AMK_TxData_L[1] = 0x07;
 8000f22:	4b28      	ldr	r3, [pc, #160]	; (8000fc4 <Start_AMK+0x1d8>)
 8000f24:	2207      	movs	r2, #7
 8000f26:	705a      	strb	r2, [r3, #1]
    		ControlStatus = CONTROL_TS_READY;
 8000f28:	4b27      	ldr	r3, [pc, #156]	; (8000fc8 <Start_AMK+0x1dc>)
 8000f2a:	2204      	movs	r2, #4
 8000f2c:	701a      	strb	r2, [r3, #0]
    	if (ReadyToDrive) {
 8000f2e:	e028      	b.n	8000f82 <Start_AMK+0x196>
    	}
    } else if (MotorStatus_R == STATUS_ERROR) {
 8000f30:	4b21      	ldr	r3, [pc, #132]	; (8000fb8 <Start_AMK+0x1cc>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b07      	cmp	r3, #7
 8000f36:	d106      	bne.n	8000f46 <Start_AMK+0x15a>
    	AMK_TxData_R[1] = 0x08;
 8000f38:	4b21      	ldr	r3, [pc, #132]	; (8000fc0 <Start_AMK+0x1d4>)
 8000f3a:	2208      	movs	r2, #8
 8000f3c:	705a      	strb	r2, [r3, #1]
		ControlStatus = CONTROL_ERROR_RESET_RIGHT;
 8000f3e:	4b22      	ldr	r3, [pc, #136]	; (8000fc8 <Start_AMK+0x1dc>)
 8000f40:	2205      	movs	r2, #5
 8000f42:	701a      	strb	r2, [r3, #0]
 8000f44:	e01d      	b.n	8000f82 <Start_AMK+0x196>
    } else if (MotorStatus_L == STATUS_ERROR) {
 8000f46:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <Start_AMK+0x1d0>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b07      	cmp	r3, #7
 8000f4c:	d106      	bne.n	8000f5c <Start_AMK+0x170>
    	AMK_TxData_L[1] = 0x08;
 8000f4e:	4b1d      	ldr	r3, [pc, #116]	; (8000fc4 <Start_AMK+0x1d8>)
 8000f50:	2208      	movs	r2, #8
 8000f52:	705a      	strb	r2, [r3, #1]
		ControlStatus = CONTROL_ERROR_RESET_LEFT;
 8000f54:	4b1c      	ldr	r3, [pc, #112]	; (8000fc8 <Start_AMK+0x1dc>)
 8000f56:	2206      	movs	r2, #6
 8000f58:	701a      	strb	r2, [r3, #0]
 8000f5a:	e012      	b.n	8000f82 <Start_AMK+0x196>
    } else {
    	AMK_TxData_L[1] = 0x07;
 8000f5c:	4b19      	ldr	r3, [pc, #100]	; (8000fc4 <Start_AMK+0x1d8>)
 8000f5e:	2207      	movs	r2, #7
 8000f60:	705a      	strb	r2, [r3, #1]
		AMK_TxData_R[1] = 0x07;
 8000f62:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <Start_AMK+0x1d4>)
 8000f64:	2207      	movs	r2, #7
 8000f66:	705a      	strb	r2, [r3, #1]
		memset(&AMK_TxData_R[2],0x00, 4*sizeof(uint8_t));
 8000f68:	2204      	movs	r2, #4
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	4817      	ldr	r0, [pc, #92]	; (8000fcc <Start_AMK+0x1e0>)
 8000f6e:	f006 f8b9 	bl	80070e4 <memset>
		memset(&AMK_TxData_L[2],0x00, 4*sizeof(uint8_t));
 8000f72:	2204      	movs	r2, #4
 8000f74:	2100      	movs	r1, #0
 8000f76:	4816      	ldr	r0, [pc, #88]	; (8000fd0 <Start_AMK+0x1e4>)
 8000f78:	f006 f8b4 	bl	80070e4 <memset>
    	ControlStatus = CONTROL_UNKNOWN;
 8000f7c:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <Start_AMK+0x1dc>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	701a      	strb	r2, [r3, #0]
    }

	HAL_CAN_AddTxMessage(&hcan1, &AMK_TxHeader_R, AMK_TxData_R, &TxMailbox);
 8000f82:	4b16      	ldr	r3, [pc, #88]	; (8000fdc <Start_AMK+0x1f0>)
 8000f84:	4a0e      	ldr	r2, [pc, #56]	; (8000fc0 <Start_AMK+0x1d4>)
 8000f86:	4916      	ldr	r1, [pc, #88]	; (8000fe0 <Start_AMK+0x1f4>)
 8000f88:	4816      	ldr	r0, [pc, #88]	; (8000fe4 <Start_AMK+0x1f8>)
 8000f8a:	f001 f8f1 	bl	8002170 <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&hcan1, &AMK_TxHeader_L, AMK_TxData_L, &TxMailbox);
 8000f8e:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <Start_AMK+0x1f0>)
 8000f90:	4a0c      	ldr	r2, [pc, #48]	; (8000fc4 <Start_AMK+0x1d8>)
 8000f92:	4915      	ldr	r1, [pc, #84]	; (8000fe8 <Start_AMK+0x1fc>)
 8000f94:	4813      	ldr	r0, [pc, #76]	; (8000fe4 <Start_AMK+0x1f8>)
 8000f96:	f001 f8eb 	bl	8002170 <HAL_CAN_AddTxMessage>
	memset(&AMK_TxData_R[0],0x00, 8*sizeof(uint8_t));
 8000f9a:	2208      	movs	r2, #8
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4808      	ldr	r0, [pc, #32]	; (8000fc0 <Start_AMK+0x1d4>)
 8000fa0:	f006 f8a0 	bl	80070e4 <memset>
	memset(&AMK_TxData_L[0],0x00, 8*sizeof(uint8_t));
 8000fa4:	2208      	movs	r2, #8
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4806      	ldr	r0, [pc, #24]	; (8000fc4 <Start_AMK+0x1d8>)
 8000faa:	f006 f89b 	bl	80070e4 <memset>
    osDelay(5);
 8000fae:	e721      	b.n	8000df4 <Start_AMK+0x8>
 8000fb0:	43fa0000 	.word	0x43fa0000
 8000fb4:	20000236 	.word	0x20000236
 8000fb8:	20000230 	.word	0x20000230
 8000fbc:	20000231 	.word	0x20000231
 8000fc0:	20000214 	.word	0x20000214
 8000fc4:	2000021c 	.word	0x2000021c
 8000fc8:	20000232 	.word	0x20000232
 8000fcc:	20000216 	.word	0x20000216
 8000fd0:	2000021e 	.word	0x2000021e
 8000fd4:	20000233 	.word	0x20000233
 8000fd8:	20000234 	.word	0x20000234
 8000fdc:	2000022c 	.word	0x2000022c
 8000fe0:	200001c8 	.word	0x200001c8
 8000fe4:	2000016c 	.word	0x2000016c
 8000fe8:	200001e0 	.word	0x200001e0

08000fec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a04      	ldr	r2, [pc, #16]	; (800100c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d101      	bne.n	8001002 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ffe:	f000 fa3d 	bl	800147c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40001000 	.word	0x40001000

08001010 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001014:	b672      	cpsid	i
}
 8001016:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 1);
 8001018:	2201      	movs	r2, #1
 800101a:	2108      	movs	r1, #8
 800101c:	4801      	ldr	r0, [pc, #4]	; (8001024 <Error_Handler+0x14>)
 800101e:	f001 ff85 	bl	8002f2c <HAL_GPIO_WritePin>
  while (1)
 8001022:	e7fe      	b.n	8001022 <Error_Handler+0x12>
 8001024:	40020000 	.word	0x40020000

08001028 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800102e:	4b11      	ldr	r3, [pc, #68]	; (8001074 <HAL_MspInit+0x4c>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001032:	4a10      	ldr	r2, [pc, #64]	; (8001074 <HAL_MspInit+0x4c>)
 8001034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001038:	6413      	str	r3, [r2, #64]	; 0x40
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <HAL_MspInit+0x4c>)
 800103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001046:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <HAL_MspInit+0x4c>)
 8001048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104a:	4a0a      	ldr	r2, [pc, #40]	; (8001074 <HAL_MspInit+0x4c>)
 800104c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001050:	6453      	str	r3, [r2, #68]	; 0x44
 8001052:	4b08      	ldr	r3, [pc, #32]	; (8001074 <HAL_MspInit+0x4c>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800105a:	603b      	str	r3, [r7, #0]
 800105c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	210f      	movs	r1, #15
 8001062:	f06f 0001 	mvn.w	r0, #1
 8001066:	f001 fd73 	bl	8002b50 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40023800 	.word	0x40023800

08001078 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08e      	sub	sp, #56	; 0x38
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a3f      	ldr	r2, [pc, #252]	; (8001194 <HAL_ADC_MspInit+0x11c>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d124      	bne.n	80010e4 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800109a:	4b3f      	ldr	r3, [pc, #252]	; (8001198 <HAL_ADC_MspInit+0x120>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109e:	4a3e      	ldr	r2, [pc, #248]	; (8001198 <HAL_ADC_MspInit+0x120>)
 80010a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a4:	6453      	str	r3, [r2, #68]	; 0x44
 80010a6:	4b3c      	ldr	r3, [pc, #240]	; (8001198 <HAL_ADC_MspInit+0x120>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ae:	623b      	str	r3, [r7, #32]
 80010b0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b2:	4b39      	ldr	r3, [pc, #228]	; (8001198 <HAL_ADC_MspInit+0x120>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a38      	ldr	r2, [pc, #224]	; (8001198 <HAL_ADC_MspInit+0x120>)
 80010b8:	f043 0304 	orr.w	r3, r3, #4
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b36      	ldr	r3, [pc, #216]	; (8001198 <HAL_ADC_MspInit+0x120>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0304 	and.w	r3, r3, #4
 80010c6:	61fb      	str	r3, [r7, #28]
 80010c8:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = APPS1_Pin;
 80010ca:	2301      	movs	r3, #1
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ce:	2303      	movs	r3, #3
 80010d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(APPS1_GPIO_Port, &GPIO_InitStruct);
 80010d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010da:	4619      	mov	r1, r3
 80010dc:	482f      	ldr	r0, [pc, #188]	; (800119c <HAL_ADC_MspInit+0x124>)
 80010de:	f001 fd61 	bl	8002ba4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80010e2:	e052      	b.n	800118a <HAL_ADC_MspInit+0x112>
  else if(hadc->Instance==ADC2)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a2d      	ldr	r2, [pc, #180]	; (80011a0 <HAL_ADC_MspInit+0x128>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d124      	bne.n	8001138 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80010ee:	4b2a      	ldr	r3, [pc, #168]	; (8001198 <HAL_ADC_MspInit+0x120>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f2:	4a29      	ldr	r2, [pc, #164]	; (8001198 <HAL_ADC_MspInit+0x120>)
 80010f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010f8:	6453      	str	r3, [r2, #68]	; 0x44
 80010fa:	4b27      	ldr	r3, [pc, #156]	; (8001198 <HAL_ADC_MspInit+0x120>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001102:	61bb      	str	r3, [r7, #24]
 8001104:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001106:	4b24      	ldr	r3, [pc, #144]	; (8001198 <HAL_ADC_MspInit+0x120>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a23      	ldr	r2, [pc, #140]	; (8001198 <HAL_ADC_MspInit+0x120>)
 800110c:	f043 0304 	orr.w	r3, r3, #4
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b21      	ldr	r3, [pc, #132]	; (8001198 <HAL_ADC_MspInit+0x120>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f003 0304 	and.w	r3, r3, #4
 800111a:	617b      	str	r3, [r7, #20]
 800111c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = APPS2_Pin;
 800111e:	2302      	movs	r3, #2
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001122:	2303      	movs	r3, #3
 8001124:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(APPS2_GPIO_Port, &GPIO_InitStruct);
 800112a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800112e:	4619      	mov	r1, r3
 8001130:	481a      	ldr	r0, [pc, #104]	; (800119c <HAL_ADC_MspInit+0x124>)
 8001132:	f001 fd37 	bl	8002ba4 <HAL_GPIO_Init>
}
 8001136:	e028      	b.n	800118a <HAL_ADC_MspInit+0x112>
  else if(hadc->Instance==ADC3)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a19      	ldr	r2, [pc, #100]	; (80011a4 <HAL_ADC_MspInit+0x12c>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d123      	bne.n	800118a <HAL_ADC_MspInit+0x112>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001142:	4b15      	ldr	r3, [pc, #84]	; (8001198 <HAL_ADC_MspInit+0x120>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001146:	4a14      	ldr	r2, [pc, #80]	; (8001198 <HAL_ADC_MspInit+0x120>)
 8001148:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800114c:	6453      	str	r3, [r2, #68]	; 0x44
 800114e:	4b12      	ldr	r3, [pc, #72]	; (8001198 <HAL_ADC_MspInit+0x120>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001152:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800115a:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <HAL_ADC_MspInit+0x120>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a0e      	ldr	r2, [pc, #56]	; (8001198 <HAL_ADC_MspInit+0x120>)
 8001160:	f043 0304 	orr.w	r3, r3, #4
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <HAL_ADC_MspInit+0x120>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f003 0304 	and.w	r3, r3, #4
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEERING_ANGLE_SENSOR_Pin|BPPS_BUFFERED_Pin;
 8001172:	230c      	movs	r3, #12
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001176:	2303      	movs	r3, #3
 8001178:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800117e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001182:	4619      	mov	r1, r3
 8001184:	4805      	ldr	r0, [pc, #20]	; (800119c <HAL_ADC_MspInit+0x124>)
 8001186:	f001 fd0d 	bl	8002ba4 <HAL_GPIO_Init>
}
 800118a:	bf00      	nop
 800118c:	3738      	adds	r7, #56	; 0x38
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40012000 	.word	0x40012000
 8001198:	40023800 	.word	0x40023800
 800119c:	40020800 	.word	0x40020800
 80011a0:	40012100 	.word	0x40012100
 80011a4:	40012200 	.word	0x40012200

080011a8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08c      	sub	sp, #48	; 0x30
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b0:	f107 031c 	add.w	r3, r7, #28
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a33      	ldr	r2, [pc, #204]	; (8001294 <HAL_CAN_MspInit+0xec>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d131      	bne.n	800122e <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80011ca:	4b33      	ldr	r3, [pc, #204]	; (8001298 <HAL_CAN_MspInit+0xf0>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	4a32      	ldr	r2, [pc, #200]	; (8001298 <HAL_CAN_MspInit+0xf0>)
 80011d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011d4:	6413      	str	r3, [r2, #64]	; 0x40
 80011d6:	4b30      	ldr	r3, [pc, #192]	; (8001298 <HAL_CAN_MspInit+0xf0>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011de:	61bb      	str	r3, [r7, #24]
 80011e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e2:	4b2d      	ldr	r3, [pc, #180]	; (8001298 <HAL_CAN_MspInit+0xf0>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	4a2c      	ldr	r2, [pc, #176]	; (8001298 <HAL_CAN_MspInit+0xf0>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	6313      	str	r3, [r2, #48]	; 0x30
 80011ee:	4b2a      	ldr	r3, [pc, #168]	; (8001298 <HAL_CAN_MspInit+0xf0>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	617b      	str	r3, [r7, #20]
 80011f8:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80011fa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80011fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001200:	2302      	movs	r3, #2
 8001202:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001208:	2303      	movs	r3, #3
 800120a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800120c:	2309      	movs	r3, #9
 800120e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001210:	f107 031c 	add.w	r3, r7, #28
 8001214:	4619      	mov	r1, r3
 8001216:	4821      	ldr	r0, [pc, #132]	; (800129c <HAL_CAN_MspInit+0xf4>)
 8001218:	f001 fcc4 	bl	8002ba4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800121c:	2200      	movs	r2, #0
 800121e:	2105      	movs	r1, #5
 8001220:	2014      	movs	r0, #20
 8001222:	f001 fc95 	bl	8002b50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001226:	2014      	movs	r0, #20
 8001228:	f001 fcae 	bl	8002b88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }

}
 800122c:	e02d      	b.n	800128a <HAL_CAN_MspInit+0xe2>
  else if(hcan->Instance==CAN3)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a1b      	ldr	r2, [pc, #108]	; (80012a0 <HAL_CAN_MspInit+0xf8>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d128      	bne.n	800128a <HAL_CAN_MspInit+0xe2>
    __HAL_RCC_CAN3_CLK_ENABLE();
 8001238:	4b17      	ldr	r3, [pc, #92]	; (8001298 <HAL_CAN_MspInit+0xf0>)
 800123a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123c:	4a16      	ldr	r2, [pc, #88]	; (8001298 <HAL_CAN_MspInit+0xf0>)
 800123e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001242:	6413      	str	r3, [r2, #64]	; 0x40
 8001244:	4b14      	ldr	r3, [pc, #80]	; (8001298 <HAL_CAN_MspInit+0xf0>)
 8001246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001248:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800124c:	613b      	str	r3, [r7, #16]
 800124e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <HAL_CAN_MspInit+0xf0>)
 8001252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001254:	4a10      	ldr	r2, [pc, #64]	; (8001298 <HAL_CAN_MspInit+0xf0>)
 8001256:	f043 0301 	orr.w	r3, r3, #1
 800125a:	6313      	str	r3, [r2, #48]	; 0x30
 800125c:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <HAL_CAN_MspInit+0xf0>)
 800125e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001260:	f003 0301 	and.w	r3, r3, #1
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8001268:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 800126c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126e:	2302      	movs	r3, #2
 8001270:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001276:	2303      	movs	r3, #3
 8001278:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 800127a:	230b      	movs	r3, #11
 800127c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127e:	f107 031c 	add.w	r3, r7, #28
 8001282:	4619      	mov	r1, r3
 8001284:	4805      	ldr	r0, [pc, #20]	; (800129c <HAL_CAN_MspInit+0xf4>)
 8001286:	f001 fc8d 	bl	8002ba4 <HAL_GPIO_Init>
}
 800128a:	bf00      	nop
 800128c:	3730      	adds	r7, #48	; 0x30
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40006400 	.word	0x40006400
 8001298:	40023800 	.word	0x40023800
 800129c:	40020000 	.word	0x40020000
 80012a0:	40003400 	.word	0x40003400

080012a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08e      	sub	sp, #56	; 0x38
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80012ac:	2300      	movs	r3, #0
 80012ae:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80012b0:	2300      	movs	r3, #0
 80012b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80012b4:	4b33      	ldr	r3, [pc, #204]	; (8001384 <HAL_InitTick+0xe0>)
 80012b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b8:	4a32      	ldr	r2, [pc, #200]	; (8001384 <HAL_InitTick+0xe0>)
 80012ba:	f043 0310 	orr.w	r3, r3, #16
 80012be:	6413      	str	r3, [r2, #64]	; 0x40
 80012c0:	4b30      	ldr	r3, [pc, #192]	; (8001384 <HAL_InitTick+0xe0>)
 80012c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c4:	f003 0310 	and.w	r3, r3, #16
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012cc:	f107 0210 	add.w	r2, r7, #16
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	4611      	mov	r1, r2
 80012d6:	4618      	mov	r0, r3
 80012d8:	f002 fb02 	bl	80038e0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80012dc:	6a3b      	ldr	r3, [r7, #32]
 80012de:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80012e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d103      	bne.n	80012ee <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80012e6:	f002 fae7 	bl	80038b8 <HAL_RCC_GetPCLK1Freq>
 80012ea:	6378      	str	r0, [r7, #52]	; 0x34
 80012ec:	e004      	b.n	80012f8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80012ee:	f002 fae3 	bl	80038b8 <HAL_RCC_GetPCLK1Freq>
 80012f2:	4603      	mov	r3, r0
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012fa:	4a23      	ldr	r2, [pc, #140]	; (8001388 <HAL_InitTick+0xe4>)
 80012fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001300:	0c9b      	lsrs	r3, r3, #18
 8001302:	3b01      	subs	r3, #1
 8001304:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001306:	4b21      	ldr	r3, [pc, #132]	; (800138c <HAL_InitTick+0xe8>)
 8001308:	4a21      	ldr	r2, [pc, #132]	; (8001390 <HAL_InitTick+0xec>)
 800130a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800130c:	4b1f      	ldr	r3, [pc, #124]	; (800138c <HAL_InitTick+0xe8>)
 800130e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001312:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001314:	4a1d      	ldr	r2, [pc, #116]	; (800138c <HAL_InitTick+0xe8>)
 8001316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001318:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800131a:	4b1c      	ldr	r3, [pc, #112]	; (800138c <HAL_InitTick+0xe8>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001320:	4b1a      	ldr	r3, [pc, #104]	; (800138c <HAL_InitTick+0xe8>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001326:	4b19      	ldr	r3, [pc, #100]	; (800138c <HAL_InitTick+0xe8>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800132c:	4817      	ldr	r0, [pc, #92]	; (800138c <HAL_InitTick+0xe8>)
 800132e:	f002 fb09 	bl	8003944 <HAL_TIM_Base_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001338:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800133c:	2b00      	cmp	r3, #0
 800133e:	d11b      	bne.n	8001378 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001340:	4812      	ldr	r0, [pc, #72]	; (800138c <HAL_InitTick+0xe8>)
 8001342:	f002 fb61 	bl	8003a08 <HAL_TIM_Base_Start_IT>
 8001346:	4603      	mov	r3, r0
 8001348:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800134c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001350:	2b00      	cmp	r3, #0
 8001352:	d111      	bne.n	8001378 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001354:	2036      	movs	r0, #54	; 0x36
 8001356:	f001 fc17 	bl	8002b88 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2b0f      	cmp	r3, #15
 800135e:	d808      	bhi.n	8001372 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001360:	2200      	movs	r2, #0
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	2036      	movs	r0, #54	; 0x36
 8001366:	f001 fbf3 	bl	8002b50 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800136a:	4a0a      	ldr	r2, [pc, #40]	; (8001394 <HAL_InitTick+0xf0>)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6013      	str	r3, [r2, #0]
 8001370:	e002      	b.n	8001378 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001378:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800137c:	4618      	mov	r0, r3
 800137e:	3738      	adds	r7, #56	; 0x38
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40023800 	.word	0x40023800
 8001388:	431bde83 	.word	0x431bde83
 800138c:	20000238 	.word	0x20000238
 8001390:	40001000 	.word	0x40001000
 8001394:	20000008 	.word	0x20000008

08001398 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800139c:	e7fe      	b.n	800139c <NMI_Handler+0x4>

0800139e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013a2:	e7fe      	b.n	80013a2 <HardFault_Handler+0x4>

080013a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <MemManage_Handler+0x4>

080013aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ae:	e7fe      	b.n	80013ae <BusFault_Handler+0x4>

080013b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <UsageFault_Handler+0x4>

080013b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80013c8:	4802      	ldr	r0, [pc, #8]	; (80013d4 <CAN1_RX0_IRQHandler+0x10>)
 80013ca:	f001 f8d9 	bl	8002580 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	2000016c 	.word	0x2000016c

080013d8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80013dc:	4802      	ldr	r0, [pc, #8]	; (80013e8 <TIM6_DAC_IRQHandler+0x10>)
 80013de:	f002 fb8b 	bl	8003af8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000238 	.word	0x20000238

080013ec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <SystemInit+0x20>)
 80013f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013f6:	4a05      	ldr	r2, [pc, #20]	; (800140c <SystemInit+0x20>)
 80013f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001410:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001448 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001414:	480d      	ldr	r0, [pc, #52]	; (800144c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001416:	490e      	ldr	r1, [pc, #56]	; (8001450 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001418:	4a0e      	ldr	r2, [pc, #56]	; (8001454 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800141a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800141c:	e002      	b.n	8001424 <LoopCopyDataInit>

0800141e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800141e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001420:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001422:	3304      	adds	r3, #4

08001424 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001424:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001426:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001428:	d3f9      	bcc.n	800141e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800142a:	4a0b      	ldr	r2, [pc, #44]	; (8001458 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800142c:	4c0b      	ldr	r4, [pc, #44]	; (800145c <LoopFillZerobss+0x26>)
  movs r3, #0
 800142e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001430:	e001      	b.n	8001436 <LoopFillZerobss>

08001432 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001432:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001434:	3204      	adds	r2, #4

08001436 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001436:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001438:	d3fb      	bcc.n	8001432 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800143a:	f7ff ffd7 	bl	80013ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800143e:	f005 fe1d 	bl	800707c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001442:	f7ff f8a5 	bl	8000590 <main>
  bx  lr    
 8001446:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001448:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800144c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001450:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001454:	080073b8 	.word	0x080073b8
  ldr r2, =_sbss
 8001458:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800145c:	20004c98 	.word	0x20004c98

08001460 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001460:	e7fe      	b.n	8001460 <ADC_IRQHandler>

08001462 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001466:	2003      	movs	r0, #3
 8001468:	f001 fb67 	bl	8002b3a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800146c:	200f      	movs	r0, #15
 800146e:	f7ff ff19 	bl	80012a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001472:	f7ff fdd9 	bl	8001028 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	bd80      	pop	{r7, pc}

0800147c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <HAL_IncTick+0x20>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	461a      	mov	r2, r3
 8001486:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <HAL_IncTick+0x24>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4413      	add	r3, r2
 800148c:	4a04      	ldr	r2, [pc, #16]	; (80014a0 <HAL_IncTick+0x24>)
 800148e:	6013      	str	r3, [r2, #0]
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	2000000c 	.word	0x2000000c
 80014a0:	20000284 	.word	0x20000284

080014a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return uwTick;
 80014a8:	4b03      	ldr	r3, [pc, #12]	; (80014b8 <HAL_GetTick+0x14>)
 80014aa:	681b      	ldr	r3, [r3, #0]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	20000284 	.word	0x20000284

080014bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014c4:	2300      	movs	r3, #0
 80014c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d101      	bne.n	80014d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e031      	b.n	8001536 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d109      	bne.n	80014ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f7ff fdcc 	bl	8001078 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	f003 0310 	and.w	r3, r3, #16
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d116      	bne.n	8001528 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014fe:	4b10      	ldr	r3, [pc, #64]	; (8001540 <HAL_ADC_Init+0x84>)
 8001500:	4013      	ands	r3, r2
 8001502:	f043 0202 	orr.w	r2, r3, #2
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f000 fb0a 	bl	8001b24 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	f023 0303 	bic.w	r3, r3, #3
 800151e:	f043 0201 	orr.w	r2, r3, #1
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	641a      	str	r2, [r3, #64]	; 0x40
 8001526:	e001      	b.n	800152c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001534:	7bfb      	ldrb	r3, [r7, #15]
}
 8001536:	4618      	mov	r0, r3
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	ffffeefd 	.word	0xffffeefd

08001544 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800154c:	2300      	movs	r3, #0
 800154e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001556:	2b01      	cmp	r3, #1
 8001558:	d101      	bne.n	800155e <HAL_ADC_Start+0x1a>
 800155a:	2302      	movs	r3, #2
 800155c:	e0ad      	b.n	80016ba <HAL_ADC_Start+0x176>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2201      	movs	r2, #1
 8001562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f003 0301 	and.w	r3, r3, #1
 8001570:	2b01      	cmp	r3, #1
 8001572:	d018      	beq.n	80015a6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	689a      	ldr	r2, [r3, #8]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f042 0201 	orr.w	r2, r2, #1
 8001582:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001584:	4b50      	ldr	r3, [pc, #320]	; (80016c8 <HAL_ADC_Start+0x184>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a50      	ldr	r2, [pc, #320]	; (80016cc <HAL_ADC_Start+0x188>)
 800158a:	fba2 2303 	umull	r2, r3, r2, r3
 800158e:	0c9a      	lsrs	r2, r3, #18
 8001590:	4613      	mov	r3, r2
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	4413      	add	r3, r2
 8001596:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001598:	e002      	b.n	80015a0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	3b01      	subs	r3, #1
 800159e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f9      	bne.n	800159a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d175      	bne.n	80016a0 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015b8:	4b45      	ldr	r3, [pc, #276]	; (80016d0 <HAL_ADC_Start+0x18c>)
 80015ba:	4013      	ands	r3, r2
 80015bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d007      	beq.n	80015e2 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015da:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015ee:	d106      	bne.n	80015fe <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f4:	f023 0206 	bic.w	r2, r3, #6
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	645a      	str	r2, [r3, #68]	; 0x44
 80015fc:	e002      	b.n	8001604 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001614:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001616:	4b2f      	ldr	r3, [pc, #188]	; (80016d4 <HAL_ADC_Start+0x190>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f003 031f 	and.w	r3, r3, #31
 800161e:	2b00      	cmp	r3, #0
 8001620:	d10f      	bne.n	8001642 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d143      	bne.n	80016b8 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	689a      	ldr	r2, [r3, #8]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	e03a      	b.n	80016b8 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a24      	ldr	r2, [pc, #144]	; (80016d8 <HAL_ADC_Start+0x194>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d10e      	bne.n	800166a <HAL_ADC_Start+0x126>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d107      	bne.n	800166a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001668:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800166a:	4b1a      	ldr	r3, [pc, #104]	; (80016d4 <HAL_ADC_Start+0x190>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f003 0310 	and.w	r3, r3, #16
 8001672:	2b00      	cmp	r3, #0
 8001674:	d120      	bne.n	80016b8 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a18      	ldr	r2, [pc, #96]	; (80016dc <HAL_ADC_Start+0x198>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d11b      	bne.n	80016b8 <HAL_ADC_Start+0x174>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d114      	bne.n	80016b8 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	689a      	ldr	r2, [r3, #8]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800169c:	609a      	str	r2, [r3, #8]
 800169e:	e00b      	b.n	80016b8 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a4:	f043 0210 	orr.w	r2, r3, #16
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b0:	f043 0201 	orr.w	r2, r3, #1
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3714      	adds	r7, #20
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	20000004 	.word	0x20000004
 80016cc:	431bde83 	.word	0x431bde83
 80016d0:	fffff8fe 	.word	0xfffff8fe
 80016d4:	40012300 	.word	0x40012300
 80016d8:	40012000 	.word	0x40012000
 80016dc:	40012200 	.word	0x40012200

080016e0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d101      	bne.n	80016f6 <HAL_ADC_Stop+0x16>
 80016f2:	2302      	movs	r3, #2
 80016f4:	e01f      	b.n	8001736 <HAL_ADC_Stop+0x56>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2201      	movs	r2, #1
 80016fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 0201 	bic.w	r2, r2, #1
 800170c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f003 0301 	and.w	r3, r3, #1
 8001718:	2b00      	cmp	r3, #0
 800171a:	d107      	bne.n	800172c <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001720:	4b08      	ldr	r3, [pc, #32]	; (8001744 <HAL_ADC_Stop+0x64>)
 8001722:	4013      	ands	r3, r2
 8001724:	f043 0201 	orr.w	r2, r3, #1
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	ffffeefe 	.word	0xffffeefe

08001748 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001764:	d113      	bne.n	800178e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001770:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001774:	d10b      	bne.n	800178e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	f043 0220 	orr.w	r2, r3, #32
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e063      	b.n	8001856 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800178e:	f7ff fe89 	bl	80014a4 <HAL_GetTick>
 8001792:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001794:	e021      	b.n	80017da <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800179c:	d01d      	beq.n	80017da <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d007      	beq.n	80017b4 <HAL_ADC_PollForConversion+0x6c>
 80017a4:	f7ff fe7e 	bl	80014a4 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d212      	bcs.n	80017da <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d00b      	beq.n	80017da <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	f043 0204 	orr.w	r2, r3, #4
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e03d      	b.n	8001856 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d1d6      	bne.n	8001796 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f06f 0212 	mvn.w	r2, #18
 80017f0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d123      	bne.n	8001854 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001810:	2b00      	cmp	r3, #0
 8001812:	d11f      	bne.n	8001854 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800181e:	2b00      	cmp	r3, #0
 8001820:	d006      	beq.n	8001830 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800182c:	2b00      	cmp	r3, #0
 800182e:	d111      	bne.n	8001854 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001834:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001840:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d105      	bne.n	8001854 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184c:	f043 0201 	orr.w	r2, r3, #1
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800186c:	4618      	mov	r0, r3
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001882:	2300      	movs	r3, #0
 8001884:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800188c:	2b01      	cmp	r3, #1
 800188e:	d101      	bne.n	8001894 <HAL_ADC_ConfigChannel+0x1c>
 8001890:	2302      	movs	r3, #2
 8001892:	e136      	b.n	8001b02 <HAL_ADC_ConfigChannel+0x28a>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2201      	movs	r2, #1
 8001898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2b09      	cmp	r3, #9
 80018a2:	d93a      	bls.n	800191a <HAL_ADC_ConfigChannel+0xa2>
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80018ac:	d035      	beq.n	800191a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	68d9      	ldr	r1, [r3, #12]
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	461a      	mov	r2, r3
 80018bc:	4613      	mov	r3, r2
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	4413      	add	r3, r2
 80018c2:	3b1e      	subs	r3, #30
 80018c4:	2207      	movs	r2, #7
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43da      	mvns	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	400a      	ands	r2, r1
 80018d2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a8d      	ldr	r2, [pc, #564]	; (8001b10 <HAL_ADC_ConfigChannel+0x298>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d10a      	bne.n	80018f4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	68d9      	ldr	r1, [r3, #12]
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	061a      	lsls	r2, r3, #24
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	430a      	orrs	r2, r1
 80018f0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018f2:	e035      	b.n	8001960 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	68d9      	ldr	r1, [r3, #12]
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	689a      	ldr	r2, [r3, #8]
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	b29b      	uxth	r3, r3
 8001904:	4618      	mov	r0, r3
 8001906:	4603      	mov	r3, r0
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	4403      	add	r3, r0
 800190c:	3b1e      	subs	r3, #30
 800190e:	409a      	lsls	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	430a      	orrs	r2, r1
 8001916:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001918:	e022      	b.n	8001960 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	6919      	ldr	r1, [r3, #16]
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	b29b      	uxth	r3, r3
 8001926:	461a      	mov	r2, r3
 8001928:	4613      	mov	r3, r2
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	4413      	add	r3, r2
 800192e:	2207      	movs	r2, #7
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	43da      	mvns	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	400a      	ands	r2, r1
 800193c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6919      	ldr	r1, [r3, #16]
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	b29b      	uxth	r3, r3
 800194e:	4618      	mov	r0, r3
 8001950:	4603      	mov	r3, r0
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	4403      	add	r3, r0
 8001956:	409a      	lsls	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	430a      	orrs	r2, r1
 800195e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2b06      	cmp	r3, #6
 8001966:	d824      	bhi.n	80019b2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685a      	ldr	r2, [r3, #4]
 8001972:	4613      	mov	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	4413      	add	r3, r2
 8001978:	3b05      	subs	r3, #5
 800197a:	221f      	movs	r2, #31
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	43da      	mvns	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	400a      	ands	r2, r1
 8001988:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	b29b      	uxth	r3, r3
 8001996:	4618      	mov	r0, r3
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685a      	ldr	r2, [r3, #4]
 800199c:	4613      	mov	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	3b05      	subs	r3, #5
 80019a4:	fa00 f203 	lsl.w	r2, r0, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	430a      	orrs	r2, r1
 80019ae:	635a      	str	r2, [r3, #52]	; 0x34
 80019b0:	e04c      	b.n	8001a4c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2b0c      	cmp	r3, #12
 80019b8:	d824      	bhi.n	8001a04 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	3b23      	subs	r3, #35	; 0x23
 80019cc:	221f      	movs	r2, #31
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43da      	mvns	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	400a      	ands	r2, r1
 80019da:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	4618      	mov	r0, r3
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685a      	ldr	r2, [r3, #4]
 80019ee:	4613      	mov	r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	4413      	add	r3, r2
 80019f4:	3b23      	subs	r3, #35	; 0x23
 80019f6:	fa00 f203 	lsl.w	r2, r0, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	430a      	orrs	r2, r1
 8001a00:	631a      	str	r2, [r3, #48]	; 0x30
 8001a02:	e023      	b.n	8001a4c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685a      	ldr	r2, [r3, #4]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4413      	add	r3, r2
 8001a14:	3b41      	subs	r3, #65	; 0x41
 8001a16:	221f      	movs	r2, #31
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43da      	mvns	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	400a      	ands	r2, r1
 8001a24:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	4618      	mov	r0, r3
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685a      	ldr	r2, [r3, #4]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	4413      	add	r3, r2
 8001a3e:	3b41      	subs	r3, #65	; 0x41
 8001a40:	fa00 f203 	lsl.w	r2, r0, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a30      	ldr	r2, [pc, #192]	; (8001b14 <HAL_ADC_ConfigChannel+0x29c>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d10a      	bne.n	8001a6c <HAL_ADC_ConfigChannel+0x1f4>
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a5e:	d105      	bne.n	8001a6c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001a60:	4b2d      	ldr	r3, [pc, #180]	; (8001b18 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	4a2c      	ldr	r2, [pc, #176]	; (8001b18 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a66:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001a6a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a28      	ldr	r2, [pc, #160]	; (8001b14 <HAL_ADC_ConfigChannel+0x29c>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d10f      	bne.n	8001a96 <HAL_ADC_ConfigChannel+0x21e>
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2b12      	cmp	r3, #18
 8001a7c:	d10b      	bne.n	8001a96 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001a7e:	4b26      	ldr	r3, [pc, #152]	; (8001b18 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	4a25      	ldr	r2, [pc, #148]	; (8001b18 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a84:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001a88:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001a8a:	4b23      	ldr	r3, [pc, #140]	; (8001b18 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	4a22      	ldr	r2, [pc, #136]	; (8001b18 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a94:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a1e      	ldr	r2, [pc, #120]	; (8001b14 <HAL_ADC_ConfigChannel+0x29c>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d12b      	bne.n	8001af8 <HAL_ADC_ConfigChannel+0x280>
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a1a      	ldr	r2, [pc, #104]	; (8001b10 <HAL_ADC_ConfigChannel+0x298>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d003      	beq.n	8001ab2 <HAL_ADC_ConfigChannel+0x23a>
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2b11      	cmp	r3, #17
 8001ab0:	d122      	bne.n	8001af8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001ab2:	4b19      	ldr	r3, [pc, #100]	; (8001b18 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	4a18      	ldr	r2, [pc, #96]	; (8001b18 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ab8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001abc:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001abe:	4b16      	ldr	r3, [pc, #88]	; (8001b18 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	4a15      	ldr	r2, [pc, #84]	; (8001b18 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ac4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ac8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a10      	ldr	r2, [pc, #64]	; (8001b10 <HAL_ADC_ConfigChannel+0x298>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d111      	bne.n	8001af8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001ad4:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <HAL_ADC_ConfigChannel+0x2a4>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a11      	ldr	r2, [pc, #68]	; (8001b20 <HAL_ADC_ConfigChannel+0x2a8>)
 8001ada:	fba2 2303 	umull	r2, r3, r2, r3
 8001ade:	0c9a      	lsrs	r2, r3, #18
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4413      	add	r3, r2
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001aea:	e002      	b.n	8001af2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1f9      	bne.n	8001aec <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	10000012 	.word	0x10000012
 8001b14:	40012000 	.word	0x40012000
 8001b18:	40012300 	.word	0x40012300
 8001b1c:	20000004 	.word	0x20000004
 8001b20:	431bde83 	.word	0x431bde83

08001b24 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001b2c:	4b78      	ldr	r3, [pc, #480]	; (8001d10 <ADC_Init+0x1ec>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	4a77      	ldr	r2, [pc, #476]	; (8001d10 <ADC_Init+0x1ec>)
 8001b32:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001b36:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001b38:	4b75      	ldr	r3, [pc, #468]	; (8001d10 <ADC_Init+0x1ec>)
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	4973      	ldr	r1, [pc, #460]	; (8001d10 <ADC_Init+0x1ec>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	6859      	ldr	r1, [r3, #4]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	021a      	lsls	r2, r3, #8
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	430a      	orrs	r2, r1
 8001b68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	685a      	ldr	r2, [r3, #4]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001b78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	6859      	ldr	r1, [r3, #4]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	689a      	ldr	r2, [r3, #8]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6899      	ldr	r1, [r3, #8]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68da      	ldr	r2, [r3, #12]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	430a      	orrs	r2, r1
 8001bac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb2:	4a58      	ldr	r2, [pc, #352]	; (8001d14 <ADC_Init+0x1f0>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d022      	beq.n	8001bfe <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	689a      	ldr	r2, [r3, #8]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bc6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6899      	ldr	r1, [r3, #8]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001be8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6899      	ldr	r1, [r3, #8]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	e00f      	b.n	8001c1e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c1c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f022 0202 	bic.w	r2, r2, #2
 8001c2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	6899      	ldr	r1, [r3, #8]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	005a      	lsls	r2, r3, #1
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d01b      	beq.n	8001c84 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	685a      	ldr	r2, [r3, #4]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c5a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	685a      	ldr	r2, [r3, #4]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001c6a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6859      	ldr	r1, [r3, #4]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c76:	3b01      	subs	r3, #1
 8001c78:	035a      	lsls	r2, r3, #13
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	e007      	b.n	8001c94 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	685a      	ldr	r2, [r3, #4]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c92:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001ca2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	051a      	lsls	r2, r3, #20
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	689a      	ldr	r2, [r3, #8]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001cc8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6899      	ldr	r1, [r3, #8]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001cd6:	025a      	lsls	r2, r3, #9
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	689a      	ldr	r2, [r3, #8]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6899      	ldr	r1, [r3, #8]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	029a      	lsls	r2, r3, #10
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	430a      	orrs	r2, r1
 8001d02:	609a      	str	r2, [r3, #8]
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	40012300 	.word	0x40012300
 8001d14:	0f000001 	.word	0x0f000001

08001d18 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e0ed      	b.n	8001f06 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d102      	bne.n	8001d3c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7ff fa36 	bl	80011a8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f042 0201 	orr.w	r2, r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d4c:	f7ff fbaa 	bl	80014a4 <HAL_GetTick>
 8001d50:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d52:	e012      	b.n	8001d7a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d54:	f7ff fba6 	bl	80014a4 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b0a      	cmp	r3, #10
 8001d60:	d90b      	bls.n	8001d7a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d66:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2205      	movs	r2, #5
 8001d72:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e0c5      	b.n	8001f06 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d0e5      	beq.n	8001d54 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f022 0202 	bic.w	r2, r2, #2
 8001d96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d98:	f7ff fb84 	bl	80014a4 <HAL_GetTick>
 8001d9c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d9e:	e012      	b.n	8001dc6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001da0:	f7ff fb80 	bl	80014a4 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b0a      	cmp	r3, #10
 8001dac:	d90b      	bls.n	8001dc6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2205      	movs	r2, #5
 8001dbe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e09f      	b.n	8001f06 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1e5      	bne.n	8001da0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	7e1b      	ldrb	r3, [r3, #24]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d108      	bne.n	8001dee <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	e007      	b.n	8001dfe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dfc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	7e5b      	ldrb	r3, [r3, #25]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d108      	bne.n	8001e18 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	e007      	b.n	8001e28 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e26:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	7e9b      	ldrb	r3, [r3, #26]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d108      	bne.n	8001e42 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f042 0220 	orr.w	r2, r2, #32
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	e007      	b.n	8001e52 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f022 0220 	bic.w	r2, r2, #32
 8001e50:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	7edb      	ldrb	r3, [r3, #27]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d108      	bne.n	8001e6c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 0210 	bic.w	r2, r2, #16
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	e007      	b.n	8001e7c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f042 0210 	orr.w	r2, r2, #16
 8001e7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	7f1b      	ldrb	r3, [r3, #28]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d108      	bne.n	8001e96 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 0208 	orr.w	r2, r2, #8
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	e007      	b.n	8001ea6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 0208 	bic.w	r2, r2, #8
 8001ea4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	7f5b      	ldrb	r3, [r3, #29]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d108      	bne.n	8001ec0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f042 0204 	orr.w	r2, r2, #4
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	e007      	b.n	8001ed0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f022 0204 	bic.w	r2, r2, #4
 8001ece:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	ea42 0103 	orr.w	r1, r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	1e5a      	subs	r2, r3, #1
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
	...

08001f10 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b087      	sub	sp, #28
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f26:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001f28:	7cfb      	ldrb	r3, [r7, #19]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d003      	beq.n	8001f36 <HAL_CAN_ConfigFilter+0x26>
 8001f2e:	7cfb      	ldrb	r3, [r7, #19]
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	f040 80c7 	bne.w	80020c4 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a69      	ldr	r2, [pc, #420]	; (80020e0 <HAL_CAN_ConfigFilter+0x1d0>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d001      	beq.n	8001f44 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001f40:	4b68      	ldr	r3, [pc, #416]	; (80020e4 <HAL_CAN_ConfigFilter+0x1d4>)
 8001f42:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f4a:	f043 0201 	orr.w	r2, r3, #1
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	4a63      	ldr	r2, [pc, #396]	; (80020e4 <HAL_CAN_ConfigFilter+0x1d4>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d111      	bne.n	8001f80 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f62:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f76:	021b      	lsls	r3, r3, #8
 8001f78:	431a      	orrs	r2, r3
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	695b      	ldr	r3, [r3, #20]
 8001f84:	f003 031f 	and.w	r3, r3, #31
 8001f88:	2201      	movs	r2, #1
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	401a      	ands	r2, r3
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d123      	bne.n	8001ff2 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	401a      	ands	r2, r3
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001fcc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	3248      	adds	r2, #72	; 0x48
 8001fd2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fe6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fe8:	6979      	ldr	r1, [r7, #20]
 8001fea:	3348      	adds	r3, #72	; 0x48
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	440b      	add	r3, r1
 8001ff0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d122      	bne.n	8002040 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	431a      	orrs	r2, r3
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800201a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	3248      	adds	r2, #72	; 0x48
 8002020:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002034:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002036:	6979      	ldr	r1, [r7, #20]
 8002038:	3348      	adds	r3, #72	; 0x48
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	440b      	add	r3, r1
 800203e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d109      	bne.n	800205c <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	43db      	mvns	r3, r3
 8002052:	401a      	ands	r2, r3
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800205a:	e007      	b.n	800206c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	431a      	orrs	r2, r3
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	691b      	ldr	r3, [r3, #16]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d109      	bne.n	8002088 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	43db      	mvns	r3, r3
 800207e:	401a      	ands	r2, r3
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002086:	e007      	b.n	8002098 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	431a      	orrs	r2, r3
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d107      	bne.n	80020b0 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	431a      	orrs	r2, r3
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80020b6:	f023 0201 	bic.w	r2, r3, #1
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80020c0:	2300      	movs	r3, #0
 80020c2:	e006      	b.n	80020d2 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
  }
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	371c      	adds	r7, #28
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	40003400 	.word	0x40003400
 80020e4:	40006400 	.word	0x40006400

080020e8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d12e      	bne.n	800215a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2202      	movs	r2, #2
 8002100:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 0201 	bic.w	r2, r2, #1
 8002112:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002114:	f7ff f9c6 	bl	80014a4 <HAL_GetTick>
 8002118:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800211a:	e012      	b.n	8002142 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800211c:	f7ff f9c2 	bl	80014a4 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b0a      	cmp	r3, #10
 8002128:	d90b      	bls.n	8002142 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2205      	movs	r2, #5
 800213a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e012      	b.n	8002168 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1e5      	bne.n	800211c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002156:	2300      	movs	r3, #0
 8002158:	e006      	b.n	8002168 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
  }
}
 8002168:	4618      	mov	r0, r3
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002170:	b480      	push	{r7}
 8002172:	b089      	sub	sp, #36	; 0x24
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
 800217c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002184:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800218e:	7ffb      	ldrb	r3, [r7, #31]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d003      	beq.n	800219c <HAL_CAN_AddTxMessage+0x2c>
 8002194:	7ffb      	ldrb	r3, [r7, #31]
 8002196:	2b02      	cmp	r3, #2
 8002198:	f040 80ad 	bne.w	80022f6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10a      	bne.n	80021bc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d105      	bne.n	80021bc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f000 8095 	beq.w	80022e6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	0e1b      	lsrs	r3, r3, #24
 80021c0:	f003 0303 	and.w	r3, r3, #3
 80021c4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80021c6:	2201      	movs	r2, #1
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	409a      	lsls	r2, r3
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d10d      	bne.n	80021f4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80021e2:	68f9      	ldr	r1, [r7, #12]
 80021e4:	6809      	ldr	r1, [r1, #0]
 80021e6:	431a      	orrs	r2, r3
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	3318      	adds	r3, #24
 80021ec:	011b      	lsls	r3, r3, #4
 80021ee:	440b      	add	r3, r1
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	e00f      	b.n	8002214 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021fe:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002204:	68f9      	ldr	r1, [r7, #12]
 8002206:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002208:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	3318      	adds	r3, #24
 800220e:	011b      	lsls	r3, r3, #4
 8002210:	440b      	add	r3, r1
 8002212:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6819      	ldr	r1, [r3, #0]
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	691a      	ldr	r2, [r3, #16]
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	3318      	adds	r3, #24
 8002220:	011b      	lsls	r3, r3, #4
 8002222:	440b      	add	r3, r1
 8002224:	3304      	adds	r3, #4
 8002226:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	7d1b      	ldrb	r3, [r3, #20]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d111      	bne.n	8002254 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	3318      	adds	r3, #24
 8002238:	011b      	lsls	r3, r3, #4
 800223a:	4413      	add	r3, r2
 800223c:	3304      	adds	r3, #4
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	6811      	ldr	r1, [r2, #0]
 8002244:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	3318      	adds	r3, #24
 800224c:	011b      	lsls	r3, r3, #4
 800224e:	440b      	add	r3, r1
 8002250:	3304      	adds	r3, #4
 8002252:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3307      	adds	r3, #7
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	061a      	lsls	r2, r3, #24
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3306      	adds	r3, #6
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	041b      	lsls	r3, r3, #16
 8002264:	431a      	orrs	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3305      	adds	r3, #5
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	021b      	lsls	r3, r3, #8
 800226e:	4313      	orrs	r3, r2
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	3204      	adds	r2, #4
 8002274:	7812      	ldrb	r2, [r2, #0]
 8002276:	4610      	mov	r0, r2
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	6811      	ldr	r1, [r2, #0]
 800227c:	ea43 0200 	orr.w	r2, r3, r0
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	011b      	lsls	r3, r3, #4
 8002284:	440b      	add	r3, r1
 8002286:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800228a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3303      	adds	r3, #3
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	061a      	lsls	r2, r3, #24
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	3302      	adds	r3, #2
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	041b      	lsls	r3, r3, #16
 800229c:	431a      	orrs	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	3301      	adds	r3, #1
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	021b      	lsls	r3, r3, #8
 80022a6:	4313      	orrs	r3, r2
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	7812      	ldrb	r2, [r2, #0]
 80022ac:	4610      	mov	r0, r2
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	6811      	ldr	r1, [r2, #0]
 80022b2:	ea43 0200 	orr.w	r2, r3, r0
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	011b      	lsls	r3, r3, #4
 80022ba:	440b      	add	r3, r1
 80022bc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80022c0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	3318      	adds	r3, #24
 80022ca:	011b      	lsls	r3, r3, #4
 80022cc:	4413      	add	r3, r2
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	6811      	ldr	r1, [r2, #0]
 80022d4:	f043 0201 	orr.w	r2, r3, #1
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	3318      	adds	r3, #24
 80022dc:	011b      	lsls	r3, r3, #4
 80022de:	440b      	add	r3, r1
 80022e0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80022e2:	2300      	movs	r3, #0
 80022e4:	e00e      	b.n	8002304 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e006      	b.n	8002304 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
  }
}
 8002304:	4618      	mov	r0, r3
 8002306:	3724      	adds	r7, #36	; 0x24
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002310:	b480      	push	{r7}
 8002312:	b087      	sub	sp, #28
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
 800231c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002324:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002326:	7dfb      	ldrb	r3, [r7, #23]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d003      	beq.n	8002334 <HAL_CAN_GetRxMessage+0x24>
 800232c:	7dfb      	ldrb	r3, [r7, #23]
 800232e:	2b02      	cmp	r3, #2
 8002330:	f040 80f3 	bne.w	800251a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10e      	bne.n	8002358 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	f003 0303 	and.w	r3, r3, #3
 8002344:	2b00      	cmp	r3, #0
 8002346:	d116      	bne.n	8002376 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e0e7      	b.n	8002528 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	f003 0303 	and.w	r3, r3, #3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d107      	bne.n	8002376 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e0d8      	b.n	8002528 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	331b      	adds	r3, #27
 800237e:	011b      	lsls	r3, r3, #4
 8002380:	4413      	add	r3, r2
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0204 	and.w	r2, r3, #4
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d10c      	bne.n	80023ae <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	331b      	adds	r3, #27
 800239c:	011b      	lsls	r3, r3, #4
 800239e:	4413      	add	r3, r2
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	0d5b      	lsrs	r3, r3, #21
 80023a4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	e00b      	b.n	80023c6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	331b      	adds	r3, #27
 80023b6:	011b      	lsls	r3, r3, #4
 80023b8:	4413      	add	r3, r2
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	08db      	lsrs	r3, r3, #3
 80023be:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	331b      	adds	r3, #27
 80023ce:	011b      	lsls	r3, r3, #4
 80023d0:	4413      	add	r3, r2
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0202 	and.w	r2, r3, #2
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	331b      	adds	r3, #27
 80023e4:	011b      	lsls	r3, r3, #4
 80023e6:	4413      	add	r3, r2
 80023e8:	3304      	adds	r3, #4
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 020f 	and.w	r2, r3, #15
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	331b      	adds	r3, #27
 80023fc:	011b      	lsls	r3, r3, #4
 80023fe:	4413      	add	r3, r2
 8002400:	3304      	adds	r3, #4
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	0a1b      	lsrs	r3, r3, #8
 8002406:	b2da      	uxtb	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	331b      	adds	r3, #27
 8002414:	011b      	lsls	r3, r3, #4
 8002416:	4413      	add	r3, r2
 8002418:	3304      	adds	r3, #4
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	0c1b      	lsrs	r3, r3, #16
 800241e:	b29a      	uxth	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	011b      	lsls	r3, r3, #4
 800242c:	4413      	add	r3, r2
 800242e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	b2da      	uxtb	r2, r3
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	011b      	lsls	r3, r3, #4
 8002442:	4413      	add	r3, r2
 8002444:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	0a1a      	lsrs	r2, r3, #8
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	3301      	adds	r3, #1
 8002450:	b2d2      	uxtb	r2, r2
 8002452:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	011b      	lsls	r3, r3, #4
 800245c:	4413      	add	r3, r2
 800245e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	0c1a      	lsrs	r2, r3, #16
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	3302      	adds	r3, #2
 800246a:	b2d2      	uxtb	r2, r2
 800246c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	011b      	lsls	r3, r3, #4
 8002476:	4413      	add	r3, r2
 8002478:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	0e1a      	lsrs	r2, r3, #24
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	3303      	adds	r3, #3
 8002484:	b2d2      	uxtb	r2, r2
 8002486:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	011b      	lsls	r3, r3, #4
 8002490:	4413      	add	r3, r2
 8002492:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	3304      	adds	r3, #4
 800249c:	b2d2      	uxtb	r2, r2
 800249e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	011b      	lsls	r3, r3, #4
 80024a8:	4413      	add	r3, r2
 80024aa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	0a1a      	lsrs	r2, r3, #8
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	3305      	adds	r3, #5
 80024b6:	b2d2      	uxtb	r2, r2
 80024b8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	011b      	lsls	r3, r3, #4
 80024c2:	4413      	add	r3, r2
 80024c4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	0c1a      	lsrs	r2, r3, #16
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	3306      	adds	r3, #6
 80024d0:	b2d2      	uxtb	r2, r2
 80024d2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	011b      	lsls	r3, r3, #4
 80024dc:	4413      	add	r3, r2
 80024de:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	0e1a      	lsrs	r2, r3, #24
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	3307      	adds	r3, #7
 80024ea:	b2d2      	uxtb	r2, r2
 80024ec:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d108      	bne.n	8002506 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68da      	ldr	r2, [r3, #12]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f042 0220 	orr.w	r2, r2, #32
 8002502:	60da      	str	r2, [r3, #12]
 8002504:	e007      	b.n	8002516 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	691a      	ldr	r2, [r3, #16]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f042 0220 	orr.w	r2, r2, #32
 8002514:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002516:	2300      	movs	r3, #0
 8002518:	e006      	b.n	8002528 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
  }
}
 8002528:	4618      	mov	r0, r3
 800252a:	371c      	adds	r7, #28
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002544:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002546:	7bfb      	ldrb	r3, [r7, #15]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d002      	beq.n	8002552 <HAL_CAN_ActivateNotification+0x1e>
 800254c:	7bfb      	ldrb	r3, [r7, #15]
 800254e:	2b02      	cmp	r3, #2
 8002550:	d109      	bne.n	8002566 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6959      	ldr	r1, [r3, #20]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002562:	2300      	movs	r3, #0
 8002564:	e006      	b.n	8002574 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
  }
}
 8002574:	4618      	mov	r0, r3
 8002576:	3714      	adds	r7, #20
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b08a      	sub	sp, #40	; 0x28
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002588:	2300      	movs	r3, #0
 800258a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80025bc:	6a3b      	ldr	r3, [r7, #32]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d07c      	beq.n	80026c0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d023      	beq.n	8002618 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2201      	movs	r2, #1
 80025d6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f983 	bl	80028ee <HAL_CAN_TxMailbox0CompleteCallback>
 80025e8:	e016      	b.n	8002618 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	f003 0304 	and.w	r3, r3, #4
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d004      	beq.n	80025fe <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025fa:	627b      	str	r3, [r7, #36]	; 0x24
 80025fc:	e00c      	b.n	8002618 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	f003 0308 	and.w	r3, r3, #8
 8002604:	2b00      	cmp	r3, #0
 8002606:	d004      	beq.n	8002612 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800260e:	627b      	str	r3, [r7, #36]	; 0x24
 8002610:	e002      	b.n	8002618 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 f989 	bl	800292a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261e:	2b00      	cmp	r3, #0
 8002620:	d024      	beq.n	800266c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f44f 7280 	mov.w	r2, #256	; 0x100
 800262a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 f963 	bl	8002902 <HAL_CAN_TxMailbox1CompleteCallback>
 800263c:	e016      	b.n	800266c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002644:	2b00      	cmp	r3, #0
 8002646:	d004      	beq.n	8002652 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800264e:	627b      	str	r3, [r7, #36]	; 0x24
 8002650:	e00c      	b.n	800266c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002658:	2b00      	cmp	r3, #0
 800265a:	d004      	beq.n	8002666 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002662:	627b      	str	r3, [r7, #36]	; 0x24
 8002664:	e002      	b.n	800266c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 f969 	bl	800293e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d024      	beq.n	80026c0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800267e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 f943 	bl	8002916 <HAL_CAN_TxMailbox2CompleteCallback>
 8002690:	e016      	b.n	80026c0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d004      	beq.n	80026a6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026a2:	627b      	str	r3, [r7, #36]	; 0x24
 80026a4:	e00c      	b.n	80026c0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d004      	beq.n	80026ba <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80026b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b6:	627b      	str	r3, [r7, #36]	; 0x24
 80026b8:	e002      	b.n	80026c0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 f949 	bl	8002952 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80026c0:	6a3b      	ldr	r3, [r7, #32]
 80026c2:	f003 0308 	and.w	r3, r3, #8
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00c      	beq.n	80026e4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	f003 0310 	and.w	r3, r3, #16
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d007      	beq.n	80026e4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80026d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026da:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2210      	movs	r2, #16
 80026e2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80026e4:	6a3b      	ldr	r3, [r7, #32]
 80026e6:	f003 0304 	and.w	r3, r3, #4
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00b      	beq.n	8002706 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	f003 0308 	and.w	r3, r3, #8
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d006      	beq.n	8002706 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2208      	movs	r2, #8
 80026fe:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 f930 	bl	8002966 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002706:	6a3b      	ldr	r3, [r7, #32]
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d009      	beq.n	8002724 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	f003 0303 	and.w	r3, r3, #3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d002      	beq.n	8002724 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7fe fa4c 	bl	8000bbc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002724:	6a3b      	ldr	r3, [r7, #32]
 8002726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00c      	beq.n	8002748 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	f003 0310 	and.w	r3, r3, #16
 8002734:	2b00      	cmp	r3, #0
 8002736:	d007      	beq.n	8002748 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800273e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2210      	movs	r2, #16
 8002746:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002748:	6a3b      	ldr	r3, [r7, #32]
 800274a:	f003 0320 	and.w	r3, r3, #32
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00b      	beq.n	800276a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	f003 0308 	and.w	r3, r3, #8
 8002758:	2b00      	cmp	r3, #0
 800275a:	d006      	beq.n	800276a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2208      	movs	r2, #8
 8002762:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 f912 	bl	800298e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800276a:	6a3b      	ldr	r3, [r7, #32]
 800276c:	f003 0310 	and.w	r3, r3, #16
 8002770:	2b00      	cmp	r3, #0
 8002772:	d009      	beq.n	8002788 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	f003 0303 	and.w	r3, r3, #3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d002      	beq.n	8002788 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 f8f9 	bl	800297a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002788:	6a3b      	ldr	r3, [r7, #32]
 800278a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00b      	beq.n	80027aa <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	f003 0310 	and.w	r3, r3, #16
 8002798:	2b00      	cmp	r3, #0
 800279a:	d006      	beq.n	80027aa <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2210      	movs	r2, #16
 80027a2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f000 f8fc 	bl	80029a2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80027aa:	6a3b      	ldr	r3, [r7, #32]
 80027ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00b      	beq.n	80027cc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	f003 0308 	and.w	r3, r3, #8
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d006      	beq.n	80027cc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2208      	movs	r2, #8
 80027c4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 f8f5 	bl	80029b6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80027cc:	6a3b      	ldr	r3, [r7, #32]
 80027ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d07b      	beq.n	80028ce <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	f003 0304 	and.w	r3, r3, #4
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d072      	beq.n	80028c6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80027e0:	6a3b      	ldr	r3, [r7, #32]
 80027e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d008      	beq.n	80027fc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d003      	beq.n	80027fc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80027f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f6:	f043 0301 	orr.w	r3, r3, #1
 80027fa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80027fc:	6a3b      	ldr	r3, [r7, #32]
 80027fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002802:	2b00      	cmp	r3, #0
 8002804:	d008      	beq.n	8002818 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800280c:	2b00      	cmp	r3, #0
 800280e:	d003      	beq.n	8002818 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002812:	f043 0302 	orr.w	r3, r3, #2
 8002816:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002818:	6a3b      	ldr	r3, [r7, #32]
 800281a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800281e:	2b00      	cmp	r3, #0
 8002820:	d008      	beq.n	8002834 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002828:	2b00      	cmp	r3, #0
 800282a:	d003      	beq.n	8002834 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800282c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282e:	f043 0304 	orr.w	r3, r3, #4
 8002832:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002834:	6a3b      	ldr	r3, [r7, #32]
 8002836:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800283a:	2b00      	cmp	r3, #0
 800283c:	d043      	beq.n	80028c6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002844:	2b00      	cmp	r3, #0
 8002846:	d03e      	beq.n	80028c6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800284e:	2b60      	cmp	r3, #96	; 0x60
 8002850:	d02b      	beq.n	80028aa <HAL_CAN_IRQHandler+0x32a>
 8002852:	2b60      	cmp	r3, #96	; 0x60
 8002854:	d82e      	bhi.n	80028b4 <HAL_CAN_IRQHandler+0x334>
 8002856:	2b50      	cmp	r3, #80	; 0x50
 8002858:	d022      	beq.n	80028a0 <HAL_CAN_IRQHandler+0x320>
 800285a:	2b50      	cmp	r3, #80	; 0x50
 800285c:	d82a      	bhi.n	80028b4 <HAL_CAN_IRQHandler+0x334>
 800285e:	2b40      	cmp	r3, #64	; 0x40
 8002860:	d019      	beq.n	8002896 <HAL_CAN_IRQHandler+0x316>
 8002862:	2b40      	cmp	r3, #64	; 0x40
 8002864:	d826      	bhi.n	80028b4 <HAL_CAN_IRQHandler+0x334>
 8002866:	2b30      	cmp	r3, #48	; 0x30
 8002868:	d010      	beq.n	800288c <HAL_CAN_IRQHandler+0x30c>
 800286a:	2b30      	cmp	r3, #48	; 0x30
 800286c:	d822      	bhi.n	80028b4 <HAL_CAN_IRQHandler+0x334>
 800286e:	2b10      	cmp	r3, #16
 8002870:	d002      	beq.n	8002878 <HAL_CAN_IRQHandler+0x2f8>
 8002872:	2b20      	cmp	r3, #32
 8002874:	d005      	beq.n	8002882 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002876:	e01d      	b.n	80028b4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	f043 0308 	orr.w	r3, r3, #8
 800287e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002880:	e019      	b.n	80028b6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	f043 0310 	orr.w	r3, r3, #16
 8002888:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800288a:	e014      	b.n	80028b6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	f043 0320 	orr.w	r3, r3, #32
 8002892:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002894:	e00f      	b.n	80028b6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002898:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800289c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800289e:	e00a      	b.n	80028b6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80028a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028a8:	e005      	b.n	80028b6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80028aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028b2:	e000      	b.n	80028b6 <HAL_CAN_IRQHandler+0x336>
            break;
 80028b4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	699a      	ldr	r2, [r3, #24]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80028c4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2204      	movs	r2, #4
 80028cc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80028ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d008      	beq.n	80028e6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	431a      	orrs	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 f872 	bl	80029ca <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80028e6:	bf00      	nop
 80028e8:	3728      	adds	r7, #40	; 0x28
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b083      	sub	sp, #12
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002916:	b480      	push	{r7}
 8002918:	b083      	sub	sp, #12
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800292a:	b480      	push	{r7}
 800292c:	b083      	sub	sp, #12
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800295a:	bf00      	nop
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002966:	b480      	push	{r7}
 8002968:	b083      	sub	sp, #12
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800298e:	b480      	push	{r7}
 8002990:	b083      	sub	sp, #12
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002996:	bf00      	nop
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b083      	sub	sp, #12
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
	...

080029e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f003 0307 	and.w	r3, r3, #7
 80029ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029f0:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <__NVIC_SetPriorityGrouping+0x40>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029f6:	68ba      	ldr	r2, [r7, #8]
 80029f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029fc:	4013      	ands	r3, r2
 80029fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002a08:	4b06      	ldr	r3, [pc, #24]	; (8002a24 <__NVIC_SetPriorityGrouping+0x44>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a0e:	4a04      	ldr	r2, [pc, #16]	; (8002a20 <__NVIC_SetPriorityGrouping+0x40>)
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	60d3      	str	r3, [r2, #12]
}
 8002a14:	bf00      	nop
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	e000ed00 	.word	0xe000ed00
 8002a24:	05fa0000 	.word	0x05fa0000

08002a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a2c:	4b04      	ldr	r3, [pc, #16]	; (8002a40 <__NVIC_GetPriorityGrouping+0x18>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	0a1b      	lsrs	r3, r3, #8
 8002a32:	f003 0307 	and.w	r3, r3, #7
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	e000ed00 	.word	0xe000ed00

08002a44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	db0b      	blt.n	8002a6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a56:	79fb      	ldrb	r3, [r7, #7]
 8002a58:	f003 021f 	and.w	r2, r3, #31
 8002a5c:	4907      	ldr	r1, [pc, #28]	; (8002a7c <__NVIC_EnableIRQ+0x38>)
 8002a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a62:	095b      	lsrs	r3, r3, #5
 8002a64:	2001      	movs	r0, #1
 8002a66:	fa00 f202 	lsl.w	r2, r0, r2
 8002a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	e000e100 	.word	0xe000e100

08002a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	4603      	mov	r3, r0
 8002a88:	6039      	str	r1, [r7, #0]
 8002a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	db0a      	blt.n	8002aaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	b2da      	uxtb	r2, r3
 8002a98:	490c      	ldr	r1, [pc, #48]	; (8002acc <__NVIC_SetPriority+0x4c>)
 8002a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9e:	0112      	lsls	r2, r2, #4
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	440b      	add	r3, r1
 8002aa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002aa8:	e00a      	b.n	8002ac0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	b2da      	uxtb	r2, r3
 8002aae:	4908      	ldr	r1, [pc, #32]	; (8002ad0 <__NVIC_SetPriority+0x50>)
 8002ab0:	79fb      	ldrb	r3, [r7, #7]
 8002ab2:	f003 030f 	and.w	r3, r3, #15
 8002ab6:	3b04      	subs	r3, #4
 8002ab8:	0112      	lsls	r2, r2, #4
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	440b      	add	r3, r1
 8002abe:	761a      	strb	r2, [r3, #24]
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	e000e100 	.word	0xe000e100
 8002ad0:	e000ed00 	.word	0xe000ed00

08002ad4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b089      	sub	sp, #36	; 0x24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	f1c3 0307 	rsb	r3, r3, #7
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	bf28      	it	cs
 8002af2:	2304      	movcs	r3, #4
 8002af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	3304      	adds	r3, #4
 8002afa:	2b06      	cmp	r3, #6
 8002afc:	d902      	bls.n	8002b04 <NVIC_EncodePriority+0x30>
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	3b03      	subs	r3, #3
 8002b02:	e000      	b.n	8002b06 <NVIC_EncodePriority+0x32>
 8002b04:	2300      	movs	r3, #0
 8002b06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b08:	f04f 32ff 	mov.w	r2, #4294967295
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b12:	43da      	mvns	r2, r3
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	401a      	ands	r2, r3
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	fa01 f303 	lsl.w	r3, r1, r3
 8002b26:	43d9      	mvns	r1, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b2c:	4313      	orrs	r3, r2
         );
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3724      	adds	r7, #36	; 0x24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b082      	sub	sp, #8
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f7ff ff4c 	bl	80029e0 <__NVIC_SetPriorityGrouping>
}
 8002b48:	bf00      	nop
 8002b4a:	3708      	adds	r7, #8
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	4603      	mov	r3, r0
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
 8002b5c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b62:	f7ff ff61 	bl	8002a28 <__NVIC_GetPriorityGrouping>
 8002b66:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	68b9      	ldr	r1, [r7, #8]
 8002b6c:	6978      	ldr	r0, [r7, #20]
 8002b6e:	f7ff ffb1 	bl	8002ad4 <NVIC_EncodePriority>
 8002b72:	4602      	mov	r2, r0
 8002b74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b78:	4611      	mov	r1, r2
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7ff ff80 	bl	8002a80 <__NVIC_SetPriority>
}
 8002b80:	bf00      	nop
 8002b82:	3718      	adds	r7, #24
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	4603      	mov	r3, r0
 8002b90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff ff54 	bl	8002a44 <__NVIC_EnableIRQ>
}
 8002b9c:	bf00      	nop
 8002b9e:	3708      	adds	r7, #8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b089      	sub	sp, #36	; 0x24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	61fb      	str	r3, [r7, #28]
 8002bc2:	e175      	b.n	8002eb0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	f040 8164 	bne.w	8002eaa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d005      	beq.n	8002bfa <HAL_GPIO_Init+0x56>
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f003 0303 	and.w	r3, r3, #3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d130      	bne.n	8002c5c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	2203      	movs	r2, #3
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	43db      	mvns	r3, r3
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	68da      	ldr	r2, [r3, #12]
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c30:	2201      	movs	r2, #1
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	091b      	lsrs	r3, r3, #4
 8002c46:	f003 0201 	and.w	r2, r3, #1
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f003 0303 	and.w	r3, r3, #3
 8002c64:	2b03      	cmp	r3, #3
 8002c66:	d017      	beq.n	8002c98 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	2203      	movs	r2, #3
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	689a      	ldr	r2, [r3, #8]
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f003 0303 	and.w	r3, r3, #3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d123      	bne.n	8002cec <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	08da      	lsrs	r2, r3, #3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	3208      	adds	r2, #8
 8002cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	220f      	movs	r2, #15
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	691a      	ldr	r2, [r3, #16]
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	f003 0307 	and.w	r3, r3, #7
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	08da      	lsrs	r2, r3, #3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	3208      	adds	r2, #8
 8002ce6:	69b9      	ldr	r1, [r7, #24]
 8002ce8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	2203      	movs	r2, #3
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	4013      	ands	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f003 0203 	and.w	r2, r3, #3
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 80be 	beq.w	8002eaa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d2e:	4b66      	ldr	r3, [pc, #408]	; (8002ec8 <HAL_GPIO_Init+0x324>)
 8002d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d32:	4a65      	ldr	r2, [pc, #404]	; (8002ec8 <HAL_GPIO_Init+0x324>)
 8002d34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d38:	6453      	str	r3, [r2, #68]	; 0x44
 8002d3a:	4b63      	ldr	r3, [pc, #396]	; (8002ec8 <HAL_GPIO_Init+0x324>)
 8002d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002d46:	4a61      	ldr	r2, [pc, #388]	; (8002ecc <HAL_GPIO_Init+0x328>)
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	089b      	lsrs	r3, r3, #2
 8002d4c:	3302      	adds	r3, #2
 8002d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	f003 0303 	and.w	r3, r3, #3
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	220f      	movs	r2, #15
 8002d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d62:	43db      	mvns	r3, r3
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	4013      	ands	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a58      	ldr	r2, [pc, #352]	; (8002ed0 <HAL_GPIO_Init+0x32c>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d037      	beq.n	8002de2 <HAL_GPIO_Init+0x23e>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a57      	ldr	r2, [pc, #348]	; (8002ed4 <HAL_GPIO_Init+0x330>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d031      	beq.n	8002dde <HAL_GPIO_Init+0x23a>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a56      	ldr	r2, [pc, #344]	; (8002ed8 <HAL_GPIO_Init+0x334>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d02b      	beq.n	8002dda <HAL_GPIO_Init+0x236>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a55      	ldr	r2, [pc, #340]	; (8002edc <HAL_GPIO_Init+0x338>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d025      	beq.n	8002dd6 <HAL_GPIO_Init+0x232>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a54      	ldr	r2, [pc, #336]	; (8002ee0 <HAL_GPIO_Init+0x33c>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d01f      	beq.n	8002dd2 <HAL_GPIO_Init+0x22e>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a53      	ldr	r2, [pc, #332]	; (8002ee4 <HAL_GPIO_Init+0x340>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d019      	beq.n	8002dce <HAL_GPIO_Init+0x22a>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a52      	ldr	r2, [pc, #328]	; (8002ee8 <HAL_GPIO_Init+0x344>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d013      	beq.n	8002dca <HAL_GPIO_Init+0x226>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a51      	ldr	r2, [pc, #324]	; (8002eec <HAL_GPIO_Init+0x348>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d00d      	beq.n	8002dc6 <HAL_GPIO_Init+0x222>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a50      	ldr	r2, [pc, #320]	; (8002ef0 <HAL_GPIO_Init+0x34c>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d007      	beq.n	8002dc2 <HAL_GPIO_Init+0x21e>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a4f      	ldr	r2, [pc, #316]	; (8002ef4 <HAL_GPIO_Init+0x350>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d101      	bne.n	8002dbe <HAL_GPIO_Init+0x21a>
 8002dba:	2309      	movs	r3, #9
 8002dbc:	e012      	b.n	8002de4 <HAL_GPIO_Init+0x240>
 8002dbe:	230a      	movs	r3, #10
 8002dc0:	e010      	b.n	8002de4 <HAL_GPIO_Init+0x240>
 8002dc2:	2308      	movs	r3, #8
 8002dc4:	e00e      	b.n	8002de4 <HAL_GPIO_Init+0x240>
 8002dc6:	2307      	movs	r3, #7
 8002dc8:	e00c      	b.n	8002de4 <HAL_GPIO_Init+0x240>
 8002dca:	2306      	movs	r3, #6
 8002dcc:	e00a      	b.n	8002de4 <HAL_GPIO_Init+0x240>
 8002dce:	2305      	movs	r3, #5
 8002dd0:	e008      	b.n	8002de4 <HAL_GPIO_Init+0x240>
 8002dd2:	2304      	movs	r3, #4
 8002dd4:	e006      	b.n	8002de4 <HAL_GPIO_Init+0x240>
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e004      	b.n	8002de4 <HAL_GPIO_Init+0x240>
 8002dda:	2302      	movs	r3, #2
 8002ddc:	e002      	b.n	8002de4 <HAL_GPIO_Init+0x240>
 8002dde:	2301      	movs	r3, #1
 8002de0:	e000      	b.n	8002de4 <HAL_GPIO_Init+0x240>
 8002de2:	2300      	movs	r3, #0
 8002de4:	69fa      	ldr	r2, [r7, #28]
 8002de6:	f002 0203 	and.w	r2, r2, #3
 8002dea:	0092      	lsls	r2, r2, #2
 8002dec:	4093      	lsls	r3, r2
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002df4:	4935      	ldr	r1, [pc, #212]	; (8002ecc <HAL_GPIO_Init+0x328>)
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	089b      	lsrs	r3, r3, #2
 8002dfa:	3302      	adds	r3, #2
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e02:	4b3d      	ldr	r3, [pc, #244]	; (8002ef8 <HAL_GPIO_Init+0x354>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e26:	4a34      	ldr	r2, [pc, #208]	; (8002ef8 <HAL_GPIO_Init+0x354>)
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e2c:	4b32      	ldr	r3, [pc, #200]	; (8002ef8 <HAL_GPIO_Init+0x354>)
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	43db      	mvns	r3, r3
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d003      	beq.n	8002e50 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e50:	4a29      	ldr	r2, [pc, #164]	; (8002ef8 <HAL_GPIO_Init+0x354>)
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e56:	4b28      	ldr	r3, [pc, #160]	; (8002ef8 <HAL_GPIO_Init+0x354>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	43db      	mvns	r3, r3
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	4013      	ands	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e7a:	4a1f      	ldr	r2, [pc, #124]	; (8002ef8 <HAL_GPIO_Init+0x354>)
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e80:	4b1d      	ldr	r3, [pc, #116]	; (8002ef8 <HAL_GPIO_Init+0x354>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d003      	beq.n	8002ea4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ea4:	4a14      	ldr	r2, [pc, #80]	; (8002ef8 <HAL_GPIO_Init+0x354>)
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	3301      	adds	r3, #1
 8002eae:	61fb      	str	r3, [r7, #28]
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	2b0f      	cmp	r3, #15
 8002eb4:	f67f ae86 	bls.w	8002bc4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002eb8:	bf00      	nop
 8002eba:	bf00      	nop
 8002ebc:	3724      	adds	r7, #36	; 0x24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	40013800 	.word	0x40013800
 8002ed0:	40020000 	.word	0x40020000
 8002ed4:	40020400 	.word	0x40020400
 8002ed8:	40020800 	.word	0x40020800
 8002edc:	40020c00 	.word	0x40020c00
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	40021400 	.word	0x40021400
 8002ee8:	40021800 	.word	0x40021800
 8002eec:	40021c00 	.word	0x40021c00
 8002ef0:	40022000 	.word	0x40022000
 8002ef4:	40022400 	.word	0x40022400
 8002ef8:	40013c00 	.word	0x40013c00

08002efc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	460b      	mov	r3, r1
 8002f06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	691a      	ldr	r2, [r3, #16]
 8002f0c:	887b      	ldrh	r3, [r7, #2]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d002      	beq.n	8002f1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f14:	2301      	movs	r3, #1
 8002f16:	73fb      	strb	r3, [r7, #15]
 8002f18:	e001      	b.n	8002f1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3714      	adds	r7, #20
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	460b      	mov	r3, r1
 8002f36:	807b      	strh	r3, [r7, #2]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f3c:	787b      	ldrb	r3, [r7, #1]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f42:	887a      	ldrh	r2, [r7, #2]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002f48:	e003      	b.n	8002f52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002f4a:	887b      	ldrh	r3, [r7, #2]
 8002f4c:	041a      	lsls	r2, r3, #16
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	619a      	str	r2, [r3, #24]
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
	...

08002f60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e29b      	b.n	80034ae <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f000 8087 	beq.w	8003092 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f84:	4b96      	ldr	r3, [pc, #600]	; (80031e0 <HAL_RCC_OscConfig+0x280>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f003 030c 	and.w	r3, r3, #12
 8002f8c:	2b04      	cmp	r3, #4
 8002f8e:	d00c      	beq.n	8002faa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f90:	4b93      	ldr	r3, [pc, #588]	; (80031e0 <HAL_RCC_OscConfig+0x280>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f003 030c 	and.w	r3, r3, #12
 8002f98:	2b08      	cmp	r3, #8
 8002f9a:	d112      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x62>
 8002f9c:	4b90      	ldr	r3, [pc, #576]	; (80031e0 <HAL_RCC_OscConfig+0x280>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fa4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fa8:	d10b      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002faa:	4b8d      	ldr	r3, [pc, #564]	; (80031e0 <HAL_RCC_OscConfig+0x280>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d06c      	beq.n	8003090 <HAL_RCC_OscConfig+0x130>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d168      	bne.n	8003090 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e275      	b.n	80034ae <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fca:	d106      	bne.n	8002fda <HAL_RCC_OscConfig+0x7a>
 8002fcc:	4b84      	ldr	r3, [pc, #528]	; (80031e0 <HAL_RCC_OscConfig+0x280>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a83      	ldr	r2, [pc, #524]	; (80031e0 <HAL_RCC_OscConfig+0x280>)
 8002fd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fd6:	6013      	str	r3, [r2, #0]
 8002fd8:	e02e      	b.n	8003038 <HAL_RCC_OscConfig+0xd8>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10c      	bne.n	8002ffc <HAL_RCC_OscConfig+0x9c>
 8002fe2:	4b7f      	ldr	r3, [pc, #508]	; (80031e0 <HAL_RCC_OscConfig+0x280>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a7e      	ldr	r2, [pc, #504]	; (80031e0 <HAL_RCC_OscConfig+0x280>)
 8002fe8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fec:	6013      	str	r3, [r2, #0]
 8002fee:	4b7c      	ldr	r3, [pc, #496]	; (80031e0 <HAL_RCC_OscConfig+0x280>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a7b      	ldr	r2, [pc, #492]	; (80031e0 <HAL_RCC_OscConfig+0x280>)
 8002ff4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ff8:	6013      	str	r3, [r2, #0]
 8002ffa:	e01d      	b.n	8003038 <HAL_RCC_OscConfig+0xd8>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003004:	d10c      	bne.n	8003020 <HAL_RCC_OscConfig+0xc0>
 8003006:	4b76      	ldr	r3, [pc, #472]	; (80031e0 <HAL_RCC_OscConfig+0x280>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a75      	ldr	r2, [pc, #468]	; (80031e0 <HAL_RCC_OscConfig+0x280>)
 800300c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003010:	6013      	str	r3, [r2, #0]
 8003012:	4b73      	ldr	r3, [pc, #460]	; (80031e0 <HAL_RCC_OscConfig+0x280>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a72      	ldr	r2, [pc, #456]	; (80031e0 <HAL_RCC_OscConfig+0x280>)
 8003018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800301c:	6013      	str	r3, [r2, #0]
 800301e:	e00b      	b.n	8003038 <HAL_RCC_OscConfig+0xd8>
 8003020:	4b6f      	ldr	r3, [pc, #444]	; (80031e0 <HAL_RCC_OscConfig+0x280>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a6e      	ldr	r2, [pc, #440]	; (80031e0 <HAL_RCC_OscConfig+0x280>)
 8003026:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800302a:	6013      	str	r3, [r2, #0]
 800302c:	4b6c      	ldr	r3, [pc, #432]	; (80031e0 <HAL_RCC_OscConfig+0x280>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a6b      	ldr	r2, [pc, #428]	; (80031e0 <HAL_RCC_OscConfig+0x280>)
 8003032:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003036:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d013      	beq.n	8003068 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003040:	f7fe fa30 	bl	80014a4 <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003048:	f7fe fa2c 	bl	80014a4 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b64      	cmp	r3, #100	; 0x64
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e229      	b.n	80034ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800305a:	4b61      	ldr	r3, [pc, #388]	; (80031e0 <HAL_RCC_OscConfig+0x280>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0f0      	beq.n	8003048 <HAL_RCC_OscConfig+0xe8>
 8003066:	e014      	b.n	8003092 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003068:	f7fe fa1c 	bl	80014a4 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003070:	f7fe fa18 	bl	80014a4 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b64      	cmp	r3, #100	; 0x64
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e215      	b.n	80034ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003082:	4b57      	ldr	r3, [pc, #348]	; (80031e0 <HAL_RCC_OscConfig+0x280>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1f0      	bne.n	8003070 <HAL_RCC_OscConfig+0x110>
 800308e:	e000      	b.n	8003092 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d069      	beq.n	8003172 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800309e:	4b50      	ldr	r3, [pc, #320]	; (80031e0 <HAL_RCC_OscConfig+0x280>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 030c 	and.w	r3, r3, #12
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00b      	beq.n	80030c2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030aa:	4b4d      	ldr	r3, [pc, #308]	; (80031e0 <HAL_RCC_OscConfig+0x280>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 030c 	and.w	r3, r3, #12
 80030b2:	2b08      	cmp	r3, #8
 80030b4:	d11c      	bne.n	80030f0 <HAL_RCC_OscConfig+0x190>
 80030b6:	4b4a      	ldr	r3, [pc, #296]	; (80031e0 <HAL_RCC_OscConfig+0x280>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d116      	bne.n	80030f0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030c2:	4b47      	ldr	r3, [pc, #284]	; (80031e0 <HAL_RCC_OscConfig+0x280>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d005      	beq.n	80030da <HAL_RCC_OscConfig+0x17a>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d001      	beq.n	80030da <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e1e9      	b.n	80034ae <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030da:	4b41      	ldr	r3, [pc, #260]	; (80031e0 <HAL_RCC_OscConfig+0x280>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	493d      	ldr	r1, [pc, #244]	; (80031e0 <HAL_RCC_OscConfig+0x280>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ee:	e040      	b.n	8003172 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d023      	beq.n	8003140 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030f8:	4b39      	ldr	r3, [pc, #228]	; (80031e0 <HAL_RCC_OscConfig+0x280>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a38      	ldr	r2, [pc, #224]	; (80031e0 <HAL_RCC_OscConfig+0x280>)
 80030fe:	f043 0301 	orr.w	r3, r3, #1
 8003102:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003104:	f7fe f9ce 	bl	80014a4 <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800310c:	f7fe f9ca 	bl	80014a4 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e1c7      	b.n	80034ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800311e:	4b30      	ldr	r3, [pc, #192]	; (80031e0 <HAL_RCC_OscConfig+0x280>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d0f0      	beq.n	800310c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800312a:	4b2d      	ldr	r3, [pc, #180]	; (80031e0 <HAL_RCC_OscConfig+0x280>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	4929      	ldr	r1, [pc, #164]	; (80031e0 <HAL_RCC_OscConfig+0x280>)
 800313a:	4313      	orrs	r3, r2
 800313c:	600b      	str	r3, [r1, #0]
 800313e:	e018      	b.n	8003172 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003140:	4b27      	ldr	r3, [pc, #156]	; (80031e0 <HAL_RCC_OscConfig+0x280>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a26      	ldr	r2, [pc, #152]	; (80031e0 <HAL_RCC_OscConfig+0x280>)
 8003146:	f023 0301 	bic.w	r3, r3, #1
 800314a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314c:	f7fe f9aa 	bl	80014a4 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003154:	f7fe f9a6 	bl	80014a4 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e1a3      	b.n	80034ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003166:	4b1e      	ldr	r3, [pc, #120]	; (80031e0 <HAL_RCC_OscConfig+0x280>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1f0      	bne.n	8003154 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0308 	and.w	r3, r3, #8
 800317a:	2b00      	cmp	r3, #0
 800317c:	d038      	beq.n	80031f0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d019      	beq.n	80031ba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003186:	4b16      	ldr	r3, [pc, #88]	; (80031e0 <HAL_RCC_OscConfig+0x280>)
 8003188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800318a:	4a15      	ldr	r2, [pc, #84]	; (80031e0 <HAL_RCC_OscConfig+0x280>)
 800318c:	f043 0301 	orr.w	r3, r3, #1
 8003190:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003192:	f7fe f987 	bl	80014a4 <HAL_GetTick>
 8003196:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003198:	e008      	b.n	80031ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800319a:	f7fe f983 	bl	80014a4 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d901      	bls.n	80031ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e180      	b.n	80034ae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ac:	4b0c      	ldr	r3, [pc, #48]	; (80031e0 <HAL_RCC_OscConfig+0x280>)
 80031ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d0f0      	beq.n	800319a <HAL_RCC_OscConfig+0x23a>
 80031b8:	e01a      	b.n	80031f0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031ba:	4b09      	ldr	r3, [pc, #36]	; (80031e0 <HAL_RCC_OscConfig+0x280>)
 80031bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031be:	4a08      	ldr	r2, [pc, #32]	; (80031e0 <HAL_RCC_OscConfig+0x280>)
 80031c0:	f023 0301 	bic.w	r3, r3, #1
 80031c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c6:	f7fe f96d 	bl	80014a4 <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031cc:	e00a      	b.n	80031e4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031ce:	f7fe f969 	bl	80014a4 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d903      	bls.n	80031e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e166      	b.n	80034ae <HAL_RCC_OscConfig+0x54e>
 80031e0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031e4:	4b92      	ldr	r3, [pc, #584]	; (8003430 <HAL_RCC_OscConfig+0x4d0>)
 80031e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1ee      	bne.n	80031ce <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0304 	and.w	r3, r3, #4
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f000 80a4 	beq.w	8003346 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031fe:	4b8c      	ldr	r3, [pc, #560]	; (8003430 <HAL_RCC_OscConfig+0x4d0>)
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10d      	bne.n	8003226 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800320a:	4b89      	ldr	r3, [pc, #548]	; (8003430 <HAL_RCC_OscConfig+0x4d0>)
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	4a88      	ldr	r2, [pc, #544]	; (8003430 <HAL_RCC_OscConfig+0x4d0>)
 8003210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003214:	6413      	str	r3, [r2, #64]	; 0x40
 8003216:	4b86      	ldr	r3, [pc, #536]	; (8003430 <HAL_RCC_OscConfig+0x4d0>)
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321e:	60bb      	str	r3, [r7, #8]
 8003220:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003222:	2301      	movs	r3, #1
 8003224:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003226:	4b83      	ldr	r3, [pc, #524]	; (8003434 <HAL_RCC_OscConfig+0x4d4>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800322e:	2b00      	cmp	r3, #0
 8003230:	d118      	bne.n	8003264 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003232:	4b80      	ldr	r3, [pc, #512]	; (8003434 <HAL_RCC_OscConfig+0x4d4>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a7f      	ldr	r2, [pc, #508]	; (8003434 <HAL_RCC_OscConfig+0x4d4>)
 8003238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800323c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800323e:	f7fe f931 	bl	80014a4 <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003244:	e008      	b.n	8003258 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003246:	f7fe f92d 	bl	80014a4 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b64      	cmp	r3, #100	; 0x64
 8003252:	d901      	bls.n	8003258 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e12a      	b.n	80034ae <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003258:	4b76      	ldr	r3, [pc, #472]	; (8003434 <HAL_RCC_OscConfig+0x4d4>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003260:	2b00      	cmp	r3, #0
 8003262:	d0f0      	beq.n	8003246 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d106      	bne.n	800327a <HAL_RCC_OscConfig+0x31a>
 800326c:	4b70      	ldr	r3, [pc, #448]	; (8003430 <HAL_RCC_OscConfig+0x4d0>)
 800326e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003270:	4a6f      	ldr	r2, [pc, #444]	; (8003430 <HAL_RCC_OscConfig+0x4d0>)
 8003272:	f043 0301 	orr.w	r3, r3, #1
 8003276:	6713      	str	r3, [r2, #112]	; 0x70
 8003278:	e02d      	b.n	80032d6 <HAL_RCC_OscConfig+0x376>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10c      	bne.n	800329c <HAL_RCC_OscConfig+0x33c>
 8003282:	4b6b      	ldr	r3, [pc, #428]	; (8003430 <HAL_RCC_OscConfig+0x4d0>)
 8003284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003286:	4a6a      	ldr	r2, [pc, #424]	; (8003430 <HAL_RCC_OscConfig+0x4d0>)
 8003288:	f023 0301 	bic.w	r3, r3, #1
 800328c:	6713      	str	r3, [r2, #112]	; 0x70
 800328e:	4b68      	ldr	r3, [pc, #416]	; (8003430 <HAL_RCC_OscConfig+0x4d0>)
 8003290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003292:	4a67      	ldr	r2, [pc, #412]	; (8003430 <HAL_RCC_OscConfig+0x4d0>)
 8003294:	f023 0304 	bic.w	r3, r3, #4
 8003298:	6713      	str	r3, [r2, #112]	; 0x70
 800329a:	e01c      	b.n	80032d6 <HAL_RCC_OscConfig+0x376>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	2b05      	cmp	r3, #5
 80032a2:	d10c      	bne.n	80032be <HAL_RCC_OscConfig+0x35e>
 80032a4:	4b62      	ldr	r3, [pc, #392]	; (8003430 <HAL_RCC_OscConfig+0x4d0>)
 80032a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a8:	4a61      	ldr	r2, [pc, #388]	; (8003430 <HAL_RCC_OscConfig+0x4d0>)
 80032aa:	f043 0304 	orr.w	r3, r3, #4
 80032ae:	6713      	str	r3, [r2, #112]	; 0x70
 80032b0:	4b5f      	ldr	r3, [pc, #380]	; (8003430 <HAL_RCC_OscConfig+0x4d0>)
 80032b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b4:	4a5e      	ldr	r2, [pc, #376]	; (8003430 <HAL_RCC_OscConfig+0x4d0>)
 80032b6:	f043 0301 	orr.w	r3, r3, #1
 80032ba:	6713      	str	r3, [r2, #112]	; 0x70
 80032bc:	e00b      	b.n	80032d6 <HAL_RCC_OscConfig+0x376>
 80032be:	4b5c      	ldr	r3, [pc, #368]	; (8003430 <HAL_RCC_OscConfig+0x4d0>)
 80032c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c2:	4a5b      	ldr	r2, [pc, #364]	; (8003430 <HAL_RCC_OscConfig+0x4d0>)
 80032c4:	f023 0301 	bic.w	r3, r3, #1
 80032c8:	6713      	str	r3, [r2, #112]	; 0x70
 80032ca:	4b59      	ldr	r3, [pc, #356]	; (8003430 <HAL_RCC_OscConfig+0x4d0>)
 80032cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ce:	4a58      	ldr	r2, [pc, #352]	; (8003430 <HAL_RCC_OscConfig+0x4d0>)
 80032d0:	f023 0304 	bic.w	r3, r3, #4
 80032d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d015      	beq.n	800330a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032de:	f7fe f8e1 	bl	80014a4 <HAL_GetTick>
 80032e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e4:	e00a      	b.n	80032fc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032e6:	f7fe f8dd 	bl	80014a4 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d901      	bls.n	80032fc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e0d8      	b.n	80034ae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032fc:	4b4c      	ldr	r3, [pc, #304]	; (8003430 <HAL_RCC_OscConfig+0x4d0>)
 80032fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d0ee      	beq.n	80032e6 <HAL_RCC_OscConfig+0x386>
 8003308:	e014      	b.n	8003334 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800330a:	f7fe f8cb 	bl	80014a4 <HAL_GetTick>
 800330e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003310:	e00a      	b.n	8003328 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003312:	f7fe f8c7 	bl	80014a4 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003320:	4293      	cmp	r3, r2
 8003322:	d901      	bls.n	8003328 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e0c2      	b.n	80034ae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003328:	4b41      	ldr	r3, [pc, #260]	; (8003430 <HAL_RCC_OscConfig+0x4d0>)
 800332a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1ee      	bne.n	8003312 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003334:	7dfb      	ldrb	r3, [r7, #23]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d105      	bne.n	8003346 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800333a:	4b3d      	ldr	r3, [pc, #244]	; (8003430 <HAL_RCC_OscConfig+0x4d0>)
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	4a3c      	ldr	r2, [pc, #240]	; (8003430 <HAL_RCC_OscConfig+0x4d0>)
 8003340:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003344:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	2b00      	cmp	r3, #0
 800334c:	f000 80ae 	beq.w	80034ac <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003350:	4b37      	ldr	r3, [pc, #220]	; (8003430 <HAL_RCC_OscConfig+0x4d0>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f003 030c 	and.w	r3, r3, #12
 8003358:	2b08      	cmp	r3, #8
 800335a:	d06d      	beq.n	8003438 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	2b02      	cmp	r3, #2
 8003362:	d14b      	bne.n	80033fc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003364:	4b32      	ldr	r3, [pc, #200]	; (8003430 <HAL_RCC_OscConfig+0x4d0>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a31      	ldr	r2, [pc, #196]	; (8003430 <HAL_RCC_OscConfig+0x4d0>)
 800336a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800336e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003370:	f7fe f898 	bl	80014a4 <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003376:	e008      	b.n	800338a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003378:	f7fe f894 	bl	80014a4 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e091      	b.n	80034ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800338a:	4b29      	ldr	r3, [pc, #164]	; (8003430 <HAL_RCC_OscConfig+0x4d0>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1f0      	bne.n	8003378 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	69da      	ldr	r2, [r3, #28]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	431a      	orrs	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	019b      	lsls	r3, r3, #6
 80033a6:	431a      	orrs	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ac:	085b      	lsrs	r3, r3, #1
 80033ae:	3b01      	subs	r3, #1
 80033b0:	041b      	lsls	r3, r3, #16
 80033b2:	431a      	orrs	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b8:	061b      	lsls	r3, r3, #24
 80033ba:	431a      	orrs	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c0:	071b      	lsls	r3, r3, #28
 80033c2:	491b      	ldr	r1, [pc, #108]	; (8003430 <HAL_RCC_OscConfig+0x4d0>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033c8:	4b19      	ldr	r3, [pc, #100]	; (8003430 <HAL_RCC_OscConfig+0x4d0>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a18      	ldr	r2, [pc, #96]	; (8003430 <HAL_RCC_OscConfig+0x4d0>)
 80033ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d4:	f7fe f866 	bl	80014a4 <HAL_GetTick>
 80033d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033da:	e008      	b.n	80033ee <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033dc:	f7fe f862 	bl	80014a4 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e05f      	b.n	80034ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ee:	4b10      	ldr	r3, [pc, #64]	; (8003430 <HAL_RCC_OscConfig+0x4d0>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d0f0      	beq.n	80033dc <HAL_RCC_OscConfig+0x47c>
 80033fa:	e057      	b.n	80034ac <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033fc:	4b0c      	ldr	r3, [pc, #48]	; (8003430 <HAL_RCC_OscConfig+0x4d0>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a0b      	ldr	r2, [pc, #44]	; (8003430 <HAL_RCC_OscConfig+0x4d0>)
 8003402:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003406:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003408:	f7fe f84c 	bl	80014a4 <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003410:	f7fe f848 	bl	80014a4 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e045      	b.n	80034ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003422:	4b03      	ldr	r3, [pc, #12]	; (8003430 <HAL_RCC_OscConfig+0x4d0>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1f0      	bne.n	8003410 <HAL_RCC_OscConfig+0x4b0>
 800342e:	e03d      	b.n	80034ac <HAL_RCC_OscConfig+0x54c>
 8003430:	40023800 	.word	0x40023800
 8003434:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003438:	4b1f      	ldr	r3, [pc, #124]	; (80034b8 <HAL_RCC_OscConfig+0x558>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d030      	beq.n	80034a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003450:	429a      	cmp	r2, r3
 8003452:	d129      	bne.n	80034a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800345e:	429a      	cmp	r2, r3
 8003460:	d122      	bne.n	80034a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003468:	4013      	ands	r3, r2
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800346e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003470:	4293      	cmp	r3, r2
 8003472:	d119      	bne.n	80034a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347e:	085b      	lsrs	r3, r3, #1
 8003480:	3b01      	subs	r3, #1
 8003482:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003484:	429a      	cmp	r2, r3
 8003486:	d10f      	bne.n	80034a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003492:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003494:	429a      	cmp	r2, r3
 8003496:	d107      	bne.n	80034a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d001      	beq.n	80034ac <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e000      	b.n	80034ae <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3718      	adds	r7, #24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	40023800 	.word	0x40023800

080034bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80034c6:	2300      	movs	r3, #0
 80034c8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d101      	bne.n	80034d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e0d0      	b.n	8003676 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034d4:	4b6a      	ldr	r3, [pc, #424]	; (8003680 <HAL_RCC_ClockConfig+0x1c4>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 030f 	and.w	r3, r3, #15
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d910      	bls.n	8003504 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034e2:	4b67      	ldr	r3, [pc, #412]	; (8003680 <HAL_RCC_ClockConfig+0x1c4>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f023 020f 	bic.w	r2, r3, #15
 80034ea:	4965      	ldr	r1, [pc, #404]	; (8003680 <HAL_RCC_ClockConfig+0x1c4>)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f2:	4b63      	ldr	r3, [pc, #396]	; (8003680 <HAL_RCC_ClockConfig+0x1c4>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 030f 	and.w	r3, r3, #15
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d001      	beq.n	8003504 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e0b8      	b.n	8003676 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d020      	beq.n	8003552 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0304 	and.w	r3, r3, #4
 8003518:	2b00      	cmp	r3, #0
 800351a:	d005      	beq.n	8003528 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800351c:	4b59      	ldr	r3, [pc, #356]	; (8003684 <HAL_RCC_ClockConfig+0x1c8>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	4a58      	ldr	r2, [pc, #352]	; (8003684 <HAL_RCC_ClockConfig+0x1c8>)
 8003522:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003526:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0308 	and.w	r3, r3, #8
 8003530:	2b00      	cmp	r3, #0
 8003532:	d005      	beq.n	8003540 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003534:	4b53      	ldr	r3, [pc, #332]	; (8003684 <HAL_RCC_ClockConfig+0x1c8>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	4a52      	ldr	r2, [pc, #328]	; (8003684 <HAL_RCC_ClockConfig+0x1c8>)
 800353a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800353e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003540:	4b50      	ldr	r3, [pc, #320]	; (8003684 <HAL_RCC_ClockConfig+0x1c8>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	494d      	ldr	r1, [pc, #308]	; (8003684 <HAL_RCC_ClockConfig+0x1c8>)
 800354e:	4313      	orrs	r3, r2
 8003550:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	2b00      	cmp	r3, #0
 800355c:	d040      	beq.n	80035e0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d107      	bne.n	8003576 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003566:	4b47      	ldr	r3, [pc, #284]	; (8003684 <HAL_RCC_ClockConfig+0x1c8>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d115      	bne.n	800359e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e07f      	b.n	8003676 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	2b02      	cmp	r3, #2
 800357c:	d107      	bne.n	800358e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800357e:	4b41      	ldr	r3, [pc, #260]	; (8003684 <HAL_RCC_ClockConfig+0x1c8>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d109      	bne.n	800359e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e073      	b.n	8003676 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800358e:	4b3d      	ldr	r3, [pc, #244]	; (8003684 <HAL_RCC_ClockConfig+0x1c8>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e06b      	b.n	8003676 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800359e:	4b39      	ldr	r3, [pc, #228]	; (8003684 <HAL_RCC_ClockConfig+0x1c8>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f023 0203 	bic.w	r2, r3, #3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	4936      	ldr	r1, [pc, #216]	; (8003684 <HAL_RCC_ClockConfig+0x1c8>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035b0:	f7fd ff78 	bl	80014a4 <HAL_GetTick>
 80035b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035b6:	e00a      	b.n	80035ce <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035b8:	f7fd ff74 	bl	80014a4 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e053      	b.n	8003676 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ce:	4b2d      	ldr	r3, [pc, #180]	; (8003684 <HAL_RCC_ClockConfig+0x1c8>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f003 020c 	and.w	r2, r3, #12
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	429a      	cmp	r2, r3
 80035de:	d1eb      	bne.n	80035b8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035e0:	4b27      	ldr	r3, [pc, #156]	; (8003680 <HAL_RCC_ClockConfig+0x1c4>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 030f 	and.w	r3, r3, #15
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d210      	bcs.n	8003610 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ee:	4b24      	ldr	r3, [pc, #144]	; (8003680 <HAL_RCC_ClockConfig+0x1c4>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f023 020f 	bic.w	r2, r3, #15
 80035f6:	4922      	ldr	r1, [pc, #136]	; (8003680 <HAL_RCC_ClockConfig+0x1c4>)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035fe:	4b20      	ldr	r3, [pc, #128]	; (8003680 <HAL_RCC_ClockConfig+0x1c4>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 030f 	and.w	r3, r3, #15
 8003606:	683a      	ldr	r2, [r7, #0]
 8003608:	429a      	cmp	r2, r3
 800360a:	d001      	beq.n	8003610 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e032      	b.n	8003676 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0304 	and.w	r3, r3, #4
 8003618:	2b00      	cmp	r3, #0
 800361a:	d008      	beq.n	800362e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800361c:	4b19      	ldr	r3, [pc, #100]	; (8003684 <HAL_RCC_ClockConfig+0x1c8>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	4916      	ldr	r1, [pc, #88]	; (8003684 <HAL_RCC_ClockConfig+0x1c8>)
 800362a:	4313      	orrs	r3, r2
 800362c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0308 	and.w	r3, r3, #8
 8003636:	2b00      	cmp	r3, #0
 8003638:	d009      	beq.n	800364e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800363a:	4b12      	ldr	r3, [pc, #72]	; (8003684 <HAL_RCC_ClockConfig+0x1c8>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	00db      	lsls	r3, r3, #3
 8003648:	490e      	ldr	r1, [pc, #56]	; (8003684 <HAL_RCC_ClockConfig+0x1c8>)
 800364a:	4313      	orrs	r3, r2
 800364c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800364e:	f000 f821 	bl	8003694 <HAL_RCC_GetSysClockFreq>
 8003652:	4602      	mov	r2, r0
 8003654:	4b0b      	ldr	r3, [pc, #44]	; (8003684 <HAL_RCC_ClockConfig+0x1c8>)
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	091b      	lsrs	r3, r3, #4
 800365a:	f003 030f 	and.w	r3, r3, #15
 800365e:	490a      	ldr	r1, [pc, #40]	; (8003688 <HAL_RCC_ClockConfig+0x1cc>)
 8003660:	5ccb      	ldrb	r3, [r1, r3]
 8003662:	fa22 f303 	lsr.w	r3, r2, r3
 8003666:	4a09      	ldr	r2, [pc, #36]	; (800368c <HAL_RCC_ClockConfig+0x1d0>)
 8003668:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800366a:	4b09      	ldr	r3, [pc, #36]	; (8003690 <HAL_RCC_ClockConfig+0x1d4>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4618      	mov	r0, r3
 8003670:	f7fd fe18 	bl	80012a4 <HAL_InitTick>

  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	40023c00 	.word	0x40023c00
 8003684:	40023800 	.word	0x40023800
 8003688:	08007330 	.word	0x08007330
 800368c:	20000004 	.word	0x20000004
 8003690:	20000008 	.word	0x20000008

08003694 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003694:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003698:	b094      	sub	sp, #80	; 0x50
 800369a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800369c:	2300      	movs	r3, #0
 800369e:	647b      	str	r3, [r7, #68]	; 0x44
 80036a0:	2300      	movs	r3, #0
 80036a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036a4:	2300      	movs	r3, #0
 80036a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80036a8:	2300      	movs	r3, #0
 80036aa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036ac:	4b79      	ldr	r3, [pc, #484]	; (8003894 <HAL_RCC_GetSysClockFreq+0x200>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f003 030c 	and.w	r3, r3, #12
 80036b4:	2b08      	cmp	r3, #8
 80036b6:	d00d      	beq.n	80036d4 <HAL_RCC_GetSysClockFreq+0x40>
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	f200 80e1 	bhi.w	8003880 <HAL_RCC_GetSysClockFreq+0x1ec>
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d002      	beq.n	80036c8 <HAL_RCC_GetSysClockFreq+0x34>
 80036c2:	2b04      	cmp	r3, #4
 80036c4:	d003      	beq.n	80036ce <HAL_RCC_GetSysClockFreq+0x3a>
 80036c6:	e0db      	b.n	8003880 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036c8:	4b73      	ldr	r3, [pc, #460]	; (8003898 <HAL_RCC_GetSysClockFreq+0x204>)
 80036ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036cc:	e0db      	b.n	8003886 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036ce:	4b73      	ldr	r3, [pc, #460]	; (800389c <HAL_RCC_GetSysClockFreq+0x208>)
 80036d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036d2:	e0d8      	b.n	8003886 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036d4:	4b6f      	ldr	r3, [pc, #444]	; (8003894 <HAL_RCC_GetSysClockFreq+0x200>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036dc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80036de:	4b6d      	ldr	r3, [pc, #436]	; (8003894 <HAL_RCC_GetSysClockFreq+0x200>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d063      	beq.n	80037b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036ea:	4b6a      	ldr	r3, [pc, #424]	; (8003894 <HAL_RCC_GetSysClockFreq+0x200>)
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	099b      	lsrs	r3, r3, #6
 80036f0:	2200      	movs	r2, #0
 80036f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80036f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80036f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036fc:	633b      	str	r3, [r7, #48]	; 0x30
 80036fe:	2300      	movs	r3, #0
 8003700:	637b      	str	r3, [r7, #52]	; 0x34
 8003702:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003706:	4622      	mov	r2, r4
 8003708:	462b      	mov	r3, r5
 800370a:	f04f 0000 	mov.w	r0, #0
 800370e:	f04f 0100 	mov.w	r1, #0
 8003712:	0159      	lsls	r1, r3, #5
 8003714:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003718:	0150      	lsls	r0, r2, #5
 800371a:	4602      	mov	r2, r0
 800371c:	460b      	mov	r3, r1
 800371e:	4621      	mov	r1, r4
 8003720:	1a51      	subs	r1, r2, r1
 8003722:	6139      	str	r1, [r7, #16]
 8003724:	4629      	mov	r1, r5
 8003726:	eb63 0301 	sbc.w	r3, r3, r1
 800372a:	617b      	str	r3, [r7, #20]
 800372c:	f04f 0200 	mov.w	r2, #0
 8003730:	f04f 0300 	mov.w	r3, #0
 8003734:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003738:	4659      	mov	r1, fp
 800373a:	018b      	lsls	r3, r1, #6
 800373c:	4651      	mov	r1, sl
 800373e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003742:	4651      	mov	r1, sl
 8003744:	018a      	lsls	r2, r1, #6
 8003746:	4651      	mov	r1, sl
 8003748:	ebb2 0801 	subs.w	r8, r2, r1
 800374c:	4659      	mov	r1, fp
 800374e:	eb63 0901 	sbc.w	r9, r3, r1
 8003752:	f04f 0200 	mov.w	r2, #0
 8003756:	f04f 0300 	mov.w	r3, #0
 800375a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800375e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003762:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003766:	4690      	mov	r8, r2
 8003768:	4699      	mov	r9, r3
 800376a:	4623      	mov	r3, r4
 800376c:	eb18 0303 	adds.w	r3, r8, r3
 8003770:	60bb      	str	r3, [r7, #8]
 8003772:	462b      	mov	r3, r5
 8003774:	eb49 0303 	adc.w	r3, r9, r3
 8003778:	60fb      	str	r3, [r7, #12]
 800377a:	f04f 0200 	mov.w	r2, #0
 800377e:	f04f 0300 	mov.w	r3, #0
 8003782:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003786:	4629      	mov	r1, r5
 8003788:	024b      	lsls	r3, r1, #9
 800378a:	4621      	mov	r1, r4
 800378c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003790:	4621      	mov	r1, r4
 8003792:	024a      	lsls	r2, r1, #9
 8003794:	4610      	mov	r0, r2
 8003796:	4619      	mov	r1, r3
 8003798:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800379a:	2200      	movs	r2, #0
 800379c:	62bb      	str	r3, [r7, #40]	; 0x28
 800379e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037a4:	f7fc fd4c 	bl	8000240 <__aeabi_uldivmod>
 80037a8:	4602      	mov	r2, r0
 80037aa:	460b      	mov	r3, r1
 80037ac:	4613      	mov	r3, r2
 80037ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037b0:	e058      	b.n	8003864 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037b2:	4b38      	ldr	r3, [pc, #224]	; (8003894 <HAL_RCC_GetSysClockFreq+0x200>)
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	099b      	lsrs	r3, r3, #6
 80037b8:	2200      	movs	r2, #0
 80037ba:	4618      	mov	r0, r3
 80037bc:	4611      	mov	r1, r2
 80037be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80037c2:	623b      	str	r3, [r7, #32]
 80037c4:	2300      	movs	r3, #0
 80037c6:	627b      	str	r3, [r7, #36]	; 0x24
 80037c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80037cc:	4642      	mov	r2, r8
 80037ce:	464b      	mov	r3, r9
 80037d0:	f04f 0000 	mov.w	r0, #0
 80037d4:	f04f 0100 	mov.w	r1, #0
 80037d8:	0159      	lsls	r1, r3, #5
 80037da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037de:	0150      	lsls	r0, r2, #5
 80037e0:	4602      	mov	r2, r0
 80037e2:	460b      	mov	r3, r1
 80037e4:	4641      	mov	r1, r8
 80037e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80037ea:	4649      	mov	r1, r9
 80037ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80037f0:	f04f 0200 	mov.w	r2, #0
 80037f4:	f04f 0300 	mov.w	r3, #0
 80037f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80037fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003800:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003804:	ebb2 040a 	subs.w	r4, r2, sl
 8003808:	eb63 050b 	sbc.w	r5, r3, fp
 800380c:	f04f 0200 	mov.w	r2, #0
 8003810:	f04f 0300 	mov.w	r3, #0
 8003814:	00eb      	lsls	r3, r5, #3
 8003816:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800381a:	00e2      	lsls	r2, r4, #3
 800381c:	4614      	mov	r4, r2
 800381e:	461d      	mov	r5, r3
 8003820:	4643      	mov	r3, r8
 8003822:	18e3      	adds	r3, r4, r3
 8003824:	603b      	str	r3, [r7, #0]
 8003826:	464b      	mov	r3, r9
 8003828:	eb45 0303 	adc.w	r3, r5, r3
 800382c:	607b      	str	r3, [r7, #4]
 800382e:	f04f 0200 	mov.w	r2, #0
 8003832:	f04f 0300 	mov.w	r3, #0
 8003836:	e9d7 4500 	ldrd	r4, r5, [r7]
 800383a:	4629      	mov	r1, r5
 800383c:	028b      	lsls	r3, r1, #10
 800383e:	4621      	mov	r1, r4
 8003840:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003844:	4621      	mov	r1, r4
 8003846:	028a      	lsls	r2, r1, #10
 8003848:	4610      	mov	r0, r2
 800384a:	4619      	mov	r1, r3
 800384c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800384e:	2200      	movs	r2, #0
 8003850:	61bb      	str	r3, [r7, #24]
 8003852:	61fa      	str	r2, [r7, #28]
 8003854:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003858:	f7fc fcf2 	bl	8000240 <__aeabi_uldivmod>
 800385c:	4602      	mov	r2, r0
 800385e:	460b      	mov	r3, r1
 8003860:	4613      	mov	r3, r2
 8003862:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003864:	4b0b      	ldr	r3, [pc, #44]	; (8003894 <HAL_RCC_GetSysClockFreq+0x200>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	0c1b      	lsrs	r3, r3, #16
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	3301      	adds	r3, #1
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003874:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003876:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003878:	fbb2 f3f3 	udiv	r3, r2, r3
 800387c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800387e:	e002      	b.n	8003886 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003880:	4b05      	ldr	r3, [pc, #20]	; (8003898 <HAL_RCC_GetSysClockFreq+0x204>)
 8003882:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003884:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003886:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003888:	4618      	mov	r0, r3
 800388a:	3750      	adds	r7, #80	; 0x50
 800388c:	46bd      	mov	sp, r7
 800388e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003892:	bf00      	nop
 8003894:	40023800 	.word	0x40023800
 8003898:	00f42400 	.word	0x00f42400
 800389c:	007a1200 	.word	0x007a1200

080038a0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038a4:	4b03      	ldr	r3, [pc, #12]	; (80038b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80038a6:	681b      	ldr	r3, [r3, #0]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	20000004 	.word	0x20000004

080038b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038bc:	f7ff fff0 	bl	80038a0 <HAL_RCC_GetHCLKFreq>
 80038c0:	4602      	mov	r2, r0
 80038c2:	4b05      	ldr	r3, [pc, #20]	; (80038d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	0a9b      	lsrs	r3, r3, #10
 80038c8:	f003 0307 	and.w	r3, r3, #7
 80038cc:	4903      	ldr	r1, [pc, #12]	; (80038dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80038ce:	5ccb      	ldrb	r3, [r1, r3]
 80038d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	40023800 	.word	0x40023800
 80038dc:	08007340 	.word	0x08007340

080038e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	220f      	movs	r2, #15
 80038ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80038f0:	4b12      	ldr	r3, [pc, #72]	; (800393c <HAL_RCC_GetClockConfig+0x5c>)
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f003 0203 	and.w	r2, r3, #3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80038fc:	4b0f      	ldr	r3, [pc, #60]	; (800393c <HAL_RCC_GetClockConfig+0x5c>)
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003908:	4b0c      	ldr	r3, [pc, #48]	; (800393c <HAL_RCC_GetClockConfig+0x5c>)
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003914:	4b09      	ldr	r3, [pc, #36]	; (800393c <HAL_RCC_GetClockConfig+0x5c>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	08db      	lsrs	r3, r3, #3
 800391a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003922:	4b07      	ldr	r3, [pc, #28]	; (8003940 <HAL_RCC_GetClockConfig+0x60>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 020f 	and.w	r2, r3, #15
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	601a      	str	r2, [r3, #0]
}
 800392e:	bf00      	nop
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	40023800 	.word	0x40023800
 8003940:	40023c00 	.word	0x40023c00

08003944 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e049      	b.n	80039ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d106      	bne.n	8003970 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f841 	bl	80039f2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2202      	movs	r2, #2
 8003974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	3304      	adds	r3, #4
 8003980:	4619      	mov	r1, r3
 8003982:	4610      	mov	r0, r2
 8003984:	f000 fa00 	bl	8003d88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80039f2:	b480      	push	{r7}
 80039f4:	b083      	sub	sp, #12
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80039fa:	bf00      	nop
 80039fc:	370c      	adds	r7, #12
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
	...

08003a08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d001      	beq.n	8003a20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e054      	b.n	8003aca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2202      	movs	r2, #2
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68da      	ldr	r2, [r3, #12]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f042 0201 	orr.w	r2, r2, #1
 8003a36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a26      	ldr	r2, [pc, #152]	; (8003ad8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d022      	beq.n	8003a88 <HAL_TIM_Base_Start_IT+0x80>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a4a:	d01d      	beq.n	8003a88 <HAL_TIM_Base_Start_IT+0x80>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a22      	ldr	r2, [pc, #136]	; (8003adc <HAL_TIM_Base_Start_IT+0xd4>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d018      	beq.n	8003a88 <HAL_TIM_Base_Start_IT+0x80>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a21      	ldr	r2, [pc, #132]	; (8003ae0 <HAL_TIM_Base_Start_IT+0xd8>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d013      	beq.n	8003a88 <HAL_TIM_Base_Start_IT+0x80>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a1f      	ldr	r2, [pc, #124]	; (8003ae4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d00e      	beq.n	8003a88 <HAL_TIM_Base_Start_IT+0x80>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a1e      	ldr	r2, [pc, #120]	; (8003ae8 <HAL_TIM_Base_Start_IT+0xe0>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d009      	beq.n	8003a88 <HAL_TIM_Base_Start_IT+0x80>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a1c      	ldr	r2, [pc, #112]	; (8003aec <HAL_TIM_Base_Start_IT+0xe4>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d004      	beq.n	8003a88 <HAL_TIM_Base_Start_IT+0x80>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a1b      	ldr	r2, [pc, #108]	; (8003af0 <HAL_TIM_Base_Start_IT+0xe8>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d115      	bne.n	8003ab4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689a      	ldr	r2, [r3, #8]
 8003a8e:	4b19      	ldr	r3, [pc, #100]	; (8003af4 <HAL_TIM_Base_Start_IT+0xec>)
 8003a90:	4013      	ands	r3, r2
 8003a92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2b06      	cmp	r3, #6
 8003a98:	d015      	beq.n	8003ac6 <HAL_TIM_Base_Start_IT+0xbe>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aa0:	d011      	beq.n	8003ac6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f042 0201 	orr.w	r2, r2, #1
 8003ab0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ab2:	e008      	b.n	8003ac6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f042 0201 	orr.w	r2, r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	e000      	b.n	8003ac8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ac6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3714      	adds	r7, #20
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	40010000 	.word	0x40010000
 8003adc:	40000400 	.word	0x40000400
 8003ae0:	40000800 	.word	0x40000800
 8003ae4:	40000c00 	.word	0x40000c00
 8003ae8:	40010400 	.word	0x40010400
 8003aec:	40014000 	.word	0x40014000
 8003af0:	40001800 	.word	0x40001800
 8003af4:	00010007 	.word	0x00010007

08003af8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d122      	bne.n	8003b54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d11b      	bne.n	8003b54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f06f 0202 	mvn.w	r2, #2
 8003b24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	f003 0303 	and.w	r3, r3, #3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d003      	beq.n	8003b42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f905 	bl	8003d4a <HAL_TIM_IC_CaptureCallback>
 8003b40:	e005      	b.n	8003b4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f8f7 	bl	8003d36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 f908 	bl	8003d5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	f003 0304 	and.w	r3, r3, #4
 8003b5e:	2b04      	cmp	r3, #4
 8003b60:	d122      	bne.n	8003ba8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b04      	cmp	r3, #4
 8003b6e:	d11b      	bne.n	8003ba8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f06f 0204 	mvn.w	r2, #4
 8003b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2202      	movs	r2, #2
 8003b7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 f8db 	bl	8003d4a <HAL_TIM_IC_CaptureCallback>
 8003b94:	e005      	b.n	8003ba2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 f8cd 	bl	8003d36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f000 f8de 	bl	8003d5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	f003 0308 	and.w	r3, r3, #8
 8003bb2:	2b08      	cmp	r3, #8
 8003bb4:	d122      	bne.n	8003bfc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	f003 0308 	and.w	r3, r3, #8
 8003bc0:	2b08      	cmp	r3, #8
 8003bc2:	d11b      	bne.n	8003bfc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f06f 0208 	mvn.w	r2, #8
 8003bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2204      	movs	r2, #4
 8003bd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	f003 0303 	and.w	r3, r3, #3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f8b1 	bl	8003d4a <HAL_TIM_IC_CaptureCallback>
 8003be8:	e005      	b.n	8003bf6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f8a3 	bl	8003d36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 f8b4 	bl	8003d5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	f003 0310 	and.w	r3, r3, #16
 8003c06:	2b10      	cmp	r3, #16
 8003c08:	d122      	bne.n	8003c50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	f003 0310 	and.w	r3, r3, #16
 8003c14:	2b10      	cmp	r3, #16
 8003c16:	d11b      	bne.n	8003c50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f06f 0210 	mvn.w	r2, #16
 8003c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2208      	movs	r2, #8
 8003c26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	69db      	ldr	r3, [r3, #28]
 8003c2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f887 	bl	8003d4a <HAL_TIM_IC_CaptureCallback>
 8003c3c:	e005      	b.n	8003c4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 f879 	bl	8003d36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 f88a 	bl	8003d5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d10e      	bne.n	8003c7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	f003 0301 	and.w	r3, r3, #1
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d107      	bne.n	8003c7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f06f 0201 	mvn.w	r2, #1
 8003c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f7fd f9b8 	bl	8000fec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c86:	2b80      	cmp	r3, #128	; 0x80
 8003c88:	d10e      	bne.n	8003ca8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c94:	2b80      	cmp	r3, #128	; 0x80
 8003c96:	d107      	bne.n	8003ca8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f91a 	bl	8003edc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cb6:	d10e      	bne.n	8003cd6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc2:	2b80      	cmp	r3, #128	; 0x80
 8003cc4:	d107      	bne.n	8003cd6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003cce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 f90d 	bl	8003ef0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce0:	2b40      	cmp	r3, #64	; 0x40
 8003ce2:	d10e      	bne.n	8003d02 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cee:	2b40      	cmp	r3, #64	; 0x40
 8003cf0:	d107      	bne.n	8003d02 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 f838 	bl	8003d72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	f003 0320 	and.w	r3, r3, #32
 8003d0c:	2b20      	cmp	r3, #32
 8003d0e:	d10e      	bne.n	8003d2e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	f003 0320 	and.w	r3, r3, #32
 8003d1a:	2b20      	cmp	r3, #32
 8003d1c:	d107      	bne.n	8003d2e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f06f 0220 	mvn.w	r2, #32
 8003d26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 f8cd 	bl	8003ec8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d2e:	bf00      	nop
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d36:	b480      	push	{r7}
 8003d38:	b083      	sub	sp, #12
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d3e:	bf00      	nop
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b083      	sub	sp, #12
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d52:	bf00      	nop
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b083      	sub	sp, #12
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d66:	bf00      	nop
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d72:	b480      	push	{r7}
 8003d74:	b083      	sub	sp, #12
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d7a:	bf00      	nop
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
	...

08003d88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a40      	ldr	r2, [pc, #256]	; (8003e9c <TIM_Base_SetConfig+0x114>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d013      	beq.n	8003dc8 <TIM_Base_SetConfig+0x40>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da6:	d00f      	beq.n	8003dc8 <TIM_Base_SetConfig+0x40>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a3d      	ldr	r2, [pc, #244]	; (8003ea0 <TIM_Base_SetConfig+0x118>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d00b      	beq.n	8003dc8 <TIM_Base_SetConfig+0x40>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a3c      	ldr	r2, [pc, #240]	; (8003ea4 <TIM_Base_SetConfig+0x11c>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d007      	beq.n	8003dc8 <TIM_Base_SetConfig+0x40>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a3b      	ldr	r2, [pc, #236]	; (8003ea8 <TIM_Base_SetConfig+0x120>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d003      	beq.n	8003dc8 <TIM_Base_SetConfig+0x40>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a3a      	ldr	r2, [pc, #232]	; (8003eac <TIM_Base_SetConfig+0x124>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d108      	bne.n	8003dda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a2f      	ldr	r2, [pc, #188]	; (8003e9c <TIM_Base_SetConfig+0x114>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d02b      	beq.n	8003e3a <TIM_Base_SetConfig+0xb2>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003de8:	d027      	beq.n	8003e3a <TIM_Base_SetConfig+0xb2>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a2c      	ldr	r2, [pc, #176]	; (8003ea0 <TIM_Base_SetConfig+0x118>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d023      	beq.n	8003e3a <TIM_Base_SetConfig+0xb2>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a2b      	ldr	r2, [pc, #172]	; (8003ea4 <TIM_Base_SetConfig+0x11c>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d01f      	beq.n	8003e3a <TIM_Base_SetConfig+0xb2>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a2a      	ldr	r2, [pc, #168]	; (8003ea8 <TIM_Base_SetConfig+0x120>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d01b      	beq.n	8003e3a <TIM_Base_SetConfig+0xb2>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a29      	ldr	r2, [pc, #164]	; (8003eac <TIM_Base_SetConfig+0x124>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d017      	beq.n	8003e3a <TIM_Base_SetConfig+0xb2>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a28      	ldr	r2, [pc, #160]	; (8003eb0 <TIM_Base_SetConfig+0x128>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d013      	beq.n	8003e3a <TIM_Base_SetConfig+0xb2>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a27      	ldr	r2, [pc, #156]	; (8003eb4 <TIM_Base_SetConfig+0x12c>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d00f      	beq.n	8003e3a <TIM_Base_SetConfig+0xb2>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a26      	ldr	r2, [pc, #152]	; (8003eb8 <TIM_Base_SetConfig+0x130>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d00b      	beq.n	8003e3a <TIM_Base_SetConfig+0xb2>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a25      	ldr	r2, [pc, #148]	; (8003ebc <TIM_Base_SetConfig+0x134>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d007      	beq.n	8003e3a <TIM_Base_SetConfig+0xb2>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a24      	ldr	r2, [pc, #144]	; (8003ec0 <TIM_Base_SetConfig+0x138>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d003      	beq.n	8003e3a <TIM_Base_SetConfig+0xb2>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a23      	ldr	r2, [pc, #140]	; (8003ec4 <TIM_Base_SetConfig+0x13c>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d108      	bne.n	8003e4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	689a      	ldr	r2, [r3, #8]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a0a      	ldr	r2, [pc, #40]	; (8003e9c <TIM_Base_SetConfig+0x114>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d003      	beq.n	8003e80 <TIM_Base_SetConfig+0xf8>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a0c      	ldr	r2, [pc, #48]	; (8003eac <TIM_Base_SetConfig+0x124>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d103      	bne.n	8003e88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	691a      	ldr	r2, [r3, #16]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	615a      	str	r2, [r3, #20]
}
 8003e8e:	bf00      	nop
 8003e90:	3714      	adds	r7, #20
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	40010000 	.word	0x40010000
 8003ea0:	40000400 	.word	0x40000400
 8003ea4:	40000800 	.word	0x40000800
 8003ea8:	40000c00 	.word	0x40000c00
 8003eac:	40010400 	.word	0x40010400
 8003eb0:	40014000 	.word	0x40014000
 8003eb4:	40014400 	.word	0x40014400
 8003eb8:	40014800 	.word	0x40014800
 8003ebc:	40001800 	.word	0x40001800
 8003ec0:	40001c00 	.word	0x40001c00
 8003ec4:	40002000 	.word	0x40002000

08003ec8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003f08:	bf00      	nop
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
	...

08003f14 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f1a:	f3ef 8305 	mrs	r3, IPSR
 8003f1e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f20:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10f      	bne.n	8003f46 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f26:	f3ef 8310 	mrs	r3, PRIMASK
 8003f2a:	607b      	str	r3, [r7, #4]
  return(result);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d105      	bne.n	8003f3e <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f32:	f3ef 8311 	mrs	r3, BASEPRI
 8003f36:	603b      	str	r3, [r7, #0]
  return(result);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d007      	beq.n	8003f4e <osKernelInitialize+0x3a>
 8003f3e:	4b0e      	ldr	r3, [pc, #56]	; (8003f78 <osKernelInitialize+0x64>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d103      	bne.n	8003f4e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003f46:	f06f 0305 	mvn.w	r3, #5
 8003f4a:	60fb      	str	r3, [r7, #12]
 8003f4c:	e00c      	b.n	8003f68 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003f4e:	4b0a      	ldr	r3, [pc, #40]	; (8003f78 <osKernelInitialize+0x64>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d105      	bne.n	8003f62 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003f56:	4b08      	ldr	r3, [pc, #32]	; (8003f78 <osKernelInitialize+0x64>)
 8003f58:	2201      	movs	r2, #1
 8003f5a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	60fb      	str	r3, [r7, #12]
 8003f60:	e002      	b.n	8003f68 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003f62:	f04f 33ff 	mov.w	r3, #4294967295
 8003f66:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003f68:	68fb      	ldr	r3, [r7, #12]
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	20000288 	.word	0x20000288

08003f7c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f82:	f3ef 8305 	mrs	r3, IPSR
 8003f86:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f88:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10f      	bne.n	8003fae <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f8e:	f3ef 8310 	mrs	r3, PRIMASK
 8003f92:	607b      	str	r3, [r7, #4]
  return(result);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d105      	bne.n	8003fa6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f9a:	f3ef 8311 	mrs	r3, BASEPRI
 8003f9e:	603b      	str	r3, [r7, #0]
  return(result);
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d007      	beq.n	8003fb6 <osKernelStart+0x3a>
 8003fa6:	4b0f      	ldr	r3, [pc, #60]	; (8003fe4 <osKernelStart+0x68>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d103      	bne.n	8003fb6 <osKernelStart+0x3a>
    stat = osErrorISR;
 8003fae:	f06f 0305 	mvn.w	r3, #5
 8003fb2:	60fb      	str	r3, [r7, #12]
 8003fb4:	e010      	b.n	8003fd8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003fb6:	4b0b      	ldr	r3, [pc, #44]	; (8003fe4 <osKernelStart+0x68>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d109      	bne.n	8003fd2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003fbe:	f7ff ffa1 	bl	8003f04 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003fc2:	4b08      	ldr	r3, [pc, #32]	; (8003fe4 <osKernelStart+0x68>)
 8003fc4:	2202      	movs	r2, #2
 8003fc6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003fc8:	f001 fb86 	bl	80056d8 <vTaskStartScheduler>
      stat = osOK;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	60fb      	str	r3, [r7, #12]
 8003fd0:	e002      	b.n	8003fd8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8003fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8003fd6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	20000288 	.word	0x20000288

08003fe8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b090      	sub	sp, #64	; 0x40
 8003fec:	af04      	add	r7, sp, #16
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ff8:	f3ef 8305 	mrs	r3, IPSR
 8003ffc:	61fb      	str	r3, [r7, #28]
  return(result);
 8003ffe:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004000:	2b00      	cmp	r3, #0
 8004002:	f040 808f 	bne.w	8004124 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004006:	f3ef 8310 	mrs	r3, PRIMASK
 800400a:	61bb      	str	r3, [r7, #24]
  return(result);
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d105      	bne.n	800401e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004012:	f3ef 8311 	mrs	r3, BASEPRI
 8004016:	617b      	str	r3, [r7, #20]
  return(result);
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d003      	beq.n	8004026 <osThreadNew+0x3e>
 800401e:	4b44      	ldr	r3, [pc, #272]	; (8004130 <osThreadNew+0x148>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2b02      	cmp	r3, #2
 8004024:	d07e      	beq.n	8004124 <osThreadNew+0x13c>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d07b      	beq.n	8004124 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800402c:	2380      	movs	r3, #128	; 0x80
 800402e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004030:	2318      	movs	r3, #24
 8004032:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8004034:	2300      	movs	r3, #0
 8004036:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004038:	f04f 33ff 	mov.w	r3, #4294967295
 800403c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d045      	beq.n	80040d0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d002      	beq.n	8004052 <osThreadNew+0x6a>
        name = attr->name;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d002      	beq.n	8004060 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004062:	2b00      	cmp	r3, #0
 8004064:	d008      	beq.n	8004078 <osThreadNew+0x90>
 8004066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004068:	2b38      	cmp	r3, #56	; 0x38
 800406a:	d805      	bhi.n	8004078 <osThreadNew+0x90>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b00      	cmp	r3, #0
 8004076:	d001      	beq.n	800407c <osThreadNew+0x94>
        return (NULL);
 8004078:	2300      	movs	r3, #0
 800407a:	e054      	b.n	8004126 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d003      	beq.n	800408c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	695b      	ldr	r3, [r3, #20]
 8004088:	089b      	lsrs	r3, r3, #2
 800408a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00e      	beq.n	80040b2 <osThreadNew+0xca>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	2bbb      	cmp	r3, #187	; 0xbb
 800409a:	d90a      	bls.n	80040b2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d006      	beq.n	80040b2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d002      	beq.n	80040b2 <osThreadNew+0xca>
        mem = 1;
 80040ac:	2301      	movs	r3, #1
 80040ae:	623b      	str	r3, [r7, #32]
 80040b0:	e010      	b.n	80040d4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10c      	bne.n	80040d4 <osThreadNew+0xec>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d108      	bne.n	80040d4 <osThreadNew+0xec>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d104      	bne.n	80040d4 <osThreadNew+0xec>
          mem = 0;
 80040ca:	2300      	movs	r3, #0
 80040cc:	623b      	str	r3, [r7, #32]
 80040ce:	e001      	b.n	80040d4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80040d0:	2300      	movs	r3, #0
 80040d2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80040d4:	6a3b      	ldr	r3, [r7, #32]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d110      	bne.n	80040fc <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80040e2:	9202      	str	r2, [sp, #8]
 80040e4:	9301      	str	r3, [sp, #4]
 80040e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f001 f81f 	bl	8005134 <xTaskCreateStatic>
 80040f6:	4603      	mov	r3, r0
 80040f8:	613b      	str	r3, [r7, #16]
 80040fa:	e013      	b.n	8004124 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80040fc:	6a3b      	ldr	r3, [r7, #32]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d110      	bne.n	8004124 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004104:	b29a      	uxth	r2, r3
 8004106:	f107 0310 	add.w	r3, r7, #16
 800410a:	9301      	str	r3, [sp, #4]
 800410c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f001 f870 	bl	80051fa <xTaskCreate>
 800411a:	4603      	mov	r3, r0
 800411c:	2b01      	cmp	r3, #1
 800411e:	d001      	beq.n	8004124 <osThreadNew+0x13c>
          hTask = NULL;
 8004120:	2300      	movs	r3, #0
 8004122:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004124:	693b      	ldr	r3, [r7, #16]
}
 8004126:	4618      	mov	r0, r3
 8004128:	3730      	adds	r7, #48	; 0x30
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	20000288 	.word	0x20000288

08004134 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8004134:	b580      	push	{r7, lr}
 8004136:	b088      	sub	sp, #32
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004140:	f3ef 8305 	mrs	r3, IPSR
 8004144:	613b      	str	r3, [r7, #16]
  return(result);
 8004146:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8004148:	2b00      	cmp	r3, #0
 800414a:	d10f      	bne.n	800416c <osThreadTerminate+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800414c:	f3ef 8310 	mrs	r3, PRIMASK
 8004150:	60fb      	str	r3, [r7, #12]
  return(result);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d105      	bne.n	8004164 <osThreadTerminate+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004158:	f3ef 8311 	mrs	r3, BASEPRI
 800415c:	60bb      	str	r3, [r7, #8]
  return(result);
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d007      	beq.n	8004174 <osThreadTerminate+0x40>
 8004164:	4b12      	ldr	r3, [pc, #72]	; (80041b0 <osThreadTerminate+0x7c>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2b02      	cmp	r3, #2
 800416a:	d103      	bne.n	8004174 <osThreadTerminate+0x40>
    stat = osErrorISR;
 800416c:	f06f 0305 	mvn.w	r3, #5
 8004170:	61fb      	str	r3, [r7, #28]
 8004172:	e017      	b.n	80041a4 <osThreadTerminate+0x70>
  }
  else if (hTask == NULL) {
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d103      	bne.n	8004182 <osThreadTerminate+0x4e>
    stat = osErrorParameter;
 800417a:	f06f 0303 	mvn.w	r3, #3
 800417e:	61fb      	str	r3, [r7, #28]
 8004180:	e010      	b.n	80041a4 <osThreadTerminate+0x70>
  }
  else {
    tstate = eTaskGetState (hTask);
 8004182:	69b8      	ldr	r0, [r7, #24]
 8004184:	f001 fa40 	bl	8005608 <eTaskGetState>
 8004188:	4603      	mov	r3, r0
 800418a:	75fb      	strb	r3, [r7, #23]

    if (tstate != eDeleted) {
 800418c:	7dfb      	ldrb	r3, [r7, #23]
 800418e:	2b04      	cmp	r3, #4
 8004190:	d005      	beq.n	800419e <osThreadTerminate+0x6a>
      stat = osOK;
 8004192:	2300      	movs	r3, #0
 8004194:	61fb      	str	r3, [r7, #28]
      vTaskDelete (hTask);
 8004196:	69b8      	ldr	r0, [r7, #24]
 8004198:	f001 f98c 	bl	80054b4 <vTaskDelete>
 800419c:	e002      	b.n	80041a4 <osThreadTerminate+0x70>
    } else {
      stat = osErrorResource;
 800419e:	f06f 0302 	mvn.w	r3, #2
 80041a2:	61fb      	str	r3, [r7, #28]
  }
#else
  stat = osError;
#endif

  return (stat);
 80041a4:	69fb      	ldr	r3, [r7, #28]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3720      	adds	r7, #32
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	20000288 	.word	0x20000288

080041b4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041bc:	f3ef 8305 	mrs	r3, IPSR
 80041c0:	613b      	str	r3, [r7, #16]
  return(result);
 80041c2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d10f      	bne.n	80041e8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041c8:	f3ef 8310 	mrs	r3, PRIMASK
 80041cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d105      	bne.n	80041e0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80041d4:	f3ef 8311 	mrs	r3, BASEPRI
 80041d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d007      	beq.n	80041f0 <osDelay+0x3c>
 80041e0:	4b0a      	ldr	r3, [pc, #40]	; (800420c <osDelay+0x58>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d103      	bne.n	80041f0 <osDelay+0x3c>
    stat = osErrorISR;
 80041e8:	f06f 0305 	mvn.w	r3, #5
 80041ec:	617b      	str	r3, [r7, #20]
 80041ee:	e007      	b.n	8004200 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80041f0:	2300      	movs	r3, #0
 80041f2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d002      	beq.n	8004200 <osDelay+0x4c>
      vTaskDelay(ticks);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f001 f9ce 	bl	800559c <vTaskDelay>
    }
  }

  return (stat);
 8004200:	697b      	ldr	r3, [r7, #20]
}
 8004202:	4618      	mov	r0, r3
 8004204:	3718      	adds	r7, #24
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	20000288 	.word	0x20000288

08004210 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004210:	b580      	push	{r7, lr}
 8004212:	b08c      	sub	sp, #48	; 0x30
 8004214:	af02      	add	r7, sp, #8
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800421c:	2300      	movs	r3, #0
 800421e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004220:	f3ef 8305 	mrs	r3, IPSR
 8004224:	61bb      	str	r3, [r7, #24]
  return(result);
 8004226:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004228:	2b00      	cmp	r3, #0
 800422a:	f040 8086 	bne.w	800433a <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800422e:	f3ef 8310 	mrs	r3, PRIMASK
 8004232:	617b      	str	r3, [r7, #20]
  return(result);
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d105      	bne.n	8004246 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800423a:	f3ef 8311 	mrs	r3, BASEPRI
 800423e:	613b      	str	r3, [r7, #16]
  return(result);
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d003      	beq.n	800424e <osSemaphoreNew+0x3e>
 8004246:	4b3f      	ldr	r3, [pc, #252]	; (8004344 <osSemaphoreNew+0x134>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2b02      	cmp	r3, #2
 800424c:	d075      	beq.n	800433a <osSemaphoreNew+0x12a>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d072      	beq.n	800433a <osSemaphoreNew+0x12a>
 8004254:	68ba      	ldr	r2, [r7, #8]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	429a      	cmp	r2, r3
 800425a:	d86e      	bhi.n	800433a <osSemaphoreNew+0x12a>
    mem = -1;
 800425c:	f04f 33ff 	mov.w	r3, #4294967295
 8004260:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d015      	beq.n	8004294 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d006      	beq.n	800427e <osSemaphoreNew+0x6e>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	2b4f      	cmp	r3, #79	; 0x4f
 8004276:	d902      	bls.n	800427e <osSemaphoreNew+0x6e>
        mem = 1;
 8004278:	2301      	movs	r3, #1
 800427a:	623b      	str	r3, [r7, #32]
 800427c:	e00c      	b.n	8004298 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d108      	bne.n	8004298 <osSemaphoreNew+0x88>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d104      	bne.n	8004298 <osSemaphoreNew+0x88>
          mem = 0;
 800428e:	2300      	movs	r3, #0
 8004290:	623b      	str	r3, [r7, #32]
 8004292:	e001      	b.n	8004298 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8004294:	2300      	movs	r3, #0
 8004296:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8004298:	6a3b      	ldr	r3, [r7, #32]
 800429a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429e:	d04c      	beq.n	800433a <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d128      	bne.n	80042f8 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 80042a6:	6a3b      	ldr	r3, [r7, #32]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d10a      	bne.n	80042c2 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	2203      	movs	r2, #3
 80042b2:	9200      	str	r2, [sp, #0]
 80042b4:	2200      	movs	r2, #0
 80042b6:	2100      	movs	r1, #0
 80042b8:	2001      	movs	r0, #1
 80042ba:	f000 f997 	bl	80045ec <xQueueGenericCreateStatic>
 80042be:	6278      	str	r0, [r7, #36]	; 0x24
 80042c0:	e005      	b.n	80042ce <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80042c2:	2203      	movs	r2, #3
 80042c4:	2100      	movs	r1, #0
 80042c6:	2001      	movs	r0, #1
 80042c8:	f000 fa12 	bl	80046f0 <xQueueGenericCreate>
 80042cc:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80042ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d022      	beq.n	800431a <osSemaphoreNew+0x10a>
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d01f      	beq.n	800431a <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80042da:	2300      	movs	r3, #0
 80042dc:	2200      	movs	r2, #0
 80042de:	2100      	movs	r1, #0
 80042e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042e2:	f000 fadd 	bl	80048a0 <xQueueGenericSend>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d016      	beq.n	800431a <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 80042ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042ee:	f000 fd63 	bl	8004db8 <vQueueDelete>
            hSemaphore = NULL;
 80042f2:	2300      	movs	r3, #0
 80042f4:	627b      	str	r3, [r7, #36]	; 0x24
 80042f6:	e010      	b.n	800431a <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 80042f8:	6a3b      	ldr	r3, [r7, #32]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d108      	bne.n	8004310 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	461a      	mov	r2, r3
 8004304:	68b9      	ldr	r1, [r7, #8]
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f000 fa57 	bl	80047ba <xQueueCreateCountingSemaphoreStatic>
 800430c:	6278      	str	r0, [r7, #36]	; 0x24
 800430e:	e004      	b.n	800431a <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004310:	68b9      	ldr	r1, [r7, #8]
 8004312:	68f8      	ldr	r0, [r7, #12]
 8004314:	f000 fa8c 	bl	8004830 <xQueueCreateCountingSemaphore>
 8004318:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800431a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00c      	beq.n	800433a <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <osSemaphoreNew+0x11e>
          name = attr->name;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	61fb      	str	r3, [r7, #28]
 800432c:	e001      	b.n	8004332 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800432e:	2300      	movs	r3, #0
 8004330:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004332:	69f9      	ldr	r1, [r7, #28]
 8004334:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004336:	f000 fe75 	bl	8005024 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800433c:	4618      	mov	r0, r3
 800433e:	3728      	adds	r7, #40	; 0x28
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	20000288 	.word	0x20000288

08004348 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	4a07      	ldr	r2, [pc, #28]	; (8004374 <vApplicationGetIdleTaskMemory+0x2c>)
 8004358:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	4a06      	ldr	r2, [pc, #24]	; (8004378 <vApplicationGetIdleTaskMemory+0x30>)
 800435e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2280      	movs	r2, #128	; 0x80
 8004364:	601a      	str	r2, [r3, #0]
}
 8004366:	bf00      	nop
 8004368:	3714      	adds	r7, #20
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	2000028c 	.word	0x2000028c
 8004378:	20000348 	.word	0x20000348

0800437c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	4a07      	ldr	r2, [pc, #28]	; (80043a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800438c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	4a06      	ldr	r2, [pc, #24]	; (80043ac <vApplicationGetTimerTaskMemory+0x30>)
 8004392:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f44f 7280 	mov.w	r2, #256	; 0x100
 800439a:	601a      	str	r2, [r3, #0]
}
 800439c:	bf00      	nop
 800439e:	3714      	adds	r7, #20
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr
 80043a8:	20000548 	.word	0x20000548
 80043ac:	20000604 	.word	0x20000604

080043b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f103 0208 	add.w	r2, r3, #8
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f04f 32ff 	mov.w	r2, #4294967295
 80043c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f103 0208 	add.w	r2, r3, #8
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f103 0208 	add.w	r2, r3, #8
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80043fe:	bf00      	nop
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr

0800440a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800440a:	b480      	push	{r7}
 800440c:	b085      	sub	sp, #20
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
 8004412:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	689a      	ldr	r2, [r3, #8]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	683a      	ldr	r2, [r7, #0]
 8004434:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	1c5a      	adds	r2, r3, #1
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	601a      	str	r2, [r3, #0]
}
 8004446:	bf00      	nop
 8004448:	3714      	adds	r7, #20
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr

08004452 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004452:	b480      	push	{r7}
 8004454:	b085      	sub	sp, #20
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
 800445a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004468:	d103      	bne.n	8004472 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	60fb      	str	r3, [r7, #12]
 8004470:	e00c      	b.n	800448c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	3308      	adds	r3, #8
 8004476:	60fb      	str	r3, [r7, #12]
 8004478:	e002      	b.n	8004480 <vListInsert+0x2e>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	60fb      	str	r3, [r7, #12]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	429a      	cmp	r2, r3
 800448a:	d2f6      	bcs.n	800447a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	685a      	ldr	r2, [r3, #4]
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	683a      	ldr	r2, [r7, #0]
 800449a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	683a      	ldr	r2, [r7, #0]
 80044a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	1c5a      	adds	r2, r3, #1
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	601a      	str	r2, [r3, #0]
}
 80044b8:	bf00      	nop
 80044ba:	3714      	adds	r7, #20
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	6892      	ldr	r2, [r2, #8]
 80044da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	6852      	ldr	r2, [r2, #4]
 80044e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d103      	bne.n	80044f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	1e5a      	subs	r2, r3, #1
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
}
 800450c:	4618      	mov	r0, r3
 800450e:	3714      	adds	r7, #20
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d10c      	bne.n	8004546 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800452c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004530:	b672      	cpsid	i
 8004532:	f383 8811 	msr	BASEPRI, r3
 8004536:	f3bf 8f6f 	isb	sy
 800453a:	f3bf 8f4f 	dsb	sy
 800453e:	b662      	cpsie	i
 8004540:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004542:	bf00      	nop
 8004544:	e7fe      	b.n	8004544 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004546:	f002 fa89 	bl	8006a5c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004552:	68f9      	ldr	r1, [r7, #12]
 8004554:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004556:	fb01 f303 	mul.w	r3, r1, r3
 800455a:	441a      	add	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004576:	3b01      	subs	r3, #1
 8004578:	68f9      	ldr	r1, [r7, #12]
 800457a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800457c:	fb01 f303 	mul.w	r3, r1, r3
 8004580:	441a      	add	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	22ff      	movs	r2, #255	; 0xff
 800458a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	22ff      	movs	r2, #255	; 0xff
 8004592:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d114      	bne.n	80045c6 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d01a      	beq.n	80045da <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	3310      	adds	r3, #16
 80045a8:	4618      	mov	r0, r3
 80045aa:	f001 fb3d 	bl	8005c28 <xTaskRemoveFromEventList>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d012      	beq.n	80045da <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80045b4:	4b0c      	ldr	r3, [pc, #48]	; (80045e8 <xQueueGenericReset+0xd0>)
 80045b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045ba:	601a      	str	r2, [r3, #0]
 80045bc:	f3bf 8f4f 	dsb	sy
 80045c0:	f3bf 8f6f 	isb	sy
 80045c4:	e009      	b.n	80045da <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	3310      	adds	r3, #16
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7ff fef0 	bl	80043b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	3324      	adds	r3, #36	; 0x24
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7ff feeb 	bl	80043b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80045da:	f002 fa73 	bl	8006ac4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80045de:	2301      	movs	r3, #1
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3710      	adds	r7, #16
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	e000ed04 	.word	0xe000ed04

080045ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b08e      	sub	sp, #56	; 0x38
 80045f0:	af02      	add	r7, sp, #8
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
 80045f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10c      	bne.n	800461a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8004600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004604:	b672      	cpsid	i
 8004606:	f383 8811 	msr	BASEPRI, r3
 800460a:	f3bf 8f6f 	isb	sy
 800460e:	f3bf 8f4f 	dsb	sy
 8004612:	b662      	cpsie	i
 8004614:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004616:	bf00      	nop
 8004618:	e7fe      	b.n	8004618 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d10c      	bne.n	800463a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8004620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004624:	b672      	cpsid	i
 8004626:	f383 8811 	msr	BASEPRI, r3
 800462a:	f3bf 8f6f 	isb	sy
 800462e:	f3bf 8f4f 	dsb	sy
 8004632:	b662      	cpsie	i
 8004634:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004636:	bf00      	nop
 8004638:	e7fe      	b.n	8004638 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d002      	beq.n	8004646 <xQueueGenericCreateStatic+0x5a>
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d001      	beq.n	800464a <xQueueGenericCreateStatic+0x5e>
 8004646:	2301      	movs	r3, #1
 8004648:	e000      	b.n	800464c <xQueueGenericCreateStatic+0x60>
 800464a:	2300      	movs	r3, #0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10c      	bne.n	800466a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8004650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004654:	b672      	cpsid	i
 8004656:	f383 8811 	msr	BASEPRI, r3
 800465a:	f3bf 8f6f 	isb	sy
 800465e:	f3bf 8f4f 	dsb	sy
 8004662:	b662      	cpsie	i
 8004664:	623b      	str	r3, [r7, #32]
}
 8004666:	bf00      	nop
 8004668:	e7fe      	b.n	8004668 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d102      	bne.n	8004676 <xQueueGenericCreateStatic+0x8a>
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <xQueueGenericCreateStatic+0x8e>
 8004676:	2301      	movs	r3, #1
 8004678:	e000      	b.n	800467c <xQueueGenericCreateStatic+0x90>
 800467a:	2300      	movs	r3, #0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d10c      	bne.n	800469a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8004680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004684:	b672      	cpsid	i
 8004686:	f383 8811 	msr	BASEPRI, r3
 800468a:	f3bf 8f6f 	isb	sy
 800468e:	f3bf 8f4f 	dsb	sy
 8004692:	b662      	cpsie	i
 8004694:	61fb      	str	r3, [r7, #28]
}
 8004696:	bf00      	nop
 8004698:	e7fe      	b.n	8004698 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800469a:	2350      	movs	r3, #80	; 0x50
 800469c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	2b50      	cmp	r3, #80	; 0x50
 80046a2:	d00c      	beq.n	80046be <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80046a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a8:	b672      	cpsid	i
 80046aa:	f383 8811 	msr	BASEPRI, r3
 80046ae:	f3bf 8f6f 	isb	sy
 80046b2:	f3bf 8f4f 	dsb	sy
 80046b6:	b662      	cpsie	i
 80046b8:	61bb      	str	r3, [r7, #24]
}
 80046ba:	bf00      	nop
 80046bc:	e7fe      	b.n	80046bc <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80046be:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80046c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00d      	beq.n	80046e6 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80046ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80046d2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80046d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d8:	9300      	str	r3, [sp, #0]
 80046da:	4613      	mov	r3, r2
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	68b9      	ldr	r1, [r7, #8]
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f000 f847 	bl	8004774 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80046e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3730      	adds	r7, #48	; 0x30
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b08a      	sub	sp, #40	; 0x28
 80046f4:	af02      	add	r7, sp, #8
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	4613      	mov	r3, r2
 80046fc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d10c      	bne.n	800471e <xQueueGenericCreate+0x2e>
	__asm volatile
 8004704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004708:	b672      	cpsid	i
 800470a:	f383 8811 	msr	BASEPRI, r3
 800470e:	f3bf 8f6f 	isb	sy
 8004712:	f3bf 8f4f 	dsb	sy
 8004716:	b662      	cpsie	i
 8004718:	613b      	str	r3, [r7, #16]
}
 800471a:	bf00      	nop
 800471c:	e7fe      	b.n	800471c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d102      	bne.n	800472a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004724:	2300      	movs	r3, #0
 8004726:	61fb      	str	r3, [r7, #28]
 8004728:	e004      	b.n	8004734 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	68ba      	ldr	r2, [r7, #8]
 800472e:	fb02 f303 	mul.w	r3, r2, r3
 8004732:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	3350      	adds	r3, #80	; 0x50
 8004738:	4618      	mov	r0, r3
 800473a:	f002 fabb 	bl	8006cb4 <pvPortMalloc>
 800473e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d011      	beq.n	800476a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	3350      	adds	r3, #80	; 0x50
 800474e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004758:	79fa      	ldrb	r2, [r7, #7]
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	9300      	str	r3, [sp, #0]
 800475e:	4613      	mov	r3, r2
 8004760:	697a      	ldr	r2, [r7, #20]
 8004762:	68b9      	ldr	r1, [r7, #8]
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f000 f805 	bl	8004774 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800476a:	69bb      	ldr	r3, [r7, #24]
	}
 800476c:	4618      	mov	r0, r3
 800476e:	3720      	adds	r7, #32
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
 8004780:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d103      	bne.n	8004790 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	69ba      	ldr	r2, [r7, #24]
 800478c:	601a      	str	r2, [r3, #0]
 800478e:	e002      	b.n	8004796 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	68ba      	ldr	r2, [r7, #8]
 80047a0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80047a2:	2101      	movs	r1, #1
 80047a4:	69b8      	ldr	r0, [r7, #24]
 80047a6:	f7ff feb7 	bl	8004518 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	78fa      	ldrb	r2, [r7, #3]
 80047ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80047b2:	bf00      	nop
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b08a      	sub	sp, #40	; 0x28
 80047be:	af02      	add	r7, sp, #8
 80047c0:	60f8      	str	r0, [r7, #12]
 80047c2:	60b9      	str	r1, [r7, #8]
 80047c4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d10c      	bne.n	80047e6 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 80047cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d0:	b672      	cpsid	i
 80047d2:	f383 8811 	msr	BASEPRI, r3
 80047d6:	f3bf 8f6f 	isb	sy
 80047da:	f3bf 8f4f 	dsb	sy
 80047de:	b662      	cpsie	i
 80047e0:	61bb      	str	r3, [r7, #24]
}
 80047e2:	bf00      	nop
 80047e4:	e7fe      	b.n	80047e4 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 80047e6:	68ba      	ldr	r2, [r7, #8]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d90c      	bls.n	8004808 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 80047ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f2:	b672      	cpsid	i
 80047f4:	f383 8811 	msr	BASEPRI, r3
 80047f8:	f3bf 8f6f 	isb	sy
 80047fc:	f3bf 8f4f 	dsb	sy
 8004800:	b662      	cpsie	i
 8004802:	617b      	str	r3, [r7, #20]
}
 8004804:	bf00      	nop
 8004806:	e7fe      	b.n	8004806 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004808:	2302      	movs	r3, #2
 800480a:	9300      	str	r3, [sp, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	2100      	movs	r1, #0
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f7ff feea 	bl	80045ec <xQueueGenericCreateStatic>
 8004818:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d002      	beq.n	8004826 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004826:	69fb      	ldr	r3, [r7, #28]
	}
 8004828:	4618      	mov	r0, r3
 800482a:	3720      	adds	r7, #32
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004830:	b580      	push	{r7, lr}
 8004832:	b086      	sub	sp, #24
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d10c      	bne.n	800485a <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 8004840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004844:	b672      	cpsid	i
 8004846:	f383 8811 	msr	BASEPRI, r3
 800484a:	f3bf 8f6f 	isb	sy
 800484e:	f3bf 8f4f 	dsb	sy
 8004852:	b662      	cpsie	i
 8004854:	613b      	str	r3, [r7, #16]
}
 8004856:	bf00      	nop
 8004858:	e7fe      	b.n	8004858 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800485a:	683a      	ldr	r2, [r7, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	429a      	cmp	r2, r3
 8004860:	d90c      	bls.n	800487c <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 8004862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004866:	b672      	cpsid	i
 8004868:	f383 8811 	msr	BASEPRI, r3
 800486c:	f3bf 8f6f 	isb	sy
 8004870:	f3bf 8f4f 	dsb	sy
 8004874:	b662      	cpsie	i
 8004876:	60fb      	str	r3, [r7, #12]
}
 8004878:	bf00      	nop
 800487a:	e7fe      	b.n	800487a <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800487c:	2202      	movs	r2, #2
 800487e:	2100      	movs	r1, #0
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f7ff ff35 	bl	80046f0 <xQueueGenericCreate>
 8004886:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d002      	beq.n	8004894 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004894:	697b      	ldr	r3, [r7, #20]
	}
 8004896:	4618      	mov	r0, r3
 8004898:	3718      	adds	r7, #24
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
	...

080048a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b08e      	sub	sp, #56	; 0x38
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
 80048ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80048ae:	2300      	movs	r3, #0
 80048b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80048b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d10c      	bne.n	80048d6 <xQueueGenericSend+0x36>
	__asm volatile
 80048bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c0:	b672      	cpsid	i
 80048c2:	f383 8811 	msr	BASEPRI, r3
 80048c6:	f3bf 8f6f 	isb	sy
 80048ca:	f3bf 8f4f 	dsb	sy
 80048ce:	b662      	cpsie	i
 80048d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80048d2:	bf00      	nop
 80048d4:	e7fe      	b.n	80048d4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d103      	bne.n	80048e4 <xQueueGenericSend+0x44>
 80048dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d101      	bne.n	80048e8 <xQueueGenericSend+0x48>
 80048e4:	2301      	movs	r3, #1
 80048e6:	e000      	b.n	80048ea <xQueueGenericSend+0x4a>
 80048e8:	2300      	movs	r3, #0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d10c      	bne.n	8004908 <xQueueGenericSend+0x68>
	__asm volatile
 80048ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f2:	b672      	cpsid	i
 80048f4:	f383 8811 	msr	BASEPRI, r3
 80048f8:	f3bf 8f6f 	isb	sy
 80048fc:	f3bf 8f4f 	dsb	sy
 8004900:	b662      	cpsie	i
 8004902:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004904:	bf00      	nop
 8004906:	e7fe      	b.n	8004906 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	2b02      	cmp	r3, #2
 800490c:	d103      	bne.n	8004916 <xQueueGenericSend+0x76>
 800490e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004912:	2b01      	cmp	r3, #1
 8004914:	d101      	bne.n	800491a <xQueueGenericSend+0x7a>
 8004916:	2301      	movs	r3, #1
 8004918:	e000      	b.n	800491c <xQueueGenericSend+0x7c>
 800491a:	2300      	movs	r3, #0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d10c      	bne.n	800493a <xQueueGenericSend+0x9a>
	__asm volatile
 8004920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004924:	b672      	cpsid	i
 8004926:	f383 8811 	msr	BASEPRI, r3
 800492a:	f3bf 8f6f 	isb	sy
 800492e:	f3bf 8f4f 	dsb	sy
 8004932:	b662      	cpsie	i
 8004934:	623b      	str	r3, [r7, #32]
}
 8004936:	bf00      	nop
 8004938:	e7fe      	b.n	8004938 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800493a:	f001 fb3f 	bl	8005fbc <xTaskGetSchedulerState>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d102      	bne.n	800494a <xQueueGenericSend+0xaa>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d101      	bne.n	800494e <xQueueGenericSend+0xae>
 800494a:	2301      	movs	r3, #1
 800494c:	e000      	b.n	8004950 <xQueueGenericSend+0xb0>
 800494e:	2300      	movs	r3, #0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10c      	bne.n	800496e <xQueueGenericSend+0xce>
	__asm volatile
 8004954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004958:	b672      	cpsid	i
 800495a:	f383 8811 	msr	BASEPRI, r3
 800495e:	f3bf 8f6f 	isb	sy
 8004962:	f3bf 8f4f 	dsb	sy
 8004966:	b662      	cpsie	i
 8004968:	61fb      	str	r3, [r7, #28]
}
 800496a:	bf00      	nop
 800496c:	e7fe      	b.n	800496c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800496e:	f002 f875 	bl	8006a5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004974:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800497a:	429a      	cmp	r2, r3
 800497c:	d302      	bcc.n	8004984 <xQueueGenericSend+0xe4>
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	2b02      	cmp	r3, #2
 8004982:	d129      	bne.n	80049d8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004984:	683a      	ldr	r2, [r7, #0]
 8004986:	68b9      	ldr	r1, [r7, #8]
 8004988:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800498a:	f000 fa3a 	bl	8004e02 <prvCopyDataToQueue>
 800498e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004994:	2b00      	cmp	r3, #0
 8004996:	d010      	beq.n	80049ba <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499a:	3324      	adds	r3, #36	; 0x24
 800499c:	4618      	mov	r0, r3
 800499e:	f001 f943 	bl	8005c28 <xTaskRemoveFromEventList>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d013      	beq.n	80049d0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80049a8:	4b3f      	ldr	r3, [pc, #252]	; (8004aa8 <xQueueGenericSend+0x208>)
 80049aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049ae:	601a      	str	r2, [r3, #0]
 80049b0:	f3bf 8f4f 	dsb	sy
 80049b4:	f3bf 8f6f 	isb	sy
 80049b8:	e00a      	b.n	80049d0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80049ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d007      	beq.n	80049d0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80049c0:	4b39      	ldr	r3, [pc, #228]	; (8004aa8 <xQueueGenericSend+0x208>)
 80049c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049c6:	601a      	str	r2, [r3, #0]
 80049c8:	f3bf 8f4f 	dsb	sy
 80049cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80049d0:	f002 f878 	bl	8006ac4 <vPortExitCritical>
				return pdPASS;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e063      	b.n	8004aa0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d103      	bne.n	80049e6 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80049de:	f002 f871 	bl	8006ac4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80049e2:	2300      	movs	r3, #0
 80049e4:	e05c      	b.n	8004aa0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80049e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d106      	bne.n	80049fa <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80049ec:	f107 0314 	add.w	r3, r7, #20
 80049f0:	4618      	mov	r0, r3
 80049f2:	f001 f97f 	bl	8005cf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80049f6:	2301      	movs	r3, #1
 80049f8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80049fa:	f002 f863 	bl	8006ac4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80049fe:	f000 fedf 	bl	80057c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a02:	f002 f82b 	bl	8006a5c <vPortEnterCritical>
 8004a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a0c:	b25b      	sxtb	r3, r3
 8004a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a12:	d103      	bne.n	8004a1c <xQueueGenericSend+0x17c>
 8004a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a22:	b25b      	sxtb	r3, r3
 8004a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a28:	d103      	bne.n	8004a32 <xQueueGenericSend+0x192>
 8004a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a32:	f002 f847 	bl	8006ac4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a36:	1d3a      	adds	r2, r7, #4
 8004a38:	f107 0314 	add.w	r3, r7, #20
 8004a3c:	4611      	mov	r1, r2
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f001 f96e 	bl	8005d20 <xTaskCheckForTimeOut>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d124      	bne.n	8004a94 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004a4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a4c:	f000 fad1 	bl	8004ff2 <prvIsQueueFull>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d018      	beq.n	8004a88 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a58:	3310      	adds	r3, #16
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	4611      	mov	r1, r2
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f001 f88e 	bl	8005b80 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004a64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a66:	f000 fa5c 	bl	8004f22 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004a6a:	f000 feb7 	bl	80057dc <xTaskResumeAll>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f47f af7c 	bne.w	800496e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8004a76:	4b0c      	ldr	r3, [pc, #48]	; (8004aa8 <xQueueGenericSend+0x208>)
 8004a78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a7c:	601a      	str	r2, [r3, #0]
 8004a7e:	f3bf 8f4f 	dsb	sy
 8004a82:	f3bf 8f6f 	isb	sy
 8004a86:	e772      	b.n	800496e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004a88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a8a:	f000 fa4a 	bl	8004f22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a8e:	f000 fea5 	bl	80057dc <xTaskResumeAll>
 8004a92:	e76c      	b.n	800496e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004a94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a96:	f000 fa44 	bl	8004f22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a9a:	f000 fe9f 	bl	80057dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004a9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3738      	adds	r7, #56	; 0x38
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	e000ed04 	.word	0xe000ed04

08004aac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b08e      	sub	sp, #56	; 0x38
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
 8004ab8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d10c      	bne.n	8004ade <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8004ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac8:	b672      	cpsid	i
 8004aca:	f383 8811 	msr	BASEPRI, r3
 8004ace:	f3bf 8f6f 	isb	sy
 8004ad2:	f3bf 8f4f 	dsb	sy
 8004ad6:	b662      	cpsie	i
 8004ad8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004ada:	bf00      	nop
 8004adc:	e7fe      	b.n	8004adc <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d103      	bne.n	8004aec <xQueueGenericSendFromISR+0x40>
 8004ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d101      	bne.n	8004af0 <xQueueGenericSendFromISR+0x44>
 8004aec:	2301      	movs	r3, #1
 8004aee:	e000      	b.n	8004af2 <xQueueGenericSendFromISR+0x46>
 8004af0:	2300      	movs	r3, #0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10c      	bne.n	8004b10 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8004af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afa:	b672      	cpsid	i
 8004afc:	f383 8811 	msr	BASEPRI, r3
 8004b00:	f3bf 8f6f 	isb	sy
 8004b04:	f3bf 8f4f 	dsb	sy
 8004b08:	b662      	cpsie	i
 8004b0a:	623b      	str	r3, [r7, #32]
}
 8004b0c:	bf00      	nop
 8004b0e:	e7fe      	b.n	8004b0e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d103      	bne.n	8004b1e <xQueueGenericSendFromISR+0x72>
 8004b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d101      	bne.n	8004b22 <xQueueGenericSendFromISR+0x76>
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e000      	b.n	8004b24 <xQueueGenericSendFromISR+0x78>
 8004b22:	2300      	movs	r3, #0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d10c      	bne.n	8004b42 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8004b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2c:	b672      	cpsid	i
 8004b2e:	f383 8811 	msr	BASEPRI, r3
 8004b32:	f3bf 8f6f 	isb	sy
 8004b36:	f3bf 8f4f 	dsb	sy
 8004b3a:	b662      	cpsie	i
 8004b3c:	61fb      	str	r3, [r7, #28]
}
 8004b3e:	bf00      	nop
 8004b40:	e7fe      	b.n	8004b40 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b42:	f002 f873 	bl	8006c2c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004b46:	f3ef 8211 	mrs	r2, BASEPRI
 8004b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4e:	b672      	cpsid	i
 8004b50:	f383 8811 	msr	BASEPRI, r3
 8004b54:	f3bf 8f6f 	isb	sy
 8004b58:	f3bf 8f4f 	dsb	sy
 8004b5c:	b662      	cpsie	i
 8004b5e:	61ba      	str	r2, [r7, #24]
 8004b60:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004b62:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b64:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d302      	bcc.n	8004b78 <xQueueGenericSendFromISR+0xcc>
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d12c      	bne.n	8004bd2 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b82:	683a      	ldr	r2, [r7, #0]
 8004b84:	68b9      	ldr	r1, [r7, #8]
 8004b86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b88:	f000 f93b 	bl	8004e02 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004b8c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b94:	d112      	bne.n	8004bbc <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d016      	beq.n	8004bcc <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba0:	3324      	adds	r3, #36	; 0x24
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f001 f840 	bl	8005c28 <xTaskRemoveFromEventList>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00e      	beq.n	8004bcc <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00b      	beq.n	8004bcc <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	601a      	str	r2, [r3, #0]
 8004bba:	e007      	b.n	8004bcc <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004bbc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	b25a      	sxtb	r2, r3
 8004bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004bd0:	e001      	b.n	8004bd6 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	637b      	str	r3, [r7, #52]	; 0x34
 8004bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004be0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3738      	adds	r7, #56	; 0x38
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b08c      	sub	sp, #48	; 0x30
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10c      	bne.n	8004c20 <xQueueReceive+0x34>
	__asm volatile
 8004c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0a:	b672      	cpsid	i
 8004c0c:	f383 8811 	msr	BASEPRI, r3
 8004c10:	f3bf 8f6f 	isb	sy
 8004c14:	f3bf 8f4f 	dsb	sy
 8004c18:	b662      	cpsie	i
 8004c1a:	623b      	str	r3, [r7, #32]
}
 8004c1c:	bf00      	nop
 8004c1e:	e7fe      	b.n	8004c1e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d103      	bne.n	8004c2e <xQueueReceive+0x42>
 8004c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <xQueueReceive+0x46>
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e000      	b.n	8004c34 <xQueueReceive+0x48>
 8004c32:	2300      	movs	r3, #0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d10c      	bne.n	8004c52 <xQueueReceive+0x66>
	__asm volatile
 8004c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3c:	b672      	cpsid	i
 8004c3e:	f383 8811 	msr	BASEPRI, r3
 8004c42:	f3bf 8f6f 	isb	sy
 8004c46:	f3bf 8f4f 	dsb	sy
 8004c4a:	b662      	cpsie	i
 8004c4c:	61fb      	str	r3, [r7, #28]
}
 8004c4e:	bf00      	nop
 8004c50:	e7fe      	b.n	8004c50 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c52:	f001 f9b3 	bl	8005fbc <xTaskGetSchedulerState>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d102      	bne.n	8004c62 <xQueueReceive+0x76>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d101      	bne.n	8004c66 <xQueueReceive+0x7a>
 8004c62:	2301      	movs	r3, #1
 8004c64:	e000      	b.n	8004c68 <xQueueReceive+0x7c>
 8004c66:	2300      	movs	r3, #0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d10c      	bne.n	8004c86 <xQueueReceive+0x9a>
	__asm volatile
 8004c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c70:	b672      	cpsid	i
 8004c72:	f383 8811 	msr	BASEPRI, r3
 8004c76:	f3bf 8f6f 	isb	sy
 8004c7a:	f3bf 8f4f 	dsb	sy
 8004c7e:	b662      	cpsie	i
 8004c80:	61bb      	str	r3, [r7, #24]
}
 8004c82:	bf00      	nop
 8004c84:	e7fe      	b.n	8004c84 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c86:	f001 fee9 	bl	8006a5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d01f      	beq.n	8004cd6 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004c96:	68b9      	ldr	r1, [r7, #8]
 8004c98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c9a:	f000 f91c 	bl	8004ed6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca0:	1e5a      	subs	r2, r3, #1
 8004ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00f      	beq.n	8004cce <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb0:	3310      	adds	r3, #16
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f000 ffb8 	bl	8005c28 <xTaskRemoveFromEventList>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d007      	beq.n	8004cce <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004cbe:	4b3d      	ldr	r3, [pc, #244]	; (8004db4 <xQueueReceive+0x1c8>)
 8004cc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cc4:	601a      	str	r2, [r3, #0]
 8004cc6:	f3bf 8f4f 	dsb	sy
 8004cca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004cce:	f001 fef9 	bl	8006ac4 <vPortExitCritical>
				return pdPASS;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e069      	b.n	8004daa <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d103      	bne.n	8004ce4 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004cdc:	f001 fef2 	bl	8006ac4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	e062      	b.n	8004daa <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d106      	bne.n	8004cf8 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004cea:	f107 0310 	add.w	r3, r7, #16
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f001 f800 	bl	8005cf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004cf8:	f001 fee4 	bl	8006ac4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004cfc:	f000 fd60 	bl	80057c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d00:	f001 feac 	bl	8006a5c <vPortEnterCritical>
 8004d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d0a:	b25b      	sxtb	r3, r3
 8004d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d10:	d103      	bne.n	8004d1a <xQueueReceive+0x12e>
 8004d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d20:	b25b      	sxtb	r3, r3
 8004d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d26:	d103      	bne.n	8004d30 <xQueueReceive+0x144>
 8004d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d30:	f001 fec8 	bl	8006ac4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d34:	1d3a      	adds	r2, r7, #4
 8004d36:	f107 0310 	add.w	r3, r7, #16
 8004d3a:	4611      	mov	r1, r2
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f000 ffef 	bl	8005d20 <xTaskCheckForTimeOut>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d123      	bne.n	8004d90 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d4a:	f000 f93c 	bl	8004fc6 <prvIsQueueEmpty>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d017      	beq.n	8004d84 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d56:	3324      	adds	r3, #36	; 0x24
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	4611      	mov	r1, r2
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f000 ff0f 	bl	8005b80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004d62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d64:	f000 f8dd 	bl	8004f22 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004d68:	f000 fd38 	bl	80057dc <xTaskResumeAll>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d189      	bne.n	8004c86 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8004d72:	4b10      	ldr	r3, [pc, #64]	; (8004db4 <xQueueReceive+0x1c8>)
 8004d74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d78:	601a      	str	r2, [r3, #0]
 8004d7a:	f3bf 8f4f 	dsb	sy
 8004d7e:	f3bf 8f6f 	isb	sy
 8004d82:	e780      	b.n	8004c86 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004d84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d86:	f000 f8cc 	bl	8004f22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d8a:	f000 fd27 	bl	80057dc <xTaskResumeAll>
 8004d8e:	e77a      	b.n	8004c86 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004d90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d92:	f000 f8c6 	bl	8004f22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d96:	f000 fd21 	bl	80057dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d9c:	f000 f913 	bl	8004fc6 <prvIsQueueEmpty>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	f43f af6f 	beq.w	8004c86 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004da8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3730      	adds	r7, #48	; 0x30
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	e000ed04 	.word	0xe000ed04

08004db8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10c      	bne.n	8004de4 <vQueueDelete+0x2c>
	__asm volatile
 8004dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dce:	b672      	cpsid	i
 8004dd0:	f383 8811 	msr	BASEPRI, r3
 8004dd4:	f3bf 8f6f 	isb	sy
 8004dd8:	f3bf 8f4f 	dsb	sy
 8004ddc:	b662      	cpsie	i
 8004dde:	60bb      	str	r3, [r7, #8]
}
 8004de0:	bf00      	nop
 8004de2:	e7fe      	b.n	8004de2 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	f000 f947 	bl	8005078 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d102      	bne.n	8004dfa <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f002 f827 	bl	8006e48 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004dfa:	bf00      	nop
 8004dfc:	3710      	adds	r7, #16
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b086      	sub	sp, #24
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	60f8      	str	r0, [r7, #12]
 8004e0a:	60b9      	str	r1, [r7, #8]
 8004e0c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e16:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d10d      	bne.n	8004e3c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d14d      	bne.n	8004ec4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f001 f8e3 	bl	8005ff8 <xTaskPriorityDisinherit>
 8004e32:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	609a      	str	r2, [r3, #8]
 8004e3a:	e043      	b.n	8004ec4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d119      	bne.n	8004e76 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6858      	ldr	r0, [r3, #4]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	68b9      	ldr	r1, [r7, #8]
 8004e4e:	f002 f93b 	bl	80070c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	685a      	ldr	r2, [r3, #4]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5a:	441a      	add	r2, r3
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	685a      	ldr	r2, [r3, #4]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d32b      	bcc.n	8004ec4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	605a      	str	r2, [r3, #4]
 8004e74:	e026      	b.n	8004ec4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	68d8      	ldr	r0, [r3, #12]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7e:	461a      	mov	r2, r3
 8004e80:	68b9      	ldr	r1, [r7, #8]
 8004e82:	f002 f921 	bl	80070c8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	68da      	ldr	r2, [r3, #12]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8e:	425b      	negs	r3, r3
 8004e90:	441a      	add	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	68da      	ldr	r2, [r3, #12]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d207      	bcs.n	8004eb2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	689a      	ldr	r2, [r3, #8]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eaa:	425b      	negs	r3, r3
 8004eac:	441a      	add	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d105      	bne.n	8004ec4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d002      	beq.n	8004ec4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	1c5a      	adds	r2, r3, #1
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004ecc:	697b      	ldr	r3, [r7, #20]
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3718      	adds	r7, #24
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b082      	sub	sp, #8
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
 8004ede:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d018      	beq.n	8004f1a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68da      	ldr	r2, [r3, #12]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef0:	441a      	add	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	68da      	ldr	r2, [r3, #12]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d303      	bcc.n	8004f0a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	68d9      	ldr	r1, [r3, #12]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f12:	461a      	mov	r2, r3
 8004f14:	6838      	ldr	r0, [r7, #0]
 8004f16:	f002 f8d7 	bl	80070c8 <memcpy>
	}
}
 8004f1a:	bf00      	nop
 8004f1c:	3708      	adds	r7, #8
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004f22:	b580      	push	{r7, lr}
 8004f24:	b084      	sub	sp, #16
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004f2a:	f001 fd97 	bl	8006a5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f34:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f36:	e011      	b.n	8004f5c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d012      	beq.n	8004f66 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	3324      	adds	r3, #36	; 0x24
 8004f44:	4618      	mov	r0, r3
 8004f46:	f000 fe6f 	bl	8005c28 <xTaskRemoveFromEventList>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d001      	beq.n	8004f54 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004f50:	f000 ff4c 	bl	8005dec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004f54:	7bfb      	ldrb	r3, [r7, #15]
 8004f56:	3b01      	subs	r3, #1
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	dce9      	bgt.n	8004f38 <prvUnlockQueue+0x16>
 8004f64:	e000      	b.n	8004f68 <prvUnlockQueue+0x46>
					break;
 8004f66:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	22ff      	movs	r2, #255	; 0xff
 8004f6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004f70:	f001 fda8 	bl	8006ac4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004f74:	f001 fd72 	bl	8006a5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f7e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f80:	e011      	b.n	8004fa6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d012      	beq.n	8004fb0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	3310      	adds	r3, #16
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f000 fe4a 	bl	8005c28 <xTaskRemoveFromEventList>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d001      	beq.n	8004f9e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004f9a:	f000 ff27 	bl	8005dec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004f9e:	7bbb      	ldrb	r3, [r7, #14]
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004fa6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	dce9      	bgt.n	8004f82 <prvUnlockQueue+0x60>
 8004fae:	e000      	b.n	8004fb2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004fb0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	22ff      	movs	r2, #255	; 0xff
 8004fb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004fba:	f001 fd83 	bl	8006ac4 <vPortExitCritical>
}
 8004fbe:	bf00      	nop
 8004fc0:	3710      	adds	r7, #16
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b084      	sub	sp, #16
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004fce:	f001 fd45 	bl	8006a5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d102      	bne.n	8004fe0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	60fb      	str	r3, [r7, #12]
 8004fde:	e001      	b.n	8004fe4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004fe4:	f001 fd6e 	bl	8006ac4 <vPortExitCritical>

	return xReturn;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3710      	adds	r7, #16
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b084      	sub	sp, #16
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ffa:	f001 fd2f 	bl	8006a5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005006:	429a      	cmp	r2, r3
 8005008:	d102      	bne.n	8005010 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800500a:	2301      	movs	r3, #1
 800500c:	60fb      	str	r3, [r7, #12]
 800500e:	e001      	b.n	8005014 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005010:	2300      	movs	r3, #0
 8005012:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005014:	f001 fd56 	bl	8006ac4 <vPortExitCritical>

	return xReturn;
 8005018:	68fb      	ldr	r3, [r7, #12]
}
 800501a:	4618      	mov	r0, r3
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
	...

08005024 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800502e:	2300      	movs	r3, #0
 8005030:	60fb      	str	r3, [r7, #12]
 8005032:	e014      	b.n	800505e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005034:	4a0f      	ldr	r2, [pc, #60]	; (8005074 <vQueueAddToRegistry+0x50>)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d10b      	bne.n	8005058 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005040:	490c      	ldr	r1, [pc, #48]	; (8005074 <vQueueAddToRegistry+0x50>)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	683a      	ldr	r2, [r7, #0]
 8005046:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800504a:	4a0a      	ldr	r2, [pc, #40]	; (8005074 <vQueueAddToRegistry+0x50>)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	00db      	lsls	r3, r3, #3
 8005050:	4413      	add	r3, r2
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005056:	e006      	b.n	8005066 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	3301      	adds	r3, #1
 800505c:	60fb      	str	r3, [r7, #12]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2b07      	cmp	r3, #7
 8005062:	d9e7      	bls.n	8005034 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005064:	bf00      	nop
 8005066:	bf00      	nop
 8005068:	3714      	adds	r7, #20
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	20000a04 	.word	0x20000a04

08005078 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005080:	2300      	movs	r3, #0
 8005082:	60fb      	str	r3, [r7, #12]
 8005084:	e016      	b.n	80050b4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005086:	4a10      	ldr	r2, [pc, #64]	; (80050c8 <vQueueUnregisterQueue+0x50>)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	00db      	lsls	r3, r3, #3
 800508c:	4413      	add	r3, r2
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	429a      	cmp	r2, r3
 8005094:	d10b      	bne.n	80050ae <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005096:	4a0c      	ldr	r2, [pc, #48]	; (80050c8 <vQueueUnregisterQueue+0x50>)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2100      	movs	r1, #0
 800509c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80050a0:	4a09      	ldr	r2, [pc, #36]	; (80050c8 <vQueueUnregisterQueue+0x50>)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	00db      	lsls	r3, r3, #3
 80050a6:	4413      	add	r3, r2
 80050a8:	2200      	movs	r2, #0
 80050aa:	605a      	str	r2, [r3, #4]
				break;
 80050ac:	e006      	b.n	80050bc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	3301      	adds	r3, #1
 80050b2:	60fb      	str	r3, [r7, #12]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2b07      	cmp	r3, #7
 80050b8:	d9e5      	bls.n	8005086 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80050ba:	bf00      	nop
 80050bc:	bf00      	nop
 80050be:	3714      	adds	r7, #20
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr
 80050c8:	20000a04 	.word	0x20000a04

080050cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b086      	sub	sp, #24
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80050dc:	f001 fcbe 	bl	8006a5c <vPortEnterCritical>
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050e6:	b25b      	sxtb	r3, r3
 80050e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ec:	d103      	bne.n	80050f6 <vQueueWaitForMessageRestricted+0x2a>
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050fc:	b25b      	sxtb	r3, r3
 80050fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005102:	d103      	bne.n	800510c <vQueueWaitForMessageRestricted+0x40>
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800510c:	f001 fcda 	bl	8006ac4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005114:	2b00      	cmp	r3, #0
 8005116:	d106      	bne.n	8005126 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	3324      	adds	r3, #36	; 0x24
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	68b9      	ldr	r1, [r7, #8]
 8005120:	4618      	mov	r0, r3
 8005122:	f000 fd53 	bl	8005bcc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005126:	6978      	ldr	r0, [r7, #20]
 8005128:	f7ff fefb 	bl	8004f22 <prvUnlockQueue>
	}
 800512c:	bf00      	nop
 800512e:	3718      	adds	r7, #24
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005134:	b580      	push	{r7, lr}
 8005136:	b08e      	sub	sp, #56	; 0x38
 8005138:	af04      	add	r7, sp, #16
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]
 8005140:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005144:	2b00      	cmp	r3, #0
 8005146:	d10c      	bne.n	8005162 <xTaskCreateStatic+0x2e>
	__asm volatile
 8005148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514c:	b672      	cpsid	i
 800514e:	f383 8811 	msr	BASEPRI, r3
 8005152:	f3bf 8f6f 	isb	sy
 8005156:	f3bf 8f4f 	dsb	sy
 800515a:	b662      	cpsie	i
 800515c:	623b      	str	r3, [r7, #32]
}
 800515e:	bf00      	nop
 8005160:	e7fe      	b.n	8005160 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8005162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005164:	2b00      	cmp	r3, #0
 8005166:	d10c      	bne.n	8005182 <xTaskCreateStatic+0x4e>
	__asm volatile
 8005168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800516c:	b672      	cpsid	i
 800516e:	f383 8811 	msr	BASEPRI, r3
 8005172:	f3bf 8f6f 	isb	sy
 8005176:	f3bf 8f4f 	dsb	sy
 800517a:	b662      	cpsie	i
 800517c:	61fb      	str	r3, [r7, #28]
}
 800517e:	bf00      	nop
 8005180:	e7fe      	b.n	8005180 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005182:	23bc      	movs	r3, #188	; 0xbc
 8005184:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	2bbc      	cmp	r3, #188	; 0xbc
 800518a:	d00c      	beq.n	80051a6 <xTaskCreateStatic+0x72>
	__asm volatile
 800518c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005190:	b672      	cpsid	i
 8005192:	f383 8811 	msr	BASEPRI, r3
 8005196:	f3bf 8f6f 	isb	sy
 800519a:	f3bf 8f4f 	dsb	sy
 800519e:	b662      	cpsie	i
 80051a0:	61bb      	str	r3, [r7, #24]
}
 80051a2:	bf00      	nop
 80051a4:	e7fe      	b.n	80051a4 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80051a6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80051a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d01e      	beq.n	80051ec <xTaskCreateStatic+0xb8>
 80051ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d01b      	beq.n	80051ec <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80051b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80051b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80051be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c0:	2202      	movs	r2, #2
 80051c2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80051c6:	2300      	movs	r3, #0
 80051c8:	9303      	str	r3, [sp, #12]
 80051ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051cc:	9302      	str	r3, [sp, #8]
 80051ce:	f107 0314 	add.w	r3, r7, #20
 80051d2:	9301      	str	r3, [sp, #4]
 80051d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d6:	9300      	str	r3, [sp, #0]
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	68b9      	ldr	r1, [r7, #8]
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f000 f850 	bl	8005284 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80051e6:	f000 f8f5 	bl	80053d4 <prvAddNewTaskToReadyList>
 80051ea:	e001      	b.n	80051f0 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80051ec:	2300      	movs	r3, #0
 80051ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80051f0:	697b      	ldr	r3, [r7, #20]
	}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3728      	adds	r7, #40	; 0x28
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}

080051fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80051fa:	b580      	push	{r7, lr}
 80051fc:	b08c      	sub	sp, #48	; 0x30
 80051fe:	af04      	add	r7, sp, #16
 8005200:	60f8      	str	r0, [r7, #12]
 8005202:	60b9      	str	r1, [r7, #8]
 8005204:	603b      	str	r3, [r7, #0]
 8005206:	4613      	mov	r3, r2
 8005208:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800520a:	88fb      	ldrh	r3, [r7, #6]
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	4618      	mov	r0, r3
 8005210:	f001 fd50 	bl	8006cb4 <pvPortMalloc>
 8005214:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00e      	beq.n	800523a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800521c:	20bc      	movs	r0, #188	; 0xbc
 800521e:	f001 fd49 	bl	8006cb4 <pvPortMalloc>
 8005222:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d003      	beq.n	8005232 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	631a      	str	r2, [r3, #48]	; 0x30
 8005230:	e005      	b.n	800523e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005232:	6978      	ldr	r0, [r7, #20]
 8005234:	f001 fe08 	bl	8006e48 <vPortFree>
 8005238:	e001      	b.n	800523e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800523a:	2300      	movs	r3, #0
 800523c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d017      	beq.n	8005274 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800524c:	88fa      	ldrh	r2, [r7, #6]
 800524e:	2300      	movs	r3, #0
 8005250:	9303      	str	r3, [sp, #12]
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	9302      	str	r3, [sp, #8]
 8005256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005258:	9301      	str	r3, [sp, #4]
 800525a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525c:	9300      	str	r3, [sp, #0]
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	68b9      	ldr	r1, [r7, #8]
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	f000 f80e 	bl	8005284 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005268:	69f8      	ldr	r0, [r7, #28]
 800526a:	f000 f8b3 	bl	80053d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800526e:	2301      	movs	r3, #1
 8005270:	61bb      	str	r3, [r7, #24]
 8005272:	e002      	b.n	800527a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005274:	f04f 33ff 	mov.w	r3, #4294967295
 8005278:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800527a:	69bb      	ldr	r3, [r7, #24]
	}
 800527c:	4618      	mov	r0, r3
 800527e:	3720      	adds	r7, #32
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b088      	sub	sp, #32
 8005288:	af00      	add	r7, sp, #0
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	607a      	str	r2, [r7, #4]
 8005290:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005294:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	461a      	mov	r2, r3
 800529c:	21a5      	movs	r1, #165	; 0xa5
 800529e:	f001 ff21 	bl	80070e4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80052a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052a6:	6879      	ldr	r1, [r7, #4]
 80052a8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80052ac:	440b      	add	r3, r1
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	4413      	add	r3, r2
 80052b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	f023 0307 	bic.w	r3, r3, #7
 80052ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	f003 0307 	and.w	r3, r3, #7
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00c      	beq.n	80052e0 <prvInitialiseNewTask+0x5c>
	__asm volatile
 80052c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ca:	b672      	cpsid	i
 80052cc:	f383 8811 	msr	BASEPRI, r3
 80052d0:	f3bf 8f6f 	isb	sy
 80052d4:	f3bf 8f4f 	dsb	sy
 80052d8:	b662      	cpsie	i
 80052da:	617b      	str	r3, [r7, #20]
}
 80052dc:	bf00      	nop
 80052de:	e7fe      	b.n	80052de <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d01f      	beq.n	8005326 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052e6:	2300      	movs	r3, #0
 80052e8:	61fb      	str	r3, [r7, #28]
 80052ea:	e012      	b.n	8005312 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	4413      	add	r3, r2
 80052f2:	7819      	ldrb	r1, [r3, #0]
 80052f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	4413      	add	r3, r2
 80052fa:	3334      	adds	r3, #52	; 0x34
 80052fc:	460a      	mov	r2, r1
 80052fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005300:	68ba      	ldr	r2, [r7, #8]
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	4413      	add	r3, r2
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d006      	beq.n	800531a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	3301      	adds	r3, #1
 8005310:	61fb      	str	r3, [r7, #28]
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	2b0f      	cmp	r3, #15
 8005316:	d9e9      	bls.n	80052ec <prvInitialiseNewTask+0x68>
 8005318:	e000      	b.n	800531c <prvInitialiseNewTask+0x98>
			{
				break;
 800531a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800531c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531e:	2200      	movs	r2, #0
 8005320:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005324:	e003      	b.n	800532e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005328:	2200      	movs	r2, #0
 800532a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800532e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005330:	2b37      	cmp	r3, #55	; 0x37
 8005332:	d901      	bls.n	8005338 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005334:	2337      	movs	r3, #55	; 0x37
 8005336:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800533c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800533e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005340:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005342:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005346:	2200      	movs	r2, #0
 8005348:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800534a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534c:	3304      	adds	r3, #4
 800534e:	4618      	mov	r0, r3
 8005350:	f7ff f84e 	bl	80043f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005356:	3318      	adds	r3, #24
 8005358:	4618      	mov	r0, r3
 800535a:	f7ff f849 	bl	80043f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800535e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005360:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005362:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005366:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800536a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800536e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005372:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005376:	2200      	movs	r2, #0
 8005378:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800537c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537e:	2200      	movs	r2, #0
 8005380:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005386:	3354      	adds	r3, #84	; 0x54
 8005388:	2260      	movs	r2, #96	; 0x60
 800538a:	2100      	movs	r1, #0
 800538c:	4618      	mov	r0, r3
 800538e:	f001 fea9 	bl	80070e4 <memset>
 8005392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005394:	4a0c      	ldr	r2, [pc, #48]	; (80053c8 <prvInitialiseNewTask+0x144>)
 8005396:	659a      	str	r2, [r3, #88]	; 0x58
 8005398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800539a:	4a0c      	ldr	r2, [pc, #48]	; (80053cc <prvInitialiseNewTask+0x148>)
 800539c:	65da      	str	r2, [r3, #92]	; 0x5c
 800539e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a0:	4a0b      	ldr	r2, [pc, #44]	; (80053d0 <prvInitialiseNewTask+0x14c>)
 80053a2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80053a4:	683a      	ldr	r2, [r7, #0]
 80053a6:	68f9      	ldr	r1, [r7, #12]
 80053a8:	69b8      	ldr	r0, [r7, #24]
 80053aa:	f001 fa47 	bl	800683c <pxPortInitialiseStack>
 80053ae:	4602      	mov	r2, r0
 80053b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80053b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d002      	beq.n	80053c0 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80053ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053be:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053c0:	bf00      	nop
 80053c2:	3720      	adds	r7, #32
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	08007368 	.word	0x08007368
 80053cc:	08007388 	.word	0x08007388
 80053d0:	08007348 	.word	0x08007348

080053d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80053dc:	f001 fb3e 	bl	8006a5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80053e0:	4b2d      	ldr	r3, [pc, #180]	; (8005498 <prvAddNewTaskToReadyList+0xc4>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	3301      	adds	r3, #1
 80053e6:	4a2c      	ldr	r2, [pc, #176]	; (8005498 <prvAddNewTaskToReadyList+0xc4>)
 80053e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80053ea:	4b2c      	ldr	r3, [pc, #176]	; (800549c <prvAddNewTaskToReadyList+0xc8>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d109      	bne.n	8005406 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80053f2:	4a2a      	ldr	r2, [pc, #168]	; (800549c <prvAddNewTaskToReadyList+0xc8>)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80053f8:	4b27      	ldr	r3, [pc, #156]	; (8005498 <prvAddNewTaskToReadyList+0xc4>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d110      	bne.n	8005422 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005400:	f000 fd18 	bl	8005e34 <prvInitialiseTaskLists>
 8005404:	e00d      	b.n	8005422 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005406:	4b26      	ldr	r3, [pc, #152]	; (80054a0 <prvAddNewTaskToReadyList+0xcc>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d109      	bne.n	8005422 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800540e:	4b23      	ldr	r3, [pc, #140]	; (800549c <prvAddNewTaskToReadyList+0xc8>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005418:	429a      	cmp	r2, r3
 800541a:	d802      	bhi.n	8005422 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800541c:	4a1f      	ldr	r2, [pc, #124]	; (800549c <prvAddNewTaskToReadyList+0xc8>)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005422:	4b20      	ldr	r3, [pc, #128]	; (80054a4 <prvAddNewTaskToReadyList+0xd0>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	3301      	adds	r3, #1
 8005428:	4a1e      	ldr	r2, [pc, #120]	; (80054a4 <prvAddNewTaskToReadyList+0xd0>)
 800542a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800542c:	4b1d      	ldr	r3, [pc, #116]	; (80054a4 <prvAddNewTaskToReadyList+0xd0>)
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005438:	4b1b      	ldr	r3, [pc, #108]	; (80054a8 <prvAddNewTaskToReadyList+0xd4>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	429a      	cmp	r2, r3
 800543e:	d903      	bls.n	8005448 <prvAddNewTaskToReadyList+0x74>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005444:	4a18      	ldr	r2, [pc, #96]	; (80054a8 <prvAddNewTaskToReadyList+0xd4>)
 8005446:	6013      	str	r3, [r2, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800544c:	4613      	mov	r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4413      	add	r3, r2
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	4a15      	ldr	r2, [pc, #84]	; (80054ac <prvAddNewTaskToReadyList+0xd8>)
 8005456:	441a      	add	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	3304      	adds	r3, #4
 800545c:	4619      	mov	r1, r3
 800545e:	4610      	mov	r0, r2
 8005460:	f7fe ffd3 	bl	800440a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005464:	f001 fb2e 	bl	8006ac4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005468:	4b0d      	ldr	r3, [pc, #52]	; (80054a0 <prvAddNewTaskToReadyList+0xcc>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00e      	beq.n	800548e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005470:	4b0a      	ldr	r3, [pc, #40]	; (800549c <prvAddNewTaskToReadyList+0xc8>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547a:	429a      	cmp	r2, r3
 800547c:	d207      	bcs.n	800548e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800547e:	4b0c      	ldr	r3, [pc, #48]	; (80054b0 <prvAddNewTaskToReadyList+0xdc>)
 8005480:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005484:	601a      	str	r2, [r3, #0]
 8005486:	f3bf 8f4f 	dsb	sy
 800548a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800548e:	bf00      	nop
 8005490:	3708      	adds	r7, #8
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	20000f18 	.word	0x20000f18
 800549c:	20000a44 	.word	0x20000a44
 80054a0:	20000f24 	.word	0x20000f24
 80054a4:	20000f34 	.word	0x20000f34
 80054a8:	20000f20 	.word	0x20000f20
 80054ac:	20000a48 	.word	0x20000a48
 80054b0:	e000ed04 	.word	0xe000ed04

080054b4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80054bc:	f001 face 	bl	8006a5c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d102      	bne.n	80054cc <vTaskDelete+0x18>
 80054c6:	4b2d      	ldr	r3, [pc, #180]	; (800557c <vTaskDelete+0xc8>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	e000      	b.n	80054ce <vTaskDelete+0x1a>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	3304      	adds	r3, #4
 80054d4:	4618      	mov	r0, r3
 80054d6:	f7fe fff5 	bl	80044c4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d004      	beq.n	80054ec <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	3318      	adds	r3, #24
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7fe ffec 	bl	80044c4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80054ec:	4b24      	ldr	r3, [pc, #144]	; (8005580 <vTaskDelete+0xcc>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	3301      	adds	r3, #1
 80054f2:	4a23      	ldr	r2, [pc, #140]	; (8005580 <vTaskDelete+0xcc>)
 80054f4:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80054f6:	4b21      	ldr	r3, [pc, #132]	; (800557c <vTaskDelete+0xc8>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d10b      	bne.n	8005518 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	3304      	adds	r3, #4
 8005504:	4619      	mov	r1, r3
 8005506:	481f      	ldr	r0, [pc, #124]	; (8005584 <vTaskDelete+0xd0>)
 8005508:	f7fe ff7f 	bl	800440a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800550c:	4b1e      	ldr	r3, [pc, #120]	; (8005588 <vTaskDelete+0xd4>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	3301      	adds	r3, #1
 8005512:	4a1d      	ldr	r2, [pc, #116]	; (8005588 <vTaskDelete+0xd4>)
 8005514:	6013      	str	r3, [r2, #0]
 8005516:	e009      	b.n	800552c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8005518:	4b1c      	ldr	r3, [pc, #112]	; (800558c <vTaskDelete+0xd8>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	3b01      	subs	r3, #1
 800551e:	4a1b      	ldr	r2, [pc, #108]	; (800558c <vTaskDelete+0xd8>)
 8005520:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f000 fcf4 	bl	8005f10 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8005528:	f000 fd28 	bl	8005f7c <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800552c:	f001 faca 	bl	8006ac4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8005530:	4b17      	ldr	r3, [pc, #92]	; (8005590 <vTaskDelete+0xdc>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d01d      	beq.n	8005574 <vTaskDelete+0xc0>
		{
			if( pxTCB == pxCurrentTCB )
 8005538:	4b10      	ldr	r3, [pc, #64]	; (800557c <vTaskDelete+0xc8>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	429a      	cmp	r2, r3
 8005540:	d118      	bne.n	8005574 <vTaskDelete+0xc0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8005542:	4b14      	ldr	r3, [pc, #80]	; (8005594 <vTaskDelete+0xe0>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00c      	beq.n	8005564 <vTaskDelete+0xb0>
	__asm volatile
 800554a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800554e:	b672      	cpsid	i
 8005550:	f383 8811 	msr	BASEPRI, r3
 8005554:	f3bf 8f6f 	isb	sy
 8005558:	f3bf 8f4f 	dsb	sy
 800555c:	b662      	cpsie	i
 800555e:	60bb      	str	r3, [r7, #8]
}
 8005560:	bf00      	nop
 8005562:	e7fe      	b.n	8005562 <vTaskDelete+0xae>
				portYIELD_WITHIN_API();
 8005564:	4b0c      	ldr	r3, [pc, #48]	; (8005598 <vTaskDelete+0xe4>)
 8005566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800556a:	601a      	str	r2, [r3, #0]
 800556c:	f3bf 8f4f 	dsb	sy
 8005570:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005574:	bf00      	nop
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	20000a44 	.word	0x20000a44
 8005580:	20000f34 	.word	0x20000f34
 8005584:	20000eec 	.word	0x20000eec
 8005588:	20000f00 	.word	0x20000f00
 800558c:	20000f18 	.word	0x20000f18
 8005590:	20000f24 	.word	0x20000f24
 8005594:	20000f40 	.word	0x20000f40
 8005598:	e000ed04 	.word	0xe000ed04

0800559c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80055a4:	2300      	movs	r3, #0
 80055a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d019      	beq.n	80055e2 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80055ae:	4b14      	ldr	r3, [pc, #80]	; (8005600 <vTaskDelay+0x64>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00c      	beq.n	80055d0 <vTaskDelay+0x34>
	__asm volatile
 80055b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ba:	b672      	cpsid	i
 80055bc:	f383 8811 	msr	BASEPRI, r3
 80055c0:	f3bf 8f6f 	isb	sy
 80055c4:	f3bf 8f4f 	dsb	sy
 80055c8:	b662      	cpsie	i
 80055ca:	60bb      	str	r3, [r7, #8]
}
 80055cc:	bf00      	nop
 80055ce:	e7fe      	b.n	80055ce <vTaskDelay+0x32>
			vTaskSuspendAll();
 80055d0:	f000 f8f6 	bl	80057c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80055d4:	2100      	movs	r1, #0
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 fd80 	bl	80060dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80055dc:	f000 f8fe 	bl	80057dc <xTaskResumeAll>
 80055e0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d107      	bne.n	80055f8 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80055e8:	4b06      	ldr	r3, [pc, #24]	; (8005604 <vTaskDelay+0x68>)
 80055ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055ee:	601a      	str	r2, [r3, #0]
 80055f0:	f3bf 8f4f 	dsb	sy
 80055f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80055f8:	bf00      	nop
 80055fa:	3710      	adds	r7, #16
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	20000f40 	.word	0x20000f40
 8005604:	e000ed04 	.word	0xe000ed04

08005608 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8005608:	b580      	push	{r7, lr}
 800560a:	b088      	sub	sp, #32
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d10c      	bne.n	8005634 <eTaskGetState+0x2c>
	__asm volatile
 800561a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561e:	b672      	cpsid	i
 8005620:	f383 8811 	msr	BASEPRI, r3
 8005624:	f3bf 8f6f 	isb	sy
 8005628:	f3bf 8f4f 	dsb	sy
 800562c:	b662      	cpsie	i
 800562e:	60bb      	str	r3, [r7, #8]
}
 8005630:	bf00      	nop
 8005632:	e7fe      	b.n	8005632 <eTaskGetState+0x2a>

		if( pxTCB == pxCurrentTCB )
 8005634:	4b23      	ldr	r3, [pc, #140]	; (80056c4 <eTaskGetState+0xbc>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	69ba      	ldr	r2, [r7, #24]
 800563a:	429a      	cmp	r2, r3
 800563c:	d102      	bne.n	8005644 <eTaskGetState+0x3c>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800563e:	2300      	movs	r3, #0
 8005640:	77fb      	strb	r3, [r7, #31]
 8005642:	e03a      	b.n	80056ba <eTaskGetState+0xb2>
		}
		else
		{
			taskENTER_CRITICAL();
 8005644:	f001 fa0a 	bl	8006a5c <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	695b      	ldr	r3, [r3, #20]
 800564c:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800564e:	4b1e      	ldr	r3, [pc, #120]	; (80056c8 <eTaskGetState+0xc0>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8005654:	4b1d      	ldr	r3, [pc, #116]	; (80056cc <eTaskGetState+0xc4>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800565a:	f001 fa33 	bl	8006ac4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	429a      	cmp	r2, r3
 8005664:	d003      	beq.n	800566e <eTaskGetState+0x66>
 8005666:	697a      	ldr	r2, [r7, #20]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	429a      	cmp	r2, r3
 800566c:	d102      	bne.n	8005674 <eTaskGetState+0x6c>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800566e:	2302      	movs	r3, #2
 8005670:	77fb      	strb	r3, [r7, #31]
 8005672:	e022      	b.n	80056ba <eTaskGetState+0xb2>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	4a16      	ldr	r2, [pc, #88]	; (80056d0 <eTaskGetState+0xc8>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d112      	bne.n	80056a2 <eTaskGetState+0x9a>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005680:	2b00      	cmp	r3, #0
 8005682:	d10b      	bne.n	800569c <eTaskGetState+0x94>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800568a:	b2db      	uxtb	r3, r3
 800568c:	2b01      	cmp	r3, #1
 800568e:	d102      	bne.n	8005696 <eTaskGetState+0x8e>
							{
								eReturn = eBlocked;
 8005690:	2302      	movs	r3, #2
 8005692:	77fb      	strb	r3, [r7, #31]
 8005694:	e011      	b.n	80056ba <eTaskGetState+0xb2>
							}
							else
							{
								eReturn = eSuspended;
 8005696:	2303      	movs	r3, #3
 8005698:	77fb      	strb	r3, [r7, #31]
 800569a:	e00e      	b.n	80056ba <eTaskGetState+0xb2>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800569c:	2302      	movs	r3, #2
 800569e:	77fb      	strb	r3, [r7, #31]
 80056a0:	e00b      	b.n	80056ba <eTaskGetState+0xb2>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	4a0b      	ldr	r2, [pc, #44]	; (80056d4 <eTaskGetState+0xcc>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d002      	beq.n	80056b0 <eTaskGetState+0xa8>
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d102      	bne.n	80056b6 <eTaskGetState+0xae>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 80056b0:	2304      	movs	r3, #4
 80056b2:	77fb      	strb	r3, [r7, #31]
 80056b4:	e001      	b.n	80056ba <eTaskGetState+0xb2>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 80056b6:	2301      	movs	r3, #1
 80056b8:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 80056ba:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80056bc:	4618      	mov	r0, r3
 80056be:	3720      	adds	r7, #32
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	20000a44 	.word	0x20000a44
 80056c8:	20000ed0 	.word	0x20000ed0
 80056cc:	20000ed4 	.word	0x20000ed4
 80056d0:	20000f04 	.word	0x20000f04
 80056d4:	20000eec 	.word	0x20000eec

080056d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b08a      	sub	sp, #40	; 0x28
 80056dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80056de:	2300      	movs	r3, #0
 80056e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80056e2:	2300      	movs	r3, #0
 80056e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80056e6:	463a      	mov	r2, r7
 80056e8:	1d39      	adds	r1, r7, #4
 80056ea:	f107 0308 	add.w	r3, r7, #8
 80056ee:	4618      	mov	r0, r3
 80056f0:	f7fe fe2a 	bl	8004348 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80056f4:	6839      	ldr	r1, [r7, #0]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	68ba      	ldr	r2, [r7, #8]
 80056fa:	9202      	str	r2, [sp, #8]
 80056fc:	9301      	str	r3, [sp, #4]
 80056fe:	2300      	movs	r3, #0
 8005700:	9300      	str	r3, [sp, #0]
 8005702:	2300      	movs	r3, #0
 8005704:	460a      	mov	r2, r1
 8005706:	4926      	ldr	r1, [pc, #152]	; (80057a0 <vTaskStartScheduler+0xc8>)
 8005708:	4826      	ldr	r0, [pc, #152]	; (80057a4 <vTaskStartScheduler+0xcc>)
 800570a:	f7ff fd13 	bl	8005134 <xTaskCreateStatic>
 800570e:	4603      	mov	r3, r0
 8005710:	4a25      	ldr	r2, [pc, #148]	; (80057a8 <vTaskStartScheduler+0xd0>)
 8005712:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005714:	4b24      	ldr	r3, [pc, #144]	; (80057a8 <vTaskStartScheduler+0xd0>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d002      	beq.n	8005722 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800571c:	2301      	movs	r3, #1
 800571e:	617b      	str	r3, [r7, #20]
 8005720:	e001      	b.n	8005726 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005722:	2300      	movs	r3, #0
 8005724:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d102      	bne.n	8005732 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800572c:	f000 fd2a 	bl	8006184 <xTimerCreateTimerTask>
 8005730:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d11d      	bne.n	8005774 <vTaskStartScheduler+0x9c>
	__asm volatile
 8005738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573c:	b672      	cpsid	i
 800573e:	f383 8811 	msr	BASEPRI, r3
 8005742:	f3bf 8f6f 	isb	sy
 8005746:	f3bf 8f4f 	dsb	sy
 800574a:	b662      	cpsie	i
 800574c:	613b      	str	r3, [r7, #16]
}
 800574e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005750:	4b16      	ldr	r3, [pc, #88]	; (80057ac <vTaskStartScheduler+0xd4>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	3354      	adds	r3, #84	; 0x54
 8005756:	4a16      	ldr	r2, [pc, #88]	; (80057b0 <vTaskStartScheduler+0xd8>)
 8005758:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800575a:	4b16      	ldr	r3, [pc, #88]	; (80057b4 <vTaskStartScheduler+0xdc>)
 800575c:	f04f 32ff 	mov.w	r2, #4294967295
 8005760:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005762:	4b15      	ldr	r3, [pc, #84]	; (80057b8 <vTaskStartScheduler+0xe0>)
 8005764:	2201      	movs	r2, #1
 8005766:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005768:	4b14      	ldr	r3, [pc, #80]	; (80057bc <vTaskStartScheduler+0xe4>)
 800576a:	2200      	movs	r2, #0
 800576c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800576e:	f001 f8f7 	bl	8006960 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005772:	e010      	b.n	8005796 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800577a:	d10c      	bne.n	8005796 <vTaskStartScheduler+0xbe>
	__asm volatile
 800577c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005780:	b672      	cpsid	i
 8005782:	f383 8811 	msr	BASEPRI, r3
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	b662      	cpsie	i
 8005790:	60fb      	str	r3, [r7, #12]
}
 8005792:	bf00      	nop
 8005794:	e7fe      	b.n	8005794 <vTaskStartScheduler+0xbc>
}
 8005796:	bf00      	nop
 8005798:	3718      	adds	r7, #24
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	080072c0 	.word	0x080072c0
 80057a4:	08005e05 	.word	0x08005e05
 80057a8:	20000f3c 	.word	0x20000f3c
 80057ac:	20000a44 	.word	0x20000a44
 80057b0:	20000014 	.word	0x20000014
 80057b4:	20000f38 	.word	0x20000f38
 80057b8:	20000f24 	.word	0x20000f24
 80057bc:	20000f1c 	.word	0x20000f1c

080057c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80057c0:	b480      	push	{r7}
 80057c2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80057c4:	4b04      	ldr	r3, [pc, #16]	; (80057d8 <vTaskSuspendAll+0x18>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	3301      	adds	r3, #1
 80057ca:	4a03      	ldr	r2, [pc, #12]	; (80057d8 <vTaskSuspendAll+0x18>)
 80057cc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80057ce:	bf00      	nop
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr
 80057d8:	20000f40 	.word	0x20000f40

080057dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80057e2:	2300      	movs	r3, #0
 80057e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80057e6:	2300      	movs	r3, #0
 80057e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80057ea:	4b43      	ldr	r3, [pc, #268]	; (80058f8 <xTaskResumeAll+0x11c>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d10c      	bne.n	800580c <xTaskResumeAll+0x30>
	__asm volatile
 80057f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f6:	b672      	cpsid	i
 80057f8:	f383 8811 	msr	BASEPRI, r3
 80057fc:	f3bf 8f6f 	isb	sy
 8005800:	f3bf 8f4f 	dsb	sy
 8005804:	b662      	cpsie	i
 8005806:	603b      	str	r3, [r7, #0]
}
 8005808:	bf00      	nop
 800580a:	e7fe      	b.n	800580a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800580c:	f001 f926 	bl	8006a5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005810:	4b39      	ldr	r3, [pc, #228]	; (80058f8 <xTaskResumeAll+0x11c>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	3b01      	subs	r3, #1
 8005816:	4a38      	ldr	r2, [pc, #224]	; (80058f8 <xTaskResumeAll+0x11c>)
 8005818:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800581a:	4b37      	ldr	r3, [pc, #220]	; (80058f8 <xTaskResumeAll+0x11c>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d162      	bne.n	80058e8 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005822:	4b36      	ldr	r3, [pc, #216]	; (80058fc <xTaskResumeAll+0x120>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d05e      	beq.n	80058e8 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800582a:	e02f      	b.n	800588c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800582c:	4b34      	ldr	r3, [pc, #208]	; (8005900 <xTaskResumeAll+0x124>)
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	3318      	adds	r3, #24
 8005838:	4618      	mov	r0, r3
 800583a:	f7fe fe43 	bl	80044c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	3304      	adds	r3, #4
 8005842:	4618      	mov	r0, r3
 8005844:	f7fe fe3e 	bl	80044c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800584c:	4b2d      	ldr	r3, [pc, #180]	; (8005904 <xTaskResumeAll+0x128>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	429a      	cmp	r2, r3
 8005852:	d903      	bls.n	800585c <xTaskResumeAll+0x80>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005858:	4a2a      	ldr	r2, [pc, #168]	; (8005904 <xTaskResumeAll+0x128>)
 800585a:	6013      	str	r3, [r2, #0]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005860:	4613      	mov	r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4413      	add	r3, r2
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	4a27      	ldr	r2, [pc, #156]	; (8005908 <xTaskResumeAll+0x12c>)
 800586a:	441a      	add	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	3304      	adds	r3, #4
 8005870:	4619      	mov	r1, r3
 8005872:	4610      	mov	r0, r2
 8005874:	f7fe fdc9 	bl	800440a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800587c:	4b23      	ldr	r3, [pc, #140]	; (800590c <xTaskResumeAll+0x130>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005882:	429a      	cmp	r2, r3
 8005884:	d302      	bcc.n	800588c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8005886:	4b22      	ldr	r3, [pc, #136]	; (8005910 <xTaskResumeAll+0x134>)
 8005888:	2201      	movs	r2, #1
 800588a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800588c:	4b1c      	ldr	r3, [pc, #112]	; (8005900 <xTaskResumeAll+0x124>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1cb      	bne.n	800582c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d001      	beq.n	800589e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800589a:	f000 fb6f 	bl	8005f7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800589e:	4b1d      	ldr	r3, [pc, #116]	; (8005914 <xTaskResumeAll+0x138>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d010      	beq.n	80058cc <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80058aa:	f000 f847 	bl	800593c <xTaskIncrementTick>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d002      	beq.n	80058ba <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80058b4:	4b16      	ldr	r3, [pc, #88]	; (8005910 <xTaskResumeAll+0x134>)
 80058b6:	2201      	movs	r2, #1
 80058b8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	3b01      	subs	r3, #1
 80058be:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1f1      	bne.n	80058aa <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80058c6:	4b13      	ldr	r3, [pc, #76]	; (8005914 <xTaskResumeAll+0x138>)
 80058c8:	2200      	movs	r2, #0
 80058ca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80058cc:	4b10      	ldr	r3, [pc, #64]	; (8005910 <xTaskResumeAll+0x134>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d009      	beq.n	80058e8 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80058d4:	2301      	movs	r3, #1
 80058d6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80058d8:	4b0f      	ldr	r3, [pc, #60]	; (8005918 <xTaskResumeAll+0x13c>)
 80058da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058de:	601a      	str	r2, [r3, #0]
 80058e0:	f3bf 8f4f 	dsb	sy
 80058e4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80058e8:	f001 f8ec 	bl	8006ac4 <vPortExitCritical>

	return xAlreadyYielded;
 80058ec:	68bb      	ldr	r3, [r7, #8]
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3710      	adds	r7, #16
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	20000f40 	.word	0x20000f40
 80058fc:	20000f18 	.word	0x20000f18
 8005900:	20000ed8 	.word	0x20000ed8
 8005904:	20000f20 	.word	0x20000f20
 8005908:	20000a48 	.word	0x20000a48
 800590c:	20000a44 	.word	0x20000a44
 8005910:	20000f2c 	.word	0x20000f2c
 8005914:	20000f28 	.word	0x20000f28
 8005918:	e000ed04 	.word	0xe000ed04

0800591c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005922:	4b05      	ldr	r3, [pc, #20]	; (8005938 <xTaskGetTickCount+0x1c>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005928:	687b      	ldr	r3, [r7, #4]
}
 800592a:	4618      	mov	r0, r3
 800592c:	370c      	adds	r7, #12
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop
 8005938:	20000f1c 	.word	0x20000f1c

0800593c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b086      	sub	sp, #24
 8005940:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005942:	2300      	movs	r3, #0
 8005944:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005946:	4b50      	ldr	r3, [pc, #320]	; (8005a88 <xTaskIncrementTick+0x14c>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2b00      	cmp	r3, #0
 800594c:	f040 808b 	bne.w	8005a66 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005950:	4b4e      	ldr	r3, [pc, #312]	; (8005a8c <xTaskIncrementTick+0x150>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	3301      	adds	r3, #1
 8005956:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005958:	4a4c      	ldr	r2, [pc, #304]	; (8005a8c <xTaskIncrementTick+0x150>)
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d122      	bne.n	80059aa <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8005964:	4b4a      	ldr	r3, [pc, #296]	; (8005a90 <xTaskIncrementTick+0x154>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00c      	beq.n	8005988 <xTaskIncrementTick+0x4c>
	__asm volatile
 800596e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005972:	b672      	cpsid	i
 8005974:	f383 8811 	msr	BASEPRI, r3
 8005978:	f3bf 8f6f 	isb	sy
 800597c:	f3bf 8f4f 	dsb	sy
 8005980:	b662      	cpsie	i
 8005982:	603b      	str	r3, [r7, #0]
}
 8005984:	bf00      	nop
 8005986:	e7fe      	b.n	8005986 <xTaskIncrementTick+0x4a>
 8005988:	4b41      	ldr	r3, [pc, #260]	; (8005a90 <xTaskIncrementTick+0x154>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	60fb      	str	r3, [r7, #12]
 800598e:	4b41      	ldr	r3, [pc, #260]	; (8005a94 <xTaskIncrementTick+0x158>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a3f      	ldr	r2, [pc, #252]	; (8005a90 <xTaskIncrementTick+0x154>)
 8005994:	6013      	str	r3, [r2, #0]
 8005996:	4a3f      	ldr	r2, [pc, #252]	; (8005a94 <xTaskIncrementTick+0x158>)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6013      	str	r3, [r2, #0]
 800599c:	4b3e      	ldr	r3, [pc, #248]	; (8005a98 <xTaskIncrementTick+0x15c>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	3301      	adds	r3, #1
 80059a2:	4a3d      	ldr	r2, [pc, #244]	; (8005a98 <xTaskIncrementTick+0x15c>)
 80059a4:	6013      	str	r3, [r2, #0]
 80059a6:	f000 fae9 	bl	8005f7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80059aa:	4b3c      	ldr	r3, [pc, #240]	; (8005a9c <xTaskIncrementTick+0x160>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	693a      	ldr	r2, [r7, #16]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d349      	bcc.n	8005a48 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059b4:	4b36      	ldr	r3, [pc, #216]	; (8005a90 <xTaskIncrementTick+0x154>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d104      	bne.n	80059c8 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059be:	4b37      	ldr	r3, [pc, #220]	; (8005a9c <xTaskIncrementTick+0x160>)
 80059c0:	f04f 32ff 	mov.w	r2, #4294967295
 80059c4:	601a      	str	r2, [r3, #0]
					break;
 80059c6:	e03f      	b.n	8005a48 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059c8:	4b31      	ldr	r3, [pc, #196]	; (8005a90 <xTaskIncrementTick+0x154>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d203      	bcs.n	80059e8 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80059e0:	4a2e      	ldr	r2, [pc, #184]	; (8005a9c <xTaskIncrementTick+0x160>)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80059e6:	e02f      	b.n	8005a48 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	3304      	adds	r3, #4
 80059ec:	4618      	mov	r0, r3
 80059ee:	f7fe fd69 	bl	80044c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d004      	beq.n	8005a04 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	3318      	adds	r3, #24
 80059fe:	4618      	mov	r0, r3
 8005a00:	f7fe fd60 	bl	80044c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a08:	4b25      	ldr	r3, [pc, #148]	; (8005aa0 <xTaskIncrementTick+0x164>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d903      	bls.n	8005a18 <xTaskIncrementTick+0xdc>
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a14:	4a22      	ldr	r2, [pc, #136]	; (8005aa0 <xTaskIncrementTick+0x164>)
 8005a16:	6013      	str	r3, [r2, #0]
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	4413      	add	r3, r2
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	4a1f      	ldr	r2, [pc, #124]	; (8005aa4 <xTaskIncrementTick+0x168>)
 8005a26:	441a      	add	r2, r3
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	3304      	adds	r3, #4
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	4610      	mov	r0, r2
 8005a30:	f7fe fceb 	bl	800440a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a38:	4b1b      	ldr	r3, [pc, #108]	; (8005aa8 <xTaskIncrementTick+0x16c>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d3b8      	bcc.n	80059b4 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8005a42:	2301      	movs	r3, #1
 8005a44:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a46:	e7b5      	b.n	80059b4 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a48:	4b17      	ldr	r3, [pc, #92]	; (8005aa8 <xTaskIncrementTick+0x16c>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a4e:	4915      	ldr	r1, [pc, #84]	; (8005aa4 <xTaskIncrementTick+0x168>)
 8005a50:	4613      	mov	r3, r2
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	4413      	add	r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	440b      	add	r3, r1
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d907      	bls.n	8005a70 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8005a60:	2301      	movs	r3, #1
 8005a62:	617b      	str	r3, [r7, #20]
 8005a64:	e004      	b.n	8005a70 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005a66:	4b11      	ldr	r3, [pc, #68]	; (8005aac <xTaskIncrementTick+0x170>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	4a0f      	ldr	r2, [pc, #60]	; (8005aac <xTaskIncrementTick+0x170>)
 8005a6e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005a70:	4b0f      	ldr	r3, [pc, #60]	; (8005ab0 <xTaskIncrementTick+0x174>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d001      	beq.n	8005a7c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005a7c:	697b      	ldr	r3, [r7, #20]
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3718      	adds	r7, #24
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	20000f40 	.word	0x20000f40
 8005a8c:	20000f1c 	.word	0x20000f1c
 8005a90:	20000ed0 	.word	0x20000ed0
 8005a94:	20000ed4 	.word	0x20000ed4
 8005a98:	20000f30 	.word	0x20000f30
 8005a9c:	20000f38 	.word	0x20000f38
 8005aa0:	20000f20 	.word	0x20000f20
 8005aa4:	20000a48 	.word	0x20000a48
 8005aa8:	20000a44 	.word	0x20000a44
 8005aac:	20000f28 	.word	0x20000f28
 8005ab0:	20000f2c 	.word	0x20000f2c

08005ab4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005aba:	4b2b      	ldr	r3, [pc, #172]	; (8005b68 <vTaskSwitchContext+0xb4>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d003      	beq.n	8005aca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005ac2:	4b2a      	ldr	r3, [pc, #168]	; (8005b6c <vTaskSwitchContext+0xb8>)
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005ac8:	e048      	b.n	8005b5c <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8005aca:	4b28      	ldr	r3, [pc, #160]	; (8005b6c <vTaskSwitchContext+0xb8>)
 8005acc:	2200      	movs	r2, #0
 8005ace:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ad0:	4b27      	ldr	r3, [pc, #156]	; (8005b70 <vTaskSwitchContext+0xbc>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	60fb      	str	r3, [r7, #12]
 8005ad6:	e012      	b.n	8005afe <vTaskSwitchContext+0x4a>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d10c      	bne.n	8005af8 <vTaskSwitchContext+0x44>
	__asm volatile
 8005ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae2:	b672      	cpsid	i
 8005ae4:	f383 8811 	msr	BASEPRI, r3
 8005ae8:	f3bf 8f6f 	isb	sy
 8005aec:	f3bf 8f4f 	dsb	sy
 8005af0:	b662      	cpsie	i
 8005af2:	607b      	str	r3, [r7, #4]
}
 8005af4:	bf00      	nop
 8005af6:	e7fe      	b.n	8005af6 <vTaskSwitchContext+0x42>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	3b01      	subs	r3, #1
 8005afc:	60fb      	str	r3, [r7, #12]
 8005afe:	491d      	ldr	r1, [pc, #116]	; (8005b74 <vTaskSwitchContext+0xc0>)
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	4613      	mov	r3, r2
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	4413      	add	r3, r2
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	440b      	add	r3, r1
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d0e2      	beq.n	8005ad8 <vTaskSwitchContext+0x24>
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	4613      	mov	r3, r2
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	4413      	add	r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	4a15      	ldr	r2, [pc, #84]	; (8005b74 <vTaskSwitchContext+0xc0>)
 8005b1e:	4413      	add	r3, r2
 8005b20:	60bb      	str	r3, [r7, #8]
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	685a      	ldr	r2, [r3, #4]
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	605a      	str	r2, [r3, #4]
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	685a      	ldr	r2, [r3, #4]
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	3308      	adds	r3, #8
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d104      	bne.n	8005b42 <vTaskSwitchContext+0x8e>
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	685a      	ldr	r2, [r3, #4]
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	605a      	str	r2, [r3, #4]
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	4a0b      	ldr	r2, [pc, #44]	; (8005b78 <vTaskSwitchContext+0xc4>)
 8005b4a:	6013      	str	r3, [r2, #0]
 8005b4c:	4a08      	ldr	r2, [pc, #32]	; (8005b70 <vTaskSwitchContext+0xbc>)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005b52:	4b09      	ldr	r3, [pc, #36]	; (8005b78 <vTaskSwitchContext+0xc4>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	3354      	adds	r3, #84	; 0x54
 8005b58:	4a08      	ldr	r2, [pc, #32]	; (8005b7c <vTaskSwitchContext+0xc8>)
 8005b5a:	6013      	str	r3, [r2, #0]
}
 8005b5c:	bf00      	nop
 8005b5e:	3714      	adds	r7, #20
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr
 8005b68:	20000f40 	.word	0x20000f40
 8005b6c:	20000f2c 	.word	0x20000f2c
 8005b70:	20000f20 	.word	0x20000f20
 8005b74:	20000a48 	.word	0x20000a48
 8005b78:	20000a44 	.word	0x20000a44
 8005b7c:	20000014 	.word	0x20000014

08005b80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d10c      	bne.n	8005baa <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8005b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b94:	b672      	cpsid	i
 8005b96:	f383 8811 	msr	BASEPRI, r3
 8005b9a:	f3bf 8f6f 	isb	sy
 8005b9e:	f3bf 8f4f 	dsb	sy
 8005ba2:	b662      	cpsie	i
 8005ba4:	60fb      	str	r3, [r7, #12]
}
 8005ba6:	bf00      	nop
 8005ba8:	e7fe      	b.n	8005ba8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005baa:	4b07      	ldr	r3, [pc, #28]	; (8005bc8 <vTaskPlaceOnEventList+0x48>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	3318      	adds	r3, #24
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f7fe fc4d 	bl	8004452 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005bb8:	2101      	movs	r1, #1
 8005bba:	6838      	ldr	r0, [r7, #0]
 8005bbc:	f000 fa8e 	bl	80060dc <prvAddCurrentTaskToDelayedList>
}
 8005bc0:	bf00      	nop
 8005bc2:	3710      	adds	r7, #16
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	20000a44 	.word	0x20000a44

08005bcc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b086      	sub	sp, #24
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d10c      	bne.n	8005bf8 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8005bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be2:	b672      	cpsid	i
 8005be4:	f383 8811 	msr	BASEPRI, r3
 8005be8:	f3bf 8f6f 	isb	sy
 8005bec:	f3bf 8f4f 	dsb	sy
 8005bf0:	b662      	cpsie	i
 8005bf2:	617b      	str	r3, [r7, #20]
}
 8005bf4:	bf00      	nop
 8005bf6:	e7fe      	b.n	8005bf6 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005bf8:	4b0a      	ldr	r3, [pc, #40]	; (8005c24 <vTaskPlaceOnEventListRestricted+0x58>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	3318      	adds	r3, #24
 8005bfe:	4619      	mov	r1, r3
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	f7fe fc02 	bl	800440a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d002      	beq.n	8005c12 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8005c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c10:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005c12:	6879      	ldr	r1, [r7, #4]
 8005c14:	68b8      	ldr	r0, [r7, #8]
 8005c16:	f000 fa61 	bl	80060dc <prvAddCurrentTaskToDelayedList>
	}
 8005c1a:	bf00      	nop
 8005c1c:	3718      	adds	r7, #24
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	20000a44 	.word	0x20000a44

08005c28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b086      	sub	sp, #24
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10c      	bne.n	8005c58 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8005c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c42:	b672      	cpsid	i
 8005c44:	f383 8811 	msr	BASEPRI, r3
 8005c48:	f3bf 8f6f 	isb	sy
 8005c4c:	f3bf 8f4f 	dsb	sy
 8005c50:	b662      	cpsie	i
 8005c52:	60fb      	str	r3, [r7, #12]
}
 8005c54:	bf00      	nop
 8005c56:	e7fe      	b.n	8005c56 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	3318      	adds	r3, #24
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f7fe fc31 	bl	80044c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c62:	4b1e      	ldr	r3, [pc, #120]	; (8005cdc <xTaskRemoveFromEventList+0xb4>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d11d      	bne.n	8005ca6 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	3304      	adds	r3, #4
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f7fe fc28 	bl	80044c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c78:	4b19      	ldr	r3, [pc, #100]	; (8005ce0 <xTaskRemoveFromEventList+0xb8>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d903      	bls.n	8005c88 <xTaskRemoveFromEventList+0x60>
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c84:	4a16      	ldr	r2, [pc, #88]	; (8005ce0 <xTaskRemoveFromEventList+0xb8>)
 8005c86:	6013      	str	r3, [r2, #0]
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	4413      	add	r3, r2
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	4a13      	ldr	r2, [pc, #76]	; (8005ce4 <xTaskRemoveFromEventList+0xbc>)
 8005c96:	441a      	add	r2, r3
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	3304      	adds	r3, #4
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	4610      	mov	r0, r2
 8005ca0:	f7fe fbb3 	bl	800440a <vListInsertEnd>
 8005ca4:	e005      	b.n	8005cb2 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	3318      	adds	r3, #24
 8005caa:	4619      	mov	r1, r3
 8005cac:	480e      	ldr	r0, [pc, #56]	; (8005ce8 <xTaskRemoveFromEventList+0xc0>)
 8005cae:	f7fe fbac 	bl	800440a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cb6:	4b0d      	ldr	r3, [pc, #52]	; (8005cec <xTaskRemoveFromEventList+0xc4>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d905      	bls.n	8005ccc <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005cc4:	4b0a      	ldr	r3, [pc, #40]	; (8005cf0 <xTaskRemoveFromEventList+0xc8>)
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	601a      	str	r2, [r3, #0]
 8005cca:	e001      	b.n	8005cd0 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005cd0:	697b      	ldr	r3, [r7, #20]
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3718      	adds	r7, #24
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	20000f40 	.word	0x20000f40
 8005ce0:	20000f20 	.word	0x20000f20
 8005ce4:	20000a48 	.word	0x20000a48
 8005ce8:	20000ed8 	.word	0x20000ed8
 8005cec:	20000a44 	.word	0x20000a44
 8005cf0:	20000f2c 	.word	0x20000f2c

08005cf4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005cfc:	4b06      	ldr	r3, [pc, #24]	; (8005d18 <vTaskInternalSetTimeOutState+0x24>)
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005d04:	4b05      	ldr	r3, [pc, #20]	; (8005d1c <vTaskInternalSetTimeOutState+0x28>)
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	605a      	str	r2, [r3, #4]
}
 8005d0c:	bf00      	nop
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr
 8005d18:	20000f30 	.word	0x20000f30
 8005d1c:	20000f1c 	.word	0x20000f1c

08005d20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b088      	sub	sp, #32
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d10c      	bne.n	8005d4a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8005d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d34:	b672      	cpsid	i
 8005d36:	f383 8811 	msr	BASEPRI, r3
 8005d3a:	f3bf 8f6f 	isb	sy
 8005d3e:	f3bf 8f4f 	dsb	sy
 8005d42:	b662      	cpsie	i
 8005d44:	613b      	str	r3, [r7, #16]
}
 8005d46:	bf00      	nop
 8005d48:	e7fe      	b.n	8005d48 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d10c      	bne.n	8005d6a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8005d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d54:	b672      	cpsid	i
 8005d56:	f383 8811 	msr	BASEPRI, r3
 8005d5a:	f3bf 8f6f 	isb	sy
 8005d5e:	f3bf 8f4f 	dsb	sy
 8005d62:	b662      	cpsie	i
 8005d64:	60fb      	str	r3, [r7, #12]
}
 8005d66:	bf00      	nop
 8005d68:	e7fe      	b.n	8005d68 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8005d6a:	f000 fe77 	bl	8006a5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005d6e:	4b1d      	ldr	r3, [pc, #116]	; (8005de4 <xTaskCheckForTimeOut+0xc4>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	69ba      	ldr	r2, [r7, #24]
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d86:	d102      	bne.n	8005d8e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	61fb      	str	r3, [r7, #28]
 8005d8c:	e023      	b.n	8005dd6 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	4b15      	ldr	r3, [pc, #84]	; (8005de8 <xTaskCheckForTimeOut+0xc8>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d007      	beq.n	8005daa <xTaskCheckForTimeOut+0x8a>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	69ba      	ldr	r2, [r7, #24]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d302      	bcc.n	8005daa <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005da4:	2301      	movs	r3, #1
 8005da6:	61fb      	str	r3, [r7, #28]
 8005da8:	e015      	b.n	8005dd6 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	697a      	ldr	r2, [r7, #20]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d20b      	bcs.n	8005dcc <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	1ad2      	subs	r2, r2, r3
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f7ff ff97 	bl	8005cf4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	61fb      	str	r3, [r7, #28]
 8005dca:	e004      	b.n	8005dd6 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005dd6:	f000 fe75 	bl	8006ac4 <vPortExitCritical>

	return xReturn;
 8005dda:	69fb      	ldr	r3, [r7, #28]
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3720      	adds	r7, #32
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	20000f1c 	.word	0x20000f1c
 8005de8:	20000f30 	.word	0x20000f30

08005dec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005dec:	b480      	push	{r7}
 8005dee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005df0:	4b03      	ldr	r3, [pc, #12]	; (8005e00 <vTaskMissedYield+0x14>)
 8005df2:	2201      	movs	r2, #1
 8005df4:	601a      	str	r2, [r3, #0]
}
 8005df6:	bf00      	nop
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr
 8005e00:	20000f2c 	.word	0x20000f2c

08005e04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005e0c:	f000 f852 	bl	8005eb4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e10:	4b06      	ldr	r3, [pc, #24]	; (8005e2c <prvIdleTask+0x28>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d9f9      	bls.n	8005e0c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005e18:	4b05      	ldr	r3, [pc, #20]	; (8005e30 <prvIdleTask+0x2c>)
 8005e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e1e:	601a      	str	r2, [r3, #0]
 8005e20:	f3bf 8f4f 	dsb	sy
 8005e24:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005e28:	e7f0      	b.n	8005e0c <prvIdleTask+0x8>
 8005e2a:	bf00      	nop
 8005e2c:	20000a48 	.word	0x20000a48
 8005e30:	e000ed04 	.word	0xe000ed04

08005e34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b082      	sub	sp, #8
 8005e38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	607b      	str	r3, [r7, #4]
 8005e3e:	e00c      	b.n	8005e5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	4613      	mov	r3, r2
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	4413      	add	r3, r2
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	4a12      	ldr	r2, [pc, #72]	; (8005e94 <prvInitialiseTaskLists+0x60>)
 8005e4c:	4413      	add	r3, r2
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f7fe faae 	bl	80043b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	3301      	adds	r3, #1
 8005e58:	607b      	str	r3, [r7, #4]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2b37      	cmp	r3, #55	; 0x37
 8005e5e:	d9ef      	bls.n	8005e40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005e60:	480d      	ldr	r0, [pc, #52]	; (8005e98 <prvInitialiseTaskLists+0x64>)
 8005e62:	f7fe faa5 	bl	80043b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005e66:	480d      	ldr	r0, [pc, #52]	; (8005e9c <prvInitialiseTaskLists+0x68>)
 8005e68:	f7fe faa2 	bl	80043b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005e6c:	480c      	ldr	r0, [pc, #48]	; (8005ea0 <prvInitialiseTaskLists+0x6c>)
 8005e6e:	f7fe fa9f 	bl	80043b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005e72:	480c      	ldr	r0, [pc, #48]	; (8005ea4 <prvInitialiseTaskLists+0x70>)
 8005e74:	f7fe fa9c 	bl	80043b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005e78:	480b      	ldr	r0, [pc, #44]	; (8005ea8 <prvInitialiseTaskLists+0x74>)
 8005e7a:	f7fe fa99 	bl	80043b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005e7e:	4b0b      	ldr	r3, [pc, #44]	; (8005eac <prvInitialiseTaskLists+0x78>)
 8005e80:	4a05      	ldr	r2, [pc, #20]	; (8005e98 <prvInitialiseTaskLists+0x64>)
 8005e82:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005e84:	4b0a      	ldr	r3, [pc, #40]	; (8005eb0 <prvInitialiseTaskLists+0x7c>)
 8005e86:	4a05      	ldr	r2, [pc, #20]	; (8005e9c <prvInitialiseTaskLists+0x68>)
 8005e88:	601a      	str	r2, [r3, #0]
}
 8005e8a:	bf00      	nop
 8005e8c:	3708      	adds	r7, #8
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	20000a48 	.word	0x20000a48
 8005e98:	20000ea8 	.word	0x20000ea8
 8005e9c:	20000ebc 	.word	0x20000ebc
 8005ea0:	20000ed8 	.word	0x20000ed8
 8005ea4:	20000eec 	.word	0x20000eec
 8005ea8:	20000f04 	.word	0x20000f04
 8005eac:	20000ed0 	.word	0x20000ed0
 8005eb0:	20000ed4 	.word	0x20000ed4

08005eb4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005eba:	e019      	b.n	8005ef0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005ebc:	f000 fdce 	bl	8006a5c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ec0:	4b10      	ldr	r3, [pc, #64]	; (8005f04 <prvCheckTasksWaitingTermination+0x50>)
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	3304      	adds	r3, #4
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f7fe faf9 	bl	80044c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005ed2:	4b0d      	ldr	r3, [pc, #52]	; (8005f08 <prvCheckTasksWaitingTermination+0x54>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	4a0b      	ldr	r2, [pc, #44]	; (8005f08 <prvCheckTasksWaitingTermination+0x54>)
 8005eda:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005edc:	4b0b      	ldr	r3, [pc, #44]	; (8005f0c <prvCheckTasksWaitingTermination+0x58>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	4a0a      	ldr	r2, [pc, #40]	; (8005f0c <prvCheckTasksWaitingTermination+0x58>)
 8005ee4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005ee6:	f000 fded 	bl	8006ac4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 f810 	bl	8005f10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ef0:	4b06      	ldr	r3, [pc, #24]	; (8005f0c <prvCheckTasksWaitingTermination+0x58>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d1e1      	bne.n	8005ebc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005ef8:	bf00      	nop
 8005efa:	bf00      	nop
 8005efc:	3708      	adds	r7, #8
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	20000eec 	.word	0x20000eec
 8005f08:	20000f18 	.word	0x20000f18
 8005f0c:	20000f00 	.word	0x20000f00

08005f10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	3354      	adds	r3, #84	; 0x54
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f001 f8f7 	bl	8007110 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d108      	bne.n	8005f3e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f30:	4618      	mov	r0, r3
 8005f32:	f000 ff89 	bl	8006e48 <vPortFree>
				vPortFree( pxTCB );
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 ff86 	bl	8006e48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005f3c:	e01a      	b.n	8005f74 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d103      	bne.n	8005f50 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 ff7d 	bl	8006e48 <vPortFree>
	}
 8005f4e:	e011      	b.n	8005f74 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	d00c      	beq.n	8005f74 <prvDeleteTCB+0x64>
	__asm volatile
 8005f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5e:	b672      	cpsid	i
 8005f60:	f383 8811 	msr	BASEPRI, r3
 8005f64:	f3bf 8f6f 	isb	sy
 8005f68:	f3bf 8f4f 	dsb	sy
 8005f6c:	b662      	cpsie	i
 8005f6e:	60fb      	str	r3, [r7, #12]
}
 8005f70:	bf00      	nop
 8005f72:	e7fe      	b.n	8005f72 <prvDeleteTCB+0x62>
	}
 8005f74:	bf00      	nop
 8005f76:	3710      	adds	r7, #16
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f82:	4b0c      	ldr	r3, [pc, #48]	; (8005fb4 <prvResetNextTaskUnblockTime+0x38>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d104      	bne.n	8005f96 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005f8c:	4b0a      	ldr	r3, [pc, #40]	; (8005fb8 <prvResetNextTaskUnblockTime+0x3c>)
 8005f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8005f92:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005f94:	e008      	b.n	8005fa8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f96:	4b07      	ldr	r3, [pc, #28]	; (8005fb4 <prvResetNextTaskUnblockTime+0x38>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	4a04      	ldr	r2, [pc, #16]	; (8005fb8 <prvResetNextTaskUnblockTime+0x3c>)
 8005fa6:	6013      	str	r3, [r2, #0]
}
 8005fa8:	bf00      	nop
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr
 8005fb4:	20000ed0 	.word	0x20000ed0
 8005fb8:	20000f38 	.word	0x20000f38

08005fbc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005fc2:	4b0b      	ldr	r3, [pc, #44]	; (8005ff0 <xTaskGetSchedulerState+0x34>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d102      	bne.n	8005fd0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	607b      	str	r3, [r7, #4]
 8005fce:	e008      	b.n	8005fe2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fd0:	4b08      	ldr	r3, [pc, #32]	; (8005ff4 <xTaskGetSchedulerState+0x38>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d102      	bne.n	8005fde <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005fd8:	2302      	movs	r3, #2
 8005fda:	607b      	str	r3, [r7, #4]
 8005fdc:	e001      	b.n	8005fe2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005fe2:	687b      	ldr	r3, [r7, #4]
	}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr
 8005ff0:	20000f24 	.word	0x20000f24
 8005ff4:	20000f40 	.word	0x20000f40

08005ff8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b086      	sub	sp, #24
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006004:	2300      	movs	r3, #0
 8006006:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d05a      	beq.n	80060c4 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800600e:	4b30      	ldr	r3, [pc, #192]	; (80060d0 <xTaskPriorityDisinherit+0xd8>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	693a      	ldr	r2, [r7, #16]
 8006014:	429a      	cmp	r2, r3
 8006016:	d00c      	beq.n	8006032 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8006018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601c:	b672      	cpsid	i
 800601e:	f383 8811 	msr	BASEPRI, r3
 8006022:	f3bf 8f6f 	isb	sy
 8006026:	f3bf 8f4f 	dsb	sy
 800602a:	b662      	cpsie	i
 800602c:	60fb      	str	r3, [r7, #12]
}
 800602e:	bf00      	nop
 8006030:	e7fe      	b.n	8006030 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10c      	bne.n	8006054 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800603a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800603e:	b672      	cpsid	i
 8006040:	f383 8811 	msr	BASEPRI, r3
 8006044:	f3bf 8f6f 	isb	sy
 8006048:	f3bf 8f4f 	dsb	sy
 800604c:	b662      	cpsie	i
 800604e:	60bb      	str	r3, [r7, #8]
}
 8006050:	bf00      	nop
 8006052:	e7fe      	b.n	8006052 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006058:	1e5a      	subs	r2, r3, #1
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006066:	429a      	cmp	r2, r3
 8006068:	d02c      	beq.n	80060c4 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800606e:	2b00      	cmp	r3, #0
 8006070:	d128      	bne.n	80060c4 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	3304      	adds	r3, #4
 8006076:	4618      	mov	r0, r3
 8006078:	f7fe fa24 	bl	80044c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006088:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006094:	4b0f      	ldr	r3, [pc, #60]	; (80060d4 <xTaskPriorityDisinherit+0xdc>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	429a      	cmp	r2, r3
 800609a:	d903      	bls.n	80060a4 <xTaskPriorityDisinherit+0xac>
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a0:	4a0c      	ldr	r2, [pc, #48]	; (80060d4 <xTaskPriorityDisinherit+0xdc>)
 80060a2:	6013      	str	r3, [r2, #0]
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060a8:	4613      	mov	r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	4413      	add	r3, r2
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	4a09      	ldr	r2, [pc, #36]	; (80060d8 <xTaskPriorityDisinherit+0xe0>)
 80060b2:	441a      	add	r2, r3
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	3304      	adds	r3, #4
 80060b8:	4619      	mov	r1, r3
 80060ba:	4610      	mov	r0, r2
 80060bc:	f7fe f9a5 	bl	800440a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80060c0:	2301      	movs	r3, #1
 80060c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80060c4:	697b      	ldr	r3, [r7, #20]
	}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3718      	adds	r7, #24
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	20000a44 	.word	0x20000a44
 80060d4:	20000f20 	.word	0x20000f20
 80060d8:	20000a48 	.word	0x20000a48

080060dc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80060e6:	4b21      	ldr	r3, [pc, #132]	; (800616c <prvAddCurrentTaskToDelayedList+0x90>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060ec:	4b20      	ldr	r3, [pc, #128]	; (8006170 <prvAddCurrentTaskToDelayedList+0x94>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	3304      	adds	r3, #4
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7fe f9e6 	bl	80044c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060fe:	d10a      	bne.n	8006116 <prvAddCurrentTaskToDelayedList+0x3a>
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d007      	beq.n	8006116 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006106:	4b1a      	ldr	r3, [pc, #104]	; (8006170 <prvAddCurrentTaskToDelayedList+0x94>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	3304      	adds	r3, #4
 800610c:	4619      	mov	r1, r3
 800610e:	4819      	ldr	r0, [pc, #100]	; (8006174 <prvAddCurrentTaskToDelayedList+0x98>)
 8006110:	f7fe f97b 	bl	800440a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006114:	e026      	b.n	8006164 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4413      	add	r3, r2
 800611c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800611e:	4b14      	ldr	r3, [pc, #80]	; (8006170 <prvAddCurrentTaskToDelayedList+0x94>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68ba      	ldr	r2, [r7, #8]
 8006124:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006126:	68ba      	ldr	r2, [r7, #8]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	429a      	cmp	r2, r3
 800612c:	d209      	bcs.n	8006142 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800612e:	4b12      	ldr	r3, [pc, #72]	; (8006178 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	4b0f      	ldr	r3, [pc, #60]	; (8006170 <prvAddCurrentTaskToDelayedList+0x94>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	3304      	adds	r3, #4
 8006138:	4619      	mov	r1, r3
 800613a:	4610      	mov	r0, r2
 800613c:	f7fe f989 	bl	8004452 <vListInsert>
}
 8006140:	e010      	b.n	8006164 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006142:	4b0e      	ldr	r3, [pc, #56]	; (800617c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	4b0a      	ldr	r3, [pc, #40]	; (8006170 <prvAddCurrentTaskToDelayedList+0x94>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	3304      	adds	r3, #4
 800614c:	4619      	mov	r1, r3
 800614e:	4610      	mov	r0, r2
 8006150:	f7fe f97f 	bl	8004452 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006154:	4b0a      	ldr	r3, [pc, #40]	; (8006180 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	429a      	cmp	r2, r3
 800615c:	d202      	bcs.n	8006164 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800615e:	4a08      	ldr	r2, [pc, #32]	; (8006180 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	6013      	str	r3, [r2, #0]
}
 8006164:	bf00      	nop
 8006166:	3710      	adds	r7, #16
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	20000f1c 	.word	0x20000f1c
 8006170:	20000a44 	.word	0x20000a44
 8006174:	20000f04 	.word	0x20000f04
 8006178:	20000ed4 	.word	0x20000ed4
 800617c:	20000ed0 	.word	0x20000ed0
 8006180:	20000f38 	.word	0x20000f38

08006184 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b08a      	sub	sp, #40	; 0x28
 8006188:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800618a:	2300      	movs	r3, #0
 800618c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800618e:	f000 fb15 	bl	80067bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006192:	4b1d      	ldr	r3, [pc, #116]	; (8006208 <xTimerCreateTimerTask+0x84>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d021      	beq.n	80061de <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800619a:	2300      	movs	r3, #0
 800619c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800619e:	2300      	movs	r3, #0
 80061a0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80061a2:	1d3a      	adds	r2, r7, #4
 80061a4:	f107 0108 	add.w	r1, r7, #8
 80061a8:	f107 030c 	add.w	r3, r7, #12
 80061ac:	4618      	mov	r0, r3
 80061ae:	f7fe f8e5 	bl	800437c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80061b2:	6879      	ldr	r1, [r7, #4]
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	9202      	str	r2, [sp, #8]
 80061ba:	9301      	str	r3, [sp, #4]
 80061bc:	2302      	movs	r3, #2
 80061be:	9300      	str	r3, [sp, #0]
 80061c0:	2300      	movs	r3, #0
 80061c2:	460a      	mov	r2, r1
 80061c4:	4911      	ldr	r1, [pc, #68]	; (800620c <xTimerCreateTimerTask+0x88>)
 80061c6:	4812      	ldr	r0, [pc, #72]	; (8006210 <xTimerCreateTimerTask+0x8c>)
 80061c8:	f7fe ffb4 	bl	8005134 <xTaskCreateStatic>
 80061cc:	4603      	mov	r3, r0
 80061ce:	4a11      	ldr	r2, [pc, #68]	; (8006214 <xTimerCreateTimerTask+0x90>)
 80061d0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80061d2:	4b10      	ldr	r3, [pc, #64]	; (8006214 <xTimerCreateTimerTask+0x90>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d001      	beq.n	80061de <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80061da:	2301      	movs	r3, #1
 80061dc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d10c      	bne.n	80061fe <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80061e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e8:	b672      	cpsid	i
 80061ea:	f383 8811 	msr	BASEPRI, r3
 80061ee:	f3bf 8f6f 	isb	sy
 80061f2:	f3bf 8f4f 	dsb	sy
 80061f6:	b662      	cpsie	i
 80061f8:	613b      	str	r3, [r7, #16]
}
 80061fa:	bf00      	nop
 80061fc:	e7fe      	b.n	80061fc <xTimerCreateTimerTask+0x78>
	return xReturn;
 80061fe:	697b      	ldr	r3, [r7, #20]
}
 8006200:	4618      	mov	r0, r3
 8006202:	3718      	adds	r7, #24
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	20000f74 	.word	0x20000f74
 800620c:	080072c8 	.word	0x080072c8
 8006210:	08006355 	.word	0x08006355
 8006214:	20000f78 	.word	0x20000f78

08006218 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b08a      	sub	sp, #40	; 0x28
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]
 8006224:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006226:	2300      	movs	r3, #0
 8006228:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d10c      	bne.n	800624a <xTimerGenericCommand+0x32>
	__asm volatile
 8006230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006234:	b672      	cpsid	i
 8006236:	f383 8811 	msr	BASEPRI, r3
 800623a:	f3bf 8f6f 	isb	sy
 800623e:	f3bf 8f4f 	dsb	sy
 8006242:	b662      	cpsie	i
 8006244:	623b      	str	r3, [r7, #32]
}
 8006246:	bf00      	nop
 8006248:	e7fe      	b.n	8006248 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800624a:	4b1a      	ldr	r3, [pc, #104]	; (80062b4 <xTimerGenericCommand+0x9c>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d02a      	beq.n	80062a8 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	2b05      	cmp	r3, #5
 8006262:	dc18      	bgt.n	8006296 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006264:	f7ff feaa 	bl	8005fbc <xTaskGetSchedulerState>
 8006268:	4603      	mov	r3, r0
 800626a:	2b02      	cmp	r3, #2
 800626c:	d109      	bne.n	8006282 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800626e:	4b11      	ldr	r3, [pc, #68]	; (80062b4 <xTimerGenericCommand+0x9c>)
 8006270:	6818      	ldr	r0, [r3, #0]
 8006272:	f107 0110 	add.w	r1, r7, #16
 8006276:	2300      	movs	r3, #0
 8006278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800627a:	f7fe fb11 	bl	80048a0 <xQueueGenericSend>
 800627e:	6278      	str	r0, [r7, #36]	; 0x24
 8006280:	e012      	b.n	80062a8 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006282:	4b0c      	ldr	r3, [pc, #48]	; (80062b4 <xTimerGenericCommand+0x9c>)
 8006284:	6818      	ldr	r0, [r3, #0]
 8006286:	f107 0110 	add.w	r1, r7, #16
 800628a:	2300      	movs	r3, #0
 800628c:	2200      	movs	r2, #0
 800628e:	f7fe fb07 	bl	80048a0 <xQueueGenericSend>
 8006292:	6278      	str	r0, [r7, #36]	; 0x24
 8006294:	e008      	b.n	80062a8 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006296:	4b07      	ldr	r3, [pc, #28]	; (80062b4 <xTimerGenericCommand+0x9c>)
 8006298:	6818      	ldr	r0, [r3, #0]
 800629a:	f107 0110 	add.w	r1, r7, #16
 800629e:	2300      	movs	r3, #0
 80062a0:	683a      	ldr	r2, [r7, #0]
 80062a2:	f7fe fc03 	bl	8004aac <xQueueGenericSendFromISR>
 80062a6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80062a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3728      	adds	r7, #40	; 0x28
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	bf00      	nop
 80062b4:	20000f74 	.word	0x20000f74

080062b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b088      	sub	sp, #32
 80062bc:	af02      	add	r7, sp, #8
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062c2:	4b23      	ldr	r3, [pc, #140]	; (8006350 <prvProcessExpiredTimer+0x98>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	3304      	adds	r3, #4
 80062d0:	4618      	mov	r0, r3
 80062d2:	f7fe f8f7 	bl	80044c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062dc:	f003 0304 	and.w	r3, r3, #4
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d024      	beq.n	800632e <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	699a      	ldr	r2, [r3, #24]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	18d1      	adds	r1, r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	683a      	ldr	r2, [r7, #0]
 80062f0:	6978      	ldr	r0, [r7, #20]
 80062f2:	f000 f8d3 	bl	800649c <prvInsertTimerInActiveList>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d021      	beq.n	8006340 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80062fc:	2300      	movs	r3, #0
 80062fe:	9300      	str	r3, [sp, #0]
 8006300:	2300      	movs	r3, #0
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	2100      	movs	r1, #0
 8006306:	6978      	ldr	r0, [r7, #20]
 8006308:	f7ff ff86 	bl	8006218 <xTimerGenericCommand>
 800630c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d115      	bne.n	8006340 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8006314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006318:	b672      	cpsid	i
 800631a:	f383 8811 	msr	BASEPRI, r3
 800631e:	f3bf 8f6f 	isb	sy
 8006322:	f3bf 8f4f 	dsb	sy
 8006326:	b662      	cpsie	i
 8006328:	60fb      	str	r3, [r7, #12]
}
 800632a:	bf00      	nop
 800632c:	e7fe      	b.n	800632c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006334:	f023 0301 	bic.w	r3, r3, #1
 8006338:	b2da      	uxtb	r2, r3
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	6a1b      	ldr	r3, [r3, #32]
 8006344:	6978      	ldr	r0, [r7, #20]
 8006346:	4798      	blx	r3
}
 8006348:	bf00      	nop
 800634a:	3718      	adds	r7, #24
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}
 8006350:	20000f6c 	.word	0x20000f6c

08006354 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800635c:	f107 0308 	add.w	r3, r7, #8
 8006360:	4618      	mov	r0, r3
 8006362:	f000 f857 	bl	8006414 <prvGetNextExpireTime>
 8006366:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	4619      	mov	r1, r3
 800636c:	68f8      	ldr	r0, [r7, #12]
 800636e:	f000 f803 	bl	8006378 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006372:	f000 f8d5 	bl	8006520 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006376:	e7f1      	b.n	800635c <prvTimerTask+0x8>

08006378 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006382:	f7ff fa1d 	bl	80057c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006386:	f107 0308 	add.w	r3, r7, #8
 800638a:	4618      	mov	r0, r3
 800638c:	f000 f866 	bl	800645c <prvSampleTimeNow>
 8006390:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d130      	bne.n	80063fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d10a      	bne.n	80063b4 <prvProcessTimerOrBlockTask+0x3c>
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d806      	bhi.n	80063b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80063a6:	f7ff fa19 	bl	80057dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80063aa:	68f9      	ldr	r1, [r7, #12]
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f7ff ff83 	bl	80062b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80063b2:	e024      	b.n	80063fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d008      	beq.n	80063cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80063ba:	4b13      	ldr	r3, [pc, #76]	; (8006408 <prvProcessTimerOrBlockTask+0x90>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d101      	bne.n	80063c8 <prvProcessTimerOrBlockTask+0x50>
 80063c4:	2301      	movs	r3, #1
 80063c6:	e000      	b.n	80063ca <prvProcessTimerOrBlockTask+0x52>
 80063c8:	2300      	movs	r3, #0
 80063ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80063cc:	4b0f      	ldr	r3, [pc, #60]	; (800640c <prvProcessTimerOrBlockTask+0x94>)
 80063ce:	6818      	ldr	r0, [r3, #0]
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	1ad3      	subs	r3, r2, r3
 80063d6:	683a      	ldr	r2, [r7, #0]
 80063d8:	4619      	mov	r1, r3
 80063da:	f7fe fe77 	bl	80050cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80063de:	f7ff f9fd 	bl	80057dc <xTaskResumeAll>
 80063e2:	4603      	mov	r3, r0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d10a      	bne.n	80063fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80063e8:	4b09      	ldr	r3, [pc, #36]	; (8006410 <prvProcessTimerOrBlockTask+0x98>)
 80063ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063ee:	601a      	str	r2, [r3, #0]
 80063f0:	f3bf 8f4f 	dsb	sy
 80063f4:	f3bf 8f6f 	isb	sy
}
 80063f8:	e001      	b.n	80063fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80063fa:	f7ff f9ef 	bl	80057dc <xTaskResumeAll>
}
 80063fe:	bf00      	nop
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	20000f70 	.word	0x20000f70
 800640c:	20000f74 	.word	0x20000f74
 8006410:	e000ed04 	.word	0xe000ed04

08006414 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800641c:	4b0e      	ldr	r3, [pc, #56]	; (8006458 <prvGetNextExpireTime+0x44>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d101      	bne.n	800642a <prvGetNextExpireTime+0x16>
 8006426:	2201      	movs	r2, #1
 8006428:	e000      	b.n	800642c <prvGetNextExpireTime+0x18>
 800642a:	2200      	movs	r2, #0
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d105      	bne.n	8006444 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006438:	4b07      	ldr	r3, [pc, #28]	; (8006458 <prvGetNextExpireTime+0x44>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	60fb      	str	r3, [r7, #12]
 8006442:	e001      	b.n	8006448 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006444:	2300      	movs	r3, #0
 8006446:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006448:	68fb      	ldr	r3, [r7, #12]
}
 800644a:	4618      	mov	r0, r3
 800644c:	3714      	adds	r7, #20
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop
 8006458:	20000f6c 	.word	0x20000f6c

0800645c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006464:	f7ff fa5a 	bl	800591c <xTaskGetTickCount>
 8006468:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800646a:	4b0b      	ldr	r3, [pc, #44]	; (8006498 <prvSampleTimeNow+0x3c>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	429a      	cmp	r2, r3
 8006472:	d205      	bcs.n	8006480 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006474:	f000 f93c 	bl	80066f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	601a      	str	r2, [r3, #0]
 800647e:	e002      	b.n	8006486 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006486:	4a04      	ldr	r2, [pc, #16]	; (8006498 <prvSampleTimeNow+0x3c>)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800648c:	68fb      	ldr	r3, [r7, #12]
}
 800648e:	4618      	mov	r0, r3
 8006490:	3710      	adds	r7, #16
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	20000f7c 	.word	0x20000f7c

0800649c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b086      	sub	sp, #24
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]
 80064a8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80064aa:	2300      	movs	r3, #0
 80064ac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	68ba      	ldr	r2, [r7, #8]
 80064b2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	68fa      	ldr	r2, [r7, #12]
 80064b8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80064ba:	68ba      	ldr	r2, [r7, #8]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d812      	bhi.n	80064e8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	1ad2      	subs	r2, r2, r3
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	699b      	ldr	r3, [r3, #24]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d302      	bcc.n	80064d6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80064d0:	2301      	movs	r3, #1
 80064d2:	617b      	str	r3, [r7, #20]
 80064d4:	e01b      	b.n	800650e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80064d6:	4b10      	ldr	r3, [pc, #64]	; (8006518 <prvInsertTimerInActiveList+0x7c>)
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	3304      	adds	r3, #4
 80064de:	4619      	mov	r1, r3
 80064e0:	4610      	mov	r0, r2
 80064e2:	f7fd ffb6 	bl	8004452 <vListInsert>
 80064e6:	e012      	b.n	800650e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d206      	bcs.n	80064fe <prvInsertTimerInActiveList+0x62>
 80064f0:	68ba      	ldr	r2, [r7, #8]
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d302      	bcc.n	80064fe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80064f8:	2301      	movs	r3, #1
 80064fa:	617b      	str	r3, [r7, #20]
 80064fc:	e007      	b.n	800650e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80064fe:	4b07      	ldr	r3, [pc, #28]	; (800651c <prvInsertTimerInActiveList+0x80>)
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	3304      	adds	r3, #4
 8006506:	4619      	mov	r1, r3
 8006508:	4610      	mov	r0, r2
 800650a:	f7fd ffa2 	bl	8004452 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800650e:	697b      	ldr	r3, [r7, #20]
}
 8006510:	4618      	mov	r0, r3
 8006512:	3718      	adds	r7, #24
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}
 8006518:	20000f70 	.word	0x20000f70
 800651c:	20000f6c 	.word	0x20000f6c

08006520 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b08e      	sub	sp, #56	; 0x38
 8006524:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006526:	e0d0      	b.n	80066ca <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2b00      	cmp	r3, #0
 800652c:	da1a      	bge.n	8006564 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800652e:	1d3b      	adds	r3, r7, #4
 8006530:	3304      	adds	r3, #4
 8006532:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10c      	bne.n	8006554 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800653a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800653e:	b672      	cpsid	i
 8006540:	f383 8811 	msr	BASEPRI, r3
 8006544:	f3bf 8f6f 	isb	sy
 8006548:	f3bf 8f4f 	dsb	sy
 800654c:	b662      	cpsie	i
 800654e:	61fb      	str	r3, [r7, #28]
}
 8006550:	bf00      	nop
 8006552:	e7fe      	b.n	8006552 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800655a:	6850      	ldr	r0, [r2, #4]
 800655c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800655e:	6892      	ldr	r2, [r2, #8]
 8006560:	4611      	mov	r1, r2
 8006562:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2b00      	cmp	r3, #0
 8006568:	f2c0 80ae 	blt.w	80066c8 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006572:	695b      	ldr	r3, [r3, #20]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d004      	beq.n	8006582 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657a:	3304      	adds	r3, #4
 800657c:	4618      	mov	r0, r3
 800657e:	f7fd ffa1 	bl	80044c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006582:	463b      	mov	r3, r7
 8006584:	4618      	mov	r0, r3
 8006586:	f7ff ff69 	bl	800645c <prvSampleTimeNow>
 800658a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2b09      	cmp	r3, #9
 8006590:	f200 809b 	bhi.w	80066ca <prvProcessReceivedCommands+0x1aa>
 8006594:	a201      	add	r2, pc, #4	; (adr r2, 800659c <prvProcessReceivedCommands+0x7c>)
 8006596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800659a:	bf00      	nop
 800659c:	080065c5 	.word	0x080065c5
 80065a0:	080065c5 	.word	0x080065c5
 80065a4:	080065c5 	.word	0x080065c5
 80065a8:	0800663d 	.word	0x0800663d
 80065ac:	08006651 	.word	0x08006651
 80065b0:	0800669f 	.word	0x0800669f
 80065b4:	080065c5 	.word	0x080065c5
 80065b8:	080065c5 	.word	0x080065c5
 80065bc:	0800663d 	.word	0x0800663d
 80065c0:	08006651 	.word	0x08006651
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80065c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065ca:	f043 0301 	orr.w	r3, r3, #1
 80065ce:	b2da      	uxtb	r2, r3
 80065d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80065d6:	68ba      	ldr	r2, [r7, #8]
 80065d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	18d1      	adds	r1, r2, r3
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065e4:	f7ff ff5a 	bl	800649c <prvInsertTimerInActiveList>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d06d      	beq.n	80066ca <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f0:	6a1b      	ldr	r3, [r3, #32]
 80065f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065f4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80065f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065fc:	f003 0304 	and.w	r3, r3, #4
 8006600:	2b00      	cmp	r3, #0
 8006602:	d062      	beq.n	80066ca <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006604:	68ba      	ldr	r2, [r7, #8]
 8006606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006608:	699b      	ldr	r3, [r3, #24]
 800660a:	441a      	add	r2, r3
 800660c:	2300      	movs	r3, #0
 800660e:	9300      	str	r3, [sp, #0]
 8006610:	2300      	movs	r3, #0
 8006612:	2100      	movs	r1, #0
 8006614:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006616:	f7ff fdff 	bl	8006218 <xTimerGenericCommand>
 800661a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800661c:	6a3b      	ldr	r3, [r7, #32]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d153      	bne.n	80066ca <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8006622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006626:	b672      	cpsid	i
 8006628:	f383 8811 	msr	BASEPRI, r3
 800662c:	f3bf 8f6f 	isb	sy
 8006630:	f3bf 8f4f 	dsb	sy
 8006634:	b662      	cpsie	i
 8006636:	61bb      	str	r3, [r7, #24]
}
 8006638:	bf00      	nop
 800663a:	e7fe      	b.n	800663a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800663c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006642:	f023 0301 	bic.w	r3, r3, #1
 8006646:	b2da      	uxtb	r2, r3
 8006648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800664e:	e03c      	b.n	80066ca <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006652:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006656:	f043 0301 	orr.w	r3, r3, #1
 800665a:	b2da      	uxtb	r2, r3
 800665c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006662:	68ba      	ldr	r2, [r7, #8]
 8006664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006666:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d10c      	bne.n	800668a <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8006670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006674:	b672      	cpsid	i
 8006676:	f383 8811 	msr	BASEPRI, r3
 800667a:	f3bf 8f6f 	isb	sy
 800667e:	f3bf 8f4f 	dsb	sy
 8006682:	b662      	cpsie	i
 8006684:	617b      	str	r3, [r7, #20]
}
 8006686:	bf00      	nop
 8006688:	e7fe      	b.n	8006688 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800668a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668c:	699a      	ldr	r2, [r3, #24]
 800668e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006690:	18d1      	adds	r1, r2, r3
 8006692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006696:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006698:	f7ff ff00 	bl	800649c <prvInsertTimerInActiveList>
					break;
 800669c:	e015      	b.n	80066ca <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800669e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066a4:	f003 0302 	and.w	r3, r3, #2
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d103      	bne.n	80066b4 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 80066ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066ae:	f000 fbcb 	bl	8006e48 <vPortFree>
 80066b2:	e00a      	b.n	80066ca <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80066b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066ba:	f023 0301 	bic.w	r3, r3, #1
 80066be:	b2da      	uxtb	r2, r3
 80066c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80066c6:	e000      	b.n	80066ca <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80066c8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80066ca:	4b08      	ldr	r3, [pc, #32]	; (80066ec <prvProcessReceivedCommands+0x1cc>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	1d39      	adds	r1, r7, #4
 80066d0:	2200      	movs	r2, #0
 80066d2:	4618      	mov	r0, r3
 80066d4:	f7fe fa8a 	bl	8004bec <xQueueReceive>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	f47f af24 	bne.w	8006528 <prvProcessReceivedCommands+0x8>
	}
}
 80066e0:	bf00      	nop
 80066e2:	bf00      	nop
 80066e4:	3730      	adds	r7, #48	; 0x30
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	20000f74 	.word	0x20000f74

080066f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b088      	sub	sp, #32
 80066f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80066f6:	e04a      	b.n	800678e <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80066f8:	4b2e      	ldr	r3, [pc, #184]	; (80067b4 <prvSwitchTimerLists+0xc4>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006702:	4b2c      	ldr	r3, [pc, #176]	; (80067b4 <prvSwitchTimerLists+0xc4>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	3304      	adds	r3, #4
 8006710:	4618      	mov	r0, r3
 8006712:	f7fd fed7 	bl	80044c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	68f8      	ldr	r0, [r7, #12]
 800671c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006724:	f003 0304 	and.w	r3, r3, #4
 8006728:	2b00      	cmp	r3, #0
 800672a:	d030      	beq.n	800678e <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	699b      	ldr	r3, [r3, #24]
 8006730:	693a      	ldr	r2, [r7, #16]
 8006732:	4413      	add	r3, r2
 8006734:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006736:	68ba      	ldr	r2, [r7, #8]
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	429a      	cmp	r2, r3
 800673c:	d90e      	bls.n	800675c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	68ba      	ldr	r2, [r7, #8]
 8006742:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800674a:	4b1a      	ldr	r3, [pc, #104]	; (80067b4 <prvSwitchTimerLists+0xc4>)
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	3304      	adds	r3, #4
 8006752:	4619      	mov	r1, r3
 8006754:	4610      	mov	r0, r2
 8006756:	f7fd fe7c 	bl	8004452 <vListInsert>
 800675a:	e018      	b.n	800678e <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800675c:	2300      	movs	r3, #0
 800675e:	9300      	str	r3, [sp, #0]
 8006760:	2300      	movs	r3, #0
 8006762:	693a      	ldr	r2, [r7, #16]
 8006764:	2100      	movs	r1, #0
 8006766:	68f8      	ldr	r0, [r7, #12]
 8006768:	f7ff fd56 	bl	8006218 <xTimerGenericCommand>
 800676c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d10c      	bne.n	800678e <prvSwitchTimerLists+0x9e>
	__asm volatile
 8006774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006778:	b672      	cpsid	i
 800677a:	f383 8811 	msr	BASEPRI, r3
 800677e:	f3bf 8f6f 	isb	sy
 8006782:	f3bf 8f4f 	dsb	sy
 8006786:	b662      	cpsie	i
 8006788:	603b      	str	r3, [r7, #0]
}
 800678a:	bf00      	nop
 800678c:	e7fe      	b.n	800678c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800678e:	4b09      	ldr	r3, [pc, #36]	; (80067b4 <prvSwitchTimerLists+0xc4>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d1af      	bne.n	80066f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006798:	4b06      	ldr	r3, [pc, #24]	; (80067b4 <prvSwitchTimerLists+0xc4>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800679e:	4b06      	ldr	r3, [pc, #24]	; (80067b8 <prvSwitchTimerLists+0xc8>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a04      	ldr	r2, [pc, #16]	; (80067b4 <prvSwitchTimerLists+0xc4>)
 80067a4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80067a6:	4a04      	ldr	r2, [pc, #16]	; (80067b8 <prvSwitchTimerLists+0xc8>)
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	6013      	str	r3, [r2, #0]
}
 80067ac:	bf00      	nop
 80067ae:	3718      	adds	r7, #24
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	20000f6c 	.word	0x20000f6c
 80067b8:	20000f70 	.word	0x20000f70

080067bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80067c2:	f000 f94b 	bl	8006a5c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80067c6:	4b15      	ldr	r3, [pc, #84]	; (800681c <prvCheckForValidListAndQueue+0x60>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d120      	bne.n	8006810 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80067ce:	4814      	ldr	r0, [pc, #80]	; (8006820 <prvCheckForValidListAndQueue+0x64>)
 80067d0:	f7fd fdee 	bl	80043b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80067d4:	4813      	ldr	r0, [pc, #76]	; (8006824 <prvCheckForValidListAndQueue+0x68>)
 80067d6:	f7fd fdeb 	bl	80043b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80067da:	4b13      	ldr	r3, [pc, #76]	; (8006828 <prvCheckForValidListAndQueue+0x6c>)
 80067dc:	4a10      	ldr	r2, [pc, #64]	; (8006820 <prvCheckForValidListAndQueue+0x64>)
 80067de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80067e0:	4b12      	ldr	r3, [pc, #72]	; (800682c <prvCheckForValidListAndQueue+0x70>)
 80067e2:	4a10      	ldr	r2, [pc, #64]	; (8006824 <prvCheckForValidListAndQueue+0x68>)
 80067e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80067e6:	2300      	movs	r3, #0
 80067e8:	9300      	str	r3, [sp, #0]
 80067ea:	4b11      	ldr	r3, [pc, #68]	; (8006830 <prvCheckForValidListAndQueue+0x74>)
 80067ec:	4a11      	ldr	r2, [pc, #68]	; (8006834 <prvCheckForValidListAndQueue+0x78>)
 80067ee:	2110      	movs	r1, #16
 80067f0:	200a      	movs	r0, #10
 80067f2:	f7fd fefb 	bl	80045ec <xQueueGenericCreateStatic>
 80067f6:	4603      	mov	r3, r0
 80067f8:	4a08      	ldr	r2, [pc, #32]	; (800681c <prvCheckForValidListAndQueue+0x60>)
 80067fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80067fc:	4b07      	ldr	r3, [pc, #28]	; (800681c <prvCheckForValidListAndQueue+0x60>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d005      	beq.n	8006810 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006804:	4b05      	ldr	r3, [pc, #20]	; (800681c <prvCheckForValidListAndQueue+0x60>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	490b      	ldr	r1, [pc, #44]	; (8006838 <prvCheckForValidListAndQueue+0x7c>)
 800680a:	4618      	mov	r0, r3
 800680c:	f7fe fc0a 	bl	8005024 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006810:	f000 f958 	bl	8006ac4 <vPortExitCritical>
}
 8006814:	bf00      	nop
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	20000f74 	.word	0x20000f74
 8006820:	20000f44 	.word	0x20000f44
 8006824:	20000f58 	.word	0x20000f58
 8006828:	20000f6c 	.word	0x20000f6c
 800682c:	20000f70 	.word	0x20000f70
 8006830:	20001020 	.word	0x20001020
 8006834:	20000f80 	.word	0x20000f80
 8006838:	080072d0 	.word	0x080072d0

0800683c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800683c:	b480      	push	{r7}
 800683e:	b085      	sub	sp, #20
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	3b04      	subs	r3, #4
 800684c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006854:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	3b04      	subs	r3, #4
 800685a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	f023 0201 	bic.w	r2, r3, #1
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	3b04      	subs	r3, #4
 800686a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800686c:	4a0c      	ldr	r2, [pc, #48]	; (80068a0 <pxPortInitialiseStack+0x64>)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	3b14      	subs	r3, #20
 8006876:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	3b04      	subs	r3, #4
 8006882:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f06f 0202 	mvn.w	r2, #2
 800688a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	3b20      	subs	r3, #32
 8006890:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006892:	68fb      	ldr	r3, [r7, #12]
}
 8006894:	4618      	mov	r0, r3
 8006896:	3714      	adds	r7, #20
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr
 80068a0:	080068a5 	.word	0x080068a5

080068a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80068a4:	b480      	push	{r7}
 80068a6:	b085      	sub	sp, #20
 80068a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80068aa:	2300      	movs	r3, #0
 80068ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80068ae:	4b14      	ldr	r3, [pc, #80]	; (8006900 <prvTaskExitError+0x5c>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068b6:	d00c      	beq.n	80068d2 <prvTaskExitError+0x2e>
	__asm volatile
 80068b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068bc:	b672      	cpsid	i
 80068be:	f383 8811 	msr	BASEPRI, r3
 80068c2:	f3bf 8f6f 	isb	sy
 80068c6:	f3bf 8f4f 	dsb	sy
 80068ca:	b662      	cpsie	i
 80068cc:	60fb      	str	r3, [r7, #12]
}
 80068ce:	bf00      	nop
 80068d0:	e7fe      	b.n	80068d0 <prvTaskExitError+0x2c>
	__asm volatile
 80068d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d6:	b672      	cpsid	i
 80068d8:	f383 8811 	msr	BASEPRI, r3
 80068dc:	f3bf 8f6f 	isb	sy
 80068e0:	f3bf 8f4f 	dsb	sy
 80068e4:	b662      	cpsie	i
 80068e6:	60bb      	str	r3, [r7, #8]
}
 80068e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80068ea:	bf00      	nop
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d0fc      	beq.n	80068ec <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80068f2:	bf00      	nop
 80068f4:	bf00      	nop
 80068f6:	3714      	adds	r7, #20
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr
 8006900:	20000010 	.word	0x20000010
	...

08006910 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006910:	4b07      	ldr	r3, [pc, #28]	; (8006930 <pxCurrentTCBConst2>)
 8006912:	6819      	ldr	r1, [r3, #0]
 8006914:	6808      	ldr	r0, [r1, #0]
 8006916:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800691a:	f380 8809 	msr	PSP, r0
 800691e:	f3bf 8f6f 	isb	sy
 8006922:	f04f 0000 	mov.w	r0, #0
 8006926:	f380 8811 	msr	BASEPRI, r0
 800692a:	4770      	bx	lr
 800692c:	f3af 8000 	nop.w

08006930 <pxCurrentTCBConst2>:
 8006930:	20000a44 	.word	0x20000a44
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006934:	bf00      	nop
 8006936:	bf00      	nop

08006938 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006938:	4808      	ldr	r0, [pc, #32]	; (800695c <prvPortStartFirstTask+0x24>)
 800693a:	6800      	ldr	r0, [r0, #0]
 800693c:	6800      	ldr	r0, [r0, #0]
 800693e:	f380 8808 	msr	MSP, r0
 8006942:	f04f 0000 	mov.w	r0, #0
 8006946:	f380 8814 	msr	CONTROL, r0
 800694a:	b662      	cpsie	i
 800694c:	b661      	cpsie	f
 800694e:	f3bf 8f4f 	dsb	sy
 8006952:	f3bf 8f6f 	isb	sy
 8006956:	df00      	svc	0
 8006958:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800695a:	bf00      	nop
 800695c:	e000ed08 	.word	0xe000ed08

08006960 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b084      	sub	sp, #16
 8006964:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006966:	4b37      	ldr	r3, [pc, #220]	; (8006a44 <xPortStartScheduler+0xe4>)
 8006968:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	b2db      	uxtb	r3, r3
 8006970:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	22ff      	movs	r2, #255	; 0xff
 8006976:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	b2db      	uxtb	r3, r3
 800697e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006980:	78fb      	ldrb	r3, [r7, #3]
 8006982:	b2db      	uxtb	r3, r3
 8006984:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006988:	b2da      	uxtb	r2, r3
 800698a:	4b2f      	ldr	r3, [pc, #188]	; (8006a48 <xPortStartScheduler+0xe8>)
 800698c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800698e:	4b2f      	ldr	r3, [pc, #188]	; (8006a4c <xPortStartScheduler+0xec>)
 8006990:	2207      	movs	r2, #7
 8006992:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006994:	e009      	b.n	80069aa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006996:	4b2d      	ldr	r3, [pc, #180]	; (8006a4c <xPortStartScheduler+0xec>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	3b01      	subs	r3, #1
 800699c:	4a2b      	ldr	r2, [pc, #172]	; (8006a4c <xPortStartScheduler+0xec>)
 800699e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80069a0:	78fb      	ldrb	r3, [r7, #3]
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	005b      	lsls	r3, r3, #1
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069aa:	78fb      	ldrb	r3, [r7, #3]
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069b2:	2b80      	cmp	r3, #128	; 0x80
 80069b4:	d0ef      	beq.n	8006996 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80069b6:	4b25      	ldr	r3, [pc, #148]	; (8006a4c <xPortStartScheduler+0xec>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f1c3 0307 	rsb	r3, r3, #7
 80069be:	2b04      	cmp	r3, #4
 80069c0:	d00c      	beq.n	80069dc <xPortStartScheduler+0x7c>
	__asm volatile
 80069c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c6:	b672      	cpsid	i
 80069c8:	f383 8811 	msr	BASEPRI, r3
 80069cc:	f3bf 8f6f 	isb	sy
 80069d0:	f3bf 8f4f 	dsb	sy
 80069d4:	b662      	cpsie	i
 80069d6:	60bb      	str	r3, [r7, #8]
}
 80069d8:	bf00      	nop
 80069da:	e7fe      	b.n	80069da <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80069dc:	4b1b      	ldr	r3, [pc, #108]	; (8006a4c <xPortStartScheduler+0xec>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	021b      	lsls	r3, r3, #8
 80069e2:	4a1a      	ldr	r2, [pc, #104]	; (8006a4c <xPortStartScheduler+0xec>)
 80069e4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80069e6:	4b19      	ldr	r3, [pc, #100]	; (8006a4c <xPortStartScheduler+0xec>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80069ee:	4a17      	ldr	r2, [pc, #92]	; (8006a4c <xPortStartScheduler+0xec>)
 80069f0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	b2da      	uxtb	r2, r3
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80069fa:	4b15      	ldr	r3, [pc, #84]	; (8006a50 <xPortStartScheduler+0xf0>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a14      	ldr	r2, [pc, #80]	; (8006a50 <xPortStartScheduler+0xf0>)
 8006a00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a04:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006a06:	4b12      	ldr	r3, [pc, #72]	; (8006a50 <xPortStartScheduler+0xf0>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a11      	ldr	r2, [pc, #68]	; (8006a50 <xPortStartScheduler+0xf0>)
 8006a0c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006a10:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006a12:	f000 f8dd 	bl	8006bd0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006a16:	4b0f      	ldr	r3, [pc, #60]	; (8006a54 <xPortStartScheduler+0xf4>)
 8006a18:	2200      	movs	r2, #0
 8006a1a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006a1c:	f000 f8fc 	bl	8006c18 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006a20:	4b0d      	ldr	r3, [pc, #52]	; (8006a58 <xPortStartScheduler+0xf8>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a0c      	ldr	r2, [pc, #48]	; (8006a58 <xPortStartScheduler+0xf8>)
 8006a26:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006a2a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006a2c:	f7ff ff84 	bl	8006938 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006a30:	f7ff f840 	bl	8005ab4 <vTaskSwitchContext>
	prvTaskExitError();
 8006a34:	f7ff ff36 	bl	80068a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3710      	adds	r7, #16
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	e000e400 	.word	0xe000e400
 8006a48:	20001070 	.word	0x20001070
 8006a4c:	20001074 	.word	0x20001074
 8006a50:	e000ed20 	.word	0xe000ed20
 8006a54:	20000010 	.word	0x20000010
 8006a58:	e000ef34 	.word	0xe000ef34

08006a5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
	__asm volatile
 8006a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a66:	b672      	cpsid	i
 8006a68:	f383 8811 	msr	BASEPRI, r3
 8006a6c:	f3bf 8f6f 	isb	sy
 8006a70:	f3bf 8f4f 	dsb	sy
 8006a74:	b662      	cpsie	i
 8006a76:	607b      	str	r3, [r7, #4]
}
 8006a78:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006a7a:	4b10      	ldr	r3, [pc, #64]	; (8006abc <vPortEnterCritical+0x60>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	4a0e      	ldr	r2, [pc, #56]	; (8006abc <vPortEnterCritical+0x60>)
 8006a82:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006a84:	4b0d      	ldr	r3, [pc, #52]	; (8006abc <vPortEnterCritical+0x60>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d111      	bne.n	8006ab0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006a8c:	4b0c      	ldr	r3, [pc, #48]	; (8006ac0 <vPortEnterCritical+0x64>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d00c      	beq.n	8006ab0 <vPortEnterCritical+0x54>
	__asm volatile
 8006a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a9a:	b672      	cpsid	i
 8006a9c:	f383 8811 	msr	BASEPRI, r3
 8006aa0:	f3bf 8f6f 	isb	sy
 8006aa4:	f3bf 8f4f 	dsb	sy
 8006aa8:	b662      	cpsie	i
 8006aaa:	603b      	str	r3, [r7, #0]
}
 8006aac:	bf00      	nop
 8006aae:	e7fe      	b.n	8006aae <vPortEnterCritical+0x52>
	}
}
 8006ab0:	bf00      	nop
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr
 8006abc:	20000010 	.word	0x20000010
 8006ac0:	e000ed04 	.word	0xe000ed04

08006ac4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006aca:	4b13      	ldr	r3, [pc, #76]	; (8006b18 <vPortExitCritical+0x54>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d10c      	bne.n	8006aec <vPortExitCritical+0x28>
	__asm volatile
 8006ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad6:	b672      	cpsid	i
 8006ad8:	f383 8811 	msr	BASEPRI, r3
 8006adc:	f3bf 8f6f 	isb	sy
 8006ae0:	f3bf 8f4f 	dsb	sy
 8006ae4:	b662      	cpsie	i
 8006ae6:	607b      	str	r3, [r7, #4]
}
 8006ae8:	bf00      	nop
 8006aea:	e7fe      	b.n	8006aea <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8006aec:	4b0a      	ldr	r3, [pc, #40]	; (8006b18 <vPortExitCritical+0x54>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	3b01      	subs	r3, #1
 8006af2:	4a09      	ldr	r2, [pc, #36]	; (8006b18 <vPortExitCritical+0x54>)
 8006af4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006af6:	4b08      	ldr	r3, [pc, #32]	; (8006b18 <vPortExitCritical+0x54>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d105      	bne.n	8006b0a <vPortExitCritical+0x46>
 8006afe:	2300      	movs	r3, #0
 8006b00:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	f383 8811 	msr	BASEPRI, r3
}
 8006b08:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006b0a:	bf00      	nop
 8006b0c:	370c      	adds	r7, #12
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr
 8006b16:	bf00      	nop
 8006b18:	20000010 	.word	0x20000010
 8006b1c:	00000000 	.word	0x00000000

08006b20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006b20:	f3ef 8009 	mrs	r0, PSP
 8006b24:	f3bf 8f6f 	isb	sy
 8006b28:	4b15      	ldr	r3, [pc, #84]	; (8006b80 <pxCurrentTCBConst>)
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	f01e 0f10 	tst.w	lr, #16
 8006b30:	bf08      	it	eq
 8006b32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006b36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b3a:	6010      	str	r0, [r2, #0]
 8006b3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006b40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006b44:	b672      	cpsid	i
 8006b46:	f380 8811 	msr	BASEPRI, r0
 8006b4a:	f3bf 8f4f 	dsb	sy
 8006b4e:	f3bf 8f6f 	isb	sy
 8006b52:	b662      	cpsie	i
 8006b54:	f7fe ffae 	bl	8005ab4 <vTaskSwitchContext>
 8006b58:	f04f 0000 	mov.w	r0, #0
 8006b5c:	f380 8811 	msr	BASEPRI, r0
 8006b60:	bc09      	pop	{r0, r3}
 8006b62:	6819      	ldr	r1, [r3, #0]
 8006b64:	6808      	ldr	r0, [r1, #0]
 8006b66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b6a:	f01e 0f10 	tst.w	lr, #16
 8006b6e:	bf08      	it	eq
 8006b70:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006b74:	f380 8809 	msr	PSP, r0
 8006b78:	f3bf 8f6f 	isb	sy
 8006b7c:	4770      	bx	lr
 8006b7e:	bf00      	nop

08006b80 <pxCurrentTCBConst>:
 8006b80:	20000a44 	.word	0x20000a44
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006b84:	bf00      	nop
 8006b86:	bf00      	nop

08006b88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b92:	b672      	cpsid	i
 8006b94:	f383 8811 	msr	BASEPRI, r3
 8006b98:	f3bf 8f6f 	isb	sy
 8006b9c:	f3bf 8f4f 	dsb	sy
 8006ba0:	b662      	cpsie	i
 8006ba2:	607b      	str	r3, [r7, #4]
}
 8006ba4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ba6:	f7fe fec9 	bl	800593c <xTaskIncrementTick>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d003      	beq.n	8006bb8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006bb0:	4b06      	ldr	r3, [pc, #24]	; (8006bcc <SysTick_Handler+0x44>)
 8006bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bb6:	601a      	str	r2, [r3, #0]
 8006bb8:	2300      	movs	r3, #0
 8006bba:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	f383 8811 	msr	BASEPRI, r3
}
 8006bc2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006bc4:	bf00      	nop
 8006bc6:	3708      	adds	r7, #8
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	e000ed04 	.word	0xe000ed04

08006bd0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006bd4:	4b0b      	ldr	r3, [pc, #44]	; (8006c04 <vPortSetupTimerInterrupt+0x34>)
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006bda:	4b0b      	ldr	r3, [pc, #44]	; (8006c08 <vPortSetupTimerInterrupt+0x38>)
 8006bdc:	2200      	movs	r2, #0
 8006bde:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006be0:	4b0a      	ldr	r3, [pc, #40]	; (8006c0c <vPortSetupTimerInterrupt+0x3c>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a0a      	ldr	r2, [pc, #40]	; (8006c10 <vPortSetupTimerInterrupt+0x40>)
 8006be6:	fba2 2303 	umull	r2, r3, r2, r3
 8006bea:	099b      	lsrs	r3, r3, #6
 8006bec:	4a09      	ldr	r2, [pc, #36]	; (8006c14 <vPortSetupTimerInterrupt+0x44>)
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006bf2:	4b04      	ldr	r3, [pc, #16]	; (8006c04 <vPortSetupTimerInterrupt+0x34>)
 8006bf4:	2207      	movs	r2, #7
 8006bf6:	601a      	str	r2, [r3, #0]
}
 8006bf8:	bf00      	nop
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	e000e010 	.word	0xe000e010
 8006c08:	e000e018 	.word	0xe000e018
 8006c0c:	20000004 	.word	0x20000004
 8006c10:	10624dd3 	.word	0x10624dd3
 8006c14:	e000e014 	.word	0xe000e014

08006c18 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006c18:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006c28 <vPortEnableVFP+0x10>
 8006c1c:	6801      	ldr	r1, [r0, #0]
 8006c1e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006c22:	6001      	str	r1, [r0, #0]
 8006c24:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006c26:	bf00      	nop
 8006c28:	e000ed88 	.word	0xe000ed88

08006c2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b085      	sub	sp, #20
 8006c30:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006c32:	f3ef 8305 	mrs	r3, IPSR
 8006c36:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2b0f      	cmp	r3, #15
 8006c3c:	d916      	bls.n	8006c6c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006c3e:	4a19      	ldr	r2, [pc, #100]	; (8006ca4 <vPortValidateInterruptPriority+0x78>)
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	4413      	add	r3, r2
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006c48:	4b17      	ldr	r3, [pc, #92]	; (8006ca8 <vPortValidateInterruptPriority+0x7c>)
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	7afa      	ldrb	r2, [r7, #11]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d20c      	bcs.n	8006c6c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8006c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c56:	b672      	cpsid	i
 8006c58:	f383 8811 	msr	BASEPRI, r3
 8006c5c:	f3bf 8f6f 	isb	sy
 8006c60:	f3bf 8f4f 	dsb	sy
 8006c64:	b662      	cpsie	i
 8006c66:	607b      	str	r3, [r7, #4]
}
 8006c68:	bf00      	nop
 8006c6a:	e7fe      	b.n	8006c6a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006c6c:	4b0f      	ldr	r3, [pc, #60]	; (8006cac <vPortValidateInterruptPriority+0x80>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006c74:	4b0e      	ldr	r3, [pc, #56]	; (8006cb0 <vPortValidateInterruptPriority+0x84>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d90c      	bls.n	8006c96 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8006c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c80:	b672      	cpsid	i
 8006c82:	f383 8811 	msr	BASEPRI, r3
 8006c86:	f3bf 8f6f 	isb	sy
 8006c8a:	f3bf 8f4f 	dsb	sy
 8006c8e:	b662      	cpsie	i
 8006c90:	603b      	str	r3, [r7, #0]
}
 8006c92:	bf00      	nop
 8006c94:	e7fe      	b.n	8006c94 <vPortValidateInterruptPriority+0x68>
	}
 8006c96:	bf00      	nop
 8006c98:	3714      	adds	r7, #20
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	e000e3f0 	.word	0xe000e3f0
 8006ca8:	20001070 	.word	0x20001070
 8006cac:	e000ed0c 	.word	0xe000ed0c
 8006cb0:	20001074 	.word	0x20001074

08006cb4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b08a      	sub	sp, #40	; 0x28
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006cc0:	f7fe fd7e 	bl	80057c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006cc4:	4b5b      	ldr	r3, [pc, #364]	; (8006e34 <pvPortMalloc+0x180>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d101      	bne.n	8006cd0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006ccc:	f000 f91a 	bl	8006f04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006cd0:	4b59      	ldr	r3, [pc, #356]	; (8006e38 <pvPortMalloc+0x184>)
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f040 8092 	bne.w	8006e02 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d01f      	beq.n	8006d24 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8006ce4:	2208      	movs	r2, #8
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4413      	add	r3, r2
 8006cea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f003 0307 	and.w	r3, r3, #7
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d016      	beq.n	8006d24 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f023 0307 	bic.w	r3, r3, #7
 8006cfc:	3308      	adds	r3, #8
 8006cfe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f003 0307 	and.w	r3, r3, #7
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00c      	beq.n	8006d24 <pvPortMalloc+0x70>
	__asm volatile
 8006d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0e:	b672      	cpsid	i
 8006d10:	f383 8811 	msr	BASEPRI, r3
 8006d14:	f3bf 8f6f 	isb	sy
 8006d18:	f3bf 8f4f 	dsb	sy
 8006d1c:	b662      	cpsie	i
 8006d1e:	617b      	str	r3, [r7, #20]
}
 8006d20:	bf00      	nop
 8006d22:	e7fe      	b.n	8006d22 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d06b      	beq.n	8006e02 <pvPortMalloc+0x14e>
 8006d2a:	4b44      	ldr	r3, [pc, #272]	; (8006e3c <pvPortMalloc+0x188>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d866      	bhi.n	8006e02 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006d34:	4b42      	ldr	r3, [pc, #264]	; (8006e40 <pvPortMalloc+0x18c>)
 8006d36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006d38:	4b41      	ldr	r3, [pc, #260]	; (8006e40 <pvPortMalloc+0x18c>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d3e:	e004      	b.n	8006d4a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8006d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d903      	bls.n	8006d5c <pvPortMalloc+0xa8>
 8006d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d1f1      	bne.n	8006d40 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006d5c:	4b35      	ldr	r3, [pc, #212]	; (8006e34 <pvPortMalloc+0x180>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d04d      	beq.n	8006e02 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006d66:	6a3b      	ldr	r3, [r7, #32]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2208      	movs	r2, #8
 8006d6c:	4413      	add	r3, r2
 8006d6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	6a3b      	ldr	r3, [r7, #32]
 8006d76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7a:	685a      	ldr	r2, [r3, #4]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	1ad2      	subs	r2, r2, r3
 8006d80:	2308      	movs	r3, #8
 8006d82:	005b      	lsls	r3, r3, #1
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d921      	bls.n	8006dcc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	f003 0307 	and.w	r3, r3, #7
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00c      	beq.n	8006db4 <pvPortMalloc+0x100>
	__asm volatile
 8006d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d9e:	b672      	cpsid	i
 8006da0:	f383 8811 	msr	BASEPRI, r3
 8006da4:	f3bf 8f6f 	isb	sy
 8006da8:	f3bf 8f4f 	dsb	sy
 8006dac:	b662      	cpsie	i
 8006dae:	613b      	str	r3, [r7, #16]
}
 8006db0:	bf00      	nop
 8006db2:	e7fe      	b.n	8006db2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db6:	685a      	ldr	r2, [r3, #4]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	1ad2      	subs	r2, r2, r3
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006dc6:	69b8      	ldr	r0, [r7, #24]
 8006dc8:	f000 f8fe 	bl	8006fc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006dcc:	4b1b      	ldr	r3, [pc, #108]	; (8006e3c <pvPortMalloc+0x188>)
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	4a19      	ldr	r2, [pc, #100]	; (8006e3c <pvPortMalloc+0x188>)
 8006dd8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006dda:	4b18      	ldr	r3, [pc, #96]	; (8006e3c <pvPortMalloc+0x188>)
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	4b19      	ldr	r3, [pc, #100]	; (8006e44 <pvPortMalloc+0x190>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d203      	bcs.n	8006dee <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006de6:	4b15      	ldr	r3, [pc, #84]	; (8006e3c <pvPortMalloc+0x188>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a16      	ldr	r2, [pc, #88]	; (8006e44 <pvPortMalloc+0x190>)
 8006dec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df0:	685a      	ldr	r2, [r3, #4]
 8006df2:	4b11      	ldr	r3, [pc, #68]	; (8006e38 <pvPortMalloc+0x184>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	431a      	orrs	r2, r3
 8006df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfe:	2200      	movs	r2, #0
 8006e00:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006e02:	f7fe fceb 	bl	80057dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	f003 0307 	and.w	r3, r3, #7
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d00c      	beq.n	8006e2a <pvPortMalloc+0x176>
	__asm volatile
 8006e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e14:	b672      	cpsid	i
 8006e16:	f383 8811 	msr	BASEPRI, r3
 8006e1a:	f3bf 8f6f 	isb	sy
 8006e1e:	f3bf 8f4f 	dsb	sy
 8006e22:	b662      	cpsie	i
 8006e24:	60fb      	str	r3, [r7, #12]
}
 8006e26:	bf00      	nop
 8006e28:	e7fe      	b.n	8006e28 <pvPortMalloc+0x174>
	return pvReturn;
 8006e2a:	69fb      	ldr	r3, [r7, #28]
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3728      	adds	r7, #40	; 0x28
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	20004c80 	.word	0x20004c80
 8006e38:	20004c8c 	.word	0x20004c8c
 8006e3c:	20004c84 	.word	0x20004c84
 8006e40:	20004c78 	.word	0x20004c78
 8006e44:	20004c88 	.word	0x20004c88

08006e48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b086      	sub	sp, #24
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d04c      	beq.n	8006ef4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006e5a:	2308      	movs	r3, #8
 8006e5c:	425b      	negs	r3, r3
 8006e5e:	697a      	ldr	r2, [r7, #20]
 8006e60:	4413      	add	r3, r2
 8006e62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	685a      	ldr	r2, [r3, #4]
 8006e6c:	4b23      	ldr	r3, [pc, #140]	; (8006efc <vPortFree+0xb4>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4013      	ands	r3, r2
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d10c      	bne.n	8006e90 <vPortFree+0x48>
	__asm volatile
 8006e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e7a:	b672      	cpsid	i
 8006e7c:	f383 8811 	msr	BASEPRI, r3
 8006e80:	f3bf 8f6f 	isb	sy
 8006e84:	f3bf 8f4f 	dsb	sy
 8006e88:	b662      	cpsie	i
 8006e8a:	60fb      	str	r3, [r7, #12]
}
 8006e8c:	bf00      	nop
 8006e8e:	e7fe      	b.n	8006e8e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d00c      	beq.n	8006eb2 <vPortFree+0x6a>
	__asm volatile
 8006e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9c:	b672      	cpsid	i
 8006e9e:	f383 8811 	msr	BASEPRI, r3
 8006ea2:	f3bf 8f6f 	isb	sy
 8006ea6:	f3bf 8f4f 	dsb	sy
 8006eaa:	b662      	cpsie	i
 8006eac:	60bb      	str	r3, [r7, #8]
}
 8006eae:	bf00      	nop
 8006eb0:	e7fe      	b.n	8006eb0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	685a      	ldr	r2, [r3, #4]
 8006eb6:	4b11      	ldr	r3, [pc, #68]	; (8006efc <vPortFree+0xb4>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4013      	ands	r3, r2
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d019      	beq.n	8006ef4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d115      	bne.n	8006ef4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	685a      	ldr	r2, [r3, #4]
 8006ecc:	4b0b      	ldr	r3, [pc, #44]	; (8006efc <vPortFree+0xb4>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	43db      	mvns	r3, r3
 8006ed2:	401a      	ands	r2, r3
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006ed8:	f7fe fc72 	bl	80057c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	685a      	ldr	r2, [r3, #4]
 8006ee0:	4b07      	ldr	r3, [pc, #28]	; (8006f00 <vPortFree+0xb8>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	4a06      	ldr	r2, [pc, #24]	; (8006f00 <vPortFree+0xb8>)
 8006ee8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006eea:	6938      	ldr	r0, [r7, #16]
 8006eec:	f000 f86c 	bl	8006fc8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006ef0:	f7fe fc74 	bl	80057dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006ef4:	bf00      	nop
 8006ef6:	3718      	adds	r7, #24
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	20004c8c 	.word	0x20004c8c
 8006f00:	20004c84 	.word	0x20004c84

08006f04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006f04:	b480      	push	{r7}
 8006f06:	b085      	sub	sp, #20
 8006f08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006f0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006f0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006f10:	4b27      	ldr	r3, [pc, #156]	; (8006fb0 <prvHeapInit+0xac>)
 8006f12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f003 0307 	and.w	r3, r3, #7
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00c      	beq.n	8006f38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	3307      	adds	r3, #7
 8006f22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f023 0307 	bic.w	r3, r3, #7
 8006f2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006f2c:	68ba      	ldr	r2, [r7, #8]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	4a1f      	ldr	r2, [pc, #124]	; (8006fb0 <prvHeapInit+0xac>)
 8006f34:	4413      	add	r3, r2
 8006f36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006f3c:	4a1d      	ldr	r2, [pc, #116]	; (8006fb4 <prvHeapInit+0xb0>)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006f42:	4b1c      	ldr	r3, [pc, #112]	; (8006fb4 <prvHeapInit+0xb0>)
 8006f44:	2200      	movs	r2, #0
 8006f46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	68ba      	ldr	r2, [r7, #8]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006f50:	2208      	movs	r2, #8
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	1a9b      	subs	r3, r3, r2
 8006f56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f023 0307 	bic.w	r3, r3, #7
 8006f5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	4a15      	ldr	r2, [pc, #84]	; (8006fb8 <prvHeapInit+0xb4>)
 8006f64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006f66:	4b14      	ldr	r3, [pc, #80]	; (8006fb8 <prvHeapInit+0xb4>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006f6e:	4b12      	ldr	r3, [pc, #72]	; (8006fb8 <prvHeapInit+0xb4>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	2200      	movs	r2, #0
 8006f74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	68fa      	ldr	r2, [r7, #12]
 8006f7e:	1ad2      	subs	r2, r2, r3
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006f84:	4b0c      	ldr	r3, [pc, #48]	; (8006fb8 <prvHeapInit+0xb4>)
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	4a0a      	ldr	r2, [pc, #40]	; (8006fbc <prvHeapInit+0xb8>)
 8006f92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	4a09      	ldr	r2, [pc, #36]	; (8006fc0 <prvHeapInit+0xbc>)
 8006f9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006f9c:	4b09      	ldr	r3, [pc, #36]	; (8006fc4 <prvHeapInit+0xc0>)
 8006f9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006fa2:	601a      	str	r2, [r3, #0]
}
 8006fa4:	bf00      	nop
 8006fa6:	3714      	adds	r7, #20
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr
 8006fb0:	20001078 	.word	0x20001078
 8006fb4:	20004c78 	.word	0x20004c78
 8006fb8:	20004c80 	.word	0x20004c80
 8006fbc:	20004c88 	.word	0x20004c88
 8006fc0:	20004c84 	.word	0x20004c84
 8006fc4:	20004c8c 	.word	0x20004c8c

08006fc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006fd0:	4b28      	ldr	r3, [pc, #160]	; (8007074 <prvInsertBlockIntoFreeList+0xac>)
 8006fd2:	60fb      	str	r3, [r7, #12]
 8006fd4:	e002      	b.n	8006fdc <prvInsertBlockIntoFreeList+0x14>
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	60fb      	str	r3, [r7, #12]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d8f7      	bhi.n	8006fd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	68ba      	ldr	r2, [r7, #8]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d108      	bne.n	800700a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	685a      	ldr	r2, [r3, #4]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	441a      	add	r2, r3
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	68ba      	ldr	r2, [r7, #8]
 8007014:	441a      	add	r2, r3
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	429a      	cmp	r2, r3
 800701c:	d118      	bne.n	8007050 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	4b15      	ldr	r3, [pc, #84]	; (8007078 <prvInsertBlockIntoFreeList+0xb0>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	429a      	cmp	r2, r3
 8007028:	d00d      	beq.n	8007046 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	685a      	ldr	r2, [r3, #4]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	441a      	add	r2, r3
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	601a      	str	r2, [r3, #0]
 8007044:	e008      	b.n	8007058 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007046:	4b0c      	ldr	r3, [pc, #48]	; (8007078 <prvInsertBlockIntoFreeList+0xb0>)
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	601a      	str	r2, [r3, #0]
 800704e:	e003      	b.n	8007058 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007058:	68fa      	ldr	r2, [r7, #12]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	429a      	cmp	r2, r3
 800705e:	d002      	beq.n	8007066 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007066:	bf00      	nop
 8007068:	3714      	adds	r7, #20
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop
 8007074:	20004c78 	.word	0x20004c78
 8007078:	20004c80 	.word	0x20004c80

0800707c <__libc_init_array>:
 800707c:	b570      	push	{r4, r5, r6, lr}
 800707e:	4d0d      	ldr	r5, [pc, #52]	; (80070b4 <__libc_init_array+0x38>)
 8007080:	4c0d      	ldr	r4, [pc, #52]	; (80070b8 <__libc_init_array+0x3c>)
 8007082:	1b64      	subs	r4, r4, r5
 8007084:	10a4      	asrs	r4, r4, #2
 8007086:	2600      	movs	r6, #0
 8007088:	42a6      	cmp	r6, r4
 800708a:	d109      	bne.n	80070a0 <__libc_init_array+0x24>
 800708c:	4d0b      	ldr	r5, [pc, #44]	; (80070bc <__libc_init_array+0x40>)
 800708e:	4c0c      	ldr	r4, [pc, #48]	; (80070c0 <__libc_init_array+0x44>)
 8007090:	f000 f8f2 	bl	8007278 <_init>
 8007094:	1b64      	subs	r4, r4, r5
 8007096:	10a4      	asrs	r4, r4, #2
 8007098:	2600      	movs	r6, #0
 800709a:	42a6      	cmp	r6, r4
 800709c:	d105      	bne.n	80070aa <__libc_init_array+0x2e>
 800709e:	bd70      	pop	{r4, r5, r6, pc}
 80070a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80070a4:	4798      	blx	r3
 80070a6:	3601      	adds	r6, #1
 80070a8:	e7ee      	b.n	8007088 <__libc_init_array+0xc>
 80070aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80070ae:	4798      	blx	r3
 80070b0:	3601      	adds	r6, #1
 80070b2:	e7f2      	b.n	800709a <__libc_init_array+0x1e>
 80070b4:	080073b0 	.word	0x080073b0
 80070b8:	080073b0 	.word	0x080073b0
 80070bc:	080073b0 	.word	0x080073b0
 80070c0:	080073b4 	.word	0x080073b4

080070c4 <__retarget_lock_acquire_recursive>:
 80070c4:	4770      	bx	lr

080070c6 <__retarget_lock_release_recursive>:
 80070c6:	4770      	bx	lr

080070c8 <memcpy>:
 80070c8:	440a      	add	r2, r1
 80070ca:	4291      	cmp	r1, r2
 80070cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80070d0:	d100      	bne.n	80070d4 <memcpy+0xc>
 80070d2:	4770      	bx	lr
 80070d4:	b510      	push	{r4, lr}
 80070d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070de:	4291      	cmp	r1, r2
 80070e0:	d1f9      	bne.n	80070d6 <memcpy+0xe>
 80070e2:	bd10      	pop	{r4, pc}

080070e4 <memset>:
 80070e4:	4402      	add	r2, r0
 80070e6:	4603      	mov	r3, r0
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d100      	bne.n	80070ee <memset+0xa>
 80070ec:	4770      	bx	lr
 80070ee:	f803 1b01 	strb.w	r1, [r3], #1
 80070f2:	e7f9      	b.n	80070e8 <memset+0x4>

080070f4 <cleanup_glue>:
 80070f4:	b538      	push	{r3, r4, r5, lr}
 80070f6:	460c      	mov	r4, r1
 80070f8:	6809      	ldr	r1, [r1, #0]
 80070fa:	4605      	mov	r5, r0
 80070fc:	b109      	cbz	r1, 8007102 <cleanup_glue+0xe>
 80070fe:	f7ff fff9 	bl	80070f4 <cleanup_glue>
 8007102:	4621      	mov	r1, r4
 8007104:	4628      	mov	r0, r5
 8007106:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800710a:	f000 b869 	b.w	80071e0 <_free_r>
	...

08007110 <_reclaim_reent>:
 8007110:	4b2c      	ldr	r3, [pc, #176]	; (80071c4 <_reclaim_reent+0xb4>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4283      	cmp	r3, r0
 8007116:	b570      	push	{r4, r5, r6, lr}
 8007118:	4604      	mov	r4, r0
 800711a:	d051      	beq.n	80071c0 <_reclaim_reent+0xb0>
 800711c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800711e:	b143      	cbz	r3, 8007132 <_reclaim_reent+0x22>
 8007120:	68db      	ldr	r3, [r3, #12]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d14a      	bne.n	80071bc <_reclaim_reent+0xac>
 8007126:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007128:	6819      	ldr	r1, [r3, #0]
 800712a:	b111      	cbz	r1, 8007132 <_reclaim_reent+0x22>
 800712c:	4620      	mov	r0, r4
 800712e:	f000 f857 	bl	80071e0 <_free_r>
 8007132:	6961      	ldr	r1, [r4, #20]
 8007134:	b111      	cbz	r1, 800713c <_reclaim_reent+0x2c>
 8007136:	4620      	mov	r0, r4
 8007138:	f000 f852 	bl	80071e0 <_free_r>
 800713c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800713e:	b111      	cbz	r1, 8007146 <_reclaim_reent+0x36>
 8007140:	4620      	mov	r0, r4
 8007142:	f000 f84d 	bl	80071e0 <_free_r>
 8007146:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007148:	b111      	cbz	r1, 8007150 <_reclaim_reent+0x40>
 800714a:	4620      	mov	r0, r4
 800714c:	f000 f848 	bl	80071e0 <_free_r>
 8007150:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007152:	b111      	cbz	r1, 800715a <_reclaim_reent+0x4a>
 8007154:	4620      	mov	r0, r4
 8007156:	f000 f843 	bl	80071e0 <_free_r>
 800715a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800715c:	b111      	cbz	r1, 8007164 <_reclaim_reent+0x54>
 800715e:	4620      	mov	r0, r4
 8007160:	f000 f83e 	bl	80071e0 <_free_r>
 8007164:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007166:	b111      	cbz	r1, 800716e <_reclaim_reent+0x5e>
 8007168:	4620      	mov	r0, r4
 800716a:	f000 f839 	bl	80071e0 <_free_r>
 800716e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007170:	b111      	cbz	r1, 8007178 <_reclaim_reent+0x68>
 8007172:	4620      	mov	r0, r4
 8007174:	f000 f834 	bl	80071e0 <_free_r>
 8007178:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800717a:	b111      	cbz	r1, 8007182 <_reclaim_reent+0x72>
 800717c:	4620      	mov	r0, r4
 800717e:	f000 f82f 	bl	80071e0 <_free_r>
 8007182:	69a3      	ldr	r3, [r4, #24]
 8007184:	b1e3      	cbz	r3, 80071c0 <_reclaim_reent+0xb0>
 8007186:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007188:	4620      	mov	r0, r4
 800718a:	4798      	blx	r3
 800718c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800718e:	b1b9      	cbz	r1, 80071c0 <_reclaim_reent+0xb0>
 8007190:	4620      	mov	r0, r4
 8007192:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007196:	f7ff bfad 	b.w	80070f4 <cleanup_glue>
 800719a:	5949      	ldr	r1, [r1, r5]
 800719c:	b941      	cbnz	r1, 80071b0 <_reclaim_reent+0xa0>
 800719e:	3504      	adds	r5, #4
 80071a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071a2:	2d80      	cmp	r5, #128	; 0x80
 80071a4:	68d9      	ldr	r1, [r3, #12]
 80071a6:	d1f8      	bne.n	800719a <_reclaim_reent+0x8a>
 80071a8:	4620      	mov	r0, r4
 80071aa:	f000 f819 	bl	80071e0 <_free_r>
 80071ae:	e7ba      	b.n	8007126 <_reclaim_reent+0x16>
 80071b0:	680e      	ldr	r6, [r1, #0]
 80071b2:	4620      	mov	r0, r4
 80071b4:	f000 f814 	bl	80071e0 <_free_r>
 80071b8:	4631      	mov	r1, r6
 80071ba:	e7ef      	b.n	800719c <_reclaim_reent+0x8c>
 80071bc:	2500      	movs	r5, #0
 80071be:	e7ef      	b.n	80071a0 <_reclaim_reent+0x90>
 80071c0:	bd70      	pop	{r4, r5, r6, pc}
 80071c2:	bf00      	nop
 80071c4:	20000014 	.word	0x20000014

080071c8 <__malloc_lock>:
 80071c8:	4801      	ldr	r0, [pc, #4]	; (80071d0 <__malloc_lock+0x8>)
 80071ca:	f7ff bf7b 	b.w	80070c4 <__retarget_lock_acquire_recursive>
 80071ce:	bf00      	nop
 80071d0:	20004c90 	.word	0x20004c90

080071d4 <__malloc_unlock>:
 80071d4:	4801      	ldr	r0, [pc, #4]	; (80071dc <__malloc_unlock+0x8>)
 80071d6:	f7ff bf76 	b.w	80070c6 <__retarget_lock_release_recursive>
 80071da:	bf00      	nop
 80071dc:	20004c90 	.word	0x20004c90

080071e0 <_free_r>:
 80071e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071e2:	2900      	cmp	r1, #0
 80071e4:	d044      	beq.n	8007270 <_free_r+0x90>
 80071e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071ea:	9001      	str	r0, [sp, #4]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	f1a1 0404 	sub.w	r4, r1, #4
 80071f2:	bfb8      	it	lt
 80071f4:	18e4      	addlt	r4, r4, r3
 80071f6:	f7ff ffe7 	bl	80071c8 <__malloc_lock>
 80071fa:	4a1e      	ldr	r2, [pc, #120]	; (8007274 <_free_r+0x94>)
 80071fc:	9801      	ldr	r0, [sp, #4]
 80071fe:	6813      	ldr	r3, [r2, #0]
 8007200:	b933      	cbnz	r3, 8007210 <_free_r+0x30>
 8007202:	6063      	str	r3, [r4, #4]
 8007204:	6014      	str	r4, [r2, #0]
 8007206:	b003      	add	sp, #12
 8007208:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800720c:	f7ff bfe2 	b.w	80071d4 <__malloc_unlock>
 8007210:	42a3      	cmp	r3, r4
 8007212:	d908      	bls.n	8007226 <_free_r+0x46>
 8007214:	6825      	ldr	r5, [r4, #0]
 8007216:	1961      	adds	r1, r4, r5
 8007218:	428b      	cmp	r3, r1
 800721a:	bf01      	itttt	eq
 800721c:	6819      	ldreq	r1, [r3, #0]
 800721e:	685b      	ldreq	r3, [r3, #4]
 8007220:	1949      	addeq	r1, r1, r5
 8007222:	6021      	streq	r1, [r4, #0]
 8007224:	e7ed      	b.n	8007202 <_free_r+0x22>
 8007226:	461a      	mov	r2, r3
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	b10b      	cbz	r3, 8007230 <_free_r+0x50>
 800722c:	42a3      	cmp	r3, r4
 800722e:	d9fa      	bls.n	8007226 <_free_r+0x46>
 8007230:	6811      	ldr	r1, [r2, #0]
 8007232:	1855      	adds	r5, r2, r1
 8007234:	42a5      	cmp	r5, r4
 8007236:	d10b      	bne.n	8007250 <_free_r+0x70>
 8007238:	6824      	ldr	r4, [r4, #0]
 800723a:	4421      	add	r1, r4
 800723c:	1854      	adds	r4, r2, r1
 800723e:	42a3      	cmp	r3, r4
 8007240:	6011      	str	r1, [r2, #0]
 8007242:	d1e0      	bne.n	8007206 <_free_r+0x26>
 8007244:	681c      	ldr	r4, [r3, #0]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	6053      	str	r3, [r2, #4]
 800724a:	4421      	add	r1, r4
 800724c:	6011      	str	r1, [r2, #0]
 800724e:	e7da      	b.n	8007206 <_free_r+0x26>
 8007250:	d902      	bls.n	8007258 <_free_r+0x78>
 8007252:	230c      	movs	r3, #12
 8007254:	6003      	str	r3, [r0, #0]
 8007256:	e7d6      	b.n	8007206 <_free_r+0x26>
 8007258:	6825      	ldr	r5, [r4, #0]
 800725a:	1961      	adds	r1, r4, r5
 800725c:	428b      	cmp	r3, r1
 800725e:	bf04      	itt	eq
 8007260:	6819      	ldreq	r1, [r3, #0]
 8007262:	685b      	ldreq	r3, [r3, #4]
 8007264:	6063      	str	r3, [r4, #4]
 8007266:	bf04      	itt	eq
 8007268:	1949      	addeq	r1, r1, r5
 800726a:	6021      	streq	r1, [r4, #0]
 800726c:	6054      	str	r4, [r2, #4]
 800726e:	e7ca      	b.n	8007206 <_free_r+0x26>
 8007270:	b003      	add	sp, #12
 8007272:	bd30      	pop	{r4, r5, pc}
 8007274:	20004c94 	.word	0x20004c94

08007278 <_init>:
 8007278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800727a:	bf00      	nop
 800727c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800727e:	bc08      	pop	{r3}
 8007280:	469e      	mov	lr, r3
 8007282:	4770      	bx	lr

08007284 <_fini>:
 8007284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007286:	bf00      	nop
 8007288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800728a:	bc08      	pop	{r3}
 800728c:	469e      	mov	lr, r3
 800728e:	4770      	bx	lr
