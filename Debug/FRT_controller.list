
FRT_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a10  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08006c10  08006c10  00016c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d08  08006d08  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006d08  08006d08  00016d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d10  08006d10  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d10  08006d10  00016d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d14  08006d14  00016d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006d18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c1c  20000074  08006d8c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c90  08006d8c  00024c90  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019103  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031c7  00000000  00000000  000391a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a8  00000000  00000000  0003c370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001260  00000000  00000000  0003d718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003423  00000000  00000000  0003e978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015a32  00000000  00000000  00041d9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001072aa  00000000  00000000  000577cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015ea77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005620  00000000  00000000  0015eac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
 8000220:	08006bf8 	.word	0x08006bf8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
 800023c:	08006bf8 	.word	0x08006bf8

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b974 	b.w	8000540 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <APPS2_ADC_Percent>:
	ADC_VAL = HAL_ADC_GetValue(&hadc1);
	HAL_ADC_Stop(&hadc1);
	return (float)ADC_VAL/4095; //returns ADC percentage ranges from 0-1
}

float APPS2_ADC_Percent(void) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
	uint16_t ADC_VAL;

	HAL_ADC_Start(&hadc2);
 800054a:	480f      	ldr	r0, [pc, #60]	; (8000588 <APPS2_ADC_Percent+0x44>)
 800054c:	f000 ff94 	bl	8001478 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 10);
 8000550:	210a      	movs	r1, #10
 8000552:	480d      	ldr	r0, [pc, #52]	; (8000588 <APPS2_ADC_Percent+0x44>)
 8000554:	f001 f892 	bl	800167c <HAL_ADC_PollForConversion>
	ADC_VAL = HAL_ADC_GetValue(&hadc2);
 8000558:	480b      	ldr	r0, [pc, #44]	; (8000588 <APPS2_ADC_Percent+0x44>)
 800055a:	f001 f91a 	bl	8001792 <HAL_ADC_GetValue>
 800055e:	4603      	mov	r3, r0
 8000560:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc2);
 8000562:	4809      	ldr	r0, [pc, #36]	; (8000588 <APPS2_ADC_Percent+0x44>)
 8000564:	f001 f856 	bl	8001614 <HAL_ADC_Stop>
	return (float)ADC_VAL/4095;
 8000568:	88fb      	ldrh	r3, [r7, #6]
 800056a:	ee07 3a90 	vmov	s15, r3
 800056e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000572:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800058c <APPS2_ADC_Percent+0x48>
 8000576:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800057a:	eef0 7a66 	vmov.f32	s15, s13
}
 800057e:	eeb0 0a67 	vmov.f32	s0, s15
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	200000d8 	.word	0x200000d8
 800058c:	457ff000 	.word	0x457ff000

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000594:	f000 feff 	bl	8001396 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000598:	f000 f892 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059c:	f000 fa5a 	bl	8000a54 <MX_GPIO_Init>
  MX_CAN1_Init();
 80005a0:	f000 f9ec 	bl	800097c <MX_CAN1_Init>
  MX_ADC1_Init();
 80005a4:	f000 f8f4 	bl	8000790 <MX_ADC1_Init>
  MX_ADC2_Init();
 80005a8:	f000 f944 	bl	8000834 <MX_ADC2_Init>
  MX_ADC3_Init();
 80005ac:	f000 f994 	bl	80008d8 <MX_ADC3_Init>
  MX_CAN3_Init();
 80005b0:	f000 fa1a 	bl	80009e8 <MX_CAN3_Init>
  /* USER CODE BEGIN 2 */
  	CAN_Config();
 80005b4:	f000 faba 	bl	8000b2c <CAN_Config>

	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80005b8:	2102      	movs	r1, #2
 80005ba:	4836      	ldr	r0, [pc, #216]	; (8000694 <main+0x104>)
 80005bc:	f001 ff54 	bl	8002468 <HAL_CAN_ActivateNotification>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <main+0x3a>
	{
	  Error_Handler();
 80005c6:	f000 fcbd 	bl	8000f44 <Error_Handler>
	}
	// Initialize TxHeader and TxData
	AMK_TxHeader_R.DLC = 8;
 80005ca:	4b33      	ldr	r3, [pc, #204]	; (8000698 <main+0x108>)
 80005cc:	2208      	movs	r2, #8
 80005ce:	611a      	str	r2, [r3, #16]
	AMK_TxHeader_R.IDE = CAN_ID_STD;
 80005d0:	4b31      	ldr	r3, [pc, #196]	; (8000698 <main+0x108>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
	AMK_TxHeader_R.RTR = CAN_RTR_DATA;
 80005d6:	4b30      	ldr	r3, [pc, #192]	; (8000698 <main+0x108>)
 80005d8:	2200      	movs	r2, #0
 80005da:	60da      	str	r2, [r3, #12]
	AMK_TxHeader_R.StdId = 0x186;
 80005dc:	4b2e      	ldr	r3, [pc, #184]	; (8000698 <main+0x108>)
 80005de:	f44f 72c3 	mov.w	r2, #390	; 0x186
 80005e2:	601a      	str	r2, [r3, #0]
	AMK_TxHeader_R.TransmitGlobalTime = DISABLE;
 80005e4:	4b2c      	ldr	r3, [pc, #176]	; (8000698 <main+0x108>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	751a      	strb	r2, [r3, #20]

	AMK_TxData_R[0] = 0x00;
 80005ea:	4b2c      	ldr	r3, [pc, #176]	; (800069c <main+0x10c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	AMK_TxData_R[1] = 0x00;
 80005f0:	4b2a      	ldr	r3, [pc, #168]	; (800069c <main+0x10c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	705a      	strb	r2, [r3, #1]
	AMK_TxData_R[2] = 0x00;
 80005f6:	4b29      	ldr	r3, [pc, #164]	; (800069c <main+0x10c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	709a      	strb	r2, [r3, #2]
	AMK_TxData_R[3] = 0x00;
 80005fc:	4b27      	ldr	r3, [pc, #156]	; (800069c <main+0x10c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	70da      	strb	r2, [r3, #3]
	AMK_TxData_R[4] = 0x00;
 8000602:	4b26      	ldr	r3, [pc, #152]	; (800069c <main+0x10c>)
 8000604:	2200      	movs	r2, #0
 8000606:	711a      	strb	r2, [r3, #4]
	AMK_TxData_R[5] = 0x00;
 8000608:	4b24      	ldr	r3, [pc, #144]	; (800069c <main+0x10c>)
 800060a:	2200      	movs	r2, #0
 800060c:	715a      	strb	r2, [r3, #5]
	AMK_TxData_R[6] = 0x00;
 800060e:	4b23      	ldr	r3, [pc, #140]	; (800069c <main+0x10c>)
 8000610:	2200      	movs	r2, #0
 8000612:	719a      	strb	r2, [r3, #6]
	AMK_TxData_R[7] = 0x00;
 8000614:	4b21      	ldr	r3, [pc, #132]	; (800069c <main+0x10c>)
 8000616:	2200      	movs	r2, #0
 8000618:	71da      	strb	r2, [r3, #7]

	AMK_TxHeader_L.DLC = 8;
 800061a:	4b21      	ldr	r3, [pc, #132]	; (80006a0 <main+0x110>)
 800061c:	2208      	movs	r2, #8
 800061e:	611a      	str	r2, [r3, #16]
	AMK_TxHeader_L.IDE = CAN_ID_STD;
 8000620:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <main+0x110>)
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
	AMK_TxHeader_L.RTR = CAN_RTR_DATA;
 8000626:	4b1e      	ldr	r3, [pc, #120]	; (80006a0 <main+0x110>)
 8000628:	2200      	movs	r2, #0
 800062a:	60da      	str	r2, [r3, #12]
	AMK_TxHeader_L.StdId = 0x185;
 800062c:	4b1c      	ldr	r3, [pc, #112]	; (80006a0 <main+0x110>)
 800062e:	f240 1285 	movw	r2, #389	; 0x185
 8000632:	601a      	str	r2, [r3, #0]
	AMK_TxHeader_L.TransmitGlobalTime = DISABLE;
 8000634:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <main+0x110>)
 8000636:	2200      	movs	r2, #0
 8000638:	751a      	strb	r2, [r3, #20]

	AMK_TxData_L[0] = 0x00;
 800063a:	4b1a      	ldr	r3, [pc, #104]	; (80006a4 <main+0x114>)
 800063c:	2200      	movs	r2, #0
 800063e:	701a      	strb	r2, [r3, #0]
	AMK_TxData_L[1] = 0x00;
 8000640:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <main+0x114>)
 8000642:	2200      	movs	r2, #0
 8000644:	705a      	strb	r2, [r3, #1]
	AMK_TxData_L[2] = 0x00;
 8000646:	4b17      	ldr	r3, [pc, #92]	; (80006a4 <main+0x114>)
 8000648:	2200      	movs	r2, #0
 800064a:	709a      	strb	r2, [r3, #2]
	AMK_TxData_L[3] = 0x00;
 800064c:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <main+0x114>)
 800064e:	2200      	movs	r2, #0
 8000650:	70da      	strb	r2, [r3, #3]
	AMK_TxData_L[4] = 0x00;
 8000652:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <main+0x114>)
 8000654:	2200      	movs	r2, #0
 8000656:	711a      	strb	r2, [r3, #4]
	AMK_TxData_L[5] = 0x00;
 8000658:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <main+0x114>)
 800065a:	2200      	movs	r2, #0
 800065c:	715a      	strb	r2, [r3, #5]
	AMK_TxData_L[6] = 0x00;
 800065e:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <main+0x114>)
 8000660:	2200      	movs	r2, #0
 8000662:	719a      	strb	r2, [r3, #6]
	AMK_TxData_L[7] = 0x00;
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <main+0x114>)
 8000666:	2200      	movs	r2, #0
 8000668:	71da      	strb	r2, [r3, #7]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800066a:	f003 fbd5 	bl	8003e18 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of controllerStart */
  controllerStartHandle = osThreadNew(Start_FRT_controller, NULL, &controllerStart_attributes);
 800066e:	4a0e      	ldr	r2, [pc, #56]	; (80006a8 <main+0x118>)
 8000670:	2100      	movs	r1, #0
 8000672:	480e      	ldr	r0, [pc, #56]	; (80006ac <main+0x11c>)
 8000674:	f003 fc3a 	bl	8003eec <osThreadNew>
 8000678:	4603      	mov	r3, r0
 800067a:	4a0d      	ldr	r2, [pc, #52]	; (80006b0 <main+0x120>)
 800067c:	6013      	str	r3, [r2, #0]

  /* creation of motorControl */
  motorControlHandle = osThreadNew(Start_AMK, NULL, &motorControl_attributes);
 800067e:	4a0d      	ldr	r2, [pc, #52]	; (80006b4 <main+0x124>)
 8000680:	2100      	movs	r1, #0
 8000682:	480d      	ldr	r0, [pc, #52]	; (80006b8 <main+0x128>)
 8000684:	f003 fc32 	bl	8003eec <osThreadNew>
 8000688:	4603      	mov	r3, r0
 800068a:	4a0c      	ldr	r2, [pc, #48]	; (80006bc <main+0x12c>)
 800068c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800068e:	f003 fbf7 	bl	8003e80 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000692:	e7fe      	b.n	8000692 <main+0x102>
 8000694:	20000168 	.word	0x20000168
 8000698:	200001c0 	.word	0x200001c0
 800069c:	2000020c 	.word	0x2000020c
 80006a0:	200001d8 	.word	0x200001d8
 80006a4:	20000214 	.word	0x20000214
 80006a8:	08006c48 	.word	0x08006c48
 80006ac:	08000cfd 	.word	0x08000cfd
 80006b0:	200001b8 	.word	0x200001b8
 80006b4:	08006c6c 	.word	0x08006c6c
 80006b8:	08000d0d 	.word	0x08000d0d
 80006bc:	200001bc 	.word	0x200001bc

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b094      	sub	sp, #80	; 0x50
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 031c 	add.w	r3, r7, #28
 80006ca:	2234      	movs	r2, #52	; 0x34
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f006 f9c8 	bl	8006a64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	f107 0308 	add.w	r3, r7, #8
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e4:	4b28      	ldr	r3, [pc, #160]	; (8000788 <SystemClock_Config+0xc8>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	4a27      	ldr	r2, [pc, #156]	; (8000788 <SystemClock_Config+0xc8>)
 80006ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ee:	6413      	str	r3, [r2, #64]	; 0x40
 80006f0:	4b25      	ldr	r3, [pc, #148]	; (8000788 <SystemClock_Config+0xc8>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006fc:	4b23      	ldr	r3, [pc, #140]	; (800078c <SystemClock_Config+0xcc>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000704:	4a21      	ldr	r2, [pc, #132]	; (800078c <SystemClock_Config+0xcc>)
 8000706:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800070a:	6013      	str	r3, [r2, #0]
 800070c:	4b1f      	ldr	r3, [pc, #124]	; (800078c <SystemClock_Config+0xcc>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000714:	603b      	str	r3, [r7, #0]
 8000716:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000718:	2302      	movs	r3, #2
 800071a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800071c:	2301      	movs	r3, #1
 800071e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000720:	2310      	movs	r3, #16
 8000722:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000724:	2302      	movs	r3, #2
 8000726:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000728:	2300      	movs	r3, #0
 800072a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800072c:	2308      	movs	r3, #8
 800072e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000730:	2360      	movs	r3, #96	; 0x60
 8000732:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8000734:	2306      	movs	r3, #6
 8000736:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000738:	2302      	movs	r3, #2
 800073a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800073c:	2302      	movs	r3, #2
 800073e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000740:	f107 031c 	add.w	r3, r7, #28
 8000744:	4618      	mov	r0, r3
 8000746:	f002 fb8d 	bl	8002e64 <HAL_RCC_OscConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000750:	f000 fbf8 	bl	8000f44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000754:	230f      	movs	r3, #15
 8000756:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000758:	2302      	movs	r3, #2
 800075a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800075c:	2380      	movs	r3, #128	; 0x80
 800075e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000760:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000764:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800076a:	f107 0308 	add.w	r3, r7, #8
 800076e:	2100      	movs	r1, #0
 8000770:	4618      	mov	r0, r3
 8000772:	f002 fe25 	bl	80033c0 <HAL_RCC_ClockConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800077c:	f000 fbe2 	bl	8000f44 <Error_Handler>
  }
}
 8000780:	bf00      	nop
 8000782:	3750      	adds	r7, #80	; 0x50
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40023800 	.word	0x40023800
 800078c:	40007000 	.word	0x40007000

08000790 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000796:	463b      	mov	r3, r7
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007a2:	4b21      	ldr	r3, [pc, #132]	; (8000828 <MX_ADC1_Init+0x98>)
 80007a4:	4a21      	ldr	r2, [pc, #132]	; (800082c <MX_ADC1_Init+0x9c>)
 80007a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007a8:	4b1f      	ldr	r3, [pc, #124]	; (8000828 <MX_ADC1_Init+0x98>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007ae:	4b1e      	ldr	r3, [pc, #120]	; (8000828 <MX_ADC1_Init+0x98>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007b4:	4b1c      	ldr	r3, [pc, #112]	; (8000828 <MX_ADC1_Init+0x98>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007ba:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <MX_ADC1_Init+0x98>)
 80007bc:	2201      	movs	r2, #1
 80007be:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007c0:	4b19      	ldr	r3, [pc, #100]	; (8000828 <MX_ADC1_Init+0x98>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007c8:	4b17      	ldr	r3, [pc, #92]	; (8000828 <MX_ADC1_Init+0x98>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007ce:	4b16      	ldr	r3, [pc, #88]	; (8000828 <MX_ADC1_Init+0x98>)
 80007d0:	4a17      	ldr	r2, [pc, #92]	; (8000830 <MX_ADC1_Init+0xa0>)
 80007d2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007d4:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_ADC1_Init+0x98>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007da:	4b13      	ldr	r3, [pc, #76]	; (8000828 <MX_ADC1_Init+0x98>)
 80007dc:	2201      	movs	r2, #1
 80007de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_ADC1_Init+0x98>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_ADC1_Init+0x98>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007ee:	480e      	ldr	r0, [pc, #56]	; (8000828 <MX_ADC1_Init+0x98>)
 80007f0:	f000 fdfe 	bl	80013f0 <HAL_ADC_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80007fa:	f000 fba3 	bl	8000f44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80007fe:	230a      	movs	r3, #10
 8000800:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000802:	2301      	movs	r3, #1
 8000804:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000806:	2300      	movs	r3, #0
 8000808:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800080a:	463b      	mov	r3, r7
 800080c:	4619      	mov	r1, r3
 800080e:	4806      	ldr	r0, [pc, #24]	; (8000828 <MX_ADC1_Init+0x98>)
 8000810:	f000 ffcc 	bl	80017ac <HAL_ADC_ConfigChannel>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800081a:	f000 fb93 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000090 	.word	0x20000090
 800082c:	40012000 	.word	0x40012000
 8000830:	0f000001 	.word	0x0f000001

08000834 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800083a:	463b      	mov	r3, r7
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000846:	4b21      	ldr	r3, [pc, #132]	; (80008cc <MX_ADC2_Init+0x98>)
 8000848:	4a21      	ldr	r2, [pc, #132]	; (80008d0 <MX_ADC2_Init+0x9c>)
 800084a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800084c:	4b1f      	ldr	r3, [pc, #124]	; (80008cc <MX_ADC2_Init+0x98>)
 800084e:	2200      	movs	r2, #0
 8000850:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000852:	4b1e      	ldr	r3, [pc, #120]	; (80008cc <MX_ADC2_Init+0x98>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000858:	4b1c      	ldr	r3, [pc, #112]	; (80008cc <MX_ADC2_Init+0x98>)
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800085e:	4b1b      	ldr	r3, [pc, #108]	; (80008cc <MX_ADC2_Init+0x98>)
 8000860:	2201      	movs	r2, #1
 8000862:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000864:	4b19      	ldr	r3, [pc, #100]	; (80008cc <MX_ADC2_Init+0x98>)
 8000866:	2200      	movs	r2, #0
 8000868:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800086c:	4b17      	ldr	r3, [pc, #92]	; (80008cc <MX_ADC2_Init+0x98>)
 800086e:	2200      	movs	r2, #0
 8000870:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000872:	4b16      	ldr	r3, [pc, #88]	; (80008cc <MX_ADC2_Init+0x98>)
 8000874:	4a17      	ldr	r2, [pc, #92]	; (80008d4 <MX_ADC2_Init+0xa0>)
 8000876:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000878:	4b14      	ldr	r3, [pc, #80]	; (80008cc <MX_ADC2_Init+0x98>)
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800087e:	4b13      	ldr	r3, [pc, #76]	; (80008cc <MX_ADC2_Init+0x98>)
 8000880:	2201      	movs	r2, #1
 8000882:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000884:	4b11      	ldr	r3, [pc, #68]	; (80008cc <MX_ADC2_Init+0x98>)
 8000886:	2200      	movs	r2, #0
 8000888:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800088c:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <MX_ADC2_Init+0x98>)
 800088e:	2201      	movs	r2, #1
 8000890:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000892:	480e      	ldr	r0, [pc, #56]	; (80008cc <MX_ADC2_Init+0x98>)
 8000894:	f000 fdac 	bl	80013f0 <HAL_ADC_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 800089e:	f000 fb51 	bl	8000f44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80008a2:	230b      	movs	r3, #11
 80008a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008a6:	2301      	movs	r3, #1
 80008a8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008ae:	463b      	mov	r3, r7
 80008b0:	4619      	mov	r1, r3
 80008b2:	4806      	ldr	r0, [pc, #24]	; (80008cc <MX_ADC2_Init+0x98>)
 80008b4:	f000 ff7a 	bl	80017ac <HAL_ADC_ConfigChannel>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80008be:	f000 fb41 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	3710      	adds	r7, #16
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	200000d8 	.word	0x200000d8
 80008d0:	40012100 	.word	0x40012100
 80008d4:	0f000001 	.word	0x0f000001

080008d8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008de:	463b      	mov	r3, r7
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80008ea:	4b21      	ldr	r3, [pc, #132]	; (8000970 <MX_ADC3_Init+0x98>)
 80008ec:	4a21      	ldr	r2, [pc, #132]	; (8000974 <MX_ADC3_Init+0x9c>)
 80008ee:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80008f0:	4b1f      	ldr	r3, [pc, #124]	; (8000970 <MX_ADC3_Init+0x98>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80008f6:	4b1e      	ldr	r3, [pc, #120]	; (8000970 <MX_ADC3_Init+0x98>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008fc:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <MX_ADC3_Init+0x98>)
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000902:	4b1b      	ldr	r3, [pc, #108]	; (8000970 <MX_ADC3_Init+0x98>)
 8000904:	2200      	movs	r2, #0
 8000906:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000908:	4b19      	ldr	r3, [pc, #100]	; (8000970 <MX_ADC3_Init+0x98>)
 800090a:	2200      	movs	r2, #0
 800090c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000910:	4b17      	ldr	r3, [pc, #92]	; (8000970 <MX_ADC3_Init+0x98>)
 8000912:	2200      	movs	r2, #0
 8000914:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000916:	4b16      	ldr	r3, [pc, #88]	; (8000970 <MX_ADC3_Init+0x98>)
 8000918:	4a17      	ldr	r2, [pc, #92]	; (8000978 <MX_ADC3_Init+0xa0>)
 800091a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800091c:	4b14      	ldr	r3, [pc, #80]	; (8000970 <MX_ADC3_Init+0x98>)
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000922:	4b13      	ldr	r3, [pc, #76]	; (8000970 <MX_ADC3_Init+0x98>)
 8000924:	2201      	movs	r2, #1
 8000926:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000928:	4b11      	ldr	r3, [pc, #68]	; (8000970 <MX_ADC3_Init+0x98>)
 800092a:	2200      	movs	r2, #0
 800092c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000930:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <MX_ADC3_Init+0x98>)
 8000932:	2201      	movs	r2, #1
 8000934:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000936:	480e      	ldr	r0, [pc, #56]	; (8000970 <MX_ADC3_Init+0x98>)
 8000938:	f000 fd5a 	bl	80013f0 <HAL_ADC_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8000942:	f000 faff 	bl	8000f44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000946:	230c      	movs	r3, #12
 8000948:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800094a:	2301      	movs	r3, #1
 800094c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800094e:	2300      	movs	r3, #0
 8000950:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000952:	463b      	mov	r3, r7
 8000954:	4619      	mov	r1, r3
 8000956:	4806      	ldr	r0, [pc, #24]	; (8000970 <MX_ADC3_Init+0x98>)
 8000958:	f000 ff28 	bl	80017ac <HAL_ADC_ConfigChannel>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8000962:	f000 faef 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	3710      	adds	r7, #16
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000120 	.word	0x20000120
 8000974:	40012200 	.word	0x40012200
 8000978:	0f000001 	.word	0x0f000001

0800097c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000980:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <MX_CAN1_Init+0x64>)
 8000982:	4a18      	ldr	r2, [pc, #96]	; (80009e4 <MX_CAN1_Init+0x68>)
 8000984:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1;
 8000986:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <MX_CAN1_Init+0x64>)
 8000988:	2201      	movs	r2, #1
 800098a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800098c:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <MX_CAN1_Init+0x64>)
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000992:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <MX_CAN1_Init+0x64>)
 8000994:	2200      	movs	r2, #0
 8000996:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000998:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <MX_CAN1_Init+0x64>)
 800099a:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800099e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <MX_CAN1_Init+0x64>)
 80009a2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80009a6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80009a8:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <MX_CAN1_Init+0x64>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 80009ae:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MX_CAN1_Init+0x64>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80009b4:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <MX_CAN1_Init+0x64>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_CAN1_Init+0x64>)
 80009bc:	2200      	movs	r2, #0
 80009be:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80009c0:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <MX_CAN1_Init+0x64>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <MX_CAN1_Init+0x64>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80009cc:	4804      	ldr	r0, [pc, #16]	; (80009e0 <MX_CAN1_Init+0x64>)
 80009ce:	f001 f93d 	bl	8001c4c <HAL_CAN_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80009d8:	f000 fab4 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000168 	.word	0x20000168
 80009e4:	40006400 	.word	0x40006400

080009e8 <MX_CAN3_Init>:
  * @brief CAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN3_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 80009ec:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <MX_CAN3_Init+0x64>)
 80009ee:	4a18      	ldr	r2, [pc, #96]	; (8000a50 <MX_CAN3_Init+0x68>)
 80009f0:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 1;
 80009f2:	4b16      	ldr	r3, [pc, #88]	; (8000a4c <MX_CAN3_Init+0x64>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 80009f8:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <MX_CAN3_Init+0x64>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80009fe:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <MX_CAN3_Init+0x64>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000a04:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <MX_CAN3_Init+0x64>)
 8000a06:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000a0a:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <MX_CAN3_Init+0x64>)
 8000a0e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000a12:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8000a14:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <MX_CAN3_Init+0x64>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = ENABLE;
 8000a1a:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <MX_CAN3_Init+0x64>)
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8000a20:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <MX_CAN3_Init+0x64>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8000a26:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <MX_CAN3_Init+0x64>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8000a2c:	4b07      	ldr	r3, [pc, #28]	; (8000a4c <MX_CAN3_Init+0x64>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <MX_CAN3_Init+0x64>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8000a38:	4804      	ldr	r0, [pc, #16]	; (8000a4c <MX_CAN3_Init+0x64>)
 8000a3a:	f001 f907 	bl	8001c4c <HAL_CAN_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 8000a44:	f000 fa7e 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000190 	.word	0x20000190
 8000a50:	40003400 	.word	0x40003400

08000a54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b088      	sub	sp, #32
 8000a58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5a:	f107 030c 	add.w	r3, r7, #12
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	60da      	str	r2, [r3, #12]
 8000a68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6a:	4b2d      	ldr	r3, [pc, #180]	; (8000b20 <MX_GPIO_Init+0xcc>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a2c      	ldr	r2, [pc, #176]	; (8000b20 <MX_GPIO_Init+0xcc>)
 8000a70:	f043 0304 	orr.w	r3, r3, #4
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b2a      	ldr	r3, [pc, #168]	; (8000b20 <MX_GPIO_Init+0xcc>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0304 	and.w	r3, r3, #4
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a82:	4b27      	ldr	r3, [pc, #156]	; (8000b20 <MX_GPIO_Init+0xcc>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a26      	ldr	r2, [pc, #152]	; (8000b20 <MX_GPIO_Init+0xcc>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b24      	ldr	r3, [pc, #144]	; (8000b20 <MX_GPIO_Init+0xcc>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a9a:	4b21      	ldr	r3, [pc, #132]	; (8000b20 <MX_GPIO_Init+0xcc>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a20      	ldr	r2, [pc, #128]	; (8000b20 <MX_GPIO_Init+0xcc>)
 8000aa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b1e      	ldr	r3, [pc, #120]	; (8000b20 <MX_GPIO_Init+0xcc>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aae:	603b      	str	r3, [r7, #0]
 8000ab0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED_Pin|START_BTN_LED_EN_Pin, GPIO_PIN_RESET);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2128      	movs	r1, #40	; 0x28
 8000ab6:	481b      	ldr	r0, [pc, #108]	; (8000b24 <MX_GPIO_Init+0xd0>)
 8000ab8:	f002 f9ba 	bl	8002e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BRAKE_LIGHT_EN_Pin|RTDS_EN_Pin, GPIO_PIN_RESET);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2109      	movs	r1, #9
 8000ac0:	4819      	ldr	r0, [pc, #100]	; (8000b28 <MX_GPIO_Init+0xd4>)
 8000ac2:	f002 f9b5 	bl	8002e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_LED_Pin START_BTN_LED_EN_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|START_BTN_LED_EN_Pin;
 8000ac6:	2328      	movs	r3, #40	; 0x28
 8000ac8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aca:	2301      	movs	r3, #1
 8000acc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad6:	f107 030c 	add.w	r3, r7, #12
 8000ada:	4619      	mov	r1, r3
 8000adc:	4811      	ldr	r0, [pc, #68]	; (8000b24 <MX_GPIO_Init+0xd0>)
 8000ade:	f001 fffb 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BRAKE_LIGHT_EN_Pin RTDS_EN_Pin */
  GPIO_InitStruct.Pin = BRAKE_LIGHT_EN_Pin|RTDS_EN_Pin;
 8000ae2:	2309      	movs	r3, #9
 8000ae4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000af2:	f107 030c 	add.w	r3, r7, #12
 8000af6:	4619      	mov	r1, r3
 8000af8:	480b      	ldr	r0, [pc, #44]	; (8000b28 <MX_GPIO_Init+0xd4>)
 8000afa:	f001 ffed 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BTN_n_Pin */
  GPIO_InitStruct.Pin = START_BTN_n_Pin;
 8000afe:	2340      	movs	r3, #64	; 0x40
 8000b00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b02:	2300      	movs	r3, #0
 8000b04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(START_BTN_n_GPIO_Port, &GPIO_InitStruct);
 8000b0a:	f107 030c 	add.w	r3, r7, #12
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4805      	ldr	r0, [pc, #20]	; (8000b28 <MX_GPIO_Init+0xd4>)
 8000b12:	f001 ffe1 	bl	8002ad8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b16:	bf00      	nop
 8000b18:	3720      	adds	r7, #32
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40020000 	.word	0x40020000
 8000b28:	40021800 	.word	0x40021800

08000b2c <CAN_Config>:

/* USER CODE BEGIN 4 */
static void CAN_Config(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08a      	sub	sp, #40	; 0x28
 8000b30:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 13;
 8000b32:	230d      	movs	r3, #13
 8000b34:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x284<<5;
 8000b3e:	f44f 43a1 	mov.w	r3, #20608	; 0x5080
 8000b42:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8000b44:	2300      	movs	r3, #0
 8000b46:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0xFFE<<5; //Only ID 0x284 and 0x285 can pass through
 8000b48:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <CAN_Config+0x6c>)
 8000b4a:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8000b54:	2301      	movs	r3, #1
 8000b56:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8000b5c:	463b      	mov	r3, r7
 8000b5e:	4619      	mov	r1, r3
 8000b60:	480e      	ldr	r0, [pc, #56]	; (8000b9c <CAN_Config+0x70>)
 8000b62:	f001 f96f 	bl	8001e44 <HAL_CAN_ConfigFilter>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <CAN_Config+0x44>
	{
		/* Filter configuration Error */
		Error_Handler();
 8000b6c:	f000 f9ea 	bl	8000f44 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8000b70:	480a      	ldr	r0, [pc, #40]	; (8000b9c <CAN_Config+0x70>)
 8000b72:	f001 fa53 	bl	800201c <HAL_CAN_Start>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <CAN_Config+0x54>
	{
		/* Start Error */
		Error_Handler();
 8000b7c:	f000 f9e2 	bl	8000f44 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan3) != HAL_OK)
 8000b80:	4807      	ldr	r0, [pc, #28]	; (8000ba0 <CAN_Config+0x74>)
 8000b82:	f001 fa4b 	bl	800201c <HAL_CAN_Start>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <CAN_Config+0x64>
	{
		/* Start Error */
		Error_Handler();
 8000b8c:	f000 f9da 	bl	8000f44 <Error_Handler>
	}
}
 8000b90:	bf00      	nop
 8000b92:	3728      	adds	r7, #40	; 0x28
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	0001ffc0 	.word	0x0001ffc0
 8000b9c:	20000168 	.word	0x20000168
 8000ba0:	20000190 	.word	0x20000190

08000ba4 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
	//Get Rx message
	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8000bac:	4b4e      	ldr	r3, [pc, #312]	; (8000ce8 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000bae:	4a4f      	ldr	r2, [pc, #316]	; (8000cec <HAL_CAN_RxFifo0MsgPendingCallback+0x148>)
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	484f      	ldr	r0, [pc, #316]	; (8000cf0 <HAL_CAN_RxFifo0MsgPendingCallback+0x14c>)
 8000bb4:	f001 fb46 	bl	8002244 <HAL_CAN_GetRxMessage>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
		Error_Handler();
 8000bbe:	f000 f9c1 	bl	8000f44 <Error_Handler>
	}

	if (RxHeader.StdId == 0x285) {
 8000bc2:	4b4a      	ldr	r3, [pc, #296]	; (8000cec <HAL_CAN_RxFifo0MsgPendingCallback+0x148>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f240 2285 	movw	r2, #645	; 0x285
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d142      	bne.n	8000c54 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>
		if ((RxData[1] >> 1) & 1) {
 8000bce:	4b46      	ldr	r3, [pc, #280]	; (8000ce8 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000bd0:	785b      	ldrb	r3, [r3, #1]
 8000bd2:	085b      	lsrs	r3, r3, #1
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d003      	beq.n	8000be6 <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
			MotorStatus_R = STATUS_ERROR;
 8000bde:	4b45      	ldr	r3, [pc, #276]	; (8000cf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000be0:	2207      	movs	r2, #7
 8000be2:	701a      	strb	r2, [r3, #0]
			return;
 8000be4:	e07d      	b.n	8000ce2 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
		} else if (RxData[1] >> 7 & 1){
 8000be6:	4b40      	ldr	r3, [pc, #256]	; (8000ce8 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000be8:	785b      	ldrb	r3, [r3, #1]
 8000bea:	09db      	lsrs	r3, r3, #7
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d003      	beq.n	8000bfe <HAL_CAN_RxFifo0MsgPendingCallback+0x5a>
			MotorStatus_R = STATUS_DERATING;
 8000bf6:	4b3f      	ldr	r3, [pc, #252]	; (8000cf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000bf8:	2206      	movs	r2, #6
 8000bfa:	701a      	strb	r2, [r3, #0]
			return;
 8000bfc:	e071      	b.n	8000ce2 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
		} else {
			switch(RxData[1]) {
 8000bfe:	4b3a      	ldr	r3, [pc, #232]	; (8000ce8 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000c00:	785b      	ldrb	r3, [r3, #1]
 8000c02:	2b79      	cmp	r3, #121	; 0x79
 8000c04:	d01e      	beq.n	8000c44 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>
 8000c06:	2b79      	cmp	r3, #121	; 0x79
 8000c08:	dc20      	bgt.n	8000c4c <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
 8000c0a:	2b59      	cmp	r3, #89	; 0x59
 8000c0c:	d016      	beq.n	8000c3c <HAL_CAN_RxFifo0MsgPendingCallback+0x98>
 8000c0e:	2b59      	cmp	r3, #89	; 0x59
 8000c10:	dc1c      	bgt.n	8000c4c <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
 8000c12:	2b19      	cmp	r3, #25
 8000c14:	d00e      	beq.n	8000c34 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>
 8000c16:	2b19      	cmp	r3, #25
 8000c18:	dc18      	bgt.n	8000c4c <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d002      	beq.n	8000c24 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>
 8000c1e:	2b11      	cmp	r3, #17
 8000c20:	d004      	beq.n	8000c2c <HAL_CAN_RxFifo0MsgPendingCallback+0x88>
 8000c22:	e013      	b.n	8000c4c <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
				case 0x01:
					MotorStatus_R = STATUS_SYSTEM_READY;
 8000c24:	4b33      	ldr	r3, [pc, #204]	; (8000cf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	701a      	strb	r2, [r3, #0]
					break;
 8000c2a:	e05a      	b.n	8000ce2 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x11:
					MotorStatus_R = STATUS_DC_ON;
 8000c2c:	4b31      	ldr	r3, [pc, #196]	; (8000cf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000c2e:	2202      	movs	r2, #2
 8000c30:	701a      	strb	r2, [r3, #0]
					break;
 8000c32:	e056      	b.n	8000ce2 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x19:
					MotorStatus_R = STATUS_QUIT_DC_ON;
 8000c34:	4b2f      	ldr	r3, [pc, #188]	; (8000cf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000c36:	2203      	movs	r2, #3
 8000c38:	701a      	strb	r2, [r3, #0]
					break;
 8000c3a:	e052      	b.n	8000ce2 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x59:
					MotorStatus_R = STATUS_INVERTER_ON;
 8000c3c:	4b2d      	ldr	r3, [pc, #180]	; (8000cf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000c3e:	2204      	movs	r2, #4
 8000c40:	701a      	strb	r2, [r3, #0]
					break;
 8000c42:	e04e      	b.n	8000ce2 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x79:
					MotorStatus_R = STATUS_QUIT_INVERTER_ON;
 8000c44:	4b2b      	ldr	r3, [pc, #172]	; (8000cf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000c46:	2205      	movs	r2, #5
 8000c48:	701a      	strb	r2, [r3, #0]
					break;
 8000c4a:	e04a      	b.n	8000ce2 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				default:
					MotorStatus_R = STATUS_UNKNOWN;
 8000c4c:	4b29      	ldr	r3, [pc, #164]	; (8000cf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	701a      	strb	r2, [r3, #0]
 8000c52:	e046      	b.n	8000ce2 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
			}
		}
	}
	else if (RxHeader.StdId == 0x284) {
 8000c54:	4b25      	ldr	r3, [pc, #148]	; (8000cec <HAL_CAN_RxFifo0MsgPendingCallback+0x148>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f5b3 7f21 	cmp.w	r3, #644	; 0x284
 8000c5c:	d141      	bne.n	8000ce2 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
		if ((RxData[1] >> 1) & 1) {
 8000c5e:	4b22      	ldr	r3, [pc, #136]	; (8000ce8 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000c60:	785b      	ldrb	r3, [r3, #1]
 8000c62:	085b      	lsrs	r3, r3, #1
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d003      	beq.n	8000c76 <HAL_CAN_RxFifo0MsgPendingCallback+0xd2>
			MotorStatus_L = STATUS_ERROR;
 8000c6e:	4b22      	ldr	r3, [pc, #136]	; (8000cf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000c70:	2207      	movs	r2, #7
 8000c72:	701a      	strb	r2, [r3, #0]
			return;
 8000c74:	e035      	b.n	8000ce2 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
		} else if (RxData[1] >> 7 & 1){
 8000c76:	4b1c      	ldr	r3, [pc, #112]	; (8000ce8 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000c78:	785b      	ldrb	r3, [r3, #1]
 8000c7a:	09db      	lsrs	r3, r3, #7
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d003      	beq.n	8000c8e <HAL_CAN_RxFifo0MsgPendingCallback+0xea>
			MotorStatus_L = STATUS_DERATING;
 8000c86:	4b1c      	ldr	r3, [pc, #112]	; (8000cf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000c88:	2206      	movs	r2, #6
 8000c8a:	701a      	strb	r2, [r3, #0]
			return;
 8000c8c:	e029      	b.n	8000ce2 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
		} else {
			switch(RxData[1]) {
 8000c8e:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000c90:	785b      	ldrb	r3, [r3, #1]
 8000c92:	2b79      	cmp	r3, #121	; 0x79
 8000c94:	d01e      	beq.n	8000cd4 <HAL_CAN_RxFifo0MsgPendingCallback+0x130>
 8000c96:	2b79      	cmp	r3, #121	; 0x79
 8000c98:	dc20      	bgt.n	8000cdc <HAL_CAN_RxFifo0MsgPendingCallback+0x138>
 8000c9a:	2b59      	cmp	r3, #89	; 0x59
 8000c9c:	d016      	beq.n	8000ccc <HAL_CAN_RxFifo0MsgPendingCallback+0x128>
 8000c9e:	2b59      	cmp	r3, #89	; 0x59
 8000ca0:	dc1c      	bgt.n	8000cdc <HAL_CAN_RxFifo0MsgPendingCallback+0x138>
 8000ca2:	2b19      	cmp	r3, #25
 8000ca4:	d00e      	beq.n	8000cc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>
 8000ca6:	2b19      	cmp	r3, #25
 8000ca8:	dc18      	bgt.n	8000cdc <HAL_CAN_RxFifo0MsgPendingCallback+0x138>
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d002      	beq.n	8000cb4 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>
 8000cae:	2b11      	cmp	r3, #17
 8000cb0:	d004      	beq.n	8000cbc <HAL_CAN_RxFifo0MsgPendingCallback+0x118>
 8000cb2:	e013      	b.n	8000cdc <HAL_CAN_RxFifo0MsgPendingCallback+0x138>
				case 0x01:
					MotorStatus_L = STATUS_SYSTEM_READY;
 8000cb4:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	701a      	strb	r2, [r3, #0]
					break;
 8000cba:	e012      	b.n	8000ce2 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x11:
					MotorStatus_L = STATUS_DC_ON;
 8000cbc:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000cbe:	2202      	movs	r2, #2
 8000cc0:	701a      	strb	r2, [r3, #0]
					break;
 8000cc2:	e00e      	b.n	8000ce2 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x19:
					MotorStatus_L = STATUS_QUIT_DC_ON;
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000cc6:	2203      	movs	r2, #3
 8000cc8:	701a      	strb	r2, [r3, #0]
					break;
 8000cca:	e00a      	b.n	8000ce2 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x59:
					MotorStatus_L = STATUS_INVERTER_ON;
 8000ccc:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000cce:	2204      	movs	r2, #4
 8000cd0:	701a      	strb	r2, [r3, #0]
					break;
 8000cd2:	e006      	b.n	8000ce2 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x79:
					MotorStatus_L = STATUS_QUIT_INVERTER_ON;
 8000cd4:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000cd6:	2205      	movs	r2, #5
 8000cd8:	701a      	strb	r2, [r3, #0]
					break;
 8000cda:	e002      	b.n	8000ce2 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				default:
					MotorStatus_L = STATUS_UNKNOWN;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	2000021c 	.word	0x2000021c
 8000cec:	200001f0 	.word	0x200001f0
 8000cf0:	20000168 	.word	0x20000168
 8000cf4:	20000228 	.word	0x20000228
 8000cf8:	20000229 	.word	0x20000229

08000cfc <Start_FRT_controller>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_FRT_controller */
void Start_FRT_controller(void *argument)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(50);
 8000d04:	2032      	movs	r0, #50	; 0x32
 8000d06:	f003 f997 	bl	8004038 <osDelay>
 8000d0a:	e7fb      	b.n	8000d04 <Start_FRT_controller+0x8>

08000d0c <Start_AMK>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_AMK */
void Start_AMK(void *argument)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_AMK */
  /* Infinite loop */
  for(;;)
  {
    osDelay(5);
 8000d14:	2005      	movs	r0, #5
 8000d16:	f003 f98f 	bl	8004038 <osDelay>
    APPS2_VAL = APPS2_ADC_Percent()*500;
 8000d1a:	f7ff fc13 	bl	8000544 <APPS2_ADC_Percent>
 8000d1e:	eef0 7a40 	vmov.f32	s15, s0
 8000d22:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8000edc <Start_AMK+0x1d0>
 8000d26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d2e:	ee17 3a90 	vmov	r3, s15
 8000d32:	b29a      	uxth	r2, r3
 8000d34:	4b6a      	ldr	r3, [pc, #424]	; (8000ee0 <Start_AMK+0x1d4>)
 8000d36:	801a      	strh	r2, [r3, #0]

	//HAL_GPIO_WritePin(BRAKE_LIGHT_EN_GPIO_Port, BRAKE_LIGHT_EN_Pin, GPIO_PIN_SET);
	//HAL_GPIO_WritePin(RTDS_EN_GPIO_Port, RTDS_EN_Pin, GPIO_PIN_SET);

    if ((MotorStatus_R == STATUS_SYSTEM_READY) && (MotorStatus_L == STATUS_SYSTEM_READY)) {
 8000d38:	4b6a      	ldr	r3, [pc, #424]	; (8000ee4 <Start_AMK+0x1d8>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d10d      	bne.n	8000d5c <Start_AMK+0x50>
 8000d40:	4b69      	ldr	r3, [pc, #420]	; (8000ee8 <Start_AMK+0x1dc>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d109      	bne.n	8000d5c <Start_AMK+0x50>
    	AMK_TxData_R[1] = 0x02;
 8000d48:	4b68      	ldr	r3, [pc, #416]	; (8000eec <Start_AMK+0x1e0>)
 8000d4a:	2202      	movs	r2, #2
 8000d4c:	705a      	strb	r2, [r3, #1]
    	AMK_TxData_L[1] = 0x02;
 8000d4e:	4b68      	ldr	r3, [pc, #416]	; (8000ef0 <Start_AMK+0x1e4>)
 8000d50:	2202      	movs	r2, #2
 8000d52:	705a      	strb	r2, [r3, #1]
		ControlStatus = CONTROL_DC_ON;
 8000d54:	4b67      	ldr	r3, [pc, #412]	; (8000ef4 <Start_AMK+0x1e8>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	701a      	strb	r2, [r3, #0]
 8000d5a:	e0a7      	b.n	8000eac <Start_AMK+0x1a0>
    } else if ((MotorStatus_R == STATUS_QUIT_DC_ON) && (MotorStatus_L == STATUS_QUIT_DC_ON)) {
 8000d5c:	4b61      	ldr	r3, [pc, #388]	; (8000ee4 <Start_AMK+0x1d8>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2b03      	cmp	r3, #3
 8000d62:	d121      	bne.n	8000da8 <Start_AMK+0x9c>
 8000d64:	4b60      	ldr	r3, [pc, #384]	; (8000ee8 <Start_AMK+0x1dc>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2b03      	cmp	r3, #3
 8000d6a:	d11d      	bne.n	8000da8 <Start_AMK+0x9c>
		AMK_TxData_L[1] = 0x07;
 8000d6c:	4b60      	ldr	r3, [pc, #384]	; (8000ef0 <Start_AMK+0x1e4>)
 8000d6e:	2207      	movs	r2, #7
 8000d70:	705a      	strb	r2, [r3, #1]
		AMK_TxData_R[1] = 0x07;
 8000d72:	4b5e      	ldr	r3, [pc, #376]	; (8000eec <Start_AMK+0x1e0>)
 8000d74:	2207      	movs	r2, #7
 8000d76:	705a      	strb	r2, [r3, #1]
		memset(&AMK_TxData_R[2],0x00, 2*sizeof(uint8_t));
 8000d78:	2202      	movs	r2, #2
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	485e      	ldr	r0, [pc, #376]	; (8000ef8 <Start_AMK+0x1ec>)
 8000d7e:	f005 fe71 	bl	8006a64 <memset>
		memset(&AMK_TxData_R[4],0x00, 2*sizeof(uint8_t));
 8000d82:	2202      	movs	r2, #2
 8000d84:	2100      	movs	r1, #0
 8000d86:	485d      	ldr	r0, [pc, #372]	; (8000efc <Start_AMK+0x1f0>)
 8000d88:	f005 fe6c 	bl	8006a64 <memset>
		memset(&AMK_TxData_L[2],0x00, 2*sizeof(uint8_t));
 8000d8c:	2202      	movs	r2, #2
 8000d8e:	2100      	movs	r1, #0
 8000d90:	485b      	ldr	r0, [pc, #364]	; (8000f00 <Start_AMK+0x1f4>)
 8000d92:	f005 fe67 	bl	8006a64 <memset>
		memset(&AMK_TxData_L[4],0x00, 2*sizeof(uint8_t));
 8000d96:	2202      	movs	r2, #2
 8000d98:	2100      	movs	r1, #0
 8000d9a:	485a      	ldr	r0, [pc, #360]	; (8000f04 <Start_AMK+0x1f8>)
 8000d9c:	f005 fe62 	bl	8006a64 <memset>
		ControlStatus = CONTROL_ENABLE;
 8000da0:	4b54      	ldr	r3, [pc, #336]	; (8000ef4 <Start_AMK+0x1e8>)
 8000da2:	2202      	movs	r2, #2
 8000da4:	701a      	strb	r2, [r3, #0]
 8000da6:	e081      	b.n	8000eac <Start_AMK+0x1a0>
    } else if ((MotorStatus_R == STATUS_INVERTER_ON) && (MotorStatus_L == STATUS_INVERTER_ON)) {
 8000da8:	4b4e      	ldr	r3, [pc, #312]	; (8000ee4 <Start_AMK+0x1d8>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b04      	cmp	r3, #4
 8000dae:	d126      	bne.n	8000dfe <Start_AMK+0xf2>
 8000db0:	4b4d      	ldr	r3, [pc, #308]	; (8000ee8 <Start_AMK+0x1dc>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b04      	cmp	r3, #4
 8000db6:	d122      	bne.n	8000dfe <Start_AMK+0xf2>
    	HAL_GPIO_WritePin(START_BTN_LED_EN_GPIO_Port, START_BTN_LED_EN_Pin, 1);
 8000db8:	2201      	movs	r2, #1
 8000dba:	2120      	movs	r1, #32
 8000dbc:	4852      	ldr	r0, [pc, #328]	; (8000f08 <Start_AMK+0x1fc>)
 8000dbe:	f002 f837 	bl	8002e30 <HAL_GPIO_WritePin>
    	AMK_TxData_L[1] = 0x07;
 8000dc2:	4b4b      	ldr	r3, [pc, #300]	; (8000ef0 <Start_AMK+0x1e4>)
 8000dc4:	2207      	movs	r2, #7
 8000dc6:	705a      	strb	r2, [r3, #1]
    	AMK_TxData_R[1] = 0x07;
 8000dc8:	4b48      	ldr	r3, [pc, #288]	; (8000eec <Start_AMK+0x1e0>)
 8000dca:	2207      	movs	r2, #7
 8000dcc:	705a      	strb	r2, [r3, #1]
    	memset(&AMK_TxData_R[2],0x00, 2*sizeof(uint8_t));
 8000dce:	2202      	movs	r2, #2
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4849      	ldr	r0, [pc, #292]	; (8000ef8 <Start_AMK+0x1ec>)
 8000dd4:	f005 fe46 	bl	8006a64 <memset>
    	memset(&AMK_TxData_R[4],0x00, 2*sizeof(uint8_t));
 8000dd8:	2202      	movs	r2, #2
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4847      	ldr	r0, [pc, #284]	; (8000efc <Start_AMK+0x1f0>)
 8000dde:	f005 fe41 	bl	8006a64 <memset>
    	memset(&AMK_TxData_L[2],0x00, 2*sizeof(uint8_t));
 8000de2:	2202      	movs	r2, #2
 8000de4:	2100      	movs	r1, #0
 8000de6:	4846      	ldr	r0, [pc, #280]	; (8000f00 <Start_AMK+0x1f4>)
 8000de8:	f005 fe3c 	bl	8006a64 <memset>
    	memset(&AMK_TxData_L[4],0x00, 2*sizeof(uint8_t));
 8000dec:	2202      	movs	r2, #2
 8000dee:	2100      	movs	r1, #0
 8000df0:	4844      	ldr	r0, [pc, #272]	; (8000f04 <Start_AMK+0x1f8>)
 8000df2:	f005 fe37 	bl	8006a64 <memset>
    	ControlStatus = CONTROL_INVERTER_ON;
 8000df6:	4b3f      	ldr	r3, [pc, #252]	; (8000ef4 <Start_AMK+0x1e8>)
 8000df8:	2203      	movs	r2, #3
 8000dfa:	701a      	strb	r2, [r3, #0]
 8000dfc:	e056      	b.n	8000eac <Start_AMK+0x1a0>
    } else if ((MotorStatus_R == STATUS_QUIT_INVERTER_ON) && (MotorStatus_L == STATUS_QUIT_INVERTER_ON)) {
 8000dfe:	4b39      	ldr	r3, [pc, #228]	; (8000ee4 <Start_AMK+0x1d8>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2b05      	cmp	r3, #5
 8000e04:	d139      	bne.n	8000e7a <Start_AMK+0x16e>
 8000e06:	4b38      	ldr	r3, [pc, #224]	; (8000ee8 <Start_AMK+0x1dc>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	2b05      	cmp	r3, #5
 8000e0c:	d135      	bne.n	8000e7a <Start_AMK+0x16e>
    	AMK_TxData_R[1] = 0x07;
 8000e0e:	4b37      	ldr	r3, [pc, #220]	; (8000eec <Start_AMK+0x1e0>)
 8000e10:	2207      	movs	r2, #7
 8000e12:	705a      	strb	r2, [r3, #1]
		AMK_TxData_R[2] = APPS2_VAL & 0xFF;
 8000e14:	4b32      	ldr	r3, [pc, #200]	; (8000ee0 <Start_AMK+0x1d4>)
 8000e16:	881b      	ldrh	r3, [r3, #0]
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	4b34      	ldr	r3, [pc, #208]	; (8000eec <Start_AMK+0x1e0>)
 8000e1c:	709a      	strb	r2, [r3, #2]
		AMK_TxData_R[3] = (APPS2_VAL >> 8) & 0xFF;
 8000e1e:	4b30      	ldr	r3, [pc, #192]	; (8000ee0 <Start_AMK+0x1d4>)
 8000e20:	881b      	ldrh	r3, [r3, #0]
 8000e22:	0a1b      	lsrs	r3, r3, #8
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	4b30      	ldr	r3, [pc, #192]	; (8000eec <Start_AMK+0x1e0>)
 8000e2a:	70da      	strb	r2, [r3, #3]
		AMK_TxData_R[4] = 0x32; //set positive torque request to 50
 8000e2c:	4b2f      	ldr	r3, [pc, #188]	; (8000eec <Start_AMK+0x1e0>)
 8000e2e:	2232      	movs	r2, #50	; 0x32
 8000e30:	711a      	strb	r2, [r3, #4]

		AMK_TxData_L[1] = 0x07;
 8000e32:	4b2f      	ldr	r3, [pc, #188]	; (8000ef0 <Start_AMK+0x1e4>)
 8000e34:	2207      	movs	r2, #7
 8000e36:	705a      	strb	r2, [r3, #1]
		AMK_TxData_L[2] = APPS2_VAL & 0xFF;
 8000e38:	4b29      	ldr	r3, [pc, #164]	; (8000ee0 <Start_AMK+0x1d4>)
 8000e3a:	881b      	ldrh	r3, [r3, #0]
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4b2c      	ldr	r3, [pc, #176]	; (8000ef0 <Start_AMK+0x1e4>)
 8000e40:	709a      	strb	r2, [r3, #2]
		AMK_TxData_L[3] = (APPS2_VAL >> 8) & 0xFF;
 8000e42:	4b27      	ldr	r3, [pc, #156]	; (8000ee0 <Start_AMK+0x1d4>)
 8000e44:	881b      	ldrh	r3, [r3, #0]
 8000e46:	0a1b      	lsrs	r3, r3, #8
 8000e48:	b29b      	uxth	r3, r3
 8000e4a:	b2da      	uxtb	r2, r3
 8000e4c:	4b28      	ldr	r3, [pc, #160]	; (8000ef0 <Start_AMK+0x1e4>)
 8000e4e:	70da      	strb	r2, [r3, #3]
		AMK_TxData_L[4] = 0x32;
 8000e50:	4b27      	ldr	r3, [pc, #156]	; (8000ef0 <Start_AMK+0x1e4>)
 8000e52:	2232      	movs	r2, #50	; 0x32
 8000e54:	711a      	strb	r2, [r3, #4]
		if (RxData[1] != 0x79) {
 8000e56:	4b2d      	ldr	r3, [pc, #180]	; (8000f0c <Start_AMK+0x200>)
 8000e58:	785b      	ldrb	r3, [r3, #1]
 8000e5a:	2b79      	cmp	r3, #121	; 0x79
 8000e5c:	d009      	beq.n	8000e72 <Start_AMK+0x166>
			memset(&AMK_TxData_R[2],0x00, 4*sizeof(uint8_t));
 8000e5e:	2204      	movs	r2, #4
 8000e60:	2100      	movs	r1, #0
 8000e62:	4825      	ldr	r0, [pc, #148]	; (8000ef8 <Start_AMK+0x1ec>)
 8000e64:	f005 fdfe 	bl	8006a64 <memset>
			memset(&AMK_TxData_L[2],0x00, 4*sizeof(uint8_t));
 8000e68:	2204      	movs	r2, #4
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	4824      	ldr	r0, [pc, #144]	; (8000f00 <Start_AMK+0x1f4>)
 8000e6e:	f005 fdf9 	bl	8006a64 <memset>
		}
		ControlStatus = CONTROL_RUNNING;
 8000e72:	4b20      	ldr	r3, [pc, #128]	; (8000ef4 <Start_AMK+0x1e8>)
 8000e74:	2206      	movs	r2, #6
 8000e76:	701a      	strb	r2, [r3, #0]
 8000e78:	e018      	b.n	8000eac <Start_AMK+0x1a0>
    } else if (MotorStatus_R == STATUS_ERROR) {
 8000e7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ee4 <Start_AMK+0x1d8>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	2b07      	cmp	r3, #7
 8000e80:	d106      	bne.n	8000e90 <Start_AMK+0x184>
    	AMK_TxData_R[1] = 0x08;
 8000e82:	4b1a      	ldr	r3, [pc, #104]	; (8000eec <Start_AMK+0x1e0>)
 8000e84:	2208      	movs	r2, #8
 8000e86:	705a      	strb	r2, [r3, #1]
		ControlStatus = CONTROL_ERROR_RESET_RIGHT;
 8000e88:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <Start_AMK+0x1e8>)
 8000e8a:	2204      	movs	r2, #4
 8000e8c:	701a      	strb	r2, [r3, #0]
 8000e8e:	e00d      	b.n	8000eac <Start_AMK+0x1a0>
    } else if (MotorStatus_L == STATUS_ERROR) {
 8000e90:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <Start_AMK+0x1dc>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b07      	cmp	r3, #7
 8000e96:	d106      	bne.n	8000ea6 <Start_AMK+0x19a>
    	AMK_TxData_L[1] = 0x08;
 8000e98:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <Start_AMK+0x1e4>)
 8000e9a:	2208      	movs	r2, #8
 8000e9c:	705a      	strb	r2, [r3, #1]
		ControlStatus = CONTROL_ERROR_RESET_LEFT;
 8000e9e:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <Start_AMK+0x1e8>)
 8000ea0:	2205      	movs	r2, #5
 8000ea2:	701a      	strb	r2, [r3, #0]
 8000ea4:	e002      	b.n	8000eac <Start_AMK+0x1a0>
    } else {
    	ControlStatus = CONTROL_UNKNOWN;
 8000ea6:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <Start_AMK+0x1e8>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	701a      	strb	r2, [r3, #0]
//				break;
//			default:
//				ControlStatus = CONTROL_UNKNOWN;
//		}

	HAL_CAN_AddTxMessage(&hcan1, &AMK_TxHeader_R, AMK_TxData_R, &TxMailbox);
 8000eac:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <Start_AMK+0x204>)
 8000eae:	4a0f      	ldr	r2, [pc, #60]	; (8000eec <Start_AMK+0x1e0>)
 8000eb0:	4918      	ldr	r1, [pc, #96]	; (8000f14 <Start_AMK+0x208>)
 8000eb2:	4819      	ldr	r0, [pc, #100]	; (8000f18 <Start_AMK+0x20c>)
 8000eb4:	f001 f8f6 	bl	80020a4 <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&hcan1, &AMK_TxHeader_L, AMK_TxData_L, &TxMailbox);
 8000eb8:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <Start_AMK+0x204>)
 8000eba:	4a0d      	ldr	r2, [pc, #52]	; (8000ef0 <Start_AMK+0x1e4>)
 8000ebc:	4917      	ldr	r1, [pc, #92]	; (8000f1c <Start_AMK+0x210>)
 8000ebe:	4816      	ldr	r0, [pc, #88]	; (8000f18 <Start_AMK+0x20c>)
 8000ec0:	f001 f8f0 	bl	80020a4 <HAL_CAN_AddTxMessage>
	memset(&AMK_TxData_R[0],0x00, 8*sizeof(uint8_t));
 8000ec4:	2208      	movs	r2, #8
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4808      	ldr	r0, [pc, #32]	; (8000eec <Start_AMK+0x1e0>)
 8000eca:	f005 fdcb 	bl	8006a64 <memset>
	memset(&AMK_TxData_L[0],0x00, 8*sizeof(uint8_t));
 8000ece:	2208      	movs	r2, #8
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4807      	ldr	r0, [pc, #28]	; (8000ef0 <Start_AMK+0x1e4>)
 8000ed4:	f005 fdc6 	bl	8006a64 <memset>
    osDelay(5);
 8000ed8:	e71c      	b.n	8000d14 <Start_AMK+0x8>
 8000eda:	bf00      	nop
 8000edc:	43fa0000 	.word	0x43fa0000
 8000ee0:	2000022c 	.word	0x2000022c
 8000ee4:	20000228 	.word	0x20000228
 8000ee8:	20000229 	.word	0x20000229
 8000eec:	2000020c 	.word	0x2000020c
 8000ef0:	20000214 	.word	0x20000214
 8000ef4:	2000022a 	.word	0x2000022a
 8000ef8:	2000020e 	.word	0x2000020e
 8000efc:	20000210 	.word	0x20000210
 8000f00:	20000216 	.word	0x20000216
 8000f04:	20000218 	.word	0x20000218
 8000f08:	40020000 	.word	0x40020000
 8000f0c:	2000021c 	.word	0x2000021c
 8000f10:	20000224 	.word	0x20000224
 8000f14:	200001c0 	.word	0x200001c0
 8000f18:	20000168 	.word	0x20000168
 8000f1c:	200001d8 	.word	0x200001d8

08000f20 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a04      	ldr	r2, [pc, #16]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d101      	bne.n	8000f36 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f32:	f000 fa3d 	bl	80013b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40001000 	.word	0x40001000

08000f44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f48:	b672      	cpsid	i
}
 8000f4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 1);
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	2108      	movs	r1, #8
 8000f50:	4801      	ldr	r0, [pc, #4]	; (8000f58 <Error_Handler+0x14>)
 8000f52:	f001 ff6d 	bl	8002e30 <HAL_GPIO_WritePin>
  while (1)
 8000f56:	e7fe      	b.n	8000f56 <Error_Handler+0x12>
 8000f58:	40020000 	.word	0x40020000

08000f5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f62:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <HAL_MspInit+0x4c>)
 8000f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f66:	4a10      	ldr	r2, [pc, #64]	; (8000fa8 <HAL_MspInit+0x4c>)
 8000f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <HAL_MspInit+0x4c>)
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <HAL_MspInit+0x4c>)
 8000f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7e:	4a0a      	ldr	r2, [pc, #40]	; (8000fa8 <HAL_MspInit+0x4c>)
 8000f80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f84:	6453      	str	r3, [r2, #68]	; 0x44
 8000f86:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <HAL_MspInit+0x4c>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f8e:	603b      	str	r3, [r7, #0]
 8000f90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f92:	2200      	movs	r2, #0
 8000f94:	210f      	movs	r1, #15
 8000f96:	f06f 0001 	mvn.w	r0, #1
 8000f9a:	f001 fd73 	bl	8002a84 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40023800 	.word	0x40023800

08000fac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08e      	sub	sp, #56	; 0x38
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a3f      	ldr	r2, [pc, #252]	; (80010c8 <HAL_ADC_MspInit+0x11c>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d124      	bne.n	8001018 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fce:	4b3f      	ldr	r3, [pc, #252]	; (80010cc <HAL_ADC_MspInit+0x120>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd2:	4a3e      	ldr	r2, [pc, #248]	; (80010cc <HAL_ADC_MspInit+0x120>)
 8000fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fda:	4b3c      	ldr	r3, [pc, #240]	; (80010cc <HAL_ADC_MspInit+0x120>)
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fe2:	623b      	str	r3, [r7, #32]
 8000fe4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe6:	4b39      	ldr	r3, [pc, #228]	; (80010cc <HAL_ADC_MspInit+0x120>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a38      	ldr	r2, [pc, #224]	; (80010cc <HAL_ADC_MspInit+0x120>)
 8000fec:	f043 0304 	orr.w	r3, r3, #4
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b36      	ldr	r3, [pc, #216]	; (80010cc <HAL_ADC_MspInit+0x120>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0304 	and.w	r3, r3, #4
 8000ffa:	61fb      	str	r3, [r7, #28]
 8000ffc:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = APPS1_Pin;
 8000ffe:	2301      	movs	r3, #1
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001002:	2303      	movs	r3, #3
 8001004:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(APPS1_GPIO_Port, &GPIO_InitStruct);
 800100a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800100e:	4619      	mov	r1, r3
 8001010:	482f      	ldr	r0, [pc, #188]	; (80010d0 <HAL_ADC_MspInit+0x124>)
 8001012:	f001 fd61 	bl	8002ad8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001016:	e052      	b.n	80010be <HAL_ADC_MspInit+0x112>
  else if(hadc->Instance==ADC2)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a2d      	ldr	r2, [pc, #180]	; (80010d4 <HAL_ADC_MspInit+0x128>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d124      	bne.n	800106c <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001022:	4b2a      	ldr	r3, [pc, #168]	; (80010cc <HAL_ADC_MspInit+0x120>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001026:	4a29      	ldr	r2, [pc, #164]	; (80010cc <HAL_ADC_MspInit+0x120>)
 8001028:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800102c:	6453      	str	r3, [r2, #68]	; 0x44
 800102e:	4b27      	ldr	r3, [pc, #156]	; (80010cc <HAL_ADC_MspInit+0x120>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001032:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001036:	61bb      	str	r3, [r7, #24]
 8001038:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800103a:	4b24      	ldr	r3, [pc, #144]	; (80010cc <HAL_ADC_MspInit+0x120>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a23      	ldr	r2, [pc, #140]	; (80010cc <HAL_ADC_MspInit+0x120>)
 8001040:	f043 0304 	orr.w	r3, r3, #4
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
 8001046:	4b21      	ldr	r3, [pc, #132]	; (80010cc <HAL_ADC_MspInit+0x120>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f003 0304 	and.w	r3, r3, #4
 800104e:	617b      	str	r3, [r7, #20]
 8001050:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = APPS2_Pin;
 8001052:	2302      	movs	r3, #2
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001056:	2303      	movs	r3, #3
 8001058:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(APPS2_GPIO_Port, &GPIO_InitStruct);
 800105e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001062:	4619      	mov	r1, r3
 8001064:	481a      	ldr	r0, [pc, #104]	; (80010d0 <HAL_ADC_MspInit+0x124>)
 8001066:	f001 fd37 	bl	8002ad8 <HAL_GPIO_Init>
}
 800106a:	e028      	b.n	80010be <HAL_ADC_MspInit+0x112>
  else if(hadc->Instance==ADC3)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a19      	ldr	r2, [pc, #100]	; (80010d8 <HAL_ADC_MspInit+0x12c>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d123      	bne.n	80010be <HAL_ADC_MspInit+0x112>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001076:	4b15      	ldr	r3, [pc, #84]	; (80010cc <HAL_ADC_MspInit+0x120>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107a:	4a14      	ldr	r2, [pc, #80]	; (80010cc <HAL_ADC_MspInit+0x120>)
 800107c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001080:	6453      	str	r3, [r2, #68]	; 0x44
 8001082:	4b12      	ldr	r3, [pc, #72]	; (80010cc <HAL_ADC_MspInit+0x120>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001086:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800108a:	613b      	str	r3, [r7, #16]
 800108c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800108e:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <HAL_ADC_MspInit+0x120>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	4a0e      	ldr	r2, [pc, #56]	; (80010cc <HAL_ADC_MspInit+0x120>)
 8001094:	f043 0304 	orr.w	r3, r3, #4
 8001098:	6313      	str	r3, [r2, #48]	; 0x30
 800109a:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <HAL_ADC_MspInit+0x120>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	f003 0304 	and.w	r3, r3, #4
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEERING_ANGLE_SENSOR_Pin|BPPS_BUFFERED_Pin;
 80010a6:	230c      	movs	r3, #12
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010aa:	2303      	movs	r3, #3
 80010ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b6:	4619      	mov	r1, r3
 80010b8:	4805      	ldr	r0, [pc, #20]	; (80010d0 <HAL_ADC_MspInit+0x124>)
 80010ba:	f001 fd0d 	bl	8002ad8 <HAL_GPIO_Init>
}
 80010be:	bf00      	nop
 80010c0:	3738      	adds	r7, #56	; 0x38
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40012000 	.word	0x40012000
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40020800 	.word	0x40020800
 80010d4:	40012100 	.word	0x40012100
 80010d8:	40012200 	.word	0x40012200

080010dc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08c      	sub	sp, #48	; 0x30
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 031c 	add.w	r3, r7, #28
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a33      	ldr	r2, [pc, #204]	; (80011c8 <HAL_CAN_MspInit+0xec>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d131      	bne.n	8001162 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80010fe:	4b33      	ldr	r3, [pc, #204]	; (80011cc <HAL_CAN_MspInit+0xf0>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	4a32      	ldr	r2, [pc, #200]	; (80011cc <HAL_CAN_MspInit+0xf0>)
 8001104:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001108:	6413      	str	r3, [r2, #64]	; 0x40
 800110a:	4b30      	ldr	r3, [pc, #192]	; (80011cc <HAL_CAN_MspInit+0xf0>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001112:	61bb      	str	r3, [r7, #24]
 8001114:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	4b2d      	ldr	r3, [pc, #180]	; (80011cc <HAL_CAN_MspInit+0xf0>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	4a2c      	ldr	r2, [pc, #176]	; (80011cc <HAL_CAN_MspInit+0xf0>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	6313      	str	r3, [r2, #48]	; 0x30
 8001122:	4b2a      	ldr	r3, [pc, #168]	; (80011cc <HAL_CAN_MspInit+0xf0>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	617b      	str	r3, [r7, #20]
 800112c:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800112e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001132:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001134:	2302      	movs	r3, #2
 8001136:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113c:	2303      	movs	r3, #3
 800113e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001140:	2309      	movs	r3, #9
 8001142:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001144:	f107 031c 	add.w	r3, r7, #28
 8001148:	4619      	mov	r1, r3
 800114a:	4821      	ldr	r0, [pc, #132]	; (80011d0 <HAL_CAN_MspInit+0xf4>)
 800114c:	f001 fcc4 	bl	8002ad8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001150:	2200      	movs	r2, #0
 8001152:	2105      	movs	r1, #5
 8001154:	2014      	movs	r0, #20
 8001156:	f001 fc95 	bl	8002a84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800115a:	2014      	movs	r0, #20
 800115c:	f001 fcae 	bl	8002abc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }

}
 8001160:	e02d      	b.n	80011be <HAL_CAN_MspInit+0xe2>
  else if(hcan->Instance==CAN3)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a1b      	ldr	r2, [pc, #108]	; (80011d4 <HAL_CAN_MspInit+0xf8>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d128      	bne.n	80011be <HAL_CAN_MspInit+0xe2>
    __HAL_RCC_CAN3_CLK_ENABLE();
 800116c:	4b17      	ldr	r3, [pc, #92]	; (80011cc <HAL_CAN_MspInit+0xf0>)
 800116e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001170:	4a16      	ldr	r2, [pc, #88]	; (80011cc <HAL_CAN_MspInit+0xf0>)
 8001172:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001176:	6413      	str	r3, [r2, #64]	; 0x40
 8001178:	4b14      	ldr	r3, [pc, #80]	; (80011cc <HAL_CAN_MspInit+0xf0>)
 800117a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001180:	613b      	str	r3, [r7, #16]
 8001182:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001184:	4b11      	ldr	r3, [pc, #68]	; (80011cc <HAL_CAN_MspInit+0xf0>)
 8001186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001188:	4a10      	ldr	r2, [pc, #64]	; (80011cc <HAL_CAN_MspInit+0xf0>)
 800118a:	f043 0301 	orr.w	r3, r3, #1
 800118e:	6313      	str	r3, [r2, #48]	; 0x30
 8001190:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <HAL_CAN_MspInit+0xf0>)
 8001192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 800119c:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80011a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a2:	2302      	movs	r3, #2
 80011a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011aa:	2303      	movs	r3, #3
 80011ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 80011ae:	230b      	movs	r3, #11
 80011b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b2:	f107 031c 	add.w	r3, r7, #28
 80011b6:	4619      	mov	r1, r3
 80011b8:	4805      	ldr	r0, [pc, #20]	; (80011d0 <HAL_CAN_MspInit+0xf4>)
 80011ba:	f001 fc8d 	bl	8002ad8 <HAL_GPIO_Init>
}
 80011be:	bf00      	nop
 80011c0:	3730      	adds	r7, #48	; 0x30
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40006400 	.word	0x40006400
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40020000 	.word	0x40020000
 80011d4:	40003400 	.word	0x40003400

080011d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08e      	sub	sp, #56	; 0x38
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80011e0:	2300      	movs	r3, #0
 80011e2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80011e4:	2300      	movs	r3, #0
 80011e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80011e8:	4b33      	ldr	r3, [pc, #204]	; (80012b8 <HAL_InitTick+0xe0>)
 80011ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ec:	4a32      	ldr	r2, [pc, #200]	; (80012b8 <HAL_InitTick+0xe0>)
 80011ee:	f043 0310 	orr.w	r3, r3, #16
 80011f2:	6413      	str	r3, [r2, #64]	; 0x40
 80011f4:	4b30      	ldr	r3, [pc, #192]	; (80012b8 <HAL_InitTick+0xe0>)
 80011f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f8:	f003 0310 	and.w	r3, r3, #16
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001200:	f107 0210 	add.w	r2, r7, #16
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	4611      	mov	r1, r2
 800120a:	4618      	mov	r0, r3
 800120c:	f002 faea 	bl	80037e4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001210:	6a3b      	ldr	r3, [r7, #32]
 8001212:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001216:	2b00      	cmp	r3, #0
 8001218:	d103      	bne.n	8001222 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800121a:	f002 facf 	bl	80037bc <HAL_RCC_GetPCLK1Freq>
 800121e:	6378      	str	r0, [r7, #52]	; 0x34
 8001220:	e004      	b.n	800122c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001222:	f002 facb 	bl	80037bc <HAL_RCC_GetPCLK1Freq>
 8001226:	4603      	mov	r3, r0
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800122c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800122e:	4a23      	ldr	r2, [pc, #140]	; (80012bc <HAL_InitTick+0xe4>)
 8001230:	fba2 2303 	umull	r2, r3, r2, r3
 8001234:	0c9b      	lsrs	r3, r3, #18
 8001236:	3b01      	subs	r3, #1
 8001238:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800123a:	4b21      	ldr	r3, [pc, #132]	; (80012c0 <HAL_InitTick+0xe8>)
 800123c:	4a21      	ldr	r2, [pc, #132]	; (80012c4 <HAL_InitTick+0xec>)
 800123e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001240:	4b1f      	ldr	r3, [pc, #124]	; (80012c0 <HAL_InitTick+0xe8>)
 8001242:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001246:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001248:	4a1d      	ldr	r2, [pc, #116]	; (80012c0 <HAL_InitTick+0xe8>)
 800124a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800124c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800124e:	4b1c      	ldr	r3, [pc, #112]	; (80012c0 <HAL_InitTick+0xe8>)
 8001250:	2200      	movs	r2, #0
 8001252:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001254:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <HAL_InitTick+0xe8>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800125a:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <HAL_InitTick+0xe8>)
 800125c:	2200      	movs	r2, #0
 800125e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001260:	4817      	ldr	r0, [pc, #92]	; (80012c0 <HAL_InitTick+0xe8>)
 8001262:	f002 faf1 	bl	8003848 <HAL_TIM_Base_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800126c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001270:	2b00      	cmp	r3, #0
 8001272:	d11b      	bne.n	80012ac <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001274:	4812      	ldr	r0, [pc, #72]	; (80012c0 <HAL_InitTick+0xe8>)
 8001276:	f002 fb49 	bl	800390c <HAL_TIM_Base_Start_IT>
 800127a:	4603      	mov	r3, r0
 800127c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001280:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001284:	2b00      	cmp	r3, #0
 8001286:	d111      	bne.n	80012ac <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001288:	2036      	movs	r0, #54	; 0x36
 800128a:	f001 fc17 	bl	8002abc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b0f      	cmp	r3, #15
 8001292:	d808      	bhi.n	80012a6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001294:	2200      	movs	r2, #0
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	2036      	movs	r0, #54	; 0x36
 800129a:	f001 fbf3 	bl	8002a84 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800129e:	4a0a      	ldr	r2, [pc, #40]	; (80012c8 <HAL_InitTick+0xf0>)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6013      	str	r3, [r2, #0]
 80012a4:	e002      	b.n	80012ac <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80012ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3738      	adds	r7, #56	; 0x38
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40023800 	.word	0x40023800
 80012bc:	431bde83 	.word	0x431bde83
 80012c0:	20000230 	.word	0x20000230
 80012c4:	40001000 	.word	0x40001000
 80012c8:	20000004 	.word	0x20000004

080012cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012d0:	e7fe      	b.n	80012d0 <NMI_Handler+0x4>

080012d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012d6:	e7fe      	b.n	80012d6 <HardFault_Handler+0x4>

080012d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012dc:	e7fe      	b.n	80012dc <MemManage_Handler+0x4>

080012de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012e2:	e7fe      	b.n	80012e2 <BusFault_Handler+0x4>

080012e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <UsageFault_Handler+0x4>

080012ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80012fc:	4802      	ldr	r0, [pc, #8]	; (8001308 <CAN1_RX0_IRQHandler+0x10>)
 80012fe:	f001 f8d9 	bl	80024b4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000168 	.word	0x20000168

0800130c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001310:	4802      	ldr	r0, [pc, #8]	; (800131c <TIM6_DAC_IRQHandler+0x10>)
 8001312:	f002 fb73 	bl	80039fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000230 	.word	0x20000230

08001320 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001324:	4b06      	ldr	r3, [pc, #24]	; (8001340 <SystemInit+0x20>)
 8001326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800132a:	4a05      	ldr	r2, [pc, #20]	; (8001340 <SystemInit+0x20>)
 800132c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001330:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001344:	f8df d034 	ldr.w	sp, [pc, #52]	; 800137c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001348:	480d      	ldr	r0, [pc, #52]	; (8001380 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800134a:	490e      	ldr	r1, [pc, #56]	; (8001384 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800134c:	4a0e      	ldr	r2, [pc, #56]	; (8001388 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800134e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001350:	e002      	b.n	8001358 <LoopCopyDataInit>

08001352 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001352:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001354:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001356:	3304      	adds	r3, #4

08001358 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001358:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800135a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800135c:	d3f9      	bcc.n	8001352 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800135e:	4a0b      	ldr	r2, [pc, #44]	; (800138c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001360:	4c0b      	ldr	r4, [pc, #44]	; (8001390 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001362:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001364:	e001      	b.n	800136a <LoopFillZerobss>

08001366 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001366:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001368:	3204      	adds	r2, #4

0800136a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800136a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800136c:	d3fb      	bcc.n	8001366 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800136e:	f7ff ffd7 	bl	8001320 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001372:	f005 fb43 	bl	80069fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001376:	f7ff f90b 	bl	8000590 <main>
  bx  lr    
 800137a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800137c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001380:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001384:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001388:	08006d18 	.word	0x08006d18
  ldr r2, =_sbss
 800138c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001390:	20004c90 	.word	0x20004c90

08001394 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001394:	e7fe      	b.n	8001394 <ADC_IRQHandler>

08001396 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800139a:	2003      	movs	r0, #3
 800139c:	f001 fb67 	bl	8002a6e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013a0:	200f      	movs	r0, #15
 80013a2:	f7ff ff19 	bl	80011d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013a6:	f7ff fdd9 	bl	8000f5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013aa:	2300      	movs	r3, #0
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <HAL_IncTick+0x20>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	461a      	mov	r2, r3
 80013ba:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <HAL_IncTick+0x24>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4413      	add	r3, r2
 80013c0:	4a04      	ldr	r2, [pc, #16]	; (80013d4 <HAL_IncTick+0x24>)
 80013c2:	6013      	str	r3, [r2, #0]
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	20000008 	.word	0x20000008
 80013d4:	2000027c 	.word	0x2000027c

080013d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  return uwTick;
 80013dc:	4b03      	ldr	r3, [pc, #12]	; (80013ec <HAL_GetTick+0x14>)
 80013de:	681b      	ldr	r3, [r3, #0]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	2000027c 	.word	0x2000027c

080013f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013f8:	2300      	movs	r3, #0
 80013fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d101      	bne.n	8001406 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e031      	b.n	800146a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	2b00      	cmp	r3, #0
 800140c:	d109      	bne.n	8001422 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff fdcc 	bl	8000fac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2200      	movs	r2, #0
 800141e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	f003 0310 	and.w	r3, r3, #16
 800142a:	2b00      	cmp	r3, #0
 800142c:	d116      	bne.n	800145c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001432:	4b10      	ldr	r3, [pc, #64]	; (8001474 <HAL_ADC_Init+0x84>)
 8001434:	4013      	ands	r3, r2
 8001436:	f043 0202 	orr.w	r2, r3, #2
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f000 fb0a 	bl	8001a58 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	f023 0303 	bic.w	r3, r3, #3
 8001452:	f043 0201 	orr.w	r2, r3, #1
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	641a      	str	r2, [r3, #64]	; 0x40
 800145a:	e001      	b.n	8001460 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2200      	movs	r2, #0
 8001464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001468:	7bfb      	ldrb	r3, [r7, #15]
}
 800146a:	4618      	mov	r0, r3
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	ffffeefd 	.word	0xffffeefd

08001478 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001480:	2300      	movs	r3, #0
 8001482:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800148a:	2b01      	cmp	r3, #1
 800148c:	d101      	bne.n	8001492 <HAL_ADC_Start+0x1a>
 800148e:	2302      	movs	r3, #2
 8001490:	e0ad      	b.n	80015ee <HAL_ADC_Start+0x176>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2201      	movs	r2, #1
 8001496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d018      	beq.n	80014da <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	689a      	ldr	r2, [r3, #8]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f042 0201 	orr.w	r2, r2, #1
 80014b6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80014b8:	4b50      	ldr	r3, [pc, #320]	; (80015fc <HAL_ADC_Start+0x184>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a50      	ldr	r2, [pc, #320]	; (8001600 <HAL_ADC_Start+0x188>)
 80014be:	fba2 2303 	umull	r2, r3, r2, r3
 80014c2:	0c9a      	lsrs	r2, r3, #18
 80014c4:	4613      	mov	r3, r2
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	4413      	add	r3, r2
 80014ca:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80014cc:	e002      	b.n	80014d4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	3b01      	subs	r3, #1
 80014d2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1f9      	bne.n	80014ce <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d175      	bne.n	80015d4 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014ec:	4b45      	ldr	r3, [pc, #276]	; (8001604 <HAL_ADC_Start+0x18c>)
 80014ee:	4013      	ands	r3, r2
 80014f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001502:	2b00      	cmp	r3, #0
 8001504:	d007      	beq.n	8001516 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800150e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800151e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001522:	d106      	bne.n	8001532 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001528:	f023 0206 	bic.w	r2, r3, #6
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	645a      	str	r2, [r3, #68]	; 0x44
 8001530:	e002      	b.n	8001538 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001548:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800154a:	4b2f      	ldr	r3, [pc, #188]	; (8001608 <HAL_ADC_Start+0x190>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f003 031f 	and.w	r3, r3, #31
 8001552:	2b00      	cmp	r3, #0
 8001554:	d10f      	bne.n	8001576 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d143      	bne.n	80015ec <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	689a      	ldr	r2, [r3, #8]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	e03a      	b.n	80015ec <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a24      	ldr	r2, [pc, #144]	; (800160c <HAL_ADC_Start+0x194>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d10e      	bne.n	800159e <HAL_ADC_Start+0x126>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d107      	bne.n	800159e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	689a      	ldr	r2, [r3, #8]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800159c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800159e:	4b1a      	ldr	r3, [pc, #104]	; (8001608 <HAL_ADC_Start+0x190>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f003 0310 	and.w	r3, r3, #16
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d120      	bne.n	80015ec <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a18      	ldr	r2, [pc, #96]	; (8001610 <HAL_ADC_Start+0x198>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d11b      	bne.n	80015ec <HAL_ADC_Start+0x174>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d114      	bne.n	80015ec <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	e00b      	b.n	80015ec <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d8:	f043 0210 	orr.w	r2, r3, #16
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e4:	f043 0201 	orr.w	r2, r3, #1
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	20000000 	.word	0x20000000
 8001600:	431bde83 	.word	0x431bde83
 8001604:	fffff8fe 	.word	0xfffff8fe
 8001608:	40012300 	.word	0x40012300
 800160c:	40012000 	.word	0x40012000
 8001610:	40012200 	.word	0x40012200

08001614 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001622:	2b01      	cmp	r3, #1
 8001624:	d101      	bne.n	800162a <HAL_ADC_Stop+0x16>
 8001626:	2302      	movs	r3, #2
 8001628:	e01f      	b.n	800166a <HAL_ADC_Stop+0x56>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2201      	movs	r2, #1
 800162e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	689a      	ldr	r2, [r3, #8]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f022 0201 	bic.w	r2, r2, #1
 8001640:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f003 0301 	and.w	r3, r3, #1
 800164c:	2b00      	cmp	r3, #0
 800164e:	d107      	bne.n	8001660 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <HAL_ADC_Stop+0x64>)
 8001656:	4013      	ands	r3, r2
 8001658:	f043 0201 	orr.w	r2, r3, #1
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	ffffeefe 	.word	0xffffeefe

0800167c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001694:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001698:	d113      	bne.n	80016c2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80016a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016a8:	d10b      	bne.n	80016c2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	f043 0220 	orr.w	r2, r3, #32
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e063      	b.n	800178a <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80016c2:	f7ff fe89 	bl	80013d8 <HAL_GetTick>
 80016c6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80016c8:	e021      	b.n	800170e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016d0:	d01d      	beq.n	800170e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d007      	beq.n	80016e8 <HAL_ADC_PollForConversion+0x6c>
 80016d8:	f7ff fe7e 	bl	80013d8 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	683a      	ldr	r2, [r7, #0]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d212      	bcs.n	800170e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d00b      	beq.n	800170e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	f043 0204 	orr.w	r2, r3, #4
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e03d      	b.n	800178a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	2b02      	cmp	r3, #2
 800171a:	d1d6      	bne.n	80016ca <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f06f 0212 	mvn.w	r2, #18
 8001724:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d123      	bne.n	8001788 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001744:	2b00      	cmp	r3, #0
 8001746:	d11f      	bne.n	8001788 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001752:	2b00      	cmp	r3, #0
 8001754:	d006      	beq.n	8001764 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001760:	2b00      	cmp	r3, #0
 8001762:	d111      	bne.n	8001788 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001768:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001774:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d105      	bne.n	8001788 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001780:	f043 0201 	orr.w	r2, r3, #1
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d101      	bne.n	80017c8 <HAL_ADC_ConfigChannel+0x1c>
 80017c4:	2302      	movs	r3, #2
 80017c6:	e136      	b.n	8001a36 <HAL_ADC_ConfigChannel+0x28a>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2201      	movs	r2, #1
 80017cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b09      	cmp	r3, #9
 80017d6:	d93a      	bls.n	800184e <HAL_ADC_ConfigChannel+0xa2>
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80017e0:	d035      	beq.n	800184e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	68d9      	ldr	r1, [r3, #12]
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	461a      	mov	r2, r3
 80017f0:	4613      	mov	r3, r2
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	4413      	add	r3, r2
 80017f6:	3b1e      	subs	r3, #30
 80017f8:	2207      	movs	r2, #7
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	43da      	mvns	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	400a      	ands	r2, r1
 8001806:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a8d      	ldr	r2, [pc, #564]	; (8001a44 <HAL_ADC_ConfigChannel+0x298>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d10a      	bne.n	8001828 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	68d9      	ldr	r1, [r3, #12]
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	061a      	lsls	r2, r3, #24
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	430a      	orrs	r2, r1
 8001824:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001826:	e035      	b.n	8001894 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	68d9      	ldr	r1, [r3, #12]
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	689a      	ldr	r2, [r3, #8]
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	b29b      	uxth	r3, r3
 8001838:	4618      	mov	r0, r3
 800183a:	4603      	mov	r3, r0
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	4403      	add	r3, r0
 8001840:	3b1e      	subs	r3, #30
 8001842:	409a      	lsls	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	430a      	orrs	r2, r1
 800184a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800184c:	e022      	b.n	8001894 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6919      	ldr	r1, [r3, #16]
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	b29b      	uxth	r3, r3
 800185a:	461a      	mov	r2, r3
 800185c:	4613      	mov	r3, r2
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	4413      	add	r3, r2
 8001862:	2207      	movs	r2, #7
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43da      	mvns	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	400a      	ands	r2, r1
 8001870:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	6919      	ldr	r1, [r3, #16]
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	689a      	ldr	r2, [r3, #8]
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	b29b      	uxth	r3, r3
 8001882:	4618      	mov	r0, r3
 8001884:	4603      	mov	r3, r0
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	4403      	add	r3, r0
 800188a:	409a      	lsls	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	430a      	orrs	r2, r1
 8001892:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	2b06      	cmp	r3, #6
 800189a:	d824      	bhi.n	80018e6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685a      	ldr	r2, [r3, #4]
 80018a6:	4613      	mov	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	4413      	add	r3, r2
 80018ac:	3b05      	subs	r3, #5
 80018ae:	221f      	movs	r2, #31
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	43da      	mvns	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	400a      	ands	r2, r1
 80018bc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	4618      	mov	r0, r3
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685a      	ldr	r2, [r3, #4]
 80018d0:	4613      	mov	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	4413      	add	r3, r2
 80018d6:	3b05      	subs	r3, #5
 80018d8:	fa00 f203 	lsl.w	r2, r0, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	430a      	orrs	r2, r1
 80018e2:	635a      	str	r2, [r3, #52]	; 0x34
 80018e4:	e04c      	b.n	8001980 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b0c      	cmp	r3, #12
 80018ec:	d824      	bhi.n	8001938 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685a      	ldr	r2, [r3, #4]
 80018f8:	4613      	mov	r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4413      	add	r3, r2
 80018fe:	3b23      	subs	r3, #35	; 0x23
 8001900:	221f      	movs	r2, #31
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43da      	mvns	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	400a      	ands	r2, r1
 800190e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	b29b      	uxth	r3, r3
 800191c:	4618      	mov	r0, r3
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685a      	ldr	r2, [r3, #4]
 8001922:	4613      	mov	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	3b23      	subs	r3, #35	; 0x23
 800192a:	fa00 f203 	lsl.w	r2, r0, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	430a      	orrs	r2, r1
 8001934:	631a      	str	r2, [r3, #48]	; 0x30
 8001936:	e023      	b.n	8001980 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685a      	ldr	r2, [r3, #4]
 8001942:	4613      	mov	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	4413      	add	r3, r2
 8001948:	3b41      	subs	r3, #65	; 0x41
 800194a:	221f      	movs	r2, #31
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	43da      	mvns	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	400a      	ands	r2, r1
 8001958:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	b29b      	uxth	r3, r3
 8001966:	4618      	mov	r0, r3
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685a      	ldr	r2, [r3, #4]
 800196c:	4613      	mov	r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	3b41      	subs	r3, #65	; 0x41
 8001974:	fa00 f203 	lsl.w	r2, r0, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	430a      	orrs	r2, r1
 800197e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a30      	ldr	r2, [pc, #192]	; (8001a48 <HAL_ADC_ConfigChannel+0x29c>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d10a      	bne.n	80019a0 <HAL_ADC_ConfigChannel+0x1f4>
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001992:	d105      	bne.n	80019a0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001994:	4b2d      	ldr	r3, [pc, #180]	; (8001a4c <HAL_ADC_ConfigChannel+0x2a0>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	4a2c      	ldr	r2, [pc, #176]	; (8001a4c <HAL_ADC_ConfigChannel+0x2a0>)
 800199a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800199e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a28      	ldr	r2, [pc, #160]	; (8001a48 <HAL_ADC_ConfigChannel+0x29c>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d10f      	bne.n	80019ca <HAL_ADC_ConfigChannel+0x21e>
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2b12      	cmp	r3, #18
 80019b0:	d10b      	bne.n	80019ca <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80019b2:	4b26      	ldr	r3, [pc, #152]	; (8001a4c <HAL_ADC_ConfigChannel+0x2a0>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	4a25      	ldr	r2, [pc, #148]	; (8001a4c <HAL_ADC_ConfigChannel+0x2a0>)
 80019b8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80019bc:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80019be:	4b23      	ldr	r3, [pc, #140]	; (8001a4c <HAL_ADC_ConfigChannel+0x2a0>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	4a22      	ldr	r2, [pc, #136]	; (8001a4c <HAL_ADC_ConfigChannel+0x2a0>)
 80019c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019c8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a1e      	ldr	r2, [pc, #120]	; (8001a48 <HAL_ADC_ConfigChannel+0x29c>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d12b      	bne.n	8001a2c <HAL_ADC_ConfigChannel+0x280>
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a1a      	ldr	r2, [pc, #104]	; (8001a44 <HAL_ADC_ConfigChannel+0x298>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d003      	beq.n	80019e6 <HAL_ADC_ConfigChannel+0x23a>
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2b11      	cmp	r3, #17
 80019e4:	d122      	bne.n	8001a2c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80019e6:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <HAL_ADC_ConfigChannel+0x2a0>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	4a18      	ldr	r2, [pc, #96]	; (8001a4c <HAL_ADC_ConfigChannel+0x2a0>)
 80019ec:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80019f0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80019f2:	4b16      	ldr	r3, [pc, #88]	; (8001a4c <HAL_ADC_ConfigChannel+0x2a0>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	4a15      	ldr	r2, [pc, #84]	; (8001a4c <HAL_ADC_ConfigChannel+0x2a0>)
 80019f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019fc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a10      	ldr	r2, [pc, #64]	; (8001a44 <HAL_ADC_ConfigChannel+0x298>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d111      	bne.n	8001a2c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001a08:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <HAL_ADC_ConfigChannel+0x2a4>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a11      	ldr	r2, [pc, #68]	; (8001a54 <HAL_ADC_ConfigChannel+0x2a8>)
 8001a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a12:	0c9a      	lsrs	r2, r3, #18
 8001a14:	4613      	mov	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001a1e:	e002      	b.n	8001a26 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	3b01      	subs	r3, #1
 8001a24:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1f9      	bne.n	8001a20 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	10000012 	.word	0x10000012
 8001a48:	40012000 	.word	0x40012000
 8001a4c:	40012300 	.word	0x40012300
 8001a50:	20000000 	.word	0x20000000
 8001a54:	431bde83 	.word	0x431bde83

08001a58 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001a60:	4b78      	ldr	r3, [pc, #480]	; (8001c44 <ADC_Init+0x1ec>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	4a77      	ldr	r2, [pc, #476]	; (8001c44 <ADC_Init+0x1ec>)
 8001a66:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001a6a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001a6c:	4b75      	ldr	r3, [pc, #468]	; (8001c44 <ADC_Init+0x1ec>)
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	4973      	ldr	r1, [pc, #460]	; (8001c44 <ADC_Init+0x1ec>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	685a      	ldr	r2, [r3, #4]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	6859      	ldr	r1, [r3, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	691b      	ldr	r3, [r3, #16]
 8001a94:	021a      	lsls	r2, r3, #8
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001aac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	6859      	ldr	r1, [r3, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	430a      	orrs	r2, r1
 8001abe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	689a      	ldr	r2, [r3, #8]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ace:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6899      	ldr	r1, [r3, #8]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68da      	ldr	r2, [r3, #12]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae6:	4a58      	ldr	r2, [pc, #352]	; (8001c48 <ADC_Init+0x1f0>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d022      	beq.n	8001b32 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	689a      	ldr	r2, [r3, #8]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001afa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6899      	ldr	r1, [r3, #8]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	689a      	ldr	r2, [r3, #8]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6899      	ldr	r1, [r3, #8]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	e00f      	b.n	8001b52 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b50:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f022 0202 	bic.w	r2, r2, #2
 8001b60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	6899      	ldr	r1, [r3, #8]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	005a      	lsls	r2, r3, #1
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	430a      	orrs	r2, r1
 8001b74:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d01b      	beq.n	8001bb8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b8e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	685a      	ldr	r2, [r3, #4]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b9e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6859      	ldr	r1, [r3, #4]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001baa:	3b01      	subs	r3, #1
 8001bac:	035a      	lsls	r2, r3, #13
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	e007      	b.n	8001bc8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	685a      	ldr	r2, [r3, #4]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bc6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001bd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	3b01      	subs	r3, #1
 8001be4:	051a      	lsls	r2, r3, #20
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	430a      	orrs	r2, r1
 8001bec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001bfc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	6899      	ldr	r1, [r3, #8]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c0a:	025a      	lsls	r2, r3, #9
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	430a      	orrs	r2, r1
 8001c12:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	689a      	ldr	r2, [r3, #8]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6899      	ldr	r1, [r3, #8]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	029a      	lsls	r2, r3, #10
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	430a      	orrs	r2, r1
 8001c36:	609a      	str	r2, [r3, #8]
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	40012300 	.word	0x40012300
 8001c48:	0f000001 	.word	0x0f000001

08001c4c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e0ed      	b.n	8001e3a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d102      	bne.n	8001c70 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff fa36 	bl	80010dc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f042 0201 	orr.w	r2, r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c80:	f7ff fbaa 	bl	80013d8 <HAL_GetTick>
 8001c84:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c86:	e012      	b.n	8001cae <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c88:	f7ff fba6 	bl	80013d8 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b0a      	cmp	r3, #10
 8001c94:	d90b      	bls.n	8001cae <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2205      	movs	r2, #5
 8001ca6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e0c5      	b.n	8001e3a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d0e5      	beq.n	8001c88 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f022 0202 	bic.w	r2, r2, #2
 8001cca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ccc:	f7ff fb84 	bl	80013d8 <HAL_GetTick>
 8001cd0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001cd2:	e012      	b.n	8001cfa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001cd4:	f7ff fb80 	bl	80013d8 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b0a      	cmp	r3, #10
 8001ce0:	d90b      	bls.n	8001cfa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2205      	movs	r2, #5
 8001cf2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e09f      	b.n	8001e3a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1e5      	bne.n	8001cd4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	7e1b      	ldrb	r3, [r3, #24]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d108      	bne.n	8001d22 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	e007      	b.n	8001d32 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d30:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	7e5b      	ldrb	r3, [r3, #25]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d108      	bne.n	8001d4c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	e007      	b.n	8001d5c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	7e9b      	ldrb	r3, [r3, #26]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d108      	bne.n	8001d76 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f042 0220 	orr.w	r2, r2, #32
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	e007      	b.n	8001d86 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f022 0220 	bic.w	r2, r2, #32
 8001d84:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	7edb      	ldrb	r3, [r3, #27]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d108      	bne.n	8001da0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 0210 	bic.w	r2, r2, #16
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	e007      	b.n	8001db0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f042 0210 	orr.w	r2, r2, #16
 8001dae:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	7f1b      	ldrb	r3, [r3, #28]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d108      	bne.n	8001dca <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f042 0208 	orr.w	r2, r2, #8
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	e007      	b.n	8001dda <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 0208 	bic.w	r2, r2, #8
 8001dd8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	7f5b      	ldrb	r3, [r3, #29]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d108      	bne.n	8001df4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f042 0204 	orr.w	r2, r2, #4
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	e007      	b.n	8001e04 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 0204 	bic.w	r2, r2, #4
 8001e02:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	431a      	orrs	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	695b      	ldr	r3, [r3, #20]
 8001e18:	ea42 0103 	orr.w	r1, r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	1e5a      	subs	r2, r3, #1
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	430a      	orrs	r2, r1
 8001e28:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
	...

08001e44 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b087      	sub	sp, #28
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e5a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001e5c:	7cfb      	ldrb	r3, [r7, #19]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d003      	beq.n	8001e6a <HAL_CAN_ConfigFilter+0x26>
 8001e62:	7cfb      	ldrb	r3, [r7, #19]
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	f040 80c7 	bne.w	8001ff8 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a69      	ldr	r2, [pc, #420]	; (8002014 <HAL_CAN_ConfigFilter+0x1d0>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d001      	beq.n	8001e78 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001e74:	4b68      	ldr	r3, [pc, #416]	; (8002018 <HAL_CAN_ConfigFilter+0x1d4>)
 8001e76:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e7e:	f043 0201 	orr.w	r2, r3, #1
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	4a63      	ldr	r2, [pc, #396]	; (8002018 <HAL_CAN_ConfigFilter+0x1d4>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d111      	bne.n	8001eb4 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e96:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eaa:	021b      	lsls	r3, r3, #8
 8001eac:	431a      	orrs	r2, r3
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	f003 031f 	and.w	r3, r3, #31
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	401a      	ands	r2, r3
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d123      	bne.n	8001f26 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	401a      	ands	r2, r3
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001f00:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	3248      	adds	r2, #72	; 0x48
 8001f06:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f1a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f1c:	6979      	ldr	r1, [r7, #20]
 8001f1e:	3348      	adds	r3, #72	; 0x48
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	440b      	add	r3, r1
 8001f24:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d122      	bne.n	8001f74 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	431a      	orrs	r2, r3
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001f4e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	3248      	adds	r2, #72	; 0x48
 8001f54:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f68:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f6a:	6979      	ldr	r1, [r7, #20]
 8001f6c:	3348      	adds	r3, #72	; 0x48
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	440b      	add	r3, r1
 8001f72:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d109      	bne.n	8001f90 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	43db      	mvns	r3, r3
 8001f86:	401a      	ands	r2, r3
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001f8e:	e007      	b.n	8001fa0 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	431a      	orrs	r2, r3
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d109      	bne.n	8001fbc <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	401a      	ands	r2, r3
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001fba:	e007      	b.n	8001fcc <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d107      	bne.n	8001fe4 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001fea:	f023 0201 	bic.w	r2, r3, #1
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	e006      	b.n	8002006 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
  }
}
 8002006:	4618      	mov	r0, r3
 8002008:	371c      	adds	r7, #28
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	40003400 	.word	0x40003400
 8002018:	40006400 	.word	0x40006400

0800201c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f893 3020 	ldrb.w	r3, [r3, #32]
 800202a:	b2db      	uxtb	r3, r3
 800202c:	2b01      	cmp	r3, #1
 800202e:	d12e      	bne.n	800208e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2202      	movs	r2, #2
 8002034:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f022 0201 	bic.w	r2, r2, #1
 8002046:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002048:	f7ff f9c6 	bl	80013d8 <HAL_GetTick>
 800204c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800204e:	e012      	b.n	8002076 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002050:	f7ff f9c2 	bl	80013d8 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b0a      	cmp	r3, #10
 800205c:	d90b      	bls.n	8002076 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002062:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2205      	movs	r2, #5
 800206e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e012      	b.n	800209c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1e5      	bne.n	8002050 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800208a:	2300      	movs	r3, #0
 800208c:	e006      	b.n	800209c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002092:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
  }
}
 800209c:	4618      	mov	r0, r3
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b089      	sub	sp, #36	; 0x24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
 80020b0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020b8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80020c2:	7ffb      	ldrb	r3, [r7, #31]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d003      	beq.n	80020d0 <HAL_CAN_AddTxMessage+0x2c>
 80020c8:	7ffb      	ldrb	r3, [r7, #31]
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	f040 80ad 	bne.w	800222a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10a      	bne.n	80020f0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d105      	bne.n	80020f0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f000 8095 	beq.w	800221a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	0e1b      	lsrs	r3, r3, #24
 80020f4:	f003 0303 	and.w	r3, r3, #3
 80020f8:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80020fa:	2201      	movs	r2, #1
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	409a      	lsls	r2, r3
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d10d      	bne.n	8002128 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002116:	68f9      	ldr	r1, [r7, #12]
 8002118:	6809      	ldr	r1, [r1, #0]
 800211a:	431a      	orrs	r2, r3
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	3318      	adds	r3, #24
 8002120:	011b      	lsls	r3, r3, #4
 8002122:	440b      	add	r3, r1
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	e00f      	b.n	8002148 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002132:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002138:	68f9      	ldr	r1, [r7, #12]
 800213a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800213c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	3318      	adds	r3, #24
 8002142:	011b      	lsls	r3, r3, #4
 8002144:	440b      	add	r3, r1
 8002146:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6819      	ldr	r1, [r3, #0]
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	691a      	ldr	r2, [r3, #16]
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	3318      	adds	r3, #24
 8002154:	011b      	lsls	r3, r3, #4
 8002156:	440b      	add	r3, r1
 8002158:	3304      	adds	r3, #4
 800215a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	7d1b      	ldrb	r3, [r3, #20]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d111      	bne.n	8002188 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	3318      	adds	r3, #24
 800216c:	011b      	lsls	r3, r3, #4
 800216e:	4413      	add	r3, r2
 8002170:	3304      	adds	r3, #4
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	6811      	ldr	r1, [r2, #0]
 8002178:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	3318      	adds	r3, #24
 8002180:	011b      	lsls	r3, r3, #4
 8002182:	440b      	add	r3, r1
 8002184:	3304      	adds	r3, #4
 8002186:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3307      	adds	r3, #7
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	061a      	lsls	r2, r3, #24
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3306      	adds	r3, #6
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	041b      	lsls	r3, r3, #16
 8002198:	431a      	orrs	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	3305      	adds	r3, #5
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	021b      	lsls	r3, r3, #8
 80021a2:	4313      	orrs	r3, r2
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	3204      	adds	r2, #4
 80021a8:	7812      	ldrb	r2, [r2, #0]
 80021aa:	4610      	mov	r0, r2
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	6811      	ldr	r1, [r2, #0]
 80021b0:	ea43 0200 	orr.w	r2, r3, r0
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	011b      	lsls	r3, r3, #4
 80021b8:	440b      	add	r3, r1
 80021ba:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80021be:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3303      	adds	r3, #3
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	061a      	lsls	r2, r3, #24
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3302      	adds	r3, #2
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	041b      	lsls	r3, r3, #16
 80021d0:	431a      	orrs	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	3301      	adds	r3, #1
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	021b      	lsls	r3, r3, #8
 80021da:	4313      	orrs	r3, r2
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	7812      	ldrb	r2, [r2, #0]
 80021e0:	4610      	mov	r0, r2
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	6811      	ldr	r1, [r2, #0]
 80021e6:	ea43 0200 	orr.w	r2, r3, r0
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	011b      	lsls	r3, r3, #4
 80021ee:	440b      	add	r3, r1
 80021f0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80021f4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	3318      	adds	r3, #24
 80021fe:	011b      	lsls	r3, r3, #4
 8002200:	4413      	add	r3, r2
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	6811      	ldr	r1, [r2, #0]
 8002208:	f043 0201 	orr.w	r2, r3, #1
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	3318      	adds	r3, #24
 8002210:	011b      	lsls	r3, r3, #4
 8002212:	440b      	add	r3, r1
 8002214:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002216:	2300      	movs	r3, #0
 8002218:	e00e      	b.n	8002238 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e006      	b.n	8002238 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
  }
}
 8002238:	4618      	mov	r0, r3
 800223a:	3724      	adds	r7, #36	; 0x24
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002244:	b480      	push	{r7}
 8002246:	b087      	sub	sp, #28
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
 8002250:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002258:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800225a:	7dfb      	ldrb	r3, [r7, #23]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d003      	beq.n	8002268 <HAL_CAN_GetRxMessage+0x24>
 8002260:	7dfb      	ldrb	r3, [r7, #23]
 8002262:	2b02      	cmp	r3, #2
 8002264:	f040 80f3 	bne.w	800244e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10e      	bne.n	800228c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	f003 0303 	and.w	r3, r3, #3
 8002278:	2b00      	cmp	r3, #0
 800227a:	d116      	bne.n	80022aa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002280:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e0e7      	b.n	800245c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	f003 0303 	and.w	r3, r3, #3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d107      	bne.n	80022aa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e0d8      	b.n	800245c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	331b      	adds	r3, #27
 80022b2:	011b      	lsls	r3, r3, #4
 80022b4:	4413      	add	r3, r2
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0204 	and.w	r2, r3, #4
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d10c      	bne.n	80022e2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	331b      	adds	r3, #27
 80022d0:	011b      	lsls	r3, r3, #4
 80022d2:	4413      	add	r3, r2
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	0d5b      	lsrs	r3, r3, #21
 80022d8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	e00b      	b.n	80022fa <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	331b      	adds	r3, #27
 80022ea:	011b      	lsls	r3, r3, #4
 80022ec:	4413      	add	r3, r2
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	08db      	lsrs	r3, r3, #3
 80022f2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	331b      	adds	r3, #27
 8002302:	011b      	lsls	r3, r3, #4
 8002304:	4413      	add	r3, r2
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0202 	and.w	r2, r3, #2
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	331b      	adds	r3, #27
 8002318:	011b      	lsls	r3, r3, #4
 800231a:	4413      	add	r3, r2
 800231c:	3304      	adds	r3, #4
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 020f 	and.w	r2, r3, #15
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	331b      	adds	r3, #27
 8002330:	011b      	lsls	r3, r3, #4
 8002332:	4413      	add	r3, r2
 8002334:	3304      	adds	r3, #4
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	0a1b      	lsrs	r3, r3, #8
 800233a:	b2da      	uxtb	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	331b      	adds	r3, #27
 8002348:	011b      	lsls	r3, r3, #4
 800234a:	4413      	add	r3, r2
 800234c:	3304      	adds	r3, #4
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	0c1b      	lsrs	r3, r3, #16
 8002352:	b29a      	uxth	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	011b      	lsls	r3, r3, #4
 8002360:	4413      	add	r3, r2
 8002362:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	b2da      	uxtb	r2, r3
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	011b      	lsls	r3, r3, #4
 8002376:	4413      	add	r3, r2
 8002378:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	0a1a      	lsrs	r2, r3, #8
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	3301      	adds	r3, #1
 8002384:	b2d2      	uxtb	r2, r2
 8002386:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	011b      	lsls	r3, r3, #4
 8002390:	4413      	add	r3, r2
 8002392:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	0c1a      	lsrs	r2, r3, #16
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	3302      	adds	r3, #2
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	011b      	lsls	r3, r3, #4
 80023aa:	4413      	add	r3, r2
 80023ac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	0e1a      	lsrs	r2, r3, #24
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	3303      	adds	r3, #3
 80023b8:	b2d2      	uxtb	r2, r2
 80023ba:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	011b      	lsls	r3, r3, #4
 80023c4:	4413      	add	r3, r2
 80023c6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	3304      	adds	r3, #4
 80023d0:	b2d2      	uxtb	r2, r2
 80023d2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	011b      	lsls	r3, r3, #4
 80023dc:	4413      	add	r3, r2
 80023de:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	0a1a      	lsrs	r2, r3, #8
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	3305      	adds	r3, #5
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	011b      	lsls	r3, r3, #4
 80023f6:	4413      	add	r3, r2
 80023f8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	0c1a      	lsrs	r2, r3, #16
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	3306      	adds	r3, #6
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	011b      	lsls	r3, r3, #4
 8002410:	4413      	add	r3, r2
 8002412:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	0e1a      	lsrs	r2, r3, #24
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	3307      	adds	r3, #7
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d108      	bne.n	800243a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68da      	ldr	r2, [r3, #12]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f042 0220 	orr.w	r2, r2, #32
 8002436:	60da      	str	r2, [r3, #12]
 8002438:	e007      	b.n	800244a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	691a      	ldr	r2, [r3, #16]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f042 0220 	orr.w	r2, r2, #32
 8002448:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800244a:	2300      	movs	r3, #0
 800244c:	e006      	b.n	800245c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002452:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
  }
}
 800245c:	4618      	mov	r0, r3
 800245e:	371c      	adds	r7, #28
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002478:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800247a:	7bfb      	ldrb	r3, [r7, #15]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d002      	beq.n	8002486 <HAL_CAN_ActivateNotification+0x1e>
 8002480:	7bfb      	ldrb	r3, [r7, #15]
 8002482:	2b02      	cmp	r3, #2
 8002484:	d109      	bne.n	800249a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	6959      	ldr	r1, [r3, #20]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	430a      	orrs	r2, r1
 8002494:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002496:	2300      	movs	r3, #0
 8002498:	e006      	b.n	80024a8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
  }
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3714      	adds	r7, #20
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b08a      	sub	sp, #40	; 0x28
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80024bc:	2300      	movs	r3, #0
 80024be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	695b      	ldr	r3, [r3, #20]
 80024c6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80024f0:	6a3b      	ldr	r3, [r7, #32]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d07c      	beq.n	80025f4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b00      	cmp	r3, #0
 8002502:	d023      	beq.n	800254c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2201      	movs	r2, #1
 800250a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d003      	beq.n	800251e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 f983 	bl	8002822 <HAL_CAN_TxMailbox0CompleteCallback>
 800251c:	e016      	b.n	800254c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	f003 0304 	and.w	r3, r3, #4
 8002524:	2b00      	cmp	r3, #0
 8002526:	d004      	beq.n	8002532 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800252e:	627b      	str	r3, [r7, #36]	; 0x24
 8002530:	e00c      	b.n	800254c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	f003 0308 	and.w	r3, r3, #8
 8002538:	2b00      	cmp	r3, #0
 800253a:	d004      	beq.n	8002546 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002542:	627b      	str	r3, [r7, #36]	; 0x24
 8002544:	e002      	b.n	800254c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 f989 	bl	800285e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002552:	2b00      	cmp	r3, #0
 8002554:	d024      	beq.n	80025a0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800255e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 f963 	bl	8002836 <HAL_CAN_TxMailbox1CompleteCallback>
 8002570:	e016      	b.n	80025a0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002578:	2b00      	cmp	r3, #0
 800257a:	d004      	beq.n	8002586 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002582:	627b      	str	r3, [r7, #36]	; 0x24
 8002584:	e00c      	b.n	80025a0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800258c:	2b00      	cmp	r3, #0
 800258e:	d004      	beq.n	800259a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002596:	627b      	str	r3, [r7, #36]	; 0x24
 8002598:	e002      	b.n	80025a0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 f969 	bl	8002872 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d024      	beq.n	80025f4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80025b2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 f943 	bl	800284a <HAL_CAN_TxMailbox2CompleteCallback>
 80025c4:	e016      	b.n	80025f4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d004      	beq.n	80025da <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80025d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025d6:	627b      	str	r3, [r7, #36]	; 0x24
 80025d8:	e00c      	b.n	80025f4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d004      	beq.n	80025ee <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ea:	627b      	str	r3, [r7, #36]	; 0x24
 80025ec:	e002      	b.n	80025f4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f949 	bl	8002886 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80025f4:	6a3b      	ldr	r3, [r7, #32]
 80025f6:	f003 0308 	and.w	r3, r3, #8
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00c      	beq.n	8002618 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	f003 0310 	and.w	r3, r3, #16
 8002604:	2b00      	cmp	r3, #0
 8002606:	d007      	beq.n	8002618 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800260e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2210      	movs	r2, #16
 8002616:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002618:	6a3b      	ldr	r3, [r7, #32]
 800261a:	f003 0304 	and.w	r3, r3, #4
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00b      	beq.n	800263a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	f003 0308 	and.w	r3, r3, #8
 8002628:	2b00      	cmp	r3, #0
 800262a:	d006      	beq.n	800263a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2208      	movs	r2, #8
 8002632:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 f930 	bl	800289a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800263a:	6a3b      	ldr	r3, [r7, #32]
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d009      	beq.n	8002658 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	f003 0303 	and.w	r3, r3, #3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d002      	beq.n	8002658 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7fe faa6 	bl	8000ba4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002658:	6a3b      	ldr	r3, [r7, #32]
 800265a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00c      	beq.n	800267c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	f003 0310 	and.w	r3, r3, #16
 8002668:	2b00      	cmp	r3, #0
 800266a:	d007      	beq.n	800267c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002672:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2210      	movs	r2, #16
 800267a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800267c:	6a3b      	ldr	r3, [r7, #32]
 800267e:	f003 0320 	and.w	r3, r3, #32
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00b      	beq.n	800269e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	f003 0308 	and.w	r3, r3, #8
 800268c:	2b00      	cmp	r3, #0
 800268e:	d006      	beq.n	800269e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2208      	movs	r2, #8
 8002696:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 f912 	bl	80028c2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800269e:	6a3b      	ldr	r3, [r7, #32]
 80026a0:	f003 0310 	and.w	r3, r3, #16
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d009      	beq.n	80026bc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	f003 0303 	and.w	r3, r3, #3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d002      	beq.n	80026bc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 f8f9 	bl	80028ae <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80026bc:	6a3b      	ldr	r3, [r7, #32]
 80026be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00b      	beq.n	80026de <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	f003 0310 	and.w	r3, r3, #16
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d006      	beq.n	80026de <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2210      	movs	r2, #16
 80026d6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 f8fc 	bl	80028d6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80026de:	6a3b      	ldr	r3, [r7, #32]
 80026e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00b      	beq.n	8002700 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f003 0308 	and.w	r3, r3, #8
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d006      	beq.n	8002700 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2208      	movs	r2, #8
 80026f8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f8f5 	bl	80028ea <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002700:	6a3b      	ldr	r3, [r7, #32]
 8002702:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d07b      	beq.n	8002802 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	f003 0304 	and.w	r3, r3, #4
 8002710:	2b00      	cmp	r3, #0
 8002712:	d072      	beq.n	80027fa <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002714:	6a3b      	ldr	r3, [r7, #32]
 8002716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800271a:	2b00      	cmp	r3, #0
 800271c:	d008      	beq.n	8002730 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002724:	2b00      	cmp	r3, #0
 8002726:	d003      	beq.n	8002730 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	f043 0301 	orr.w	r3, r3, #1
 800272e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002730:	6a3b      	ldr	r3, [r7, #32]
 8002732:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002736:	2b00      	cmp	r3, #0
 8002738:	d008      	beq.n	800274c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002740:	2b00      	cmp	r3, #0
 8002742:	d003      	beq.n	800274c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	f043 0302 	orr.w	r3, r3, #2
 800274a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800274c:	6a3b      	ldr	r3, [r7, #32]
 800274e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002752:	2b00      	cmp	r3, #0
 8002754:	d008      	beq.n	8002768 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002762:	f043 0304 	orr.w	r3, r3, #4
 8002766:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002768:	6a3b      	ldr	r3, [r7, #32]
 800276a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800276e:	2b00      	cmp	r3, #0
 8002770:	d043      	beq.n	80027fa <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002778:	2b00      	cmp	r3, #0
 800277a:	d03e      	beq.n	80027fa <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002782:	2b60      	cmp	r3, #96	; 0x60
 8002784:	d02b      	beq.n	80027de <HAL_CAN_IRQHandler+0x32a>
 8002786:	2b60      	cmp	r3, #96	; 0x60
 8002788:	d82e      	bhi.n	80027e8 <HAL_CAN_IRQHandler+0x334>
 800278a:	2b50      	cmp	r3, #80	; 0x50
 800278c:	d022      	beq.n	80027d4 <HAL_CAN_IRQHandler+0x320>
 800278e:	2b50      	cmp	r3, #80	; 0x50
 8002790:	d82a      	bhi.n	80027e8 <HAL_CAN_IRQHandler+0x334>
 8002792:	2b40      	cmp	r3, #64	; 0x40
 8002794:	d019      	beq.n	80027ca <HAL_CAN_IRQHandler+0x316>
 8002796:	2b40      	cmp	r3, #64	; 0x40
 8002798:	d826      	bhi.n	80027e8 <HAL_CAN_IRQHandler+0x334>
 800279a:	2b30      	cmp	r3, #48	; 0x30
 800279c:	d010      	beq.n	80027c0 <HAL_CAN_IRQHandler+0x30c>
 800279e:	2b30      	cmp	r3, #48	; 0x30
 80027a0:	d822      	bhi.n	80027e8 <HAL_CAN_IRQHandler+0x334>
 80027a2:	2b10      	cmp	r3, #16
 80027a4:	d002      	beq.n	80027ac <HAL_CAN_IRQHandler+0x2f8>
 80027a6:	2b20      	cmp	r3, #32
 80027a8:	d005      	beq.n	80027b6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80027aa:	e01d      	b.n	80027e8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80027ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ae:	f043 0308 	orr.w	r3, r3, #8
 80027b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027b4:	e019      	b.n	80027ea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	f043 0310 	orr.w	r3, r3, #16
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027be:	e014      	b.n	80027ea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	f043 0320 	orr.w	r3, r3, #32
 80027c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027c8:	e00f      	b.n	80027ea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027d2:	e00a      	b.n	80027ea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80027d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027dc:	e005      	b.n	80027ea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027e6:	e000      	b.n	80027ea <HAL_CAN_IRQHandler+0x336>
            break;
 80027e8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	699a      	ldr	r2, [r3, #24]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80027f8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2204      	movs	r2, #4
 8002800:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	2b00      	cmp	r3, #0
 8002806:	d008      	beq.n	800281a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280e:	431a      	orrs	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f000 f872 	bl	80028fe <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800281a:	bf00      	nop
 800281c:	3728      	adds	r7, #40	; 0x28
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800282a:	bf00      	nop
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002836:	b480      	push	{r7}
 8002838:	b083      	sub	sp, #12
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr

0800285e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800285e:	b480      	push	{r7}
 8002860:	b083      	sub	sp, #12
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800289a:	b480      	push	{r7}
 800289c:	b083      	sub	sp, #12
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr

080028ae <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b083      	sub	sp, #12
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr

080028c2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80028ca:	bf00      	nop
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b083      	sub	sp, #12
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80028de:	bf00      	nop
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b083      	sub	sp, #12
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80028fe:	b480      	push	{r7}
 8002900:	b083      	sub	sp, #12
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
	...

08002914 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002924:	4b0b      	ldr	r3, [pc, #44]	; (8002954 <__NVIC_SetPriorityGrouping+0x40>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800292a:	68ba      	ldr	r2, [r7, #8]
 800292c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002930:	4013      	ands	r3, r2
 8002932:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800293c:	4b06      	ldr	r3, [pc, #24]	; (8002958 <__NVIC_SetPriorityGrouping+0x44>)
 800293e:	4313      	orrs	r3, r2
 8002940:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002942:	4a04      	ldr	r2, [pc, #16]	; (8002954 <__NVIC_SetPriorityGrouping+0x40>)
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	60d3      	str	r3, [r2, #12]
}
 8002948:	bf00      	nop
 800294a:	3714      	adds	r7, #20
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	e000ed00 	.word	0xe000ed00
 8002958:	05fa0000 	.word	0x05fa0000

0800295c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002960:	4b04      	ldr	r3, [pc, #16]	; (8002974 <__NVIC_GetPriorityGrouping+0x18>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	0a1b      	lsrs	r3, r3, #8
 8002966:	f003 0307 	and.w	r3, r3, #7
}
 800296a:	4618      	mov	r0, r3
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	e000ed00 	.word	0xe000ed00

08002978 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002986:	2b00      	cmp	r3, #0
 8002988:	db0b      	blt.n	80029a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800298a:	79fb      	ldrb	r3, [r7, #7]
 800298c:	f003 021f 	and.w	r2, r3, #31
 8002990:	4907      	ldr	r1, [pc, #28]	; (80029b0 <__NVIC_EnableIRQ+0x38>)
 8002992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002996:	095b      	lsrs	r3, r3, #5
 8002998:	2001      	movs	r0, #1
 800299a:	fa00 f202 	lsl.w	r2, r0, r2
 800299e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	e000e100 	.word	0xe000e100

080029b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	6039      	str	r1, [r7, #0]
 80029be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	db0a      	blt.n	80029de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	490c      	ldr	r1, [pc, #48]	; (8002a00 <__NVIC_SetPriority+0x4c>)
 80029ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d2:	0112      	lsls	r2, r2, #4
 80029d4:	b2d2      	uxtb	r2, r2
 80029d6:	440b      	add	r3, r1
 80029d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029dc:	e00a      	b.n	80029f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	4908      	ldr	r1, [pc, #32]	; (8002a04 <__NVIC_SetPriority+0x50>)
 80029e4:	79fb      	ldrb	r3, [r7, #7]
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	3b04      	subs	r3, #4
 80029ec:	0112      	lsls	r2, r2, #4
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	440b      	add	r3, r1
 80029f2:	761a      	strb	r2, [r3, #24]
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	e000e100 	.word	0xe000e100
 8002a04:	e000ed00 	.word	0xe000ed00

08002a08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b089      	sub	sp, #36	; 0x24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	f1c3 0307 	rsb	r3, r3, #7
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	bf28      	it	cs
 8002a26:	2304      	movcs	r3, #4
 8002a28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	3304      	adds	r3, #4
 8002a2e:	2b06      	cmp	r3, #6
 8002a30:	d902      	bls.n	8002a38 <NVIC_EncodePriority+0x30>
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	3b03      	subs	r3, #3
 8002a36:	e000      	b.n	8002a3a <NVIC_EncodePriority+0x32>
 8002a38:	2300      	movs	r3, #0
 8002a3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	43da      	mvns	r2, r3
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	401a      	ands	r2, r3
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a50:	f04f 31ff 	mov.w	r1, #4294967295
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5a:	43d9      	mvns	r1, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a60:	4313      	orrs	r3, r2
         );
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3724      	adds	r7, #36	; 0x24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b082      	sub	sp, #8
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f7ff ff4c 	bl	8002914 <__NVIC_SetPriorityGrouping>
}
 8002a7c:	bf00      	nop
 8002a7e:	3708      	adds	r7, #8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
 8002a90:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a92:	2300      	movs	r3, #0
 8002a94:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a96:	f7ff ff61 	bl	800295c <__NVIC_GetPriorityGrouping>
 8002a9a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	68b9      	ldr	r1, [r7, #8]
 8002aa0:	6978      	ldr	r0, [r7, #20]
 8002aa2:	f7ff ffb1 	bl	8002a08 <NVIC_EncodePriority>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aac:	4611      	mov	r1, r2
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff ff80 	bl	80029b4 <__NVIC_SetPriority>
}
 8002ab4:	bf00      	nop
 8002ab6:	3718      	adds	r7, #24
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff ff54 	bl	8002978 <__NVIC_EnableIRQ>
}
 8002ad0:	bf00      	nop
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b089      	sub	sp, #36	; 0x24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002aea:	2300      	movs	r3, #0
 8002aec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002aee:	2300      	movs	r3, #0
 8002af0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002af2:	2300      	movs	r3, #0
 8002af4:	61fb      	str	r3, [r7, #28]
 8002af6:	e175      	b.n	8002de4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002af8:	2201      	movs	r2, #1
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	f040 8164 	bne.w	8002dde <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d005      	beq.n	8002b2e <HAL_GPIO_Init+0x56>
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f003 0303 	and.w	r3, r3, #3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d130      	bne.n	8002b90 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	2203      	movs	r2, #3
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	43db      	mvns	r3, r3
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	4013      	ands	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	68da      	ldr	r2, [r3, #12]
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b64:	2201      	movs	r2, #1
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4013      	ands	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	091b      	lsrs	r3, r3, #4
 8002b7a:	f003 0201 	and.w	r2, r3, #1
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f003 0303 	and.w	r3, r3, #3
 8002b98:	2b03      	cmp	r3, #3
 8002b9a:	d017      	beq.n	8002bcc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	43db      	mvns	r3, r3
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f003 0303 	and.w	r3, r3, #3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d123      	bne.n	8002c20 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	08da      	lsrs	r2, r3, #3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3208      	adds	r2, #8
 8002be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002be4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	f003 0307 	and.w	r3, r3, #7
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	220f      	movs	r2, #15
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	691a      	ldr	r2, [r3, #16]
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	08da      	lsrs	r2, r3, #3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	3208      	adds	r2, #8
 8002c1a:	69b9      	ldr	r1, [r7, #24]
 8002c1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	2203      	movs	r2, #3
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	43db      	mvns	r3, r3
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	4013      	ands	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f003 0203 	and.w	r2, r3, #3
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 80be 	beq.w	8002dde <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c62:	4b66      	ldr	r3, [pc, #408]	; (8002dfc <HAL_GPIO_Init+0x324>)
 8002c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c66:	4a65      	ldr	r2, [pc, #404]	; (8002dfc <HAL_GPIO_Init+0x324>)
 8002c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c6e:	4b63      	ldr	r3, [pc, #396]	; (8002dfc <HAL_GPIO_Init+0x324>)
 8002c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002c7a:	4a61      	ldr	r2, [pc, #388]	; (8002e00 <HAL_GPIO_Init+0x328>)
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	089b      	lsrs	r3, r3, #2
 8002c80:	3302      	adds	r3, #2
 8002c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	f003 0303 	and.w	r3, r3, #3
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	220f      	movs	r2, #15
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	43db      	mvns	r3, r3
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a58      	ldr	r2, [pc, #352]	; (8002e04 <HAL_GPIO_Init+0x32c>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d037      	beq.n	8002d16 <HAL_GPIO_Init+0x23e>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a57      	ldr	r2, [pc, #348]	; (8002e08 <HAL_GPIO_Init+0x330>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d031      	beq.n	8002d12 <HAL_GPIO_Init+0x23a>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a56      	ldr	r2, [pc, #344]	; (8002e0c <HAL_GPIO_Init+0x334>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d02b      	beq.n	8002d0e <HAL_GPIO_Init+0x236>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a55      	ldr	r2, [pc, #340]	; (8002e10 <HAL_GPIO_Init+0x338>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d025      	beq.n	8002d0a <HAL_GPIO_Init+0x232>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a54      	ldr	r2, [pc, #336]	; (8002e14 <HAL_GPIO_Init+0x33c>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d01f      	beq.n	8002d06 <HAL_GPIO_Init+0x22e>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a53      	ldr	r2, [pc, #332]	; (8002e18 <HAL_GPIO_Init+0x340>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d019      	beq.n	8002d02 <HAL_GPIO_Init+0x22a>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a52      	ldr	r2, [pc, #328]	; (8002e1c <HAL_GPIO_Init+0x344>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d013      	beq.n	8002cfe <HAL_GPIO_Init+0x226>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a51      	ldr	r2, [pc, #324]	; (8002e20 <HAL_GPIO_Init+0x348>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d00d      	beq.n	8002cfa <HAL_GPIO_Init+0x222>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a50      	ldr	r2, [pc, #320]	; (8002e24 <HAL_GPIO_Init+0x34c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d007      	beq.n	8002cf6 <HAL_GPIO_Init+0x21e>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a4f      	ldr	r2, [pc, #316]	; (8002e28 <HAL_GPIO_Init+0x350>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d101      	bne.n	8002cf2 <HAL_GPIO_Init+0x21a>
 8002cee:	2309      	movs	r3, #9
 8002cf0:	e012      	b.n	8002d18 <HAL_GPIO_Init+0x240>
 8002cf2:	230a      	movs	r3, #10
 8002cf4:	e010      	b.n	8002d18 <HAL_GPIO_Init+0x240>
 8002cf6:	2308      	movs	r3, #8
 8002cf8:	e00e      	b.n	8002d18 <HAL_GPIO_Init+0x240>
 8002cfa:	2307      	movs	r3, #7
 8002cfc:	e00c      	b.n	8002d18 <HAL_GPIO_Init+0x240>
 8002cfe:	2306      	movs	r3, #6
 8002d00:	e00a      	b.n	8002d18 <HAL_GPIO_Init+0x240>
 8002d02:	2305      	movs	r3, #5
 8002d04:	e008      	b.n	8002d18 <HAL_GPIO_Init+0x240>
 8002d06:	2304      	movs	r3, #4
 8002d08:	e006      	b.n	8002d18 <HAL_GPIO_Init+0x240>
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e004      	b.n	8002d18 <HAL_GPIO_Init+0x240>
 8002d0e:	2302      	movs	r3, #2
 8002d10:	e002      	b.n	8002d18 <HAL_GPIO_Init+0x240>
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <HAL_GPIO_Init+0x240>
 8002d16:	2300      	movs	r3, #0
 8002d18:	69fa      	ldr	r2, [r7, #28]
 8002d1a:	f002 0203 	and.w	r2, r2, #3
 8002d1e:	0092      	lsls	r2, r2, #2
 8002d20:	4093      	lsls	r3, r2
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002d28:	4935      	ldr	r1, [pc, #212]	; (8002e00 <HAL_GPIO_Init+0x328>)
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	089b      	lsrs	r3, r3, #2
 8002d2e:	3302      	adds	r3, #2
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d36:	4b3d      	ldr	r3, [pc, #244]	; (8002e2c <HAL_GPIO_Init+0x354>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4013      	ands	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d5a:	4a34      	ldr	r2, [pc, #208]	; (8002e2c <HAL_GPIO_Init+0x354>)
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d60:	4b32      	ldr	r3, [pc, #200]	; (8002e2c <HAL_GPIO_Init+0x354>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d84:	4a29      	ldr	r2, [pc, #164]	; (8002e2c <HAL_GPIO_Init+0x354>)
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d8a:	4b28      	ldr	r3, [pc, #160]	; (8002e2c <HAL_GPIO_Init+0x354>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	43db      	mvns	r3, r3
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	4013      	ands	r3, r2
 8002d98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dae:	4a1f      	ldr	r2, [pc, #124]	; (8002e2c <HAL_GPIO_Init+0x354>)
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002db4:	4b1d      	ldr	r3, [pc, #116]	; (8002e2c <HAL_GPIO_Init+0x354>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d003      	beq.n	8002dd8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dd8:	4a14      	ldr	r2, [pc, #80]	; (8002e2c <HAL_GPIO_Init+0x354>)
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	3301      	adds	r3, #1
 8002de2:	61fb      	str	r3, [r7, #28]
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	2b0f      	cmp	r3, #15
 8002de8:	f67f ae86 	bls.w	8002af8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002dec:	bf00      	nop
 8002dee:	bf00      	nop
 8002df0:	3724      	adds	r7, #36	; 0x24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	40013800 	.word	0x40013800
 8002e04:	40020000 	.word	0x40020000
 8002e08:	40020400 	.word	0x40020400
 8002e0c:	40020800 	.word	0x40020800
 8002e10:	40020c00 	.word	0x40020c00
 8002e14:	40021000 	.word	0x40021000
 8002e18:	40021400 	.word	0x40021400
 8002e1c:	40021800 	.word	0x40021800
 8002e20:	40021c00 	.word	0x40021c00
 8002e24:	40022000 	.word	0x40022000
 8002e28:	40022400 	.word	0x40022400
 8002e2c:	40013c00 	.word	0x40013c00

08002e30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	460b      	mov	r3, r1
 8002e3a:	807b      	strh	r3, [r7, #2]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e40:	787b      	ldrb	r3, [r7, #1]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e46:	887a      	ldrh	r2, [r7, #2]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002e4c:	e003      	b.n	8002e56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002e4e:	887b      	ldrh	r3, [r7, #2]
 8002e50:	041a      	lsls	r2, r3, #16
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	619a      	str	r2, [r3, #24]
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
	...

08002e64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e29b      	b.n	80033b2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f000 8087 	beq.w	8002f96 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e88:	4b96      	ldr	r3, [pc, #600]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f003 030c 	and.w	r3, r3, #12
 8002e90:	2b04      	cmp	r3, #4
 8002e92:	d00c      	beq.n	8002eae <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e94:	4b93      	ldr	r3, [pc, #588]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f003 030c 	and.w	r3, r3, #12
 8002e9c:	2b08      	cmp	r3, #8
 8002e9e:	d112      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x62>
 8002ea0:	4b90      	ldr	r3, [pc, #576]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ea8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eac:	d10b      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eae:	4b8d      	ldr	r3, [pc, #564]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d06c      	beq.n	8002f94 <HAL_RCC_OscConfig+0x130>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d168      	bne.n	8002f94 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e275      	b.n	80033b2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ece:	d106      	bne.n	8002ede <HAL_RCC_OscConfig+0x7a>
 8002ed0:	4b84      	ldr	r3, [pc, #528]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a83      	ldr	r2, [pc, #524]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002ed6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eda:	6013      	str	r3, [r2, #0]
 8002edc:	e02e      	b.n	8002f3c <HAL_RCC_OscConfig+0xd8>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10c      	bne.n	8002f00 <HAL_RCC_OscConfig+0x9c>
 8002ee6:	4b7f      	ldr	r3, [pc, #508]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a7e      	ldr	r2, [pc, #504]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002eec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ef0:	6013      	str	r3, [r2, #0]
 8002ef2:	4b7c      	ldr	r3, [pc, #496]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a7b      	ldr	r2, [pc, #492]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002ef8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002efc:	6013      	str	r3, [r2, #0]
 8002efe:	e01d      	b.n	8002f3c <HAL_RCC_OscConfig+0xd8>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f08:	d10c      	bne.n	8002f24 <HAL_RCC_OscConfig+0xc0>
 8002f0a:	4b76      	ldr	r3, [pc, #472]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a75      	ldr	r2, [pc, #468]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002f10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f14:	6013      	str	r3, [r2, #0]
 8002f16:	4b73      	ldr	r3, [pc, #460]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a72      	ldr	r2, [pc, #456]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f20:	6013      	str	r3, [r2, #0]
 8002f22:	e00b      	b.n	8002f3c <HAL_RCC_OscConfig+0xd8>
 8002f24:	4b6f      	ldr	r3, [pc, #444]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a6e      	ldr	r2, [pc, #440]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002f2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f2e:	6013      	str	r3, [r2, #0]
 8002f30:	4b6c      	ldr	r3, [pc, #432]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a6b      	ldr	r2, [pc, #428]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002f36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d013      	beq.n	8002f6c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f44:	f7fe fa48 	bl	80013d8 <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f4a:	e008      	b.n	8002f5e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f4c:	f7fe fa44 	bl	80013d8 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b64      	cmp	r3, #100	; 0x64
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e229      	b.n	80033b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f5e:	4b61      	ldr	r3, [pc, #388]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d0f0      	beq.n	8002f4c <HAL_RCC_OscConfig+0xe8>
 8002f6a:	e014      	b.n	8002f96 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6c:	f7fe fa34 	bl	80013d8 <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f74:	f7fe fa30 	bl	80013d8 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b64      	cmp	r3, #100	; 0x64
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e215      	b.n	80033b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f86:	4b57      	ldr	r3, [pc, #348]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1f0      	bne.n	8002f74 <HAL_RCC_OscConfig+0x110>
 8002f92:	e000      	b.n	8002f96 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d069      	beq.n	8003076 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fa2:	4b50      	ldr	r3, [pc, #320]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 030c 	and.w	r3, r3, #12
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00b      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fae:	4b4d      	ldr	r3, [pc, #308]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 030c 	and.w	r3, r3, #12
 8002fb6:	2b08      	cmp	r3, #8
 8002fb8:	d11c      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x190>
 8002fba:	4b4a      	ldr	r3, [pc, #296]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d116      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fc6:	4b47      	ldr	r3, [pc, #284]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d005      	beq.n	8002fde <HAL_RCC_OscConfig+0x17a>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d001      	beq.n	8002fde <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e1e9      	b.n	80033b2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fde:	4b41      	ldr	r3, [pc, #260]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	493d      	ldr	r1, [pc, #244]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ff2:	e040      	b.n	8003076 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d023      	beq.n	8003044 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ffc:	4b39      	ldr	r3, [pc, #228]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a38      	ldr	r2, [pc, #224]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8003002:	f043 0301 	orr.w	r3, r3, #1
 8003006:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003008:	f7fe f9e6 	bl	80013d8 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003010:	f7fe f9e2 	bl	80013d8 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e1c7      	b.n	80033b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003022:	4b30      	ldr	r3, [pc, #192]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0f0      	beq.n	8003010 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800302e:	4b2d      	ldr	r3, [pc, #180]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	4929      	ldr	r1, [pc, #164]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 800303e:	4313      	orrs	r3, r2
 8003040:	600b      	str	r3, [r1, #0]
 8003042:	e018      	b.n	8003076 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003044:	4b27      	ldr	r3, [pc, #156]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a26      	ldr	r2, [pc, #152]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 800304a:	f023 0301 	bic.w	r3, r3, #1
 800304e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003050:	f7fe f9c2 	bl	80013d8 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003058:	f7fe f9be 	bl	80013d8 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e1a3      	b.n	80033b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800306a:	4b1e      	ldr	r3, [pc, #120]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1f0      	bne.n	8003058 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0308 	and.w	r3, r3, #8
 800307e:	2b00      	cmp	r3, #0
 8003080:	d038      	beq.n	80030f4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d019      	beq.n	80030be <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800308a:	4b16      	ldr	r3, [pc, #88]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 800308c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800308e:	4a15      	ldr	r2, [pc, #84]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8003090:	f043 0301 	orr.w	r3, r3, #1
 8003094:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003096:	f7fe f99f 	bl	80013d8 <HAL_GetTick>
 800309a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800309c:	e008      	b.n	80030b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800309e:	f7fe f99b 	bl	80013d8 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e180      	b.n	80033b2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030b0:	4b0c      	ldr	r3, [pc, #48]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 80030b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d0f0      	beq.n	800309e <HAL_RCC_OscConfig+0x23a>
 80030bc:	e01a      	b.n	80030f4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030be:	4b09      	ldr	r3, [pc, #36]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 80030c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030c2:	4a08      	ldr	r2, [pc, #32]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 80030c4:	f023 0301 	bic.w	r3, r3, #1
 80030c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ca:	f7fe f985 	bl	80013d8 <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030d0:	e00a      	b.n	80030e8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030d2:	f7fe f981 	bl	80013d8 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d903      	bls.n	80030e8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e166      	b.n	80033b2 <HAL_RCC_OscConfig+0x54e>
 80030e4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030e8:	4b92      	ldr	r3, [pc, #584]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 80030ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1ee      	bne.n	80030d2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0304 	and.w	r3, r3, #4
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 80a4 	beq.w	800324a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003102:	4b8c      	ldr	r3, [pc, #560]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10d      	bne.n	800312a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800310e:	4b89      	ldr	r3, [pc, #548]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	4a88      	ldr	r2, [pc, #544]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 8003114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003118:	6413      	str	r3, [r2, #64]	; 0x40
 800311a:	4b86      	ldr	r3, [pc, #536]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003122:	60bb      	str	r3, [r7, #8]
 8003124:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003126:	2301      	movs	r3, #1
 8003128:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800312a:	4b83      	ldr	r3, [pc, #524]	; (8003338 <HAL_RCC_OscConfig+0x4d4>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003132:	2b00      	cmp	r3, #0
 8003134:	d118      	bne.n	8003168 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003136:	4b80      	ldr	r3, [pc, #512]	; (8003338 <HAL_RCC_OscConfig+0x4d4>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a7f      	ldr	r2, [pc, #508]	; (8003338 <HAL_RCC_OscConfig+0x4d4>)
 800313c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003140:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003142:	f7fe f949 	bl	80013d8 <HAL_GetTick>
 8003146:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003148:	e008      	b.n	800315c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800314a:	f7fe f945 	bl	80013d8 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b64      	cmp	r3, #100	; 0x64
 8003156:	d901      	bls.n	800315c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e12a      	b.n	80033b2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800315c:	4b76      	ldr	r3, [pc, #472]	; (8003338 <HAL_RCC_OscConfig+0x4d4>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0f0      	beq.n	800314a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d106      	bne.n	800317e <HAL_RCC_OscConfig+0x31a>
 8003170:	4b70      	ldr	r3, [pc, #448]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 8003172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003174:	4a6f      	ldr	r2, [pc, #444]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 8003176:	f043 0301 	orr.w	r3, r3, #1
 800317a:	6713      	str	r3, [r2, #112]	; 0x70
 800317c:	e02d      	b.n	80031da <HAL_RCC_OscConfig+0x376>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10c      	bne.n	80031a0 <HAL_RCC_OscConfig+0x33c>
 8003186:	4b6b      	ldr	r3, [pc, #428]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 8003188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318a:	4a6a      	ldr	r2, [pc, #424]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 800318c:	f023 0301 	bic.w	r3, r3, #1
 8003190:	6713      	str	r3, [r2, #112]	; 0x70
 8003192:	4b68      	ldr	r3, [pc, #416]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 8003194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003196:	4a67      	ldr	r2, [pc, #412]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 8003198:	f023 0304 	bic.w	r3, r3, #4
 800319c:	6713      	str	r3, [r2, #112]	; 0x70
 800319e:	e01c      	b.n	80031da <HAL_RCC_OscConfig+0x376>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	2b05      	cmp	r3, #5
 80031a6:	d10c      	bne.n	80031c2 <HAL_RCC_OscConfig+0x35e>
 80031a8:	4b62      	ldr	r3, [pc, #392]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 80031aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ac:	4a61      	ldr	r2, [pc, #388]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 80031ae:	f043 0304 	orr.w	r3, r3, #4
 80031b2:	6713      	str	r3, [r2, #112]	; 0x70
 80031b4:	4b5f      	ldr	r3, [pc, #380]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 80031b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b8:	4a5e      	ldr	r2, [pc, #376]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 80031ba:	f043 0301 	orr.w	r3, r3, #1
 80031be:	6713      	str	r3, [r2, #112]	; 0x70
 80031c0:	e00b      	b.n	80031da <HAL_RCC_OscConfig+0x376>
 80031c2:	4b5c      	ldr	r3, [pc, #368]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 80031c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c6:	4a5b      	ldr	r2, [pc, #364]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 80031c8:	f023 0301 	bic.w	r3, r3, #1
 80031cc:	6713      	str	r3, [r2, #112]	; 0x70
 80031ce:	4b59      	ldr	r3, [pc, #356]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 80031d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d2:	4a58      	ldr	r2, [pc, #352]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 80031d4:	f023 0304 	bic.w	r3, r3, #4
 80031d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d015      	beq.n	800320e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e2:	f7fe f8f9 	bl	80013d8 <HAL_GetTick>
 80031e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e8:	e00a      	b.n	8003200 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ea:	f7fe f8f5 	bl	80013d8 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e0d8      	b.n	80033b2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003200:	4b4c      	ldr	r3, [pc, #304]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 8003202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0ee      	beq.n	80031ea <HAL_RCC_OscConfig+0x386>
 800320c:	e014      	b.n	8003238 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800320e:	f7fe f8e3 	bl	80013d8 <HAL_GetTick>
 8003212:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003214:	e00a      	b.n	800322c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003216:	f7fe f8df 	bl	80013d8 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	f241 3288 	movw	r2, #5000	; 0x1388
 8003224:	4293      	cmp	r3, r2
 8003226:	d901      	bls.n	800322c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e0c2      	b.n	80033b2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800322c:	4b41      	ldr	r3, [pc, #260]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 800322e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1ee      	bne.n	8003216 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003238:	7dfb      	ldrb	r3, [r7, #23]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d105      	bne.n	800324a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800323e:	4b3d      	ldr	r3, [pc, #244]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	4a3c      	ldr	r2, [pc, #240]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 8003244:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003248:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	2b00      	cmp	r3, #0
 8003250:	f000 80ae 	beq.w	80033b0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003254:	4b37      	ldr	r3, [pc, #220]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f003 030c 	and.w	r3, r3, #12
 800325c:	2b08      	cmp	r3, #8
 800325e:	d06d      	beq.n	800333c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	2b02      	cmp	r3, #2
 8003266:	d14b      	bne.n	8003300 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003268:	4b32      	ldr	r3, [pc, #200]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a31      	ldr	r2, [pc, #196]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 800326e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003272:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003274:	f7fe f8b0 	bl	80013d8 <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800327c:	f7fe f8ac 	bl	80013d8 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e091      	b.n	80033b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800328e:	4b29      	ldr	r3, [pc, #164]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1f0      	bne.n	800327c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	69da      	ldr	r2, [r3, #28]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	431a      	orrs	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	019b      	lsls	r3, r3, #6
 80032aa:	431a      	orrs	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b0:	085b      	lsrs	r3, r3, #1
 80032b2:	3b01      	subs	r3, #1
 80032b4:	041b      	lsls	r3, r3, #16
 80032b6:	431a      	orrs	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032bc:	061b      	lsls	r3, r3, #24
 80032be:	431a      	orrs	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c4:	071b      	lsls	r3, r3, #28
 80032c6:	491b      	ldr	r1, [pc, #108]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032cc:	4b19      	ldr	r3, [pc, #100]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a18      	ldr	r2, [pc, #96]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 80032d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d8:	f7fe f87e 	bl	80013d8 <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032e0:	f7fe f87a 	bl	80013d8 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e05f      	b.n	80033b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032f2:	4b10      	ldr	r3, [pc, #64]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d0f0      	beq.n	80032e0 <HAL_RCC_OscConfig+0x47c>
 80032fe:	e057      	b.n	80033b0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003300:	4b0c      	ldr	r3, [pc, #48]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a0b      	ldr	r2, [pc, #44]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 8003306:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800330a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330c:	f7fe f864 	bl	80013d8 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003314:	f7fe f860 	bl	80013d8 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e045      	b.n	80033b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003326:	4b03      	ldr	r3, [pc, #12]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1f0      	bne.n	8003314 <HAL_RCC_OscConfig+0x4b0>
 8003332:	e03d      	b.n	80033b0 <HAL_RCC_OscConfig+0x54c>
 8003334:	40023800 	.word	0x40023800
 8003338:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800333c:	4b1f      	ldr	r3, [pc, #124]	; (80033bc <HAL_RCC_OscConfig+0x558>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d030      	beq.n	80033ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003354:	429a      	cmp	r2, r3
 8003356:	d129      	bne.n	80033ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003362:	429a      	cmp	r2, r3
 8003364:	d122      	bne.n	80033ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800336c:	4013      	ands	r3, r2
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003372:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003374:	4293      	cmp	r3, r2
 8003376:	d119      	bne.n	80033ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003382:	085b      	lsrs	r3, r3, #1
 8003384:	3b01      	subs	r3, #1
 8003386:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003388:	429a      	cmp	r2, r3
 800338a:	d10f      	bne.n	80033ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003396:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003398:	429a      	cmp	r2, r3
 800339a:	d107      	bne.n	80033ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d001      	beq.n	80033b0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e000      	b.n	80033b2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3718      	adds	r7, #24
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	40023800 	.word	0x40023800

080033c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80033ca:	2300      	movs	r3, #0
 80033cc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d101      	bne.n	80033d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e0d0      	b.n	800357a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033d8:	4b6a      	ldr	r3, [pc, #424]	; (8003584 <HAL_RCC_ClockConfig+0x1c4>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 030f 	and.w	r3, r3, #15
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d910      	bls.n	8003408 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033e6:	4b67      	ldr	r3, [pc, #412]	; (8003584 <HAL_RCC_ClockConfig+0x1c4>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f023 020f 	bic.w	r2, r3, #15
 80033ee:	4965      	ldr	r1, [pc, #404]	; (8003584 <HAL_RCC_ClockConfig+0x1c4>)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033f6:	4b63      	ldr	r3, [pc, #396]	; (8003584 <HAL_RCC_ClockConfig+0x1c4>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 030f 	and.w	r3, r3, #15
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	429a      	cmp	r2, r3
 8003402:	d001      	beq.n	8003408 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e0b8      	b.n	800357a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d020      	beq.n	8003456 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0304 	and.w	r3, r3, #4
 800341c:	2b00      	cmp	r3, #0
 800341e:	d005      	beq.n	800342c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003420:	4b59      	ldr	r3, [pc, #356]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	4a58      	ldr	r2, [pc, #352]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 8003426:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800342a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0308 	and.w	r3, r3, #8
 8003434:	2b00      	cmp	r3, #0
 8003436:	d005      	beq.n	8003444 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003438:	4b53      	ldr	r3, [pc, #332]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	4a52      	ldr	r2, [pc, #328]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 800343e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003442:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003444:	4b50      	ldr	r3, [pc, #320]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	494d      	ldr	r1, [pc, #308]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 8003452:	4313      	orrs	r3, r2
 8003454:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b00      	cmp	r3, #0
 8003460:	d040      	beq.n	80034e4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d107      	bne.n	800347a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800346a:	4b47      	ldr	r3, [pc, #284]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d115      	bne.n	80034a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e07f      	b.n	800357a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	2b02      	cmp	r3, #2
 8003480:	d107      	bne.n	8003492 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003482:	4b41      	ldr	r3, [pc, #260]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d109      	bne.n	80034a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e073      	b.n	800357a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003492:	4b3d      	ldr	r3, [pc, #244]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e06b      	b.n	800357a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034a2:	4b39      	ldr	r3, [pc, #228]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f023 0203 	bic.w	r2, r3, #3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	4936      	ldr	r1, [pc, #216]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034b4:	f7fd ff90 	bl	80013d8 <HAL_GetTick>
 80034b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ba:	e00a      	b.n	80034d2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034bc:	f7fd ff8c 	bl	80013d8 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e053      	b.n	800357a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034d2:	4b2d      	ldr	r3, [pc, #180]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f003 020c 	and.w	r2, r3, #12
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d1eb      	bne.n	80034bc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034e4:	4b27      	ldr	r3, [pc, #156]	; (8003584 <HAL_RCC_ClockConfig+0x1c4>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 030f 	and.w	r3, r3, #15
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d210      	bcs.n	8003514 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034f2:	4b24      	ldr	r3, [pc, #144]	; (8003584 <HAL_RCC_ClockConfig+0x1c4>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f023 020f 	bic.w	r2, r3, #15
 80034fa:	4922      	ldr	r1, [pc, #136]	; (8003584 <HAL_RCC_ClockConfig+0x1c4>)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	4313      	orrs	r3, r2
 8003500:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003502:	4b20      	ldr	r3, [pc, #128]	; (8003584 <HAL_RCC_ClockConfig+0x1c4>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 030f 	and.w	r3, r3, #15
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	429a      	cmp	r2, r3
 800350e:	d001      	beq.n	8003514 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e032      	b.n	800357a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	2b00      	cmp	r3, #0
 800351e:	d008      	beq.n	8003532 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003520:	4b19      	ldr	r3, [pc, #100]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	4916      	ldr	r1, [pc, #88]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 800352e:	4313      	orrs	r3, r2
 8003530:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	2b00      	cmp	r3, #0
 800353c:	d009      	beq.n	8003552 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800353e:	4b12      	ldr	r3, [pc, #72]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	490e      	ldr	r1, [pc, #56]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 800354e:	4313      	orrs	r3, r2
 8003550:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003552:	f000 f821 	bl	8003598 <HAL_RCC_GetSysClockFreq>
 8003556:	4602      	mov	r2, r0
 8003558:	4b0b      	ldr	r3, [pc, #44]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	091b      	lsrs	r3, r3, #4
 800355e:	f003 030f 	and.w	r3, r3, #15
 8003562:	490a      	ldr	r1, [pc, #40]	; (800358c <HAL_RCC_ClockConfig+0x1cc>)
 8003564:	5ccb      	ldrb	r3, [r1, r3]
 8003566:	fa22 f303 	lsr.w	r3, r2, r3
 800356a:	4a09      	ldr	r2, [pc, #36]	; (8003590 <HAL_RCC_ClockConfig+0x1d0>)
 800356c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800356e:	4b09      	ldr	r3, [pc, #36]	; (8003594 <HAL_RCC_ClockConfig+0x1d4>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f7fd fe30 	bl	80011d8 <HAL_InitTick>

  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	40023c00 	.word	0x40023c00
 8003588:	40023800 	.word	0x40023800
 800358c:	08006c90 	.word	0x08006c90
 8003590:	20000000 	.word	0x20000000
 8003594:	20000004 	.word	0x20000004

08003598 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800359c:	b094      	sub	sp, #80	; 0x50
 800359e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80035a0:	2300      	movs	r3, #0
 80035a2:	647b      	str	r3, [r7, #68]	; 0x44
 80035a4:	2300      	movs	r3, #0
 80035a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035a8:	2300      	movs	r3, #0
 80035aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80035ac:	2300      	movs	r3, #0
 80035ae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035b0:	4b79      	ldr	r3, [pc, #484]	; (8003798 <HAL_RCC_GetSysClockFreq+0x200>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f003 030c 	and.w	r3, r3, #12
 80035b8:	2b08      	cmp	r3, #8
 80035ba:	d00d      	beq.n	80035d8 <HAL_RCC_GetSysClockFreq+0x40>
 80035bc:	2b08      	cmp	r3, #8
 80035be:	f200 80e1 	bhi.w	8003784 <HAL_RCC_GetSysClockFreq+0x1ec>
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d002      	beq.n	80035cc <HAL_RCC_GetSysClockFreq+0x34>
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	d003      	beq.n	80035d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80035ca:	e0db      	b.n	8003784 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035cc:	4b73      	ldr	r3, [pc, #460]	; (800379c <HAL_RCC_GetSysClockFreq+0x204>)
 80035ce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035d0:	e0db      	b.n	800378a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035d2:	4b73      	ldr	r3, [pc, #460]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80035d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035d6:	e0d8      	b.n	800378a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035d8:	4b6f      	ldr	r3, [pc, #444]	; (8003798 <HAL_RCC_GetSysClockFreq+0x200>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035e0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80035e2:	4b6d      	ldr	r3, [pc, #436]	; (8003798 <HAL_RCC_GetSysClockFreq+0x200>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d063      	beq.n	80036b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ee:	4b6a      	ldr	r3, [pc, #424]	; (8003798 <HAL_RCC_GetSysClockFreq+0x200>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	099b      	lsrs	r3, r3, #6
 80035f4:	2200      	movs	r2, #0
 80035f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80035f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80035fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003600:	633b      	str	r3, [r7, #48]	; 0x30
 8003602:	2300      	movs	r3, #0
 8003604:	637b      	str	r3, [r7, #52]	; 0x34
 8003606:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800360a:	4622      	mov	r2, r4
 800360c:	462b      	mov	r3, r5
 800360e:	f04f 0000 	mov.w	r0, #0
 8003612:	f04f 0100 	mov.w	r1, #0
 8003616:	0159      	lsls	r1, r3, #5
 8003618:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800361c:	0150      	lsls	r0, r2, #5
 800361e:	4602      	mov	r2, r0
 8003620:	460b      	mov	r3, r1
 8003622:	4621      	mov	r1, r4
 8003624:	1a51      	subs	r1, r2, r1
 8003626:	6139      	str	r1, [r7, #16]
 8003628:	4629      	mov	r1, r5
 800362a:	eb63 0301 	sbc.w	r3, r3, r1
 800362e:	617b      	str	r3, [r7, #20]
 8003630:	f04f 0200 	mov.w	r2, #0
 8003634:	f04f 0300 	mov.w	r3, #0
 8003638:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800363c:	4659      	mov	r1, fp
 800363e:	018b      	lsls	r3, r1, #6
 8003640:	4651      	mov	r1, sl
 8003642:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003646:	4651      	mov	r1, sl
 8003648:	018a      	lsls	r2, r1, #6
 800364a:	4651      	mov	r1, sl
 800364c:	ebb2 0801 	subs.w	r8, r2, r1
 8003650:	4659      	mov	r1, fp
 8003652:	eb63 0901 	sbc.w	r9, r3, r1
 8003656:	f04f 0200 	mov.w	r2, #0
 800365a:	f04f 0300 	mov.w	r3, #0
 800365e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003662:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003666:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800366a:	4690      	mov	r8, r2
 800366c:	4699      	mov	r9, r3
 800366e:	4623      	mov	r3, r4
 8003670:	eb18 0303 	adds.w	r3, r8, r3
 8003674:	60bb      	str	r3, [r7, #8]
 8003676:	462b      	mov	r3, r5
 8003678:	eb49 0303 	adc.w	r3, r9, r3
 800367c:	60fb      	str	r3, [r7, #12]
 800367e:	f04f 0200 	mov.w	r2, #0
 8003682:	f04f 0300 	mov.w	r3, #0
 8003686:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800368a:	4629      	mov	r1, r5
 800368c:	024b      	lsls	r3, r1, #9
 800368e:	4621      	mov	r1, r4
 8003690:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003694:	4621      	mov	r1, r4
 8003696:	024a      	lsls	r2, r1, #9
 8003698:	4610      	mov	r0, r2
 800369a:	4619      	mov	r1, r3
 800369c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800369e:	2200      	movs	r2, #0
 80036a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80036a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036a8:	f7fc fdca 	bl	8000240 <__aeabi_uldivmod>
 80036ac:	4602      	mov	r2, r0
 80036ae:	460b      	mov	r3, r1
 80036b0:	4613      	mov	r3, r2
 80036b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036b4:	e058      	b.n	8003768 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036b6:	4b38      	ldr	r3, [pc, #224]	; (8003798 <HAL_RCC_GetSysClockFreq+0x200>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	099b      	lsrs	r3, r3, #6
 80036bc:	2200      	movs	r2, #0
 80036be:	4618      	mov	r0, r3
 80036c0:	4611      	mov	r1, r2
 80036c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80036c6:	623b      	str	r3, [r7, #32]
 80036c8:	2300      	movs	r3, #0
 80036ca:	627b      	str	r3, [r7, #36]	; 0x24
 80036cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80036d0:	4642      	mov	r2, r8
 80036d2:	464b      	mov	r3, r9
 80036d4:	f04f 0000 	mov.w	r0, #0
 80036d8:	f04f 0100 	mov.w	r1, #0
 80036dc:	0159      	lsls	r1, r3, #5
 80036de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036e2:	0150      	lsls	r0, r2, #5
 80036e4:	4602      	mov	r2, r0
 80036e6:	460b      	mov	r3, r1
 80036e8:	4641      	mov	r1, r8
 80036ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80036ee:	4649      	mov	r1, r9
 80036f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80036f4:	f04f 0200 	mov.w	r2, #0
 80036f8:	f04f 0300 	mov.w	r3, #0
 80036fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003700:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003704:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003708:	ebb2 040a 	subs.w	r4, r2, sl
 800370c:	eb63 050b 	sbc.w	r5, r3, fp
 8003710:	f04f 0200 	mov.w	r2, #0
 8003714:	f04f 0300 	mov.w	r3, #0
 8003718:	00eb      	lsls	r3, r5, #3
 800371a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800371e:	00e2      	lsls	r2, r4, #3
 8003720:	4614      	mov	r4, r2
 8003722:	461d      	mov	r5, r3
 8003724:	4643      	mov	r3, r8
 8003726:	18e3      	adds	r3, r4, r3
 8003728:	603b      	str	r3, [r7, #0]
 800372a:	464b      	mov	r3, r9
 800372c:	eb45 0303 	adc.w	r3, r5, r3
 8003730:	607b      	str	r3, [r7, #4]
 8003732:	f04f 0200 	mov.w	r2, #0
 8003736:	f04f 0300 	mov.w	r3, #0
 800373a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800373e:	4629      	mov	r1, r5
 8003740:	028b      	lsls	r3, r1, #10
 8003742:	4621      	mov	r1, r4
 8003744:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003748:	4621      	mov	r1, r4
 800374a:	028a      	lsls	r2, r1, #10
 800374c:	4610      	mov	r0, r2
 800374e:	4619      	mov	r1, r3
 8003750:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003752:	2200      	movs	r2, #0
 8003754:	61bb      	str	r3, [r7, #24]
 8003756:	61fa      	str	r2, [r7, #28]
 8003758:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800375c:	f7fc fd70 	bl	8000240 <__aeabi_uldivmod>
 8003760:	4602      	mov	r2, r0
 8003762:	460b      	mov	r3, r1
 8003764:	4613      	mov	r3, r2
 8003766:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003768:	4b0b      	ldr	r3, [pc, #44]	; (8003798 <HAL_RCC_GetSysClockFreq+0x200>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	0c1b      	lsrs	r3, r3, #16
 800376e:	f003 0303 	and.w	r3, r3, #3
 8003772:	3301      	adds	r3, #1
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003778:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800377a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800377c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003780:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003782:	e002      	b.n	800378a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003784:	4b05      	ldr	r3, [pc, #20]	; (800379c <HAL_RCC_GetSysClockFreq+0x204>)
 8003786:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003788:	bf00      	nop
    }
  }
  return sysclockfreq;
 800378a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800378c:	4618      	mov	r0, r3
 800378e:	3750      	adds	r7, #80	; 0x50
 8003790:	46bd      	mov	sp, r7
 8003792:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003796:	bf00      	nop
 8003798:	40023800 	.word	0x40023800
 800379c:	00f42400 	.word	0x00f42400
 80037a0:	007a1200 	.word	0x007a1200

080037a4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037a8:	4b03      	ldr	r3, [pc, #12]	; (80037b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80037aa:	681b      	ldr	r3, [r3, #0]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	20000000 	.word	0x20000000

080037bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037c0:	f7ff fff0 	bl	80037a4 <HAL_RCC_GetHCLKFreq>
 80037c4:	4602      	mov	r2, r0
 80037c6:	4b05      	ldr	r3, [pc, #20]	; (80037dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	0a9b      	lsrs	r3, r3, #10
 80037cc:	f003 0307 	and.w	r3, r3, #7
 80037d0:	4903      	ldr	r1, [pc, #12]	; (80037e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037d2:	5ccb      	ldrb	r3, [r1, r3]
 80037d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037d8:	4618      	mov	r0, r3
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	40023800 	.word	0x40023800
 80037e0:	08006ca0 	.word	0x08006ca0

080037e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	220f      	movs	r2, #15
 80037f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80037f4:	4b12      	ldr	r3, [pc, #72]	; (8003840 <HAL_RCC_GetClockConfig+0x5c>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f003 0203 	and.w	r2, r3, #3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003800:	4b0f      	ldr	r3, [pc, #60]	; (8003840 <HAL_RCC_GetClockConfig+0x5c>)
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800380c:	4b0c      	ldr	r3, [pc, #48]	; (8003840 <HAL_RCC_GetClockConfig+0x5c>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003818:	4b09      	ldr	r3, [pc, #36]	; (8003840 <HAL_RCC_GetClockConfig+0x5c>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	08db      	lsrs	r3, r3, #3
 800381e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003826:	4b07      	ldr	r3, [pc, #28]	; (8003844 <HAL_RCC_GetClockConfig+0x60>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 020f 	and.w	r2, r3, #15
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	601a      	str	r2, [r3, #0]
}
 8003832:	bf00      	nop
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	40023800 	.word	0x40023800
 8003844:	40023c00 	.word	0x40023c00

08003848 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e049      	b.n	80038ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d106      	bne.n	8003874 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f841 	bl	80038f6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2202      	movs	r2, #2
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	3304      	adds	r3, #4
 8003884:	4619      	mov	r1, r3
 8003886:	4610      	mov	r0, r2
 8003888:	f000 fa00 	bl	8003c8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80038f6:	b480      	push	{r7}
 80038f8:	b083      	sub	sp, #12
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80038fe:	bf00      	nop
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
	...

0800390c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b01      	cmp	r3, #1
 800391e:	d001      	beq.n	8003924 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e054      	b.n	80039ce <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2202      	movs	r2, #2
 8003928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68da      	ldr	r2, [r3, #12]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f042 0201 	orr.w	r2, r2, #1
 800393a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a26      	ldr	r2, [pc, #152]	; (80039dc <HAL_TIM_Base_Start_IT+0xd0>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d022      	beq.n	800398c <HAL_TIM_Base_Start_IT+0x80>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800394e:	d01d      	beq.n	800398c <HAL_TIM_Base_Start_IT+0x80>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a22      	ldr	r2, [pc, #136]	; (80039e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d018      	beq.n	800398c <HAL_TIM_Base_Start_IT+0x80>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a21      	ldr	r2, [pc, #132]	; (80039e4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d013      	beq.n	800398c <HAL_TIM_Base_Start_IT+0x80>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a1f      	ldr	r2, [pc, #124]	; (80039e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d00e      	beq.n	800398c <HAL_TIM_Base_Start_IT+0x80>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a1e      	ldr	r2, [pc, #120]	; (80039ec <HAL_TIM_Base_Start_IT+0xe0>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d009      	beq.n	800398c <HAL_TIM_Base_Start_IT+0x80>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a1c      	ldr	r2, [pc, #112]	; (80039f0 <HAL_TIM_Base_Start_IT+0xe4>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d004      	beq.n	800398c <HAL_TIM_Base_Start_IT+0x80>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a1b      	ldr	r2, [pc, #108]	; (80039f4 <HAL_TIM_Base_Start_IT+0xe8>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d115      	bne.n	80039b8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689a      	ldr	r2, [r3, #8]
 8003992:	4b19      	ldr	r3, [pc, #100]	; (80039f8 <HAL_TIM_Base_Start_IT+0xec>)
 8003994:	4013      	ands	r3, r2
 8003996:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2b06      	cmp	r3, #6
 800399c:	d015      	beq.n	80039ca <HAL_TIM_Base_Start_IT+0xbe>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039a4:	d011      	beq.n	80039ca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f042 0201 	orr.w	r2, r2, #1
 80039b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039b6:	e008      	b.n	80039ca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f042 0201 	orr.w	r2, r2, #1
 80039c6:	601a      	str	r2, [r3, #0]
 80039c8:	e000      	b.n	80039cc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3714      	adds	r7, #20
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	40010000 	.word	0x40010000
 80039e0:	40000400 	.word	0x40000400
 80039e4:	40000800 	.word	0x40000800
 80039e8:	40000c00 	.word	0x40000c00
 80039ec:	40010400 	.word	0x40010400
 80039f0:	40014000 	.word	0x40014000
 80039f4:	40001800 	.word	0x40001800
 80039f8:	00010007 	.word	0x00010007

080039fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d122      	bne.n	8003a58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d11b      	bne.n	8003a58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f06f 0202 	mvn.w	r2, #2
 8003a28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	f003 0303 	and.w	r3, r3, #3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d003      	beq.n	8003a46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 f905 	bl	8003c4e <HAL_TIM_IC_CaptureCallback>
 8003a44:	e005      	b.n	8003a52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 f8f7 	bl	8003c3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 f908 	bl	8003c62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	f003 0304 	and.w	r3, r3, #4
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	d122      	bne.n	8003aac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	2b04      	cmp	r3, #4
 8003a72:	d11b      	bne.n	8003aac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f06f 0204 	mvn.w	r2, #4
 8003a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2202      	movs	r2, #2
 8003a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 f8db 	bl	8003c4e <HAL_TIM_IC_CaptureCallback>
 8003a98:	e005      	b.n	8003aa6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 f8cd 	bl	8003c3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 f8de 	bl	8003c62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	f003 0308 	and.w	r3, r3, #8
 8003ab6:	2b08      	cmp	r3, #8
 8003ab8:	d122      	bne.n	8003b00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	f003 0308 	and.w	r3, r3, #8
 8003ac4:	2b08      	cmp	r3, #8
 8003ac6:	d11b      	bne.n	8003b00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f06f 0208 	mvn.w	r2, #8
 8003ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2204      	movs	r2, #4
 8003ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	69db      	ldr	r3, [r3, #28]
 8003ade:	f003 0303 	and.w	r3, r3, #3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d003      	beq.n	8003aee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 f8b1 	bl	8003c4e <HAL_TIM_IC_CaptureCallback>
 8003aec:	e005      	b.n	8003afa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 f8a3 	bl	8003c3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 f8b4 	bl	8003c62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	f003 0310 	and.w	r3, r3, #16
 8003b0a:	2b10      	cmp	r3, #16
 8003b0c:	d122      	bne.n	8003b54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	f003 0310 	and.w	r3, r3, #16
 8003b18:	2b10      	cmp	r3, #16
 8003b1a:	d11b      	bne.n	8003b54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f06f 0210 	mvn.w	r2, #16
 8003b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2208      	movs	r2, #8
 8003b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	69db      	ldr	r3, [r3, #28]
 8003b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d003      	beq.n	8003b42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f887 	bl	8003c4e <HAL_TIM_IC_CaptureCallback>
 8003b40:	e005      	b.n	8003b4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f879 	bl	8003c3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 f88a 	bl	8003c62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d10e      	bne.n	8003b80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	f003 0301 	and.w	r3, r3, #1
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d107      	bne.n	8003b80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f06f 0201 	mvn.w	r2, #1
 8003b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f7fd f9d0 	bl	8000f20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b8a:	2b80      	cmp	r3, #128	; 0x80
 8003b8c:	d10e      	bne.n	8003bac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b98:	2b80      	cmp	r3, #128	; 0x80
 8003b9a:	d107      	bne.n	8003bac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f91a 	bl	8003de0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bba:	d10e      	bne.n	8003bda <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc6:	2b80      	cmp	r3, #128	; 0x80
 8003bc8:	d107      	bne.n	8003bda <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003bd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 f90d 	bl	8003df4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be4:	2b40      	cmp	r3, #64	; 0x40
 8003be6:	d10e      	bne.n	8003c06 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf2:	2b40      	cmp	r3, #64	; 0x40
 8003bf4:	d107      	bne.n	8003c06 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003bfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 f838 	bl	8003c76 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	f003 0320 	and.w	r3, r3, #32
 8003c10:	2b20      	cmp	r3, #32
 8003c12:	d10e      	bne.n	8003c32 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	f003 0320 	and.w	r3, r3, #32
 8003c1e:	2b20      	cmp	r3, #32
 8003c20:	d107      	bne.n	8003c32 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f06f 0220 	mvn.w	r2, #32
 8003c2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 f8cd 	bl	8003dcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c32:	bf00      	nop
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b083      	sub	sp, #12
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c42:	bf00      	nop
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b083      	sub	sp, #12
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c56:	bf00      	nop
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr

08003c62 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b083      	sub	sp, #12
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c6a:	bf00      	nop
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr

08003c76 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c76:	b480      	push	{r7}
 8003c78:	b083      	sub	sp, #12
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c7e:	bf00      	nop
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
	...

08003c8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a40      	ldr	r2, [pc, #256]	; (8003da0 <TIM_Base_SetConfig+0x114>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d013      	beq.n	8003ccc <TIM_Base_SetConfig+0x40>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003caa:	d00f      	beq.n	8003ccc <TIM_Base_SetConfig+0x40>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a3d      	ldr	r2, [pc, #244]	; (8003da4 <TIM_Base_SetConfig+0x118>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d00b      	beq.n	8003ccc <TIM_Base_SetConfig+0x40>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a3c      	ldr	r2, [pc, #240]	; (8003da8 <TIM_Base_SetConfig+0x11c>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d007      	beq.n	8003ccc <TIM_Base_SetConfig+0x40>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a3b      	ldr	r2, [pc, #236]	; (8003dac <TIM_Base_SetConfig+0x120>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d003      	beq.n	8003ccc <TIM_Base_SetConfig+0x40>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a3a      	ldr	r2, [pc, #232]	; (8003db0 <TIM_Base_SetConfig+0x124>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d108      	bne.n	8003cde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a2f      	ldr	r2, [pc, #188]	; (8003da0 <TIM_Base_SetConfig+0x114>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d02b      	beq.n	8003d3e <TIM_Base_SetConfig+0xb2>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cec:	d027      	beq.n	8003d3e <TIM_Base_SetConfig+0xb2>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a2c      	ldr	r2, [pc, #176]	; (8003da4 <TIM_Base_SetConfig+0x118>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d023      	beq.n	8003d3e <TIM_Base_SetConfig+0xb2>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a2b      	ldr	r2, [pc, #172]	; (8003da8 <TIM_Base_SetConfig+0x11c>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d01f      	beq.n	8003d3e <TIM_Base_SetConfig+0xb2>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a2a      	ldr	r2, [pc, #168]	; (8003dac <TIM_Base_SetConfig+0x120>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d01b      	beq.n	8003d3e <TIM_Base_SetConfig+0xb2>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a29      	ldr	r2, [pc, #164]	; (8003db0 <TIM_Base_SetConfig+0x124>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d017      	beq.n	8003d3e <TIM_Base_SetConfig+0xb2>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a28      	ldr	r2, [pc, #160]	; (8003db4 <TIM_Base_SetConfig+0x128>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d013      	beq.n	8003d3e <TIM_Base_SetConfig+0xb2>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a27      	ldr	r2, [pc, #156]	; (8003db8 <TIM_Base_SetConfig+0x12c>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d00f      	beq.n	8003d3e <TIM_Base_SetConfig+0xb2>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a26      	ldr	r2, [pc, #152]	; (8003dbc <TIM_Base_SetConfig+0x130>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d00b      	beq.n	8003d3e <TIM_Base_SetConfig+0xb2>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a25      	ldr	r2, [pc, #148]	; (8003dc0 <TIM_Base_SetConfig+0x134>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d007      	beq.n	8003d3e <TIM_Base_SetConfig+0xb2>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a24      	ldr	r2, [pc, #144]	; (8003dc4 <TIM_Base_SetConfig+0x138>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d003      	beq.n	8003d3e <TIM_Base_SetConfig+0xb2>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a23      	ldr	r2, [pc, #140]	; (8003dc8 <TIM_Base_SetConfig+0x13c>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d108      	bne.n	8003d50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	689a      	ldr	r2, [r3, #8]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a0a      	ldr	r2, [pc, #40]	; (8003da0 <TIM_Base_SetConfig+0x114>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d003      	beq.n	8003d84 <TIM_Base_SetConfig+0xf8>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a0c      	ldr	r2, [pc, #48]	; (8003db0 <TIM_Base_SetConfig+0x124>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d103      	bne.n	8003d8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	691a      	ldr	r2, [r3, #16]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	615a      	str	r2, [r3, #20]
}
 8003d92:	bf00      	nop
 8003d94:	3714      	adds	r7, #20
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	40010000 	.word	0x40010000
 8003da4:	40000400 	.word	0x40000400
 8003da8:	40000800 	.word	0x40000800
 8003dac:	40000c00 	.word	0x40000c00
 8003db0:	40010400 	.word	0x40010400
 8003db4:	40014000 	.word	0x40014000
 8003db8:	40014400 	.word	0x40014400
 8003dbc:	40014800 	.word	0x40014800
 8003dc0:	40001800 	.word	0x40001800
 8003dc4:	40001c00 	.word	0x40001c00
 8003dc8:	40002000 	.word	0x40002000

08003dcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003e08:	b480      	push	{r7}
 8003e0a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003e0c:	bf00      	nop
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
	...

08003e18 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e1e:	f3ef 8305 	mrs	r3, IPSR
 8003e22:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e24:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10f      	bne.n	8003e4a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e2a:	f3ef 8310 	mrs	r3, PRIMASK
 8003e2e:	607b      	str	r3, [r7, #4]
  return(result);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d105      	bne.n	8003e42 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003e36:	f3ef 8311 	mrs	r3, BASEPRI
 8003e3a:	603b      	str	r3, [r7, #0]
  return(result);
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d007      	beq.n	8003e52 <osKernelInitialize+0x3a>
 8003e42:	4b0e      	ldr	r3, [pc, #56]	; (8003e7c <osKernelInitialize+0x64>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d103      	bne.n	8003e52 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003e4a:	f06f 0305 	mvn.w	r3, #5
 8003e4e:	60fb      	str	r3, [r7, #12]
 8003e50:	e00c      	b.n	8003e6c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003e52:	4b0a      	ldr	r3, [pc, #40]	; (8003e7c <osKernelInitialize+0x64>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d105      	bne.n	8003e66 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003e5a:	4b08      	ldr	r3, [pc, #32]	; (8003e7c <osKernelInitialize+0x64>)
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003e60:	2300      	movs	r3, #0
 8003e62:	60fb      	str	r3, [r7, #12]
 8003e64:	e002      	b.n	8003e6c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003e66:	f04f 33ff 	mov.w	r3, #4294967295
 8003e6a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3714      	adds	r7, #20
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	20000280 	.word	0x20000280

08003e80 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e86:	f3ef 8305 	mrs	r3, IPSR
 8003e8a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e8c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10f      	bne.n	8003eb2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e92:	f3ef 8310 	mrs	r3, PRIMASK
 8003e96:	607b      	str	r3, [r7, #4]
  return(result);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d105      	bne.n	8003eaa <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003e9e:	f3ef 8311 	mrs	r3, BASEPRI
 8003ea2:	603b      	str	r3, [r7, #0]
  return(result);
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d007      	beq.n	8003eba <osKernelStart+0x3a>
 8003eaa:	4b0f      	ldr	r3, [pc, #60]	; (8003ee8 <osKernelStart+0x68>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d103      	bne.n	8003eba <osKernelStart+0x3a>
    stat = osErrorISR;
 8003eb2:	f06f 0305 	mvn.w	r3, #5
 8003eb6:	60fb      	str	r3, [r7, #12]
 8003eb8:	e010      	b.n	8003edc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003eba:	4b0b      	ldr	r3, [pc, #44]	; (8003ee8 <osKernelStart+0x68>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d109      	bne.n	8003ed6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003ec2:	f7ff ffa1 	bl	8003e08 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003ec6:	4b08      	ldr	r3, [pc, #32]	; (8003ee8 <osKernelStart+0x68>)
 8003ec8:	2202      	movs	r2, #2
 8003eca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003ecc:	f001 f8ca 	bl	8005064 <vTaskStartScheduler>
      stat = osOK;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	60fb      	str	r3, [r7, #12]
 8003ed4:	e002      	b.n	8003edc <osKernelStart+0x5c>
    } else {
      stat = osError;
 8003ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8003eda:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003edc:	68fb      	ldr	r3, [r7, #12]
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	20000280 	.word	0x20000280

08003eec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b090      	sub	sp, #64	; 0x40
 8003ef0:	af04      	add	r7, sp, #16
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003efc:	f3ef 8305 	mrs	r3, IPSR
 8003f00:	61fb      	str	r3, [r7, #28]
  return(result);
 8003f02:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f040 808f 	bne.w	8004028 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f0a:	f3ef 8310 	mrs	r3, PRIMASK
 8003f0e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d105      	bne.n	8003f22 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f16:	f3ef 8311 	mrs	r3, BASEPRI
 8003f1a:	617b      	str	r3, [r7, #20]
  return(result);
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d003      	beq.n	8003f2a <osThreadNew+0x3e>
 8003f22:	4b44      	ldr	r3, [pc, #272]	; (8004034 <osThreadNew+0x148>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d07e      	beq.n	8004028 <osThreadNew+0x13c>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d07b      	beq.n	8004028 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8003f30:	2380      	movs	r3, #128	; 0x80
 8003f32:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003f34:	2318      	movs	r3, #24
 8003f36:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8003f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f40:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d045      	beq.n	8003fd4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d002      	beq.n	8003f56 <osThreadNew+0x6a>
        name = attr->name;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d002      	beq.n	8003f64 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d008      	beq.n	8003f7c <osThreadNew+0x90>
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6c:	2b38      	cmp	r3, #56	; 0x38
 8003f6e:	d805      	bhi.n	8003f7c <osThreadNew+0x90>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f003 0301 	and.w	r3, r3, #1
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d001      	beq.n	8003f80 <osThreadNew+0x94>
        return (NULL);
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	e054      	b.n	800402a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d003      	beq.n	8003f90 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	089b      	lsrs	r3, r3, #2
 8003f8e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00e      	beq.n	8003fb6 <osThreadNew+0xca>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	2bbb      	cmp	r3, #187	; 0xbb
 8003f9e:	d90a      	bls.n	8003fb6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d006      	beq.n	8003fb6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d002      	beq.n	8003fb6 <osThreadNew+0xca>
        mem = 1;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	623b      	str	r3, [r7, #32]
 8003fb4:	e010      	b.n	8003fd8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10c      	bne.n	8003fd8 <osThreadNew+0xec>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d108      	bne.n	8003fd8 <osThreadNew+0xec>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d104      	bne.n	8003fd8 <osThreadNew+0xec>
          mem = 0;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	623b      	str	r3, [r7, #32]
 8003fd2:	e001      	b.n	8003fd8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003fd8:	6a3b      	ldr	r3, [r7, #32]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d110      	bne.n	8004000 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003fe6:	9202      	str	r2, [sp, #8]
 8003fe8:	9301      	str	r3, [sp, #4]
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	9300      	str	r3, [sp, #0]
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ff2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f000 fe3f 	bl	8004c78 <xTaskCreateStatic>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	613b      	str	r3, [r7, #16]
 8003ffe:	e013      	b.n	8004028 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004000:	6a3b      	ldr	r3, [r7, #32]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d110      	bne.n	8004028 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004008:	b29a      	uxth	r2, r3
 800400a:	f107 0310 	add.w	r3, r7, #16
 800400e:	9301      	str	r3, [sp, #4]
 8004010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004012:	9300      	str	r3, [sp, #0]
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	f000 fe90 	bl	8004d3e <xTaskCreate>
 800401e:	4603      	mov	r3, r0
 8004020:	2b01      	cmp	r3, #1
 8004022:	d001      	beq.n	8004028 <osThreadNew+0x13c>
          hTask = NULL;
 8004024:	2300      	movs	r3, #0
 8004026:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004028:	693b      	ldr	r3, [r7, #16]
}
 800402a:	4618      	mov	r0, r3
 800402c:	3730      	adds	r7, #48	; 0x30
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	20000280 	.word	0x20000280

08004038 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004038:	b580      	push	{r7, lr}
 800403a:	b086      	sub	sp, #24
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004040:	f3ef 8305 	mrs	r3, IPSR
 8004044:	613b      	str	r3, [r7, #16]
  return(result);
 8004046:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10f      	bne.n	800406c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800404c:	f3ef 8310 	mrs	r3, PRIMASK
 8004050:	60fb      	str	r3, [r7, #12]
  return(result);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d105      	bne.n	8004064 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004058:	f3ef 8311 	mrs	r3, BASEPRI
 800405c:	60bb      	str	r3, [r7, #8]
  return(result);
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d007      	beq.n	8004074 <osDelay+0x3c>
 8004064:	4b0a      	ldr	r3, [pc, #40]	; (8004090 <osDelay+0x58>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2b02      	cmp	r3, #2
 800406a:	d103      	bne.n	8004074 <osDelay+0x3c>
    stat = osErrorISR;
 800406c:	f06f 0305 	mvn.w	r3, #5
 8004070:	617b      	str	r3, [r7, #20]
 8004072:	e007      	b.n	8004084 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004074:	2300      	movs	r3, #0
 8004076:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d002      	beq.n	8004084 <osDelay+0x4c>
      vTaskDelay(ticks);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 ffba 	bl	8004ff8 <vTaskDelay>
    }
  }

  return (stat);
 8004084:	697b      	ldr	r3, [r7, #20]
}
 8004086:	4618      	mov	r0, r3
 8004088:	3718      	adds	r7, #24
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	20000280 	.word	0x20000280

08004094 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	4a07      	ldr	r2, [pc, #28]	; (80040c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80040a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	4a06      	ldr	r2, [pc, #24]	; (80040c4 <vApplicationGetIdleTaskMemory+0x30>)
 80040aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2280      	movs	r2, #128	; 0x80
 80040b0:	601a      	str	r2, [r3, #0]
}
 80040b2:	bf00      	nop
 80040b4:	3714      	adds	r7, #20
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	20000284 	.word	0x20000284
 80040c4:	20000340 	.word	0x20000340

080040c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	4a07      	ldr	r2, [pc, #28]	; (80040f4 <vApplicationGetTimerTaskMemory+0x2c>)
 80040d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	4a06      	ldr	r2, [pc, #24]	; (80040f8 <vApplicationGetTimerTaskMemory+0x30>)
 80040de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040e6:	601a      	str	r2, [r3, #0]
}
 80040e8:	bf00      	nop
 80040ea:	3714      	adds	r7, #20
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr
 80040f4:	20000540 	.word	0x20000540
 80040f8:	200005fc 	.word	0x200005fc

080040fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f103 0208 	add.w	r2, r3, #8
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f04f 32ff 	mov.w	r2, #4294967295
 8004114:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f103 0208 	add.w	r2, r3, #8
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f103 0208 	add.w	r2, r3, #8
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800414a:	bf00      	nop
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004156:	b480      	push	{r7}
 8004158:	b085      	sub	sp, #20
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
 800415e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	689a      	ldr	r2, [r3, #8]
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	683a      	ldr	r2, [r7, #0]
 800417a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	683a      	ldr	r2, [r7, #0]
 8004180:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	1c5a      	adds	r2, r3, #1
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	601a      	str	r2, [r3, #0]
}
 8004192:	bf00      	nop
 8004194:	3714      	adds	r7, #20
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800419e:	b480      	push	{r7}
 80041a0:	b085      	sub	sp, #20
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
 80041a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b4:	d103      	bne.n	80041be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	60fb      	str	r3, [r7, #12]
 80041bc:	e00c      	b.n	80041d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	3308      	adds	r3, #8
 80041c2:	60fb      	str	r3, [r7, #12]
 80041c4:	e002      	b.n	80041cc <vListInsert+0x2e>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	60fb      	str	r3, [r7, #12]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d2f6      	bcs.n	80041c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	683a      	ldr	r2, [r7, #0]
 80041e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	683a      	ldr	r2, [r7, #0]
 80041f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	1c5a      	adds	r2, r3, #1
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	601a      	str	r2, [r3, #0]
}
 8004204:	bf00      	nop
 8004206:	3714      	adds	r7, #20
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	6892      	ldr	r2, [r2, #8]
 8004226:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	6852      	ldr	r2, [r2, #4]
 8004230:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	429a      	cmp	r2, r3
 800423a:	d103      	bne.n	8004244 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689a      	ldr	r2, [r3, #8]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	1e5a      	subs	r2, r3, #1
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
}
 8004258:	4618      	mov	r0, r3
 800425a:	3714      	adds	r7, #20
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10c      	bne.n	8004292 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427c:	b672      	cpsid	i
 800427e:	f383 8811 	msr	BASEPRI, r3
 8004282:	f3bf 8f6f 	isb	sy
 8004286:	f3bf 8f4f 	dsb	sy
 800428a:	b662      	cpsie	i
 800428c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800428e:	bf00      	nop
 8004290:	e7fe      	b.n	8004290 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004292:	f002 f8a3 	bl	80063dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800429e:	68f9      	ldr	r1, [r7, #12]
 80042a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80042a2:	fb01 f303 	mul.w	r3, r1, r3
 80042a6:	441a      	add	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c2:	3b01      	subs	r3, #1
 80042c4:	68f9      	ldr	r1, [r7, #12]
 80042c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80042c8:	fb01 f303 	mul.w	r3, r1, r3
 80042cc:	441a      	add	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	22ff      	movs	r2, #255	; 0xff
 80042d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	22ff      	movs	r2, #255	; 0xff
 80042de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d114      	bne.n	8004312 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d01a      	beq.n	8004326 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	3310      	adds	r3, #16
 80042f4:	4618      	mov	r0, r3
 80042f6:	f001 f95d 	bl	80055b4 <xTaskRemoveFromEventList>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d012      	beq.n	8004326 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004300:	4b0c      	ldr	r3, [pc, #48]	; (8004334 <xQueueGenericReset+0xd0>)
 8004302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004306:	601a      	str	r2, [r3, #0]
 8004308:	f3bf 8f4f 	dsb	sy
 800430c:	f3bf 8f6f 	isb	sy
 8004310:	e009      	b.n	8004326 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	3310      	adds	r3, #16
 8004316:	4618      	mov	r0, r3
 8004318:	f7ff fef0 	bl	80040fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	3324      	adds	r3, #36	; 0x24
 8004320:	4618      	mov	r0, r3
 8004322:	f7ff feeb 	bl	80040fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004326:	f002 f88d 	bl	8006444 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800432a:	2301      	movs	r3, #1
}
 800432c:	4618      	mov	r0, r3
 800432e:	3710      	adds	r7, #16
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	e000ed04 	.word	0xe000ed04

08004338 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004338:	b580      	push	{r7, lr}
 800433a:	b08e      	sub	sp, #56	; 0x38
 800433c:	af02      	add	r7, sp, #8
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	607a      	str	r2, [r7, #4]
 8004344:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10c      	bne.n	8004366 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800434c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004350:	b672      	cpsid	i
 8004352:	f383 8811 	msr	BASEPRI, r3
 8004356:	f3bf 8f6f 	isb	sy
 800435a:	f3bf 8f4f 	dsb	sy
 800435e:	b662      	cpsie	i
 8004360:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004362:	bf00      	nop
 8004364:	e7fe      	b.n	8004364 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d10c      	bne.n	8004386 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800436c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004370:	b672      	cpsid	i
 8004372:	f383 8811 	msr	BASEPRI, r3
 8004376:	f3bf 8f6f 	isb	sy
 800437a:	f3bf 8f4f 	dsb	sy
 800437e:	b662      	cpsie	i
 8004380:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004382:	bf00      	nop
 8004384:	e7fe      	b.n	8004384 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d002      	beq.n	8004392 <xQueueGenericCreateStatic+0x5a>
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <xQueueGenericCreateStatic+0x5e>
 8004392:	2301      	movs	r3, #1
 8004394:	e000      	b.n	8004398 <xQueueGenericCreateStatic+0x60>
 8004396:	2300      	movs	r3, #0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d10c      	bne.n	80043b6 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800439c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a0:	b672      	cpsid	i
 80043a2:	f383 8811 	msr	BASEPRI, r3
 80043a6:	f3bf 8f6f 	isb	sy
 80043aa:	f3bf 8f4f 	dsb	sy
 80043ae:	b662      	cpsie	i
 80043b0:	623b      	str	r3, [r7, #32]
}
 80043b2:	bf00      	nop
 80043b4:	e7fe      	b.n	80043b4 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d102      	bne.n	80043c2 <xQueueGenericCreateStatic+0x8a>
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d101      	bne.n	80043c6 <xQueueGenericCreateStatic+0x8e>
 80043c2:	2301      	movs	r3, #1
 80043c4:	e000      	b.n	80043c8 <xQueueGenericCreateStatic+0x90>
 80043c6:	2300      	movs	r3, #0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d10c      	bne.n	80043e6 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80043cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d0:	b672      	cpsid	i
 80043d2:	f383 8811 	msr	BASEPRI, r3
 80043d6:	f3bf 8f6f 	isb	sy
 80043da:	f3bf 8f4f 	dsb	sy
 80043de:	b662      	cpsie	i
 80043e0:	61fb      	str	r3, [r7, #28]
}
 80043e2:	bf00      	nop
 80043e4:	e7fe      	b.n	80043e4 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80043e6:	2350      	movs	r3, #80	; 0x50
 80043e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	2b50      	cmp	r3, #80	; 0x50
 80043ee:	d00c      	beq.n	800440a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80043f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f4:	b672      	cpsid	i
 80043f6:	f383 8811 	msr	BASEPRI, r3
 80043fa:	f3bf 8f6f 	isb	sy
 80043fe:	f3bf 8f4f 	dsb	sy
 8004402:	b662      	cpsie	i
 8004404:	61bb      	str	r3, [r7, #24]
}
 8004406:	bf00      	nop
 8004408:	e7fe      	b.n	8004408 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800440a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00d      	beq.n	8004432 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004418:	2201      	movs	r2, #1
 800441a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800441e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	4613      	mov	r3, r2
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	68b9      	ldr	r1, [r7, #8]
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f000 f805 	bl	800443c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004434:	4618      	mov	r0, r3
 8004436:	3730      	adds	r7, #48	; 0x30
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]
 8004448:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d103      	bne.n	8004458 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	69ba      	ldr	r2, [r7, #24]
 8004454:	601a      	str	r2, [r3, #0]
 8004456:	e002      	b.n	800445e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	68ba      	ldr	r2, [r7, #8]
 8004468:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800446a:	2101      	movs	r1, #1
 800446c:	69b8      	ldr	r0, [r7, #24]
 800446e:	f7ff fef9 	bl	8004264 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	78fa      	ldrb	r2, [r7, #3]
 8004476:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800447a:	bf00      	nop
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
	...

08004484 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b08e      	sub	sp, #56	; 0x38
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
 8004490:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004492:	2300      	movs	r3, #0
 8004494:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800449a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449c:	2b00      	cmp	r3, #0
 800449e:	d10c      	bne.n	80044ba <xQueueGenericSend+0x36>
	__asm volatile
 80044a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a4:	b672      	cpsid	i
 80044a6:	f383 8811 	msr	BASEPRI, r3
 80044aa:	f3bf 8f6f 	isb	sy
 80044ae:	f3bf 8f4f 	dsb	sy
 80044b2:	b662      	cpsie	i
 80044b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80044b6:	bf00      	nop
 80044b8:	e7fe      	b.n	80044b8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d103      	bne.n	80044c8 <xQueueGenericSend+0x44>
 80044c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d101      	bne.n	80044cc <xQueueGenericSend+0x48>
 80044c8:	2301      	movs	r3, #1
 80044ca:	e000      	b.n	80044ce <xQueueGenericSend+0x4a>
 80044cc:	2300      	movs	r3, #0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10c      	bne.n	80044ec <xQueueGenericSend+0x68>
	__asm volatile
 80044d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d6:	b672      	cpsid	i
 80044d8:	f383 8811 	msr	BASEPRI, r3
 80044dc:	f3bf 8f6f 	isb	sy
 80044e0:	f3bf 8f4f 	dsb	sy
 80044e4:	b662      	cpsie	i
 80044e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80044e8:	bf00      	nop
 80044ea:	e7fe      	b.n	80044ea <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d103      	bne.n	80044fa <xQueueGenericSend+0x76>
 80044f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d101      	bne.n	80044fe <xQueueGenericSend+0x7a>
 80044fa:	2301      	movs	r3, #1
 80044fc:	e000      	b.n	8004500 <xQueueGenericSend+0x7c>
 80044fe:	2300      	movs	r3, #0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10c      	bne.n	800451e <xQueueGenericSend+0x9a>
	__asm volatile
 8004504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004508:	b672      	cpsid	i
 800450a:	f383 8811 	msr	BASEPRI, r3
 800450e:	f3bf 8f6f 	isb	sy
 8004512:	f3bf 8f4f 	dsb	sy
 8004516:	b662      	cpsie	i
 8004518:	623b      	str	r3, [r7, #32]
}
 800451a:	bf00      	nop
 800451c:	e7fe      	b.n	800451c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800451e:	f001 fa13 	bl	8005948 <xTaskGetSchedulerState>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d102      	bne.n	800452e <xQueueGenericSend+0xaa>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <xQueueGenericSend+0xae>
 800452e:	2301      	movs	r3, #1
 8004530:	e000      	b.n	8004534 <xQueueGenericSend+0xb0>
 8004532:	2300      	movs	r3, #0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d10c      	bne.n	8004552 <xQueueGenericSend+0xce>
	__asm volatile
 8004538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800453c:	b672      	cpsid	i
 800453e:	f383 8811 	msr	BASEPRI, r3
 8004542:	f3bf 8f6f 	isb	sy
 8004546:	f3bf 8f4f 	dsb	sy
 800454a:	b662      	cpsie	i
 800454c:	61fb      	str	r3, [r7, #28]
}
 800454e:	bf00      	nop
 8004550:	e7fe      	b.n	8004550 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004552:	f001 ff43 	bl	80063dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004558:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800455a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800455e:	429a      	cmp	r2, r3
 8004560:	d302      	bcc.n	8004568 <xQueueGenericSend+0xe4>
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	2b02      	cmp	r3, #2
 8004566:	d129      	bne.n	80045bc <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004568:	683a      	ldr	r2, [r7, #0]
 800456a:	68b9      	ldr	r1, [r7, #8]
 800456c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800456e:	f000 fa15 	bl	800499c <prvCopyDataToQueue>
 8004572:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004578:	2b00      	cmp	r3, #0
 800457a:	d010      	beq.n	800459e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800457c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457e:	3324      	adds	r3, #36	; 0x24
 8004580:	4618      	mov	r0, r3
 8004582:	f001 f817 	bl	80055b4 <xTaskRemoveFromEventList>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d013      	beq.n	80045b4 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800458c:	4b3f      	ldr	r3, [pc, #252]	; (800468c <xQueueGenericSend+0x208>)
 800458e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	f3bf 8f4f 	dsb	sy
 8004598:	f3bf 8f6f 	isb	sy
 800459c:	e00a      	b.n	80045b4 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800459e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d007      	beq.n	80045b4 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80045a4:	4b39      	ldr	r3, [pc, #228]	; (800468c <xQueueGenericSend+0x208>)
 80045a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045aa:	601a      	str	r2, [r3, #0]
 80045ac:	f3bf 8f4f 	dsb	sy
 80045b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80045b4:	f001 ff46 	bl	8006444 <vPortExitCritical>
				return pdPASS;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e063      	b.n	8004684 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d103      	bne.n	80045ca <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80045c2:	f001 ff3f 	bl	8006444 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80045c6:	2300      	movs	r3, #0
 80045c8:	e05c      	b.n	8004684 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80045ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d106      	bne.n	80045de <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80045d0:	f107 0314 	add.w	r3, r7, #20
 80045d4:	4618      	mov	r0, r3
 80045d6:	f001 f853 	bl	8005680 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80045da:	2301      	movs	r3, #1
 80045dc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80045de:	f001 ff31 	bl	8006444 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80045e2:	f000 fdb3 	bl	800514c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80045e6:	f001 fef9 	bl	80063dc <vPortEnterCritical>
 80045ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045f0:	b25b      	sxtb	r3, r3
 80045f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f6:	d103      	bne.n	8004600 <xQueueGenericSend+0x17c>
 80045f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004602:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004606:	b25b      	sxtb	r3, r3
 8004608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800460c:	d103      	bne.n	8004616 <xQueueGenericSend+0x192>
 800460e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004616:	f001 ff15 	bl	8006444 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800461a:	1d3a      	adds	r2, r7, #4
 800461c:	f107 0314 	add.w	r3, r7, #20
 8004620:	4611      	mov	r1, r2
 8004622:	4618      	mov	r0, r3
 8004624:	f001 f842 	bl	80056ac <xTaskCheckForTimeOut>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d124      	bne.n	8004678 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800462e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004630:	f000 faac 	bl	8004b8c <prvIsQueueFull>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d018      	beq.n	800466c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800463a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800463c:	3310      	adds	r3, #16
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	4611      	mov	r1, r2
 8004642:	4618      	mov	r0, r3
 8004644:	f000 ff62 	bl	800550c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004648:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800464a:	f000 fa37 	bl	8004abc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800464e:	f000 fd8b 	bl	8005168 <xTaskResumeAll>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	f47f af7c 	bne.w	8004552 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800465a:	4b0c      	ldr	r3, [pc, #48]	; (800468c <xQueueGenericSend+0x208>)
 800465c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004660:	601a      	str	r2, [r3, #0]
 8004662:	f3bf 8f4f 	dsb	sy
 8004666:	f3bf 8f6f 	isb	sy
 800466a:	e772      	b.n	8004552 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800466c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800466e:	f000 fa25 	bl	8004abc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004672:	f000 fd79 	bl	8005168 <xTaskResumeAll>
 8004676:	e76c      	b.n	8004552 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004678:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800467a:	f000 fa1f 	bl	8004abc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800467e:	f000 fd73 	bl	8005168 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004682:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004684:	4618      	mov	r0, r3
 8004686:	3738      	adds	r7, #56	; 0x38
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	e000ed04 	.word	0xe000ed04

08004690 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b08e      	sub	sp, #56	; 0x38
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
 800469c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80046a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d10c      	bne.n	80046c2 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80046a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ac:	b672      	cpsid	i
 80046ae:	f383 8811 	msr	BASEPRI, r3
 80046b2:	f3bf 8f6f 	isb	sy
 80046b6:	f3bf 8f4f 	dsb	sy
 80046ba:	b662      	cpsie	i
 80046bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80046be:	bf00      	nop
 80046c0:	e7fe      	b.n	80046c0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d103      	bne.n	80046d0 <xQueueGenericSendFromISR+0x40>
 80046c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d101      	bne.n	80046d4 <xQueueGenericSendFromISR+0x44>
 80046d0:	2301      	movs	r3, #1
 80046d2:	e000      	b.n	80046d6 <xQueueGenericSendFromISR+0x46>
 80046d4:	2300      	movs	r3, #0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10c      	bne.n	80046f4 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80046da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046de:	b672      	cpsid	i
 80046e0:	f383 8811 	msr	BASEPRI, r3
 80046e4:	f3bf 8f6f 	isb	sy
 80046e8:	f3bf 8f4f 	dsb	sy
 80046ec:	b662      	cpsie	i
 80046ee:	623b      	str	r3, [r7, #32]
}
 80046f0:	bf00      	nop
 80046f2:	e7fe      	b.n	80046f2 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d103      	bne.n	8004702 <xQueueGenericSendFromISR+0x72>
 80046fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d101      	bne.n	8004706 <xQueueGenericSendFromISR+0x76>
 8004702:	2301      	movs	r3, #1
 8004704:	e000      	b.n	8004708 <xQueueGenericSendFromISR+0x78>
 8004706:	2300      	movs	r3, #0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d10c      	bne.n	8004726 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800470c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004710:	b672      	cpsid	i
 8004712:	f383 8811 	msr	BASEPRI, r3
 8004716:	f3bf 8f6f 	isb	sy
 800471a:	f3bf 8f4f 	dsb	sy
 800471e:	b662      	cpsie	i
 8004720:	61fb      	str	r3, [r7, #28]
}
 8004722:	bf00      	nop
 8004724:	e7fe      	b.n	8004724 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004726:	f001 ff41 	bl	80065ac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800472a:	f3ef 8211 	mrs	r2, BASEPRI
 800472e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004732:	b672      	cpsid	i
 8004734:	f383 8811 	msr	BASEPRI, r3
 8004738:	f3bf 8f6f 	isb	sy
 800473c:	f3bf 8f4f 	dsb	sy
 8004740:	b662      	cpsie	i
 8004742:	61ba      	str	r2, [r7, #24]
 8004744:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004746:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004748:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800474a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800474e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004752:	429a      	cmp	r2, r3
 8004754:	d302      	bcc.n	800475c <xQueueGenericSendFromISR+0xcc>
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	2b02      	cmp	r3, #2
 800475a:	d12c      	bne.n	80047b6 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800475c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800475e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004762:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004766:	683a      	ldr	r2, [r7, #0]
 8004768:	68b9      	ldr	r1, [r7, #8]
 800476a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800476c:	f000 f916 	bl	800499c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004770:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004778:	d112      	bne.n	80047a0 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800477a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477e:	2b00      	cmp	r3, #0
 8004780:	d016      	beq.n	80047b0 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004784:	3324      	adds	r3, #36	; 0x24
 8004786:	4618      	mov	r0, r3
 8004788:	f000 ff14 	bl	80055b4 <xTaskRemoveFromEventList>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00e      	beq.n	80047b0 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00b      	beq.n	80047b0 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	601a      	str	r2, [r3, #0]
 800479e:	e007      	b.n	80047b0 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80047a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80047a4:	3301      	adds	r3, #1
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	b25a      	sxtb	r2, r3
 80047aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80047b0:	2301      	movs	r3, #1
 80047b2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80047b4:	e001      	b.n	80047ba <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80047b6:	2300      	movs	r3, #0
 80047b8:	637b      	str	r3, [r7, #52]	; 0x34
 80047ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047bc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80047c4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80047c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3738      	adds	r7, #56	; 0x38
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b08c      	sub	sp, #48	; 0x30
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80047dc:	2300      	movs	r3, #0
 80047de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80047e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10c      	bne.n	8004804 <xQueueReceive+0x34>
	__asm volatile
 80047ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ee:	b672      	cpsid	i
 80047f0:	f383 8811 	msr	BASEPRI, r3
 80047f4:	f3bf 8f6f 	isb	sy
 80047f8:	f3bf 8f4f 	dsb	sy
 80047fc:	b662      	cpsie	i
 80047fe:	623b      	str	r3, [r7, #32]
}
 8004800:	bf00      	nop
 8004802:	e7fe      	b.n	8004802 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d103      	bne.n	8004812 <xQueueReceive+0x42>
 800480a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800480c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480e:	2b00      	cmp	r3, #0
 8004810:	d101      	bne.n	8004816 <xQueueReceive+0x46>
 8004812:	2301      	movs	r3, #1
 8004814:	e000      	b.n	8004818 <xQueueReceive+0x48>
 8004816:	2300      	movs	r3, #0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d10c      	bne.n	8004836 <xQueueReceive+0x66>
	__asm volatile
 800481c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004820:	b672      	cpsid	i
 8004822:	f383 8811 	msr	BASEPRI, r3
 8004826:	f3bf 8f6f 	isb	sy
 800482a:	f3bf 8f4f 	dsb	sy
 800482e:	b662      	cpsie	i
 8004830:	61fb      	str	r3, [r7, #28]
}
 8004832:	bf00      	nop
 8004834:	e7fe      	b.n	8004834 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004836:	f001 f887 	bl	8005948 <xTaskGetSchedulerState>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d102      	bne.n	8004846 <xQueueReceive+0x76>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <xQueueReceive+0x7a>
 8004846:	2301      	movs	r3, #1
 8004848:	e000      	b.n	800484c <xQueueReceive+0x7c>
 800484a:	2300      	movs	r3, #0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d10c      	bne.n	800486a <xQueueReceive+0x9a>
	__asm volatile
 8004850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004854:	b672      	cpsid	i
 8004856:	f383 8811 	msr	BASEPRI, r3
 800485a:	f3bf 8f6f 	isb	sy
 800485e:	f3bf 8f4f 	dsb	sy
 8004862:	b662      	cpsie	i
 8004864:	61bb      	str	r3, [r7, #24]
}
 8004866:	bf00      	nop
 8004868:	e7fe      	b.n	8004868 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800486a:	f001 fdb7 	bl	80063dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800486e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004872:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	2b00      	cmp	r3, #0
 8004878:	d01f      	beq.n	80048ba <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800487a:	68b9      	ldr	r1, [r7, #8]
 800487c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800487e:	f000 f8f7 	bl	8004a70 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004884:	1e5a      	subs	r2, r3, #1
 8004886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004888:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800488a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00f      	beq.n	80048b2 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004894:	3310      	adds	r3, #16
 8004896:	4618      	mov	r0, r3
 8004898:	f000 fe8c 	bl	80055b4 <xTaskRemoveFromEventList>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d007      	beq.n	80048b2 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80048a2:	4b3d      	ldr	r3, [pc, #244]	; (8004998 <xQueueReceive+0x1c8>)
 80048a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048a8:	601a      	str	r2, [r3, #0]
 80048aa:	f3bf 8f4f 	dsb	sy
 80048ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80048b2:	f001 fdc7 	bl	8006444 <vPortExitCritical>
				return pdPASS;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e069      	b.n	800498e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d103      	bne.n	80048c8 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80048c0:	f001 fdc0 	bl	8006444 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80048c4:	2300      	movs	r3, #0
 80048c6:	e062      	b.n	800498e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80048c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d106      	bne.n	80048dc <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80048ce:	f107 0310 	add.w	r3, r7, #16
 80048d2:	4618      	mov	r0, r3
 80048d4:	f000 fed4 	bl	8005680 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80048d8:	2301      	movs	r3, #1
 80048da:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80048dc:	f001 fdb2 	bl	8006444 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80048e0:	f000 fc34 	bl	800514c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80048e4:	f001 fd7a 	bl	80063dc <vPortEnterCritical>
 80048e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048ee:	b25b      	sxtb	r3, r3
 80048f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f4:	d103      	bne.n	80048fe <xQueueReceive+0x12e>
 80048f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004900:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004904:	b25b      	sxtb	r3, r3
 8004906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800490a:	d103      	bne.n	8004914 <xQueueReceive+0x144>
 800490c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490e:	2200      	movs	r2, #0
 8004910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004914:	f001 fd96 	bl	8006444 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004918:	1d3a      	adds	r2, r7, #4
 800491a:	f107 0310 	add.w	r3, r7, #16
 800491e:	4611      	mov	r1, r2
 8004920:	4618      	mov	r0, r3
 8004922:	f000 fec3 	bl	80056ac <xTaskCheckForTimeOut>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d123      	bne.n	8004974 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800492c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800492e:	f000 f917 	bl	8004b60 <prvIsQueueEmpty>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d017      	beq.n	8004968 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493a:	3324      	adds	r3, #36	; 0x24
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	4611      	mov	r1, r2
 8004940:	4618      	mov	r0, r3
 8004942:	f000 fde3 	bl	800550c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004946:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004948:	f000 f8b8 	bl	8004abc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800494c:	f000 fc0c 	bl	8005168 <xTaskResumeAll>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d189      	bne.n	800486a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8004956:	4b10      	ldr	r3, [pc, #64]	; (8004998 <xQueueReceive+0x1c8>)
 8004958:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800495c:	601a      	str	r2, [r3, #0]
 800495e:	f3bf 8f4f 	dsb	sy
 8004962:	f3bf 8f6f 	isb	sy
 8004966:	e780      	b.n	800486a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004968:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800496a:	f000 f8a7 	bl	8004abc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800496e:	f000 fbfb 	bl	8005168 <xTaskResumeAll>
 8004972:	e77a      	b.n	800486a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004974:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004976:	f000 f8a1 	bl	8004abc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800497a:	f000 fbf5 	bl	8005168 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800497e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004980:	f000 f8ee 	bl	8004b60 <prvIsQueueEmpty>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	f43f af6f 	beq.w	800486a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800498c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800498e:	4618      	mov	r0, r3
 8004990:	3730      	adds	r7, #48	; 0x30
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	e000ed04 	.word	0xe000ed04

0800499c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b086      	sub	sp, #24
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80049a8:	2300      	movs	r3, #0
 80049aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10d      	bne.n	80049d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d14d      	bne.n	8004a5e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f000 ffdc 	bl	8005984 <xTaskPriorityDisinherit>
 80049cc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	609a      	str	r2, [r3, #8]
 80049d4:	e043      	b.n	8004a5e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d119      	bne.n	8004a10 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6858      	ldr	r0, [r3, #4]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e4:	461a      	mov	r2, r3
 80049e6:	68b9      	ldr	r1, [r7, #8]
 80049e8:	f002 f82e 	bl	8006a48 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	685a      	ldr	r2, [r3, #4]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f4:	441a      	add	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	685a      	ldr	r2, [r3, #4]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d32b      	bcc.n	8004a5e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	605a      	str	r2, [r3, #4]
 8004a0e:	e026      	b.n	8004a5e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	68d8      	ldr	r0, [r3, #12]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a18:	461a      	mov	r2, r3
 8004a1a:	68b9      	ldr	r1, [r7, #8]
 8004a1c:	f002 f814 	bl	8006a48 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	68da      	ldr	r2, [r3, #12]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a28:	425b      	negs	r3, r3
 8004a2a:	441a      	add	r2, r3
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	68da      	ldr	r2, [r3, #12]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d207      	bcs.n	8004a4c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	689a      	ldr	r2, [r3, #8]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a44:	425b      	negs	r3, r3
 8004a46:	441a      	add	r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d105      	bne.n	8004a5e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d002      	beq.n	8004a5e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	1c5a      	adds	r2, r3, #1
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004a66:	697b      	ldr	r3, [r7, #20]
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3718      	adds	r7, #24
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d018      	beq.n	8004ab4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68da      	ldr	r2, [r3, #12]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8a:	441a      	add	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	68da      	ldr	r2, [r3, #12]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d303      	bcc.n	8004aa4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	68d9      	ldr	r1, [r3, #12]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aac:	461a      	mov	r2, r3
 8004aae:	6838      	ldr	r0, [r7, #0]
 8004ab0:	f001 ffca 	bl	8006a48 <memcpy>
	}
}
 8004ab4:	bf00      	nop
 8004ab6:	3708      	adds	r7, #8
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004ac4:	f001 fc8a 	bl	80063dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ace:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ad0:	e011      	b.n	8004af6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d012      	beq.n	8004b00 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	3324      	adds	r3, #36	; 0x24
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f000 fd68 	bl	80055b4 <xTaskRemoveFromEventList>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d001      	beq.n	8004aee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004aea:	f000 fe45 	bl	8005778 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004aee:	7bfb      	ldrb	r3, [r7, #15]
 8004af0:	3b01      	subs	r3, #1
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	dce9      	bgt.n	8004ad2 <prvUnlockQueue+0x16>
 8004afe:	e000      	b.n	8004b02 <prvUnlockQueue+0x46>
					break;
 8004b00:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	22ff      	movs	r2, #255	; 0xff
 8004b06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004b0a:	f001 fc9b 	bl	8006444 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004b0e:	f001 fc65 	bl	80063dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b18:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b1a:	e011      	b.n	8004b40 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d012      	beq.n	8004b4a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	3310      	adds	r3, #16
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f000 fd43 	bl	80055b4 <xTaskRemoveFromEventList>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d001      	beq.n	8004b38 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004b34:	f000 fe20 	bl	8005778 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004b38:	7bbb      	ldrb	r3, [r7, #14]
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	dce9      	bgt.n	8004b1c <prvUnlockQueue+0x60>
 8004b48:	e000      	b.n	8004b4c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004b4a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	22ff      	movs	r2, #255	; 0xff
 8004b50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004b54:	f001 fc76 	bl	8006444 <vPortExitCritical>
}
 8004b58:	bf00      	nop
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b68:	f001 fc38 	bl	80063dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d102      	bne.n	8004b7a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004b74:	2301      	movs	r3, #1
 8004b76:	60fb      	str	r3, [r7, #12]
 8004b78:	e001      	b.n	8004b7e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004b7e:	f001 fc61 	bl	8006444 <vPortExitCritical>

	return xReturn;
 8004b82:	68fb      	ldr	r3, [r7, #12]
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3710      	adds	r7, #16
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b94:	f001 fc22 	bl	80063dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d102      	bne.n	8004baa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	60fb      	str	r3, [r7, #12]
 8004ba8:	e001      	b.n	8004bae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004baa:	2300      	movs	r3, #0
 8004bac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004bae:	f001 fc49 	bl	8006444 <vPortExitCritical>

	return xReturn;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3710      	adds	r7, #16
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b085      	sub	sp, #20
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	60fb      	str	r3, [r7, #12]
 8004bca:	e014      	b.n	8004bf6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004bcc:	4a0f      	ldr	r2, [pc, #60]	; (8004c0c <vQueueAddToRegistry+0x50>)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10b      	bne.n	8004bf0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004bd8:	490c      	ldr	r1, [pc, #48]	; (8004c0c <vQueueAddToRegistry+0x50>)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	683a      	ldr	r2, [r7, #0]
 8004bde:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004be2:	4a0a      	ldr	r2, [pc, #40]	; (8004c0c <vQueueAddToRegistry+0x50>)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	00db      	lsls	r3, r3, #3
 8004be8:	4413      	add	r3, r2
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004bee:	e006      	b.n	8004bfe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	60fb      	str	r3, [r7, #12]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2b07      	cmp	r3, #7
 8004bfa:	d9e7      	bls.n	8004bcc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004bfc:	bf00      	nop
 8004bfe:	bf00      	nop
 8004c00:	3714      	adds	r7, #20
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	200009fc 	.word	0x200009fc

08004c10 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b086      	sub	sp, #24
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004c20:	f001 fbdc 	bl	80063dc <vPortEnterCritical>
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c2a:	b25b      	sxtb	r3, r3
 8004c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c30:	d103      	bne.n	8004c3a <vQueueWaitForMessageRestricted+0x2a>
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c40:	b25b      	sxtb	r3, r3
 8004c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c46:	d103      	bne.n	8004c50 <vQueueWaitForMessageRestricted+0x40>
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c50:	f001 fbf8 	bl	8006444 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d106      	bne.n	8004c6a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	3324      	adds	r3, #36	; 0x24
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	68b9      	ldr	r1, [r7, #8]
 8004c64:	4618      	mov	r0, r3
 8004c66:	f000 fc77 	bl	8005558 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004c6a:	6978      	ldr	r0, [r7, #20]
 8004c6c:	f7ff ff26 	bl	8004abc <prvUnlockQueue>
	}
 8004c70:	bf00      	nop
 8004c72:	3718      	adds	r7, #24
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b08e      	sub	sp, #56	; 0x38
 8004c7c:	af04      	add	r7, sp, #16
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
 8004c84:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d10c      	bne.n	8004ca6 <xTaskCreateStatic+0x2e>
	__asm volatile
 8004c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c90:	b672      	cpsid	i
 8004c92:	f383 8811 	msr	BASEPRI, r3
 8004c96:	f3bf 8f6f 	isb	sy
 8004c9a:	f3bf 8f4f 	dsb	sy
 8004c9e:	b662      	cpsie	i
 8004ca0:	623b      	str	r3, [r7, #32]
}
 8004ca2:	bf00      	nop
 8004ca4:	e7fe      	b.n	8004ca4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8004ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d10c      	bne.n	8004cc6 <xTaskCreateStatic+0x4e>
	__asm volatile
 8004cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb0:	b672      	cpsid	i
 8004cb2:	f383 8811 	msr	BASEPRI, r3
 8004cb6:	f3bf 8f6f 	isb	sy
 8004cba:	f3bf 8f4f 	dsb	sy
 8004cbe:	b662      	cpsie	i
 8004cc0:	61fb      	str	r3, [r7, #28]
}
 8004cc2:	bf00      	nop
 8004cc4:	e7fe      	b.n	8004cc4 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004cc6:	23bc      	movs	r3, #188	; 0xbc
 8004cc8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	2bbc      	cmp	r3, #188	; 0xbc
 8004cce:	d00c      	beq.n	8004cea <xTaskCreateStatic+0x72>
	__asm volatile
 8004cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd4:	b672      	cpsid	i
 8004cd6:	f383 8811 	msr	BASEPRI, r3
 8004cda:	f3bf 8f6f 	isb	sy
 8004cde:	f3bf 8f4f 	dsb	sy
 8004ce2:	b662      	cpsie	i
 8004ce4:	61bb      	str	r3, [r7, #24]
}
 8004ce6:	bf00      	nop
 8004ce8:	e7fe      	b.n	8004ce8 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004cea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d01e      	beq.n	8004d30 <xTaskCreateStatic+0xb8>
 8004cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d01b      	beq.n	8004d30 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cfa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d00:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d04:	2202      	movs	r2, #2
 8004d06:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	9303      	str	r3, [sp, #12]
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d10:	9302      	str	r3, [sp, #8]
 8004d12:	f107 0314 	add.w	r3, r7, #20
 8004d16:	9301      	str	r3, [sp, #4]
 8004d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1a:	9300      	str	r3, [sp, #0]
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	68b9      	ldr	r1, [r7, #8]
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f000 f850 	bl	8004dc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d2a:	f000 f8f5 	bl	8004f18 <prvAddNewTaskToReadyList>
 8004d2e:	e001      	b.n	8004d34 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8004d30:	2300      	movs	r3, #0
 8004d32:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004d34:	697b      	ldr	r3, [r7, #20]
	}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3728      	adds	r7, #40	; 0x28
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b08c      	sub	sp, #48	; 0x30
 8004d42:	af04      	add	r7, sp, #16
 8004d44:	60f8      	str	r0, [r7, #12]
 8004d46:	60b9      	str	r1, [r7, #8]
 8004d48:	603b      	str	r3, [r7, #0]
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004d4e:	88fb      	ldrh	r3, [r7, #6]
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	4618      	mov	r0, r3
 8004d54:	f001 fc6e 	bl	8006634 <pvPortMalloc>
 8004d58:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00e      	beq.n	8004d7e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004d60:	20bc      	movs	r0, #188	; 0xbc
 8004d62:	f001 fc67 	bl	8006634 <pvPortMalloc>
 8004d66:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d003      	beq.n	8004d76 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	697a      	ldr	r2, [r7, #20]
 8004d72:	631a      	str	r2, [r3, #48]	; 0x30
 8004d74:	e005      	b.n	8004d82 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004d76:	6978      	ldr	r0, [r7, #20]
 8004d78:	f001 fd26 	bl	80067c8 <vPortFree>
 8004d7c:	e001      	b.n	8004d82 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d017      	beq.n	8004db8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004d90:	88fa      	ldrh	r2, [r7, #6]
 8004d92:	2300      	movs	r3, #0
 8004d94:	9303      	str	r3, [sp, #12]
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	9302      	str	r3, [sp, #8]
 8004d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d9c:	9301      	str	r3, [sp, #4]
 8004d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da0:	9300      	str	r3, [sp, #0]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	68b9      	ldr	r1, [r7, #8]
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f000 f80e 	bl	8004dc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004dac:	69f8      	ldr	r0, [r7, #28]
 8004dae:	f000 f8b3 	bl	8004f18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004db2:	2301      	movs	r3, #1
 8004db4:	61bb      	str	r3, [r7, #24]
 8004db6:	e002      	b.n	8004dbe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004db8:	f04f 33ff 	mov.w	r3, #4294967295
 8004dbc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004dbe:	69bb      	ldr	r3, [r7, #24]
	}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3720      	adds	r7, #32
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b088      	sub	sp, #32
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
 8004dd4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	461a      	mov	r2, r3
 8004de0:	21a5      	movs	r1, #165	; 0xa5
 8004de2:	f001 fe3f 	bl	8006a64 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dea:	6879      	ldr	r1, [r7, #4]
 8004dec:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004df0:	440b      	add	r3, r1
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	4413      	add	r3, r2
 8004df6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	f023 0307 	bic.w	r3, r3, #7
 8004dfe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	f003 0307 	and.w	r3, r3, #7
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00c      	beq.n	8004e24 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8004e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e0e:	b672      	cpsid	i
 8004e10:	f383 8811 	msr	BASEPRI, r3
 8004e14:	f3bf 8f6f 	isb	sy
 8004e18:	f3bf 8f4f 	dsb	sy
 8004e1c:	b662      	cpsie	i
 8004e1e:	617b      	str	r3, [r7, #20]
}
 8004e20:	bf00      	nop
 8004e22:	e7fe      	b.n	8004e22 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d01f      	beq.n	8004e6a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	61fb      	str	r3, [r7, #28]
 8004e2e:	e012      	b.n	8004e56 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004e30:	68ba      	ldr	r2, [r7, #8]
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	4413      	add	r3, r2
 8004e36:	7819      	ldrb	r1, [r3, #0]
 8004e38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	3334      	adds	r3, #52	; 0x34
 8004e40:	460a      	mov	r2, r1
 8004e42:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	4413      	add	r3, r2
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d006      	beq.n	8004e5e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	3301      	adds	r3, #1
 8004e54:	61fb      	str	r3, [r7, #28]
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	2b0f      	cmp	r3, #15
 8004e5a:	d9e9      	bls.n	8004e30 <prvInitialiseNewTask+0x68>
 8004e5c:	e000      	b.n	8004e60 <prvInitialiseNewTask+0x98>
			{
				break;
 8004e5e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e68:	e003      	b.n	8004e72 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e74:	2b37      	cmp	r3, #55	; 0x37
 8004e76:	d901      	bls.n	8004e7c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004e78:	2337      	movs	r3, #55	; 0x37
 8004e7a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e80:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e86:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e90:	3304      	adds	r3, #4
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7ff f952 	bl	800413c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9a:	3318      	adds	r3, #24
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7ff f94d 	bl	800413c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ea6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eaa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004eb6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eca:	3354      	adds	r3, #84	; 0x54
 8004ecc:	2260      	movs	r2, #96	; 0x60
 8004ece:	2100      	movs	r1, #0
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f001 fdc7 	bl	8006a64 <memset>
 8004ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed8:	4a0c      	ldr	r2, [pc, #48]	; (8004f0c <prvInitialiseNewTask+0x144>)
 8004eda:	659a      	str	r2, [r3, #88]	; 0x58
 8004edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ede:	4a0c      	ldr	r2, [pc, #48]	; (8004f10 <prvInitialiseNewTask+0x148>)
 8004ee0:	65da      	str	r2, [r3, #92]	; 0x5c
 8004ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee4:	4a0b      	ldr	r2, [pc, #44]	; (8004f14 <prvInitialiseNewTask+0x14c>)
 8004ee6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004ee8:	683a      	ldr	r2, [r7, #0]
 8004eea:	68f9      	ldr	r1, [r7, #12]
 8004eec:	69b8      	ldr	r0, [r7, #24]
 8004eee:	f001 f96b 	bl	80061c8 <pxPortInitialiseStack>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d002      	beq.n	8004f04 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f02:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f04:	bf00      	nop
 8004f06:	3720      	adds	r7, #32
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	08006cc8 	.word	0x08006cc8
 8004f10:	08006ce8 	.word	0x08006ce8
 8004f14:	08006ca8 	.word	0x08006ca8

08004f18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004f20:	f001 fa5c 	bl	80063dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004f24:	4b2d      	ldr	r3, [pc, #180]	; (8004fdc <prvAddNewTaskToReadyList+0xc4>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	4a2c      	ldr	r2, [pc, #176]	; (8004fdc <prvAddNewTaskToReadyList+0xc4>)
 8004f2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004f2e:	4b2c      	ldr	r3, [pc, #176]	; (8004fe0 <prvAddNewTaskToReadyList+0xc8>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d109      	bne.n	8004f4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004f36:	4a2a      	ldr	r2, [pc, #168]	; (8004fe0 <prvAddNewTaskToReadyList+0xc8>)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004f3c:	4b27      	ldr	r3, [pc, #156]	; (8004fdc <prvAddNewTaskToReadyList+0xc4>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d110      	bne.n	8004f66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004f44:	f000 fc3c 	bl	80057c0 <prvInitialiseTaskLists>
 8004f48:	e00d      	b.n	8004f66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004f4a:	4b26      	ldr	r3, [pc, #152]	; (8004fe4 <prvAddNewTaskToReadyList+0xcc>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d109      	bne.n	8004f66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004f52:	4b23      	ldr	r3, [pc, #140]	; (8004fe0 <prvAddNewTaskToReadyList+0xc8>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d802      	bhi.n	8004f66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004f60:	4a1f      	ldr	r2, [pc, #124]	; (8004fe0 <prvAddNewTaskToReadyList+0xc8>)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004f66:	4b20      	ldr	r3, [pc, #128]	; (8004fe8 <prvAddNewTaskToReadyList+0xd0>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	4a1e      	ldr	r2, [pc, #120]	; (8004fe8 <prvAddNewTaskToReadyList+0xd0>)
 8004f6e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004f70:	4b1d      	ldr	r3, [pc, #116]	; (8004fe8 <prvAddNewTaskToReadyList+0xd0>)
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f7c:	4b1b      	ldr	r3, [pc, #108]	; (8004fec <prvAddNewTaskToReadyList+0xd4>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d903      	bls.n	8004f8c <prvAddNewTaskToReadyList+0x74>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f88:	4a18      	ldr	r2, [pc, #96]	; (8004fec <prvAddNewTaskToReadyList+0xd4>)
 8004f8a:	6013      	str	r3, [r2, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f90:	4613      	mov	r3, r2
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	4413      	add	r3, r2
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	4a15      	ldr	r2, [pc, #84]	; (8004ff0 <prvAddNewTaskToReadyList+0xd8>)
 8004f9a:	441a      	add	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	3304      	adds	r3, #4
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	4610      	mov	r0, r2
 8004fa4:	f7ff f8d7 	bl	8004156 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004fa8:	f001 fa4c 	bl	8006444 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004fac:	4b0d      	ldr	r3, [pc, #52]	; (8004fe4 <prvAddNewTaskToReadyList+0xcc>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d00e      	beq.n	8004fd2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004fb4:	4b0a      	ldr	r3, [pc, #40]	; (8004fe0 <prvAddNewTaskToReadyList+0xc8>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d207      	bcs.n	8004fd2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004fc2:	4b0c      	ldr	r3, [pc, #48]	; (8004ff4 <prvAddNewTaskToReadyList+0xdc>)
 8004fc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fc8:	601a      	str	r2, [r3, #0]
 8004fca:	f3bf 8f4f 	dsb	sy
 8004fce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004fd2:	bf00      	nop
 8004fd4:	3708      	adds	r7, #8
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	20000f10 	.word	0x20000f10
 8004fe0:	20000a3c 	.word	0x20000a3c
 8004fe4:	20000f1c 	.word	0x20000f1c
 8004fe8:	20000f2c 	.word	0x20000f2c
 8004fec:	20000f18 	.word	0x20000f18
 8004ff0:	20000a40 	.word	0x20000a40
 8004ff4:	e000ed04 	.word	0xe000ed04

08004ff8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005000:	2300      	movs	r3, #0
 8005002:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d019      	beq.n	800503e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800500a:	4b14      	ldr	r3, [pc, #80]	; (800505c <vTaskDelay+0x64>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00c      	beq.n	800502c <vTaskDelay+0x34>
	__asm volatile
 8005012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005016:	b672      	cpsid	i
 8005018:	f383 8811 	msr	BASEPRI, r3
 800501c:	f3bf 8f6f 	isb	sy
 8005020:	f3bf 8f4f 	dsb	sy
 8005024:	b662      	cpsie	i
 8005026:	60bb      	str	r3, [r7, #8]
}
 8005028:	bf00      	nop
 800502a:	e7fe      	b.n	800502a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800502c:	f000 f88e 	bl	800514c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005030:	2100      	movs	r1, #0
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 fd18 	bl	8005a68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005038:	f000 f896 	bl	8005168 <xTaskResumeAll>
 800503c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d107      	bne.n	8005054 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8005044:	4b06      	ldr	r3, [pc, #24]	; (8005060 <vTaskDelay+0x68>)
 8005046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800504a:	601a      	str	r2, [r3, #0]
 800504c:	f3bf 8f4f 	dsb	sy
 8005050:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005054:	bf00      	nop
 8005056:	3710      	adds	r7, #16
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	20000f38 	.word	0x20000f38
 8005060:	e000ed04 	.word	0xe000ed04

08005064 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b08a      	sub	sp, #40	; 0x28
 8005068:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800506a:	2300      	movs	r3, #0
 800506c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800506e:	2300      	movs	r3, #0
 8005070:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005072:	463a      	mov	r2, r7
 8005074:	1d39      	adds	r1, r7, #4
 8005076:	f107 0308 	add.w	r3, r7, #8
 800507a:	4618      	mov	r0, r3
 800507c:	f7ff f80a 	bl	8004094 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005080:	6839      	ldr	r1, [r7, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	68ba      	ldr	r2, [r7, #8]
 8005086:	9202      	str	r2, [sp, #8]
 8005088:	9301      	str	r3, [sp, #4]
 800508a:	2300      	movs	r3, #0
 800508c:	9300      	str	r3, [sp, #0]
 800508e:	2300      	movs	r3, #0
 8005090:	460a      	mov	r2, r1
 8005092:	4926      	ldr	r1, [pc, #152]	; (800512c <vTaskStartScheduler+0xc8>)
 8005094:	4826      	ldr	r0, [pc, #152]	; (8005130 <vTaskStartScheduler+0xcc>)
 8005096:	f7ff fdef 	bl	8004c78 <xTaskCreateStatic>
 800509a:	4603      	mov	r3, r0
 800509c:	4a25      	ldr	r2, [pc, #148]	; (8005134 <vTaskStartScheduler+0xd0>)
 800509e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80050a0:	4b24      	ldr	r3, [pc, #144]	; (8005134 <vTaskStartScheduler+0xd0>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d002      	beq.n	80050ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80050a8:	2301      	movs	r3, #1
 80050aa:	617b      	str	r3, [r7, #20]
 80050ac:	e001      	b.n	80050b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80050ae:	2300      	movs	r3, #0
 80050b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d102      	bne.n	80050be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80050b8:	f000 fd2a 	bl	8005b10 <xTimerCreateTimerTask>
 80050bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d11d      	bne.n	8005100 <vTaskStartScheduler+0x9c>
	__asm volatile
 80050c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c8:	b672      	cpsid	i
 80050ca:	f383 8811 	msr	BASEPRI, r3
 80050ce:	f3bf 8f6f 	isb	sy
 80050d2:	f3bf 8f4f 	dsb	sy
 80050d6:	b662      	cpsie	i
 80050d8:	613b      	str	r3, [r7, #16]
}
 80050da:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80050dc:	4b16      	ldr	r3, [pc, #88]	; (8005138 <vTaskStartScheduler+0xd4>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	3354      	adds	r3, #84	; 0x54
 80050e2:	4a16      	ldr	r2, [pc, #88]	; (800513c <vTaskStartScheduler+0xd8>)
 80050e4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80050e6:	4b16      	ldr	r3, [pc, #88]	; (8005140 <vTaskStartScheduler+0xdc>)
 80050e8:	f04f 32ff 	mov.w	r2, #4294967295
 80050ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80050ee:	4b15      	ldr	r3, [pc, #84]	; (8005144 <vTaskStartScheduler+0xe0>)
 80050f0:	2201      	movs	r2, #1
 80050f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80050f4:	4b14      	ldr	r3, [pc, #80]	; (8005148 <vTaskStartScheduler+0xe4>)
 80050f6:	2200      	movs	r2, #0
 80050f8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80050fa:	f001 f8f1 	bl	80062e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80050fe:	e010      	b.n	8005122 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005106:	d10c      	bne.n	8005122 <vTaskStartScheduler+0xbe>
	__asm volatile
 8005108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510c:	b672      	cpsid	i
 800510e:	f383 8811 	msr	BASEPRI, r3
 8005112:	f3bf 8f6f 	isb	sy
 8005116:	f3bf 8f4f 	dsb	sy
 800511a:	b662      	cpsie	i
 800511c:	60fb      	str	r3, [r7, #12]
}
 800511e:	bf00      	nop
 8005120:	e7fe      	b.n	8005120 <vTaskStartScheduler+0xbc>
}
 8005122:	bf00      	nop
 8005124:	3718      	adds	r7, #24
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	08006c30 	.word	0x08006c30
 8005130:	08005791 	.word	0x08005791
 8005134:	20000f34 	.word	0x20000f34
 8005138:	20000a3c 	.word	0x20000a3c
 800513c:	20000010 	.word	0x20000010
 8005140:	20000f30 	.word	0x20000f30
 8005144:	20000f1c 	.word	0x20000f1c
 8005148:	20000f14 	.word	0x20000f14

0800514c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800514c:	b480      	push	{r7}
 800514e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005150:	4b04      	ldr	r3, [pc, #16]	; (8005164 <vTaskSuspendAll+0x18>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	3301      	adds	r3, #1
 8005156:	4a03      	ldr	r2, [pc, #12]	; (8005164 <vTaskSuspendAll+0x18>)
 8005158:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800515a:	bf00      	nop
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr
 8005164:	20000f38 	.word	0x20000f38

08005168 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800516e:	2300      	movs	r3, #0
 8005170:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005172:	2300      	movs	r3, #0
 8005174:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005176:	4b43      	ldr	r3, [pc, #268]	; (8005284 <xTaskResumeAll+0x11c>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d10c      	bne.n	8005198 <xTaskResumeAll+0x30>
	__asm volatile
 800517e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005182:	b672      	cpsid	i
 8005184:	f383 8811 	msr	BASEPRI, r3
 8005188:	f3bf 8f6f 	isb	sy
 800518c:	f3bf 8f4f 	dsb	sy
 8005190:	b662      	cpsie	i
 8005192:	603b      	str	r3, [r7, #0]
}
 8005194:	bf00      	nop
 8005196:	e7fe      	b.n	8005196 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005198:	f001 f920 	bl	80063dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800519c:	4b39      	ldr	r3, [pc, #228]	; (8005284 <xTaskResumeAll+0x11c>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	3b01      	subs	r3, #1
 80051a2:	4a38      	ldr	r2, [pc, #224]	; (8005284 <xTaskResumeAll+0x11c>)
 80051a4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051a6:	4b37      	ldr	r3, [pc, #220]	; (8005284 <xTaskResumeAll+0x11c>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d162      	bne.n	8005274 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80051ae:	4b36      	ldr	r3, [pc, #216]	; (8005288 <xTaskResumeAll+0x120>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d05e      	beq.n	8005274 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80051b6:	e02f      	b.n	8005218 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051b8:	4b34      	ldr	r3, [pc, #208]	; (800528c <xTaskResumeAll+0x124>)
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	3318      	adds	r3, #24
 80051c4:	4618      	mov	r0, r3
 80051c6:	f7ff f823 	bl	8004210 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	3304      	adds	r3, #4
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7ff f81e 	bl	8004210 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051d8:	4b2d      	ldr	r3, [pc, #180]	; (8005290 <xTaskResumeAll+0x128>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d903      	bls.n	80051e8 <xTaskResumeAll+0x80>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e4:	4a2a      	ldr	r2, [pc, #168]	; (8005290 <xTaskResumeAll+0x128>)
 80051e6:	6013      	str	r3, [r2, #0]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ec:	4613      	mov	r3, r2
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	4413      	add	r3, r2
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	4a27      	ldr	r2, [pc, #156]	; (8005294 <xTaskResumeAll+0x12c>)
 80051f6:	441a      	add	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	3304      	adds	r3, #4
 80051fc:	4619      	mov	r1, r3
 80051fe:	4610      	mov	r0, r2
 8005200:	f7fe ffa9 	bl	8004156 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005208:	4b23      	ldr	r3, [pc, #140]	; (8005298 <xTaskResumeAll+0x130>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520e:	429a      	cmp	r2, r3
 8005210:	d302      	bcc.n	8005218 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8005212:	4b22      	ldr	r3, [pc, #136]	; (800529c <xTaskResumeAll+0x134>)
 8005214:	2201      	movs	r2, #1
 8005216:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005218:	4b1c      	ldr	r3, [pc, #112]	; (800528c <xTaskResumeAll+0x124>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d1cb      	bne.n	80051b8 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d001      	beq.n	800522a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005226:	f000 fb6f 	bl	8005908 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800522a:	4b1d      	ldr	r3, [pc, #116]	; (80052a0 <xTaskResumeAll+0x138>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d010      	beq.n	8005258 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005236:	f000 f847 	bl	80052c8 <xTaskIncrementTick>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d002      	beq.n	8005246 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8005240:	4b16      	ldr	r3, [pc, #88]	; (800529c <xTaskResumeAll+0x134>)
 8005242:	2201      	movs	r2, #1
 8005244:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	3b01      	subs	r3, #1
 800524a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1f1      	bne.n	8005236 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8005252:	4b13      	ldr	r3, [pc, #76]	; (80052a0 <xTaskResumeAll+0x138>)
 8005254:	2200      	movs	r2, #0
 8005256:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005258:	4b10      	ldr	r3, [pc, #64]	; (800529c <xTaskResumeAll+0x134>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d009      	beq.n	8005274 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005260:	2301      	movs	r3, #1
 8005262:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005264:	4b0f      	ldr	r3, [pc, #60]	; (80052a4 <xTaskResumeAll+0x13c>)
 8005266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800526a:	601a      	str	r2, [r3, #0]
 800526c:	f3bf 8f4f 	dsb	sy
 8005270:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005274:	f001 f8e6 	bl	8006444 <vPortExitCritical>

	return xAlreadyYielded;
 8005278:	68bb      	ldr	r3, [r7, #8]
}
 800527a:	4618      	mov	r0, r3
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	20000f38 	.word	0x20000f38
 8005288:	20000f10 	.word	0x20000f10
 800528c:	20000ed0 	.word	0x20000ed0
 8005290:	20000f18 	.word	0x20000f18
 8005294:	20000a40 	.word	0x20000a40
 8005298:	20000a3c 	.word	0x20000a3c
 800529c:	20000f24 	.word	0x20000f24
 80052a0:	20000f20 	.word	0x20000f20
 80052a4:	e000ed04 	.word	0xe000ed04

080052a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80052ae:	4b05      	ldr	r3, [pc, #20]	; (80052c4 <xTaskGetTickCount+0x1c>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80052b4:	687b      	ldr	r3, [r7, #4]
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	370c      	adds	r7, #12
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	20000f14 	.word	0x20000f14

080052c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80052ce:	2300      	movs	r3, #0
 80052d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052d2:	4b50      	ldr	r3, [pc, #320]	; (8005414 <xTaskIncrementTick+0x14c>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	f040 808b 	bne.w	80053f2 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80052dc:	4b4e      	ldr	r3, [pc, #312]	; (8005418 <xTaskIncrementTick+0x150>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	3301      	adds	r3, #1
 80052e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80052e4:	4a4c      	ldr	r2, [pc, #304]	; (8005418 <xTaskIncrementTick+0x150>)
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d122      	bne.n	8005336 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80052f0:	4b4a      	ldr	r3, [pc, #296]	; (800541c <xTaskIncrementTick+0x154>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00c      	beq.n	8005314 <xTaskIncrementTick+0x4c>
	__asm volatile
 80052fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fe:	b672      	cpsid	i
 8005300:	f383 8811 	msr	BASEPRI, r3
 8005304:	f3bf 8f6f 	isb	sy
 8005308:	f3bf 8f4f 	dsb	sy
 800530c:	b662      	cpsie	i
 800530e:	603b      	str	r3, [r7, #0]
}
 8005310:	bf00      	nop
 8005312:	e7fe      	b.n	8005312 <xTaskIncrementTick+0x4a>
 8005314:	4b41      	ldr	r3, [pc, #260]	; (800541c <xTaskIncrementTick+0x154>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	60fb      	str	r3, [r7, #12]
 800531a:	4b41      	ldr	r3, [pc, #260]	; (8005420 <xTaskIncrementTick+0x158>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a3f      	ldr	r2, [pc, #252]	; (800541c <xTaskIncrementTick+0x154>)
 8005320:	6013      	str	r3, [r2, #0]
 8005322:	4a3f      	ldr	r2, [pc, #252]	; (8005420 <xTaskIncrementTick+0x158>)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6013      	str	r3, [r2, #0]
 8005328:	4b3e      	ldr	r3, [pc, #248]	; (8005424 <xTaskIncrementTick+0x15c>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	3301      	adds	r3, #1
 800532e:	4a3d      	ldr	r2, [pc, #244]	; (8005424 <xTaskIncrementTick+0x15c>)
 8005330:	6013      	str	r3, [r2, #0]
 8005332:	f000 fae9 	bl	8005908 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005336:	4b3c      	ldr	r3, [pc, #240]	; (8005428 <xTaskIncrementTick+0x160>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	693a      	ldr	r2, [r7, #16]
 800533c:	429a      	cmp	r2, r3
 800533e:	d349      	bcc.n	80053d4 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005340:	4b36      	ldr	r3, [pc, #216]	; (800541c <xTaskIncrementTick+0x154>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d104      	bne.n	8005354 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800534a:	4b37      	ldr	r3, [pc, #220]	; (8005428 <xTaskIncrementTick+0x160>)
 800534c:	f04f 32ff 	mov.w	r2, #4294967295
 8005350:	601a      	str	r2, [r3, #0]
					break;
 8005352:	e03f      	b.n	80053d4 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005354:	4b31      	ldr	r3, [pc, #196]	; (800541c <xTaskIncrementTick+0x154>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	429a      	cmp	r2, r3
 800536a:	d203      	bcs.n	8005374 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800536c:	4a2e      	ldr	r2, [pc, #184]	; (8005428 <xTaskIncrementTick+0x160>)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005372:	e02f      	b.n	80053d4 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	3304      	adds	r3, #4
 8005378:	4618      	mov	r0, r3
 800537a:	f7fe ff49 	bl	8004210 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005382:	2b00      	cmp	r3, #0
 8005384:	d004      	beq.n	8005390 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	3318      	adds	r3, #24
 800538a:	4618      	mov	r0, r3
 800538c:	f7fe ff40 	bl	8004210 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005394:	4b25      	ldr	r3, [pc, #148]	; (800542c <xTaskIncrementTick+0x164>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	429a      	cmp	r2, r3
 800539a:	d903      	bls.n	80053a4 <xTaskIncrementTick+0xdc>
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a0:	4a22      	ldr	r2, [pc, #136]	; (800542c <xTaskIncrementTick+0x164>)
 80053a2:	6013      	str	r3, [r2, #0]
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053a8:	4613      	mov	r3, r2
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	4413      	add	r3, r2
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	4a1f      	ldr	r2, [pc, #124]	; (8005430 <xTaskIncrementTick+0x168>)
 80053b2:	441a      	add	r2, r3
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	3304      	adds	r3, #4
 80053b8:	4619      	mov	r1, r3
 80053ba:	4610      	mov	r0, r2
 80053bc:	f7fe fecb 	bl	8004156 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c4:	4b1b      	ldr	r3, [pc, #108]	; (8005434 <xTaskIncrementTick+0x16c>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d3b8      	bcc.n	8005340 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80053ce:	2301      	movs	r3, #1
 80053d0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053d2:	e7b5      	b.n	8005340 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80053d4:	4b17      	ldr	r3, [pc, #92]	; (8005434 <xTaskIncrementTick+0x16c>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053da:	4915      	ldr	r1, [pc, #84]	; (8005430 <xTaskIncrementTick+0x168>)
 80053dc:	4613      	mov	r3, r2
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	4413      	add	r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	440b      	add	r3, r1
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d907      	bls.n	80053fc <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80053ec:	2301      	movs	r3, #1
 80053ee:	617b      	str	r3, [r7, #20]
 80053f0:	e004      	b.n	80053fc <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80053f2:	4b11      	ldr	r3, [pc, #68]	; (8005438 <xTaskIncrementTick+0x170>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	3301      	adds	r3, #1
 80053f8:	4a0f      	ldr	r2, [pc, #60]	; (8005438 <xTaskIncrementTick+0x170>)
 80053fa:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80053fc:	4b0f      	ldr	r3, [pc, #60]	; (800543c <xTaskIncrementTick+0x174>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d001      	beq.n	8005408 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8005404:	2301      	movs	r3, #1
 8005406:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005408:	697b      	ldr	r3, [r7, #20]
}
 800540a:	4618      	mov	r0, r3
 800540c:	3718      	adds	r7, #24
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	20000f38 	.word	0x20000f38
 8005418:	20000f14 	.word	0x20000f14
 800541c:	20000ec8 	.word	0x20000ec8
 8005420:	20000ecc 	.word	0x20000ecc
 8005424:	20000f28 	.word	0x20000f28
 8005428:	20000f30 	.word	0x20000f30
 800542c:	20000f18 	.word	0x20000f18
 8005430:	20000a40 	.word	0x20000a40
 8005434:	20000a3c 	.word	0x20000a3c
 8005438:	20000f20 	.word	0x20000f20
 800543c:	20000f24 	.word	0x20000f24

08005440 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005446:	4b2b      	ldr	r3, [pc, #172]	; (80054f4 <vTaskSwitchContext+0xb4>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d003      	beq.n	8005456 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800544e:	4b2a      	ldr	r3, [pc, #168]	; (80054f8 <vTaskSwitchContext+0xb8>)
 8005450:	2201      	movs	r2, #1
 8005452:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005454:	e048      	b.n	80054e8 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8005456:	4b28      	ldr	r3, [pc, #160]	; (80054f8 <vTaskSwitchContext+0xb8>)
 8005458:	2200      	movs	r2, #0
 800545a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800545c:	4b27      	ldr	r3, [pc, #156]	; (80054fc <vTaskSwitchContext+0xbc>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	60fb      	str	r3, [r7, #12]
 8005462:	e012      	b.n	800548a <vTaskSwitchContext+0x4a>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10c      	bne.n	8005484 <vTaskSwitchContext+0x44>
	__asm volatile
 800546a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800546e:	b672      	cpsid	i
 8005470:	f383 8811 	msr	BASEPRI, r3
 8005474:	f3bf 8f6f 	isb	sy
 8005478:	f3bf 8f4f 	dsb	sy
 800547c:	b662      	cpsie	i
 800547e:	607b      	str	r3, [r7, #4]
}
 8005480:	bf00      	nop
 8005482:	e7fe      	b.n	8005482 <vTaskSwitchContext+0x42>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	3b01      	subs	r3, #1
 8005488:	60fb      	str	r3, [r7, #12]
 800548a:	491d      	ldr	r1, [pc, #116]	; (8005500 <vTaskSwitchContext+0xc0>)
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	4613      	mov	r3, r2
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	4413      	add	r3, r2
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	440b      	add	r3, r1
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d0e2      	beq.n	8005464 <vTaskSwitchContext+0x24>
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	4613      	mov	r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	4413      	add	r3, r2
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	4a15      	ldr	r2, [pc, #84]	; (8005500 <vTaskSwitchContext+0xc0>)
 80054aa:	4413      	add	r3, r2
 80054ac:	60bb      	str	r3, [r7, #8]
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	685a      	ldr	r2, [r3, #4]
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	605a      	str	r2, [r3, #4]
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	685a      	ldr	r2, [r3, #4]
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	3308      	adds	r3, #8
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d104      	bne.n	80054ce <vTaskSwitchContext+0x8e>
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	685a      	ldr	r2, [r3, #4]
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	605a      	str	r2, [r3, #4]
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	4a0b      	ldr	r2, [pc, #44]	; (8005504 <vTaskSwitchContext+0xc4>)
 80054d6:	6013      	str	r3, [r2, #0]
 80054d8:	4a08      	ldr	r2, [pc, #32]	; (80054fc <vTaskSwitchContext+0xbc>)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80054de:	4b09      	ldr	r3, [pc, #36]	; (8005504 <vTaskSwitchContext+0xc4>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	3354      	adds	r3, #84	; 0x54
 80054e4:	4a08      	ldr	r2, [pc, #32]	; (8005508 <vTaskSwitchContext+0xc8>)
 80054e6:	6013      	str	r3, [r2, #0]
}
 80054e8:	bf00      	nop
 80054ea:	3714      	adds	r7, #20
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr
 80054f4:	20000f38 	.word	0x20000f38
 80054f8:	20000f24 	.word	0x20000f24
 80054fc:	20000f18 	.word	0x20000f18
 8005500:	20000a40 	.word	0x20000a40
 8005504:	20000a3c 	.word	0x20000a3c
 8005508:	20000010 	.word	0x20000010

0800550c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d10c      	bne.n	8005536 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800551c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005520:	b672      	cpsid	i
 8005522:	f383 8811 	msr	BASEPRI, r3
 8005526:	f3bf 8f6f 	isb	sy
 800552a:	f3bf 8f4f 	dsb	sy
 800552e:	b662      	cpsie	i
 8005530:	60fb      	str	r3, [r7, #12]
}
 8005532:	bf00      	nop
 8005534:	e7fe      	b.n	8005534 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005536:	4b07      	ldr	r3, [pc, #28]	; (8005554 <vTaskPlaceOnEventList+0x48>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	3318      	adds	r3, #24
 800553c:	4619      	mov	r1, r3
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f7fe fe2d 	bl	800419e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005544:	2101      	movs	r1, #1
 8005546:	6838      	ldr	r0, [r7, #0]
 8005548:	f000 fa8e 	bl	8005a68 <prvAddCurrentTaskToDelayedList>
}
 800554c:	bf00      	nop
 800554e:	3710      	adds	r7, #16
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}
 8005554:	20000a3c 	.word	0x20000a3c

08005558 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005558:	b580      	push	{r7, lr}
 800555a:	b086      	sub	sp, #24
 800555c:	af00      	add	r7, sp, #0
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d10c      	bne.n	8005584 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800556a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556e:	b672      	cpsid	i
 8005570:	f383 8811 	msr	BASEPRI, r3
 8005574:	f3bf 8f6f 	isb	sy
 8005578:	f3bf 8f4f 	dsb	sy
 800557c:	b662      	cpsie	i
 800557e:	617b      	str	r3, [r7, #20]
}
 8005580:	bf00      	nop
 8005582:	e7fe      	b.n	8005582 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005584:	4b0a      	ldr	r3, [pc, #40]	; (80055b0 <vTaskPlaceOnEventListRestricted+0x58>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	3318      	adds	r3, #24
 800558a:	4619      	mov	r1, r3
 800558c:	68f8      	ldr	r0, [r7, #12]
 800558e:	f7fe fde2 	bl	8004156 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d002      	beq.n	800559e <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8005598:	f04f 33ff 	mov.w	r3, #4294967295
 800559c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800559e:	6879      	ldr	r1, [r7, #4]
 80055a0:	68b8      	ldr	r0, [r7, #8]
 80055a2:	f000 fa61 	bl	8005a68 <prvAddCurrentTaskToDelayedList>
	}
 80055a6:	bf00      	nop
 80055a8:	3718      	adds	r7, #24
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	20000a3c 	.word	0x20000a3c

080055b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b086      	sub	sp, #24
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10c      	bne.n	80055e4 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80055ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ce:	b672      	cpsid	i
 80055d0:	f383 8811 	msr	BASEPRI, r3
 80055d4:	f3bf 8f6f 	isb	sy
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	b662      	cpsie	i
 80055de:	60fb      	str	r3, [r7, #12]
}
 80055e0:	bf00      	nop
 80055e2:	e7fe      	b.n	80055e2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	3318      	adds	r3, #24
 80055e8:	4618      	mov	r0, r3
 80055ea:	f7fe fe11 	bl	8004210 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055ee:	4b1e      	ldr	r3, [pc, #120]	; (8005668 <xTaskRemoveFromEventList+0xb4>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d11d      	bne.n	8005632 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	3304      	adds	r3, #4
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7fe fe08 	bl	8004210 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005604:	4b19      	ldr	r3, [pc, #100]	; (800566c <xTaskRemoveFromEventList+0xb8>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	429a      	cmp	r2, r3
 800560a:	d903      	bls.n	8005614 <xTaskRemoveFromEventList+0x60>
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005610:	4a16      	ldr	r2, [pc, #88]	; (800566c <xTaskRemoveFromEventList+0xb8>)
 8005612:	6013      	str	r3, [r2, #0]
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005618:	4613      	mov	r3, r2
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4413      	add	r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	4a13      	ldr	r2, [pc, #76]	; (8005670 <xTaskRemoveFromEventList+0xbc>)
 8005622:	441a      	add	r2, r3
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	3304      	adds	r3, #4
 8005628:	4619      	mov	r1, r3
 800562a:	4610      	mov	r0, r2
 800562c:	f7fe fd93 	bl	8004156 <vListInsertEnd>
 8005630:	e005      	b.n	800563e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	3318      	adds	r3, #24
 8005636:	4619      	mov	r1, r3
 8005638:	480e      	ldr	r0, [pc, #56]	; (8005674 <xTaskRemoveFromEventList+0xc0>)
 800563a:	f7fe fd8c 	bl	8004156 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005642:	4b0d      	ldr	r3, [pc, #52]	; (8005678 <xTaskRemoveFromEventList+0xc4>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005648:	429a      	cmp	r2, r3
 800564a:	d905      	bls.n	8005658 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800564c:	2301      	movs	r3, #1
 800564e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005650:	4b0a      	ldr	r3, [pc, #40]	; (800567c <xTaskRemoveFromEventList+0xc8>)
 8005652:	2201      	movs	r2, #1
 8005654:	601a      	str	r2, [r3, #0]
 8005656:	e001      	b.n	800565c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8005658:	2300      	movs	r3, #0
 800565a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800565c:	697b      	ldr	r3, [r7, #20]
}
 800565e:	4618      	mov	r0, r3
 8005660:	3718      	adds	r7, #24
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	20000f38 	.word	0x20000f38
 800566c:	20000f18 	.word	0x20000f18
 8005670:	20000a40 	.word	0x20000a40
 8005674:	20000ed0 	.word	0x20000ed0
 8005678:	20000a3c 	.word	0x20000a3c
 800567c:	20000f24 	.word	0x20000f24

08005680 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005688:	4b06      	ldr	r3, [pc, #24]	; (80056a4 <vTaskInternalSetTimeOutState+0x24>)
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005690:	4b05      	ldr	r3, [pc, #20]	; (80056a8 <vTaskInternalSetTimeOutState+0x28>)
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	605a      	str	r2, [r3, #4]
}
 8005698:	bf00      	nop
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr
 80056a4:	20000f28 	.word	0x20000f28
 80056a8:	20000f14 	.word	0x20000f14

080056ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b088      	sub	sp, #32
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d10c      	bne.n	80056d6 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80056bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c0:	b672      	cpsid	i
 80056c2:	f383 8811 	msr	BASEPRI, r3
 80056c6:	f3bf 8f6f 	isb	sy
 80056ca:	f3bf 8f4f 	dsb	sy
 80056ce:	b662      	cpsie	i
 80056d0:	613b      	str	r3, [r7, #16]
}
 80056d2:	bf00      	nop
 80056d4:	e7fe      	b.n	80056d4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d10c      	bne.n	80056f6 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80056dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e0:	b672      	cpsid	i
 80056e2:	f383 8811 	msr	BASEPRI, r3
 80056e6:	f3bf 8f6f 	isb	sy
 80056ea:	f3bf 8f4f 	dsb	sy
 80056ee:	b662      	cpsie	i
 80056f0:	60fb      	str	r3, [r7, #12]
}
 80056f2:	bf00      	nop
 80056f4:	e7fe      	b.n	80056f4 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80056f6:	f000 fe71 	bl	80063dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80056fa:	4b1d      	ldr	r3, [pc, #116]	; (8005770 <xTaskCheckForTimeOut+0xc4>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005712:	d102      	bne.n	800571a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005714:	2300      	movs	r3, #0
 8005716:	61fb      	str	r3, [r7, #28]
 8005718:	e023      	b.n	8005762 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	4b15      	ldr	r3, [pc, #84]	; (8005774 <xTaskCheckForTimeOut+0xc8>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	429a      	cmp	r2, r3
 8005724:	d007      	beq.n	8005736 <xTaskCheckForTimeOut+0x8a>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	69ba      	ldr	r2, [r7, #24]
 800572c:	429a      	cmp	r2, r3
 800572e:	d302      	bcc.n	8005736 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005730:	2301      	movs	r3, #1
 8005732:	61fb      	str	r3, [r7, #28]
 8005734:	e015      	b.n	8005762 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	429a      	cmp	r2, r3
 800573e:	d20b      	bcs.n	8005758 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	1ad2      	subs	r2, r2, r3
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f7ff ff97 	bl	8005680 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005752:	2300      	movs	r3, #0
 8005754:	61fb      	str	r3, [r7, #28]
 8005756:	e004      	b.n	8005762 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	2200      	movs	r2, #0
 800575c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800575e:	2301      	movs	r3, #1
 8005760:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005762:	f000 fe6f 	bl	8006444 <vPortExitCritical>

	return xReturn;
 8005766:	69fb      	ldr	r3, [r7, #28]
}
 8005768:	4618      	mov	r0, r3
 800576a:	3720      	adds	r7, #32
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}
 8005770:	20000f14 	.word	0x20000f14
 8005774:	20000f28 	.word	0x20000f28

08005778 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005778:	b480      	push	{r7}
 800577a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800577c:	4b03      	ldr	r3, [pc, #12]	; (800578c <vTaskMissedYield+0x14>)
 800577e:	2201      	movs	r2, #1
 8005780:	601a      	str	r2, [r3, #0]
}
 8005782:	bf00      	nop
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr
 800578c:	20000f24 	.word	0x20000f24

08005790 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005798:	f000 f852 	bl	8005840 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800579c:	4b06      	ldr	r3, [pc, #24]	; (80057b8 <prvIdleTask+0x28>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d9f9      	bls.n	8005798 <prvIdleTask+0x8>
			{
				taskYIELD();
 80057a4:	4b05      	ldr	r3, [pc, #20]	; (80057bc <prvIdleTask+0x2c>)
 80057a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057aa:	601a      	str	r2, [r3, #0]
 80057ac:	f3bf 8f4f 	dsb	sy
 80057b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80057b4:	e7f0      	b.n	8005798 <prvIdleTask+0x8>
 80057b6:	bf00      	nop
 80057b8:	20000a40 	.word	0x20000a40
 80057bc:	e000ed04 	.word	0xe000ed04

080057c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057c6:	2300      	movs	r3, #0
 80057c8:	607b      	str	r3, [r7, #4]
 80057ca:	e00c      	b.n	80057e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	4613      	mov	r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	4413      	add	r3, r2
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	4a12      	ldr	r2, [pc, #72]	; (8005820 <prvInitialiseTaskLists+0x60>)
 80057d8:	4413      	add	r3, r2
 80057da:	4618      	mov	r0, r3
 80057dc:	f7fe fc8e 	bl	80040fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	3301      	adds	r3, #1
 80057e4:	607b      	str	r3, [r7, #4]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2b37      	cmp	r3, #55	; 0x37
 80057ea:	d9ef      	bls.n	80057cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80057ec:	480d      	ldr	r0, [pc, #52]	; (8005824 <prvInitialiseTaskLists+0x64>)
 80057ee:	f7fe fc85 	bl	80040fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80057f2:	480d      	ldr	r0, [pc, #52]	; (8005828 <prvInitialiseTaskLists+0x68>)
 80057f4:	f7fe fc82 	bl	80040fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80057f8:	480c      	ldr	r0, [pc, #48]	; (800582c <prvInitialiseTaskLists+0x6c>)
 80057fa:	f7fe fc7f 	bl	80040fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80057fe:	480c      	ldr	r0, [pc, #48]	; (8005830 <prvInitialiseTaskLists+0x70>)
 8005800:	f7fe fc7c 	bl	80040fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005804:	480b      	ldr	r0, [pc, #44]	; (8005834 <prvInitialiseTaskLists+0x74>)
 8005806:	f7fe fc79 	bl	80040fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800580a:	4b0b      	ldr	r3, [pc, #44]	; (8005838 <prvInitialiseTaskLists+0x78>)
 800580c:	4a05      	ldr	r2, [pc, #20]	; (8005824 <prvInitialiseTaskLists+0x64>)
 800580e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005810:	4b0a      	ldr	r3, [pc, #40]	; (800583c <prvInitialiseTaskLists+0x7c>)
 8005812:	4a05      	ldr	r2, [pc, #20]	; (8005828 <prvInitialiseTaskLists+0x68>)
 8005814:	601a      	str	r2, [r3, #0]
}
 8005816:	bf00      	nop
 8005818:	3708      	adds	r7, #8
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	20000a40 	.word	0x20000a40
 8005824:	20000ea0 	.word	0x20000ea0
 8005828:	20000eb4 	.word	0x20000eb4
 800582c:	20000ed0 	.word	0x20000ed0
 8005830:	20000ee4 	.word	0x20000ee4
 8005834:	20000efc 	.word	0x20000efc
 8005838:	20000ec8 	.word	0x20000ec8
 800583c:	20000ecc 	.word	0x20000ecc

08005840 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005846:	e019      	b.n	800587c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005848:	f000 fdc8 	bl	80063dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800584c:	4b10      	ldr	r3, [pc, #64]	; (8005890 <prvCheckTasksWaitingTermination+0x50>)
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	3304      	adds	r3, #4
 8005858:	4618      	mov	r0, r3
 800585a:	f7fe fcd9 	bl	8004210 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800585e:	4b0d      	ldr	r3, [pc, #52]	; (8005894 <prvCheckTasksWaitingTermination+0x54>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	3b01      	subs	r3, #1
 8005864:	4a0b      	ldr	r2, [pc, #44]	; (8005894 <prvCheckTasksWaitingTermination+0x54>)
 8005866:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005868:	4b0b      	ldr	r3, [pc, #44]	; (8005898 <prvCheckTasksWaitingTermination+0x58>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	3b01      	subs	r3, #1
 800586e:	4a0a      	ldr	r2, [pc, #40]	; (8005898 <prvCheckTasksWaitingTermination+0x58>)
 8005870:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005872:	f000 fde7 	bl	8006444 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f810 	bl	800589c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800587c:	4b06      	ldr	r3, [pc, #24]	; (8005898 <prvCheckTasksWaitingTermination+0x58>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d1e1      	bne.n	8005848 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005884:	bf00      	nop
 8005886:	bf00      	nop
 8005888:	3708      	adds	r7, #8
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	20000ee4 	.word	0x20000ee4
 8005894:	20000f10 	.word	0x20000f10
 8005898:	20000ef8 	.word	0x20000ef8

0800589c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	3354      	adds	r3, #84	; 0x54
 80058a8:	4618      	mov	r0, r3
 80058aa:	f001 f8f1 	bl	8006a90 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d108      	bne.n	80058ca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058bc:	4618      	mov	r0, r3
 80058be:	f000 ff83 	bl	80067c8 <vPortFree>
				vPortFree( pxTCB );
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 ff80 	bl	80067c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80058c8:	e01a      	b.n	8005900 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d103      	bne.n	80058dc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 ff77 	bl	80067c8 <vPortFree>
	}
 80058da:	e011      	b.n	8005900 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d00c      	beq.n	8005900 <prvDeleteTCB+0x64>
	__asm volatile
 80058e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ea:	b672      	cpsid	i
 80058ec:	f383 8811 	msr	BASEPRI, r3
 80058f0:	f3bf 8f6f 	isb	sy
 80058f4:	f3bf 8f4f 	dsb	sy
 80058f8:	b662      	cpsie	i
 80058fa:	60fb      	str	r3, [r7, #12]
}
 80058fc:	bf00      	nop
 80058fe:	e7fe      	b.n	80058fe <prvDeleteTCB+0x62>
	}
 8005900:	bf00      	nop
 8005902:	3710      	adds	r7, #16
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800590e:	4b0c      	ldr	r3, [pc, #48]	; (8005940 <prvResetNextTaskUnblockTime+0x38>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d104      	bne.n	8005922 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005918:	4b0a      	ldr	r3, [pc, #40]	; (8005944 <prvResetNextTaskUnblockTime+0x3c>)
 800591a:	f04f 32ff 	mov.w	r2, #4294967295
 800591e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005920:	e008      	b.n	8005934 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005922:	4b07      	ldr	r3, [pc, #28]	; (8005940 <prvResetNextTaskUnblockTime+0x38>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	4a04      	ldr	r2, [pc, #16]	; (8005944 <prvResetNextTaskUnblockTime+0x3c>)
 8005932:	6013      	str	r3, [r2, #0]
}
 8005934:	bf00      	nop
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr
 8005940:	20000ec8 	.word	0x20000ec8
 8005944:	20000f30 	.word	0x20000f30

08005948 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800594e:	4b0b      	ldr	r3, [pc, #44]	; (800597c <xTaskGetSchedulerState+0x34>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d102      	bne.n	800595c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005956:	2301      	movs	r3, #1
 8005958:	607b      	str	r3, [r7, #4]
 800595a:	e008      	b.n	800596e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800595c:	4b08      	ldr	r3, [pc, #32]	; (8005980 <xTaskGetSchedulerState+0x38>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d102      	bne.n	800596a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005964:	2302      	movs	r3, #2
 8005966:	607b      	str	r3, [r7, #4]
 8005968:	e001      	b.n	800596e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800596a:	2300      	movs	r3, #0
 800596c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800596e:	687b      	ldr	r3, [r7, #4]
	}
 8005970:	4618      	mov	r0, r3
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr
 800597c:	20000f1c 	.word	0x20000f1c
 8005980:	20000f38 	.word	0x20000f38

08005984 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005984:	b580      	push	{r7, lr}
 8005986:	b086      	sub	sp, #24
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005990:	2300      	movs	r3, #0
 8005992:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d05a      	beq.n	8005a50 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800599a:	4b30      	ldr	r3, [pc, #192]	; (8005a5c <xTaskPriorityDisinherit+0xd8>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	693a      	ldr	r2, [r7, #16]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d00c      	beq.n	80059be <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80059a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a8:	b672      	cpsid	i
 80059aa:	f383 8811 	msr	BASEPRI, r3
 80059ae:	f3bf 8f6f 	isb	sy
 80059b2:	f3bf 8f4f 	dsb	sy
 80059b6:	b662      	cpsie	i
 80059b8:	60fb      	str	r3, [r7, #12]
}
 80059ba:	bf00      	nop
 80059bc:	e7fe      	b.n	80059bc <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d10c      	bne.n	80059e0 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80059c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ca:	b672      	cpsid	i
 80059cc:	f383 8811 	msr	BASEPRI, r3
 80059d0:	f3bf 8f6f 	isb	sy
 80059d4:	f3bf 8f4f 	dsb	sy
 80059d8:	b662      	cpsie	i
 80059da:	60bb      	str	r3, [r7, #8]
}
 80059dc:	bf00      	nop
 80059de:	e7fe      	b.n	80059de <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059e4:	1e5a      	subs	r2, r3, #1
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d02c      	beq.n	8005a50 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d128      	bne.n	8005a50 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	3304      	adds	r3, #4
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7fe fc04 	bl	8004210 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a14:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a20:	4b0f      	ldr	r3, [pc, #60]	; (8005a60 <xTaskPriorityDisinherit+0xdc>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d903      	bls.n	8005a30 <xTaskPriorityDisinherit+0xac>
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2c:	4a0c      	ldr	r2, [pc, #48]	; (8005a60 <xTaskPriorityDisinherit+0xdc>)
 8005a2e:	6013      	str	r3, [r2, #0]
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a34:	4613      	mov	r3, r2
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	4413      	add	r3, r2
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	4a09      	ldr	r2, [pc, #36]	; (8005a64 <xTaskPriorityDisinherit+0xe0>)
 8005a3e:	441a      	add	r2, r3
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	3304      	adds	r3, #4
 8005a44:	4619      	mov	r1, r3
 8005a46:	4610      	mov	r0, r2
 8005a48:	f7fe fb85 	bl	8004156 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005a50:	697b      	ldr	r3, [r7, #20]
	}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3718      	adds	r7, #24
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	20000a3c 	.word	0x20000a3c
 8005a60:	20000f18 	.word	0x20000f18
 8005a64:	20000a40 	.word	0x20000a40

08005a68 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005a72:	4b21      	ldr	r3, [pc, #132]	; (8005af8 <prvAddCurrentTaskToDelayedList+0x90>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a78:	4b20      	ldr	r3, [pc, #128]	; (8005afc <prvAddCurrentTaskToDelayedList+0x94>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	3304      	adds	r3, #4
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7fe fbc6 	bl	8004210 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a8a:	d10a      	bne.n	8005aa2 <prvAddCurrentTaskToDelayedList+0x3a>
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d007      	beq.n	8005aa2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a92:	4b1a      	ldr	r3, [pc, #104]	; (8005afc <prvAddCurrentTaskToDelayedList+0x94>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	3304      	adds	r3, #4
 8005a98:	4619      	mov	r1, r3
 8005a9a:	4819      	ldr	r0, [pc, #100]	; (8005b00 <prvAddCurrentTaskToDelayedList+0x98>)
 8005a9c:	f7fe fb5b 	bl	8004156 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005aa0:	e026      	b.n	8005af0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005aaa:	4b14      	ldr	r3, [pc, #80]	; (8005afc <prvAddCurrentTaskToDelayedList+0x94>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68ba      	ldr	r2, [r7, #8]
 8005ab0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005ab2:	68ba      	ldr	r2, [r7, #8]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d209      	bcs.n	8005ace <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005aba:	4b12      	ldr	r3, [pc, #72]	; (8005b04 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	4b0f      	ldr	r3, [pc, #60]	; (8005afc <prvAddCurrentTaskToDelayedList+0x94>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	3304      	adds	r3, #4
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	4610      	mov	r0, r2
 8005ac8:	f7fe fb69 	bl	800419e <vListInsert>
}
 8005acc:	e010      	b.n	8005af0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ace:	4b0e      	ldr	r3, [pc, #56]	; (8005b08 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	4b0a      	ldr	r3, [pc, #40]	; (8005afc <prvAddCurrentTaskToDelayedList+0x94>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	3304      	adds	r3, #4
 8005ad8:	4619      	mov	r1, r3
 8005ada:	4610      	mov	r0, r2
 8005adc:	f7fe fb5f 	bl	800419e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005ae0:	4b0a      	ldr	r3, [pc, #40]	; (8005b0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68ba      	ldr	r2, [r7, #8]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d202      	bcs.n	8005af0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005aea:	4a08      	ldr	r2, [pc, #32]	; (8005b0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	6013      	str	r3, [r2, #0]
}
 8005af0:	bf00      	nop
 8005af2:	3710      	adds	r7, #16
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	20000f14 	.word	0x20000f14
 8005afc:	20000a3c 	.word	0x20000a3c
 8005b00:	20000efc 	.word	0x20000efc
 8005b04:	20000ecc 	.word	0x20000ecc
 8005b08:	20000ec8 	.word	0x20000ec8
 8005b0c:	20000f30 	.word	0x20000f30

08005b10 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b08a      	sub	sp, #40	; 0x28
 8005b14:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005b16:	2300      	movs	r3, #0
 8005b18:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005b1a:	f000 fb15 	bl	8006148 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005b1e:	4b1d      	ldr	r3, [pc, #116]	; (8005b94 <xTimerCreateTimerTask+0x84>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d021      	beq.n	8005b6a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005b26:	2300      	movs	r3, #0
 8005b28:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005b2e:	1d3a      	adds	r2, r7, #4
 8005b30:	f107 0108 	add.w	r1, r7, #8
 8005b34:	f107 030c 	add.w	r3, r7, #12
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f7fe fac5 	bl	80040c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005b3e:	6879      	ldr	r1, [r7, #4]
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	9202      	str	r2, [sp, #8]
 8005b46:	9301      	str	r3, [sp, #4]
 8005b48:	2302      	movs	r3, #2
 8005b4a:	9300      	str	r3, [sp, #0]
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	460a      	mov	r2, r1
 8005b50:	4911      	ldr	r1, [pc, #68]	; (8005b98 <xTimerCreateTimerTask+0x88>)
 8005b52:	4812      	ldr	r0, [pc, #72]	; (8005b9c <xTimerCreateTimerTask+0x8c>)
 8005b54:	f7ff f890 	bl	8004c78 <xTaskCreateStatic>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	4a11      	ldr	r2, [pc, #68]	; (8005ba0 <xTimerCreateTimerTask+0x90>)
 8005b5c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005b5e:	4b10      	ldr	r3, [pc, #64]	; (8005ba0 <xTimerCreateTimerTask+0x90>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d001      	beq.n	8005b6a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005b66:	2301      	movs	r3, #1
 8005b68:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10c      	bne.n	8005b8a <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8005b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b74:	b672      	cpsid	i
 8005b76:	f383 8811 	msr	BASEPRI, r3
 8005b7a:	f3bf 8f6f 	isb	sy
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	b662      	cpsie	i
 8005b84:	613b      	str	r3, [r7, #16]
}
 8005b86:	bf00      	nop
 8005b88:	e7fe      	b.n	8005b88 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8005b8a:	697b      	ldr	r3, [r7, #20]
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3718      	adds	r7, #24
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	20000f6c 	.word	0x20000f6c
 8005b98:	08006c38 	.word	0x08006c38
 8005b9c:	08005ce1 	.word	0x08005ce1
 8005ba0:	20000f70 	.word	0x20000f70

08005ba4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b08a      	sub	sp, #40	; 0x28
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
 8005bb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d10c      	bne.n	8005bd6 <xTimerGenericCommand+0x32>
	__asm volatile
 8005bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc0:	b672      	cpsid	i
 8005bc2:	f383 8811 	msr	BASEPRI, r3
 8005bc6:	f3bf 8f6f 	isb	sy
 8005bca:	f3bf 8f4f 	dsb	sy
 8005bce:	b662      	cpsie	i
 8005bd0:	623b      	str	r3, [r7, #32]
}
 8005bd2:	bf00      	nop
 8005bd4:	e7fe      	b.n	8005bd4 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005bd6:	4b1a      	ldr	r3, [pc, #104]	; (8005c40 <xTimerGenericCommand+0x9c>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d02a      	beq.n	8005c34 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	2b05      	cmp	r3, #5
 8005bee:	dc18      	bgt.n	8005c22 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005bf0:	f7ff feaa 	bl	8005948 <xTaskGetSchedulerState>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d109      	bne.n	8005c0e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005bfa:	4b11      	ldr	r3, [pc, #68]	; (8005c40 <xTimerGenericCommand+0x9c>)
 8005bfc:	6818      	ldr	r0, [r3, #0]
 8005bfe:	f107 0110 	add.w	r1, r7, #16
 8005c02:	2300      	movs	r3, #0
 8005c04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c06:	f7fe fc3d 	bl	8004484 <xQueueGenericSend>
 8005c0a:	6278      	str	r0, [r7, #36]	; 0x24
 8005c0c:	e012      	b.n	8005c34 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005c0e:	4b0c      	ldr	r3, [pc, #48]	; (8005c40 <xTimerGenericCommand+0x9c>)
 8005c10:	6818      	ldr	r0, [r3, #0]
 8005c12:	f107 0110 	add.w	r1, r7, #16
 8005c16:	2300      	movs	r3, #0
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f7fe fc33 	bl	8004484 <xQueueGenericSend>
 8005c1e:	6278      	str	r0, [r7, #36]	; 0x24
 8005c20:	e008      	b.n	8005c34 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005c22:	4b07      	ldr	r3, [pc, #28]	; (8005c40 <xTimerGenericCommand+0x9c>)
 8005c24:	6818      	ldr	r0, [r3, #0]
 8005c26:	f107 0110 	add.w	r1, r7, #16
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	683a      	ldr	r2, [r7, #0]
 8005c2e:	f7fe fd2f 	bl	8004690 <xQueueGenericSendFromISR>
 8005c32:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3728      	adds	r7, #40	; 0x28
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	20000f6c 	.word	0x20000f6c

08005c44 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b088      	sub	sp, #32
 8005c48:	af02      	add	r7, sp, #8
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c4e:	4b23      	ldr	r3, [pc, #140]	; (8005cdc <prvProcessExpiredTimer+0x98>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	3304      	adds	r3, #4
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f7fe fad7 	bl	8004210 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c68:	f003 0304 	and.w	r3, r3, #4
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d024      	beq.n	8005cba <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	699a      	ldr	r2, [r3, #24]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	18d1      	adds	r1, r2, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	683a      	ldr	r2, [r7, #0]
 8005c7c:	6978      	ldr	r0, [r7, #20]
 8005c7e:	f000 f8d3 	bl	8005e28 <prvInsertTimerInActiveList>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d021      	beq.n	8005ccc <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005c88:	2300      	movs	r3, #0
 8005c8a:	9300      	str	r3, [sp, #0]
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	2100      	movs	r1, #0
 8005c92:	6978      	ldr	r0, [r7, #20]
 8005c94:	f7ff ff86 	bl	8005ba4 <xTimerGenericCommand>
 8005c98:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d115      	bne.n	8005ccc <prvProcessExpiredTimer+0x88>
	__asm volatile
 8005ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca4:	b672      	cpsid	i
 8005ca6:	f383 8811 	msr	BASEPRI, r3
 8005caa:	f3bf 8f6f 	isb	sy
 8005cae:	f3bf 8f4f 	dsb	sy
 8005cb2:	b662      	cpsie	i
 8005cb4:	60fb      	str	r3, [r7, #12]
}
 8005cb6:	bf00      	nop
 8005cb8:	e7fe      	b.n	8005cb8 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cc0:	f023 0301 	bic.w	r3, r3, #1
 8005cc4:	b2da      	uxtb	r2, r3
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	6a1b      	ldr	r3, [r3, #32]
 8005cd0:	6978      	ldr	r0, [r7, #20]
 8005cd2:	4798      	blx	r3
}
 8005cd4:	bf00      	nop
 8005cd6:	3718      	adds	r7, #24
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	20000f64 	.word	0x20000f64

08005ce0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ce8:	f107 0308 	add.w	r3, r7, #8
 8005cec:	4618      	mov	r0, r3
 8005cee:	f000 f857 	bl	8005da0 <prvGetNextExpireTime>
 8005cf2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	68f8      	ldr	r0, [r7, #12]
 8005cfa:	f000 f803 	bl	8005d04 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005cfe:	f000 f8d5 	bl	8005eac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d02:	e7f1      	b.n	8005ce8 <prvTimerTask+0x8>

08005d04 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005d0e:	f7ff fa1d 	bl	800514c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d12:	f107 0308 	add.w	r3, r7, #8
 8005d16:	4618      	mov	r0, r3
 8005d18:	f000 f866 	bl	8005de8 <prvSampleTimeNow>
 8005d1c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d130      	bne.n	8005d86 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d10a      	bne.n	8005d40 <prvProcessTimerOrBlockTask+0x3c>
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d806      	bhi.n	8005d40 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005d32:	f7ff fa19 	bl	8005168 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005d36:	68f9      	ldr	r1, [r7, #12]
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f7ff ff83 	bl	8005c44 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005d3e:	e024      	b.n	8005d8a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d008      	beq.n	8005d58 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005d46:	4b13      	ldr	r3, [pc, #76]	; (8005d94 <prvProcessTimerOrBlockTask+0x90>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d101      	bne.n	8005d54 <prvProcessTimerOrBlockTask+0x50>
 8005d50:	2301      	movs	r3, #1
 8005d52:	e000      	b.n	8005d56 <prvProcessTimerOrBlockTask+0x52>
 8005d54:	2300      	movs	r3, #0
 8005d56:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005d58:	4b0f      	ldr	r3, [pc, #60]	; (8005d98 <prvProcessTimerOrBlockTask+0x94>)
 8005d5a:	6818      	ldr	r0, [r3, #0]
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	683a      	ldr	r2, [r7, #0]
 8005d64:	4619      	mov	r1, r3
 8005d66:	f7fe ff53 	bl	8004c10 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005d6a:	f7ff f9fd 	bl	8005168 <xTaskResumeAll>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d10a      	bne.n	8005d8a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005d74:	4b09      	ldr	r3, [pc, #36]	; (8005d9c <prvProcessTimerOrBlockTask+0x98>)
 8005d76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d7a:	601a      	str	r2, [r3, #0]
 8005d7c:	f3bf 8f4f 	dsb	sy
 8005d80:	f3bf 8f6f 	isb	sy
}
 8005d84:	e001      	b.n	8005d8a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005d86:	f7ff f9ef 	bl	8005168 <xTaskResumeAll>
}
 8005d8a:	bf00      	nop
 8005d8c:	3710      	adds	r7, #16
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	20000f68 	.word	0x20000f68
 8005d98:	20000f6c 	.word	0x20000f6c
 8005d9c:	e000ed04 	.word	0xe000ed04

08005da0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005da0:	b480      	push	{r7}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005da8:	4b0e      	ldr	r3, [pc, #56]	; (8005de4 <prvGetNextExpireTime+0x44>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d101      	bne.n	8005db6 <prvGetNextExpireTime+0x16>
 8005db2:	2201      	movs	r2, #1
 8005db4:	e000      	b.n	8005db8 <prvGetNextExpireTime+0x18>
 8005db6:	2200      	movs	r2, #0
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d105      	bne.n	8005dd0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005dc4:	4b07      	ldr	r3, [pc, #28]	; (8005de4 <prvGetNextExpireTime+0x44>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	60fb      	str	r3, [r7, #12]
 8005dce:	e001      	b.n	8005dd4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3714      	adds	r7, #20
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	20000f64 	.word	0x20000f64

08005de8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005df0:	f7ff fa5a 	bl	80052a8 <xTaskGetTickCount>
 8005df4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005df6:	4b0b      	ldr	r3, [pc, #44]	; (8005e24 <prvSampleTimeNow+0x3c>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d205      	bcs.n	8005e0c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005e00:	f000 f93c 	bl	800607c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	601a      	str	r2, [r3, #0]
 8005e0a:	e002      	b.n	8005e12 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005e12:	4a04      	ldr	r2, [pc, #16]	; (8005e24 <prvSampleTimeNow+0x3c>)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005e18:	68fb      	ldr	r3, [r7, #12]
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3710      	adds	r7, #16
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	20000f74 	.word	0x20000f74

08005e28 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b086      	sub	sp, #24
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
 8005e34:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005e36:	2300      	movs	r3, #0
 8005e38:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	68ba      	ldr	r2, [r7, #8]
 8005e3e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005e46:	68ba      	ldr	r2, [r7, #8]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d812      	bhi.n	8005e74 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	1ad2      	subs	r2, r2, r3
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	699b      	ldr	r3, [r3, #24]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d302      	bcc.n	8005e62 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	617b      	str	r3, [r7, #20]
 8005e60:	e01b      	b.n	8005e9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005e62:	4b10      	ldr	r3, [pc, #64]	; (8005ea4 <prvInsertTimerInActiveList+0x7c>)
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	3304      	adds	r3, #4
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	4610      	mov	r0, r2
 8005e6e:	f7fe f996 	bl	800419e <vListInsert>
 8005e72:	e012      	b.n	8005e9a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d206      	bcs.n	8005e8a <prvInsertTimerInActiveList+0x62>
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d302      	bcc.n	8005e8a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005e84:	2301      	movs	r3, #1
 8005e86:	617b      	str	r3, [r7, #20]
 8005e88:	e007      	b.n	8005e9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005e8a:	4b07      	ldr	r3, [pc, #28]	; (8005ea8 <prvInsertTimerInActiveList+0x80>)
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	3304      	adds	r3, #4
 8005e92:	4619      	mov	r1, r3
 8005e94:	4610      	mov	r0, r2
 8005e96:	f7fe f982 	bl	800419e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005e9a:	697b      	ldr	r3, [r7, #20]
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3718      	adds	r7, #24
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	20000f68 	.word	0x20000f68
 8005ea8:	20000f64 	.word	0x20000f64

08005eac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b08e      	sub	sp, #56	; 0x38
 8005eb0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005eb2:	e0d0      	b.n	8006056 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	da1a      	bge.n	8005ef0 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005eba:	1d3b      	adds	r3, r7, #4
 8005ebc:	3304      	adds	r3, #4
 8005ebe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d10c      	bne.n	8005ee0 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8005ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eca:	b672      	cpsid	i
 8005ecc:	f383 8811 	msr	BASEPRI, r3
 8005ed0:	f3bf 8f6f 	isb	sy
 8005ed4:	f3bf 8f4f 	dsb	sy
 8005ed8:	b662      	cpsie	i
 8005eda:	61fb      	str	r3, [r7, #28]
}
 8005edc:	bf00      	nop
 8005ede:	e7fe      	b.n	8005ede <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ee6:	6850      	ldr	r0, [r2, #4]
 8005ee8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005eea:	6892      	ldr	r2, [r2, #8]
 8005eec:	4611      	mov	r1, r2
 8005eee:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	f2c0 80ae 	blt.w	8006054 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005efe:	695b      	ldr	r3, [r3, #20]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d004      	beq.n	8005f0e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f06:	3304      	adds	r3, #4
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f7fe f981 	bl	8004210 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005f0e:	463b      	mov	r3, r7
 8005f10:	4618      	mov	r0, r3
 8005f12:	f7ff ff69 	bl	8005de8 <prvSampleTimeNow>
 8005f16:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2b09      	cmp	r3, #9
 8005f1c:	f200 809b 	bhi.w	8006056 <prvProcessReceivedCommands+0x1aa>
 8005f20:	a201      	add	r2, pc, #4	; (adr r2, 8005f28 <prvProcessReceivedCommands+0x7c>)
 8005f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f26:	bf00      	nop
 8005f28:	08005f51 	.word	0x08005f51
 8005f2c:	08005f51 	.word	0x08005f51
 8005f30:	08005f51 	.word	0x08005f51
 8005f34:	08005fc9 	.word	0x08005fc9
 8005f38:	08005fdd 	.word	0x08005fdd
 8005f3c:	0800602b 	.word	0x0800602b
 8005f40:	08005f51 	.word	0x08005f51
 8005f44:	08005f51 	.word	0x08005f51
 8005f48:	08005fc9 	.word	0x08005fc9
 8005f4c:	08005fdd 	.word	0x08005fdd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f56:	f043 0301 	orr.w	r3, r3, #1
 8005f5a:	b2da      	uxtb	r2, r3
 8005f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005f62:	68ba      	ldr	r2, [r7, #8]
 8005f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f66:	699b      	ldr	r3, [r3, #24]
 8005f68:	18d1      	adds	r1, r2, r3
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f70:	f7ff ff5a 	bl	8005e28 <prvInsertTimerInActiveList>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d06d      	beq.n	8006056 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f7c:	6a1b      	ldr	r3, [r3, #32]
 8005f7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f80:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f88:	f003 0304 	and.w	r3, r3, #4
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d062      	beq.n	8006056 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005f90:	68ba      	ldr	r2, [r7, #8]
 8005f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f94:	699b      	ldr	r3, [r3, #24]
 8005f96:	441a      	add	r2, r3
 8005f98:	2300      	movs	r3, #0
 8005f9a:	9300      	str	r3, [sp, #0]
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	2100      	movs	r1, #0
 8005fa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fa2:	f7ff fdff 	bl	8005ba4 <xTimerGenericCommand>
 8005fa6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005fa8:	6a3b      	ldr	r3, [r7, #32]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d153      	bne.n	8006056 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8005fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb2:	b672      	cpsid	i
 8005fb4:	f383 8811 	msr	BASEPRI, r3
 8005fb8:	f3bf 8f6f 	isb	sy
 8005fbc:	f3bf 8f4f 	dsb	sy
 8005fc0:	b662      	cpsie	i
 8005fc2:	61bb      	str	r3, [r7, #24]
}
 8005fc4:	bf00      	nop
 8005fc6:	e7fe      	b.n	8005fc6 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fce:	f023 0301 	bic.w	r3, r3, #1
 8005fd2:	b2da      	uxtb	r2, r3
 8005fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005fda:	e03c      	b.n	8006056 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fe2:	f043 0301 	orr.w	r3, r3, #1
 8005fe6:	b2da      	uxtb	r2, r3
 8005fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005fee:	68ba      	ldr	r2, [r7, #8]
 8005ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff6:	699b      	ldr	r3, [r3, #24]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d10c      	bne.n	8006016 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8005ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006000:	b672      	cpsid	i
 8006002:	f383 8811 	msr	BASEPRI, r3
 8006006:	f3bf 8f6f 	isb	sy
 800600a:	f3bf 8f4f 	dsb	sy
 800600e:	b662      	cpsie	i
 8006010:	617b      	str	r3, [r7, #20]
}
 8006012:	bf00      	nop
 8006014:	e7fe      	b.n	8006014 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006018:	699a      	ldr	r2, [r3, #24]
 800601a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601c:	18d1      	adds	r1, r2, r3
 800601e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006022:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006024:	f7ff ff00 	bl	8005e28 <prvInsertTimerInActiveList>
					break;
 8006028:	e015      	b.n	8006056 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800602a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006030:	f003 0302 	and.w	r3, r3, #2
 8006034:	2b00      	cmp	r3, #0
 8006036:	d103      	bne.n	8006040 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8006038:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800603a:	f000 fbc5 	bl	80067c8 <vPortFree>
 800603e:	e00a      	b.n	8006056 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006042:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006046:	f023 0301 	bic.w	r3, r3, #1
 800604a:	b2da      	uxtb	r2, r3
 800604c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006052:	e000      	b.n	8006056 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006054:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006056:	4b08      	ldr	r3, [pc, #32]	; (8006078 <prvProcessReceivedCommands+0x1cc>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	1d39      	adds	r1, r7, #4
 800605c:	2200      	movs	r2, #0
 800605e:	4618      	mov	r0, r3
 8006060:	f7fe fbb6 	bl	80047d0 <xQueueReceive>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	f47f af24 	bne.w	8005eb4 <prvProcessReceivedCommands+0x8>
	}
}
 800606c:	bf00      	nop
 800606e:	bf00      	nop
 8006070:	3730      	adds	r7, #48	; 0x30
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	20000f6c 	.word	0x20000f6c

0800607c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b088      	sub	sp, #32
 8006080:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006082:	e04a      	b.n	800611a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006084:	4b2e      	ldr	r3, [pc, #184]	; (8006140 <prvSwitchTimerLists+0xc4>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800608e:	4b2c      	ldr	r3, [pc, #176]	; (8006140 <prvSwitchTimerLists+0xc4>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	3304      	adds	r3, #4
 800609c:	4618      	mov	r0, r3
 800609e:	f7fe f8b7 	bl	8004210 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6a1b      	ldr	r3, [r3, #32]
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060b0:	f003 0304 	and.w	r3, r3, #4
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d030      	beq.n	800611a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	699b      	ldr	r3, [r3, #24]
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	4413      	add	r3, r2
 80060c0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80060c2:	68ba      	ldr	r2, [r7, #8]
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d90e      	bls.n	80060e8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	68ba      	ldr	r2, [r7, #8]
 80060ce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80060d6:	4b1a      	ldr	r3, [pc, #104]	; (8006140 <prvSwitchTimerLists+0xc4>)
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	3304      	adds	r3, #4
 80060de:	4619      	mov	r1, r3
 80060e0:	4610      	mov	r0, r2
 80060e2:	f7fe f85c 	bl	800419e <vListInsert>
 80060e6:	e018      	b.n	800611a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80060e8:	2300      	movs	r3, #0
 80060ea:	9300      	str	r3, [sp, #0]
 80060ec:	2300      	movs	r3, #0
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	2100      	movs	r1, #0
 80060f2:	68f8      	ldr	r0, [r7, #12]
 80060f4:	f7ff fd56 	bl	8005ba4 <xTimerGenericCommand>
 80060f8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d10c      	bne.n	800611a <prvSwitchTimerLists+0x9e>
	__asm volatile
 8006100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006104:	b672      	cpsid	i
 8006106:	f383 8811 	msr	BASEPRI, r3
 800610a:	f3bf 8f6f 	isb	sy
 800610e:	f3bf 8f4f 	dsb	sy
 8006112:	b662      	cpsie	i
 8006114:	603b      	str	r3, [r7, #0]
}
 8006116:	bf00      	nop
 8006118:	e7fe      	b.n	8006118 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800611a:	4b09      	ldr	r3, [pc, #36]	; (8006140 <prvSwitchTimerLists+0xc4>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d1af      	bne.n	8006084 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006124:	4b06      	ldr	r3, [pc, #24]	; (8006140 <prvSwitchTimerLists+0xc4>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800612a:	4b06      	ldr	r3, [pc, #24]	; (8006144 <prvSwitchTimerLists+0xc8>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a04      	ldr	r2, [pc, #16]	; (8006140 <prvSwitchTimerLists+0xc4>)
 8006130:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006132:	4a04      	ldr	r2, [pc, #16]	; (8006144 <prvSwitchTimerLists+0xc8>)
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	6013      	str	r3, [r2, #0]
}
 8006138:	bf00      	nop
 800613a:	3718      	adds	r7, #24
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	20000f64 	.word	0x20000f64
 8006144:	20000f68 	.word	0x20000f68

08006148 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b082      	sub	sp, #8
 800614c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800614e:	f000 f945 	bl	80063dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006152:	4b15      	ldr	r3, [pc, #84]	; (80061a8 <prvCheckForValidListAndQueue+0x60>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d120      	bne.n	800619c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800615a:	4814      	ldr	r0, [pc, #80]	; (80061ac <prvCheckForValidListAndQueue+0x64>)
 800615c:	f7fd ffce 	bl	80040fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006160:	4813      	ldr	r0, [pc, #76]	; (80061b0 <prvCheckForValidListAndQueue+0x68>)
 8006162:	f7fd ffcb 	bl	80040fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006166:	4b13      	ldr	r3, [pc, #76]	; (80061b4 <prvCheckForValidListAndQueue+0x6c>)
 8006168:	4a10      	ldr	r2, [pc, #64]	; (80061ac <prvCheckForValidListAndQueue+0x64>)
 800616a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800616c:	4b12      	ldr	r3, [pc, #72]	; (80061b8 <prvCheckForValidListAndQueue+0x70>)
 800616e:	4a10      	ldr	r2, [pc, #64]	; (80061b0 <prvCheckForValidListAndQueue+0x68>)
 8006170:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006172:	2300      	movs	r3, #0
 8006174:	9300      	str	r3, [sp, #0]
 8006176:	4b11      	ldr	r3, [pc, #68]	; (80061bc <prvCheckForValidListAndQueue+0x74>)
 8006178:	4a11      	ldr	r2, [pc, #68]	; (80061c0 <prvCheckForValidListAndQueue+0x78>)
 800617a:	2110      	movs	r1, #16
 800617c:	200a      	movs	r0, #10
 800617e:	f7fe f8db 	bl	8004338 <xQueueGenericCreateStatic>
 8006182:	4603      	mov	r3, r0
 8006184:	4a08      	ldr	r2, [pc, #32]	; (80061a8 <prvCheckForValidListAndQueue+0x60>)
 8006186:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006188:	4b07      	ldr	r3, [pc, #28]	; (80061a8 <prvCheckForValidListAndQueue+0x60>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d005      	beq.n	800619c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006190:	4b05      	ldr	r3, [pc, #20]	; (80061a8 <prvCheckForValidListAndQueue+0x60>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	490b      	ldr	r1, [pc, #44]	; (80061c4 <prvCheckForValidListAndQueue+0x7c>)
 8006196:	4618      	mov	r0, r3
 8006198:	f7fe fd10 	bl	8004bbc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800619c:	f000 f952 	bl	8006444 <vPortExitCritical>
}
 80061a0:	bf00      	nop
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	20000f6c 	.word	0x20000f6c
 80061ac:	20000f3c 	.word	0x20000f3c
 80061b0:	20000f50 	.word	0x20000f50
 80061b4:	20000f64 	.word	0x20000f64
 80061b8:	20000f68 	.word	0x20000f68
 80061bc:	20001018 	.word	0x20001018
 80061c0:	20000f78 	.word	0x20000f78
 80061c4:	08006c40 	.word	0x08006c40

080061c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80061c8:	b480      	push	{r7}
 80061ca:	b085      	sub	sp, #20
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	3b04      	subs	r3, #4
 80061d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80061e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	3b04      	subs	r3, #4
 80061e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	f023 0201 	bic.w	r2, r3, #1
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	3b04      	subs	r3, #4
 80061f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80061f8:	4a0c      	ldr	r2, [pc, #48]	; (800622c <pxPortInitialiseStack+0x64>)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	3b14      	subs	r3, #20
 8006202:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	3b04      	subs	r3, #4
 800620e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f06f 0202 	mvn.w	r2, #2
 8006216:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	3b20      	subs	r3, #32
 800621c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800621e:	68fb      	ldr	r3, [r7, #12]
}
 8006220:	4618      	mov	r0, r3
 8006222:	3714      	adds	r7, #20
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr
 800622c:	08006231 	.word	0x08006231

08006230 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006230:	b480      	push	{r7}
 8006232:	b085      	sub	sp, #20
 8006234:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006236:	2300      	movs	r3, #0
 8006238:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800623a:	4b14      	ldr	r3, [pc, #80]	; (800628c <prvTaskExitError+0x5c>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006242:	d00c      	beq.n	800625e <prvTaskExitError+0x2e>
	__asm volatile
 8006244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006248:	b672      	cpsid	i
 800624a:	f383 8811 	msr	BASEPRI, r3
 800624e:	f3bf 8f6f 	isb	sy
 8006252:	f3bf 8f4f 	dsb	sy
 8006256:	b662      	cpsie	i
 8006258:	60fb      	str	r3, [r7, #12]
}
 800625a:	bf00      	nop
 800625c:	e7fe      	b.n	800625c <prvTaskExitError+0x2c>
	__asm volatile
 800625e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006262:	b672      	cpsid	i
 8006264:	f383 8811 	msr	BASEPRI, r3
 8006268:	f3bf 8f6f 	isb	sy
 800626c:	f3bf 8f4f 	dsb	sy
 8006270:	b662      	cpsie	i
 8006272:	60bb      	str	r3, [r7, #8]
}
 8006274:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006276:	bf00      	nop
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d0fc      	beq.n	8006278 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800627e:	bf00      	nop
 8006280:	bf00      	nop
 8006282:	3714      	adds	r7, #20
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr
 800628c:	2000000c 	.word	0x2000000c

08006290 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006290:	4b07      	ldr	r3, [pc, #28]	; (80062b0 <pxCurrentTCBConst2>)
 8006292:	6819      	ldr	r1, [r3, #0]
 8006294:	6808      	ldr	r0, [r1, #0]
 8006296:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800629a:	f380 8809 	msr	PSP, r0
 800629e:	f3bf 8f6f 	isb	sy
 80062a2:	f04f 0000 	mov.w	r0, #0
 80062a6:	f380 8811 	msr	BASEPRI, r0
 80062aa:	4770      	bx	lr
 80062ac:	f3af 8000 	nop.w

080062b0 <pxCurrentTCBConst2>:
 80062b0:	20000a3c 	.word	0x20000a3c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80062b4:	bf00      	nop
 80062b6:	bf00      	nop

080062b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80062b8:	4808      	ldr	r0, [pc, #32]	; (80062dc <prvPortStartFirstTask+0x24>)
 80062ba:	6800      	ldr	r0, [r0, #0]
 80062bc:	6800      	ldr	r0, [r0, #0]
 80062be:	f380 8808 	msr	MSP, r0
 80062c2:	f04f 0000 	mov.w	r0, #0
 80062c6:	f380 8814 	msr	CONTROL, r0
 80062ca:	b662      	cpsie	i
 80062cc:	b661      	cpsie	f
 80062ce:	f3bf 8f4f 	dsb	sy
 80062d2:	f3bf 8f6f 	isb	sy
 80062d6:	df00      	svc	0
 80062d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80062da:	bf00      	nop
 80062dc:	e000ed08 	.word	0xe000ed08

080062e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80062e6:	4b37      	ldr	r3, [pc, #220]	; (80063c4 <xPortStartScheduler+0xe4>)
 80062e8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	22ff      	movs	r2, #255	; 0xff
 80062f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006300:	78fb      	ldrb	r3, [r7, #3]
 8006302:	b2db      	uxtb	r3, r3
 8006304:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006308:	b2da      	uxtb	r2, r3
 800630a:	4b2f      	ldr	r3, [pc, #188]	; (80063c8 <xPortStartScheduler+0xe8>)
 800630c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800630e:	4b2f      	ldr	r3, [pc, #188]	; (80063cc <xPortStartScheduler+0xec>)
 8006310:	2207      	movs	r2, #7
 8006312:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006314:	e009      	b.n	800632a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006316:	4b2d      	ldr	r3, [pc, #180]	; (80063cc <xPortStartScheduler+0xec>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	3b01      	subs	r3, #1
 800631c:	4a2b      	ldr	r2, [pc, #172]	; (80063cc <xPortStartScheduler+0xec>)
 800631e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006320:	78fb      	ldrb	r3, [r7, #3]
 8006322:	b2db      	uxtb	r3, r3
 8006324:	005b      	lsls	r3, r3, #1
 8006326:	b2db      	uxtb	r3, r3
 8006328:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800632a:	78fb      	ldrb	r3, [r7, #3]
 800632c:	b2db      	uxtb	r3, r3
 800632e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006332:	2b80      	cmp	r3, #128	; 0x80
 8006334:	d0ef      	beq.n	8006316 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006336:	4b25      	ldr	r3, [pc, #148]	; (80063cc <xPortStartScheduler+0xec>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f1c3 0307 	rsb	r3, r3, #7
 800633e:	2b04      	cmp	r3, #4
 8006340:	d00c      	beq.n	800635c <xPortStartScheduler+0x7c>
	__asm volatile
 8006342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006346:	b672      	cpsid	i
 8006348:	f383 8811 	msr	BASEPRI, r3
 800634c:	f3bf 8f6f 	isb	sy
 8006350:	f3bf 8f4f 	dsb	sy
 8006354:	b662      	cpsie	i
 8006356:	60bb      	str	r3, [r7, #8]
}
 8006358:	bf00      	nop
 800635a:	e7fe      	b.n	800635a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800635c:	4b1b      	ldr	r3, [pc, #108]	; (80063cc <xPortStartScheduler+0xec>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	021b      	lsls	r3, r3, #8
 8006362:	4a1a      	ldr	r2, [pc, #104]	; (80063cc <xPortStartScheduler+0xec>)
 8006364:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006366:	4b19      	ldr	r3, [pc, #100]	; (80063cc <xPortStartScheduler+0xec>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800636e:	4a17      	ldr	r2, [pc, #92]	; (80063cc <xPortStartScheduler+0xec>)
 8006370:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	b2da      	uxtb	r2, r3
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800637a:	4b15      	ldr	r3, [pc, #84]	; (80063d0 <xPortStartScheduler+0xf0>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a14      	ldr	r2, [pc, #80]	; (80063d0 <xPortStartScheduler+0xf0>)
 8006380:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006384:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006386:	4b12      	ldr	r3, [pc, #72]	; (80063d0 <xPortStartScheduler+0xf0>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a11      	ldr	r2, [pc, #68]	; (80063d0 <xPortStartScheduler+0xf0>)
 800638c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006390:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006392:	f000 f8dd 	bl	8006550 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006396:	4b0f      	ldr	r3, [pc, #60]	; (80063d4 <xPortStartScheduler+0xf4>)
 8006398:	2200      	movs	r2, #0
 800639a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800639c:	f000 f8fc 	bl	8006598 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80063a0:	4b0d      	ldr	r3, [pc, #52]	; (80063d8 <xPortStartScheduler+0xf8>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a0c      	ldr	r2, [pc, #48]	; (80063d8 <xPortStartScheduler+0xf8>)
 80063a6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80063aa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80063ac:	f7ff ff84 	bl	80062b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80063b0:	f7ff f846 	bl	8005440 <vTaskSwitchContext>
	prvTaskExitError();
 80063b4:	f7ff ff3c 	bl	8006230 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3710      	adds	r7, #16
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	e000e400 	.word	0xe000e400
 80063c8:	20001068 	.word	0x20001068
 80063cc:	2000106c 	.word	0x2000106c
 80063d0:	e000ed20 	.word	0xe000ed20
 80063d4:	2000000c 	.word	0x2000000c
 80063d8:	e000ef34 	.word	0xe000ef34

080063dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
	__asm volatile
 80063e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e6:	b672      	cpsid	i
 80063e8:	f383 8811 	msr	BASEPRI, r3
 80063ec:	f3bf 8f6f 	isb	sy
 80063f0:	f3bf 8f4f 	dsb	sy
 80063f4:	b662      	cpsie	i
 80063f6:	607b      	str	r3, [r7, #4]
}
 80063f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80063fa:	4b10      	ldr	r3, [pc, #64]	; (800643c <vPortEnterCritical+0x60>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	3301      	adds	r3, #1
 8006400:	4a0e      	ldr	r2, [pc, #56]	; (800643c <vPortEnterCritical+0x60>)
 8006402:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006404:	4b0d      	ldr	r3, [pc, #52]	; (800643c <vPortEnterCritical+0x60>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2b01      	cmp	r3, #1
 800640a:	d111      	bne.n	8006430 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800640c:	4b0c      	ldr	r3, [pc, #48]	; (8006440 <vPortEnterCritical+0x64>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	b2db      	uxtb	r3, r3
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00c      	beq.n	8006430 <vPortEnterCritical+0x54>
	__asm volatile
 8006416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641a:	b672      	cpsid	i
 800641c:	f383 8811 	msr	BASEPRI, r3
 8006420:	f3bf 8f6f 	isb	sy
 8006424:	f3bf 8f4f 	dsb	sy
 8006428:	b662      	cpsie	i
 800642a:	603b      	str	r3, [r7, #0]
}
 800642c:	bf00      	nop
 800642e:	e7fe      	b.n	800642e <vPortEnterCritical+0x52>
	}
}
 8006430:	bf00      	nop
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr
 800643c:	2000000c 	.word	0x2000000c
 8006440:	e000ed04 	.word	0xe000ed04

08006444 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800644a:	4b13      	ldr	r3, [pc, #76]	; (8006498 <vPortExitCritical+0x54>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d10c      	bne.n	800646c <vPortExitCritical+0x28>
	__asm volatile
 8006452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006456:	b672      	cpsid	i
 8006458:	f383 8811 	msr	BASEPRI, r3
 800645c:	f3bf 8f6f 	isb	sy
 8006460:	f3bf 8f4f 	dsb	sy
 8006464:	b662      	cpsie	i
 8006466:	607b      	str	r3, [r7, #4]
}
 8006468:	bf00      	nop
 800646a:	e7fe      	b.n	800646a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800646c:	4b0a      	ldr	r3, [pc, #40]	; (8006498 <vPortExitCritical+0x54>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	3b01      	subs	r3, #1
 8006472:	4a09      	ldr	r2, [pc, #36]	; (8006498 <vPortExitCritical+0x54>)
 8006474:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006476:	4b08      	ldr	r3, [pc, #32]	; (8006498 <vPortExitCritical+0x54>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d105      	bne.n	800648a <vPortExitCritical+0x46>
 800647e:	2300      	movs	r3, #0
 8006480:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	f383 8811 	msr	BASEPRI, r3
}
 8006488:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800648a:	bf00      	nop
 800648c:	370c      	adds	r7, #12
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop
 8006498:	2000000c 	.word	0x2000000c
 800649c:	00000000 	.word	0x00000000

080064a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80064a0:	f3ef 8009 	mrs	r0, PSP
 80064a4:	f3bf 8f6f 	isb	sy
 80064a8:	4b15      	ldr	r3, [pc, #84]	; (8006500 <pxCurrentTCBConst>)
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	f01e 0f10 	tst.w	lr, #16
 80064b0:	bf08      	it	eq
 80064b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80064b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ba:	6010      	str	r0, [r2, #0]
 80064bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80064c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80064c4:	b672      	cpsid	i
 80064c6:	f380 8811 	msr	BASEPRI, r0
 80064ca:	f3bf 8f4f 	dsb	sy
 80064ce:	f3bf 8f6f 	isb	sy
 80064d2:	b662      	cpsie	i
 80064d4:	f7fe ffb4 	bl	8005440 <vTaskSwitchContext>
 80064d8:	f04f 0000 	mov.w	r0, #0
 80064dc:	f380 8811 	msr	BASEPRI, r0
 80064e0:	bc09      	pop	{r0, r3}
 80064e2:	6819      	ldr	r1, [r3, #0]
 80064e4:	6808      	ldr	r0, [r1, #0]
 80064e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ea:	f01e 0f10 	tst.w	lr, #16
 80064ee:	bf08      	it	eq
 80064f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80064f4:	f380 8809 	msr	PSP, r0
 80064f8:	f3bf 8f6f 	isb	sy
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop

08006500 <pxCurrentTCBConst>:
 8006500:	20000a3c 	.word	0x20000a3c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006504:	bf00      	nop
 8006506:	bf00      	nop

08006508 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
	__asm volatile
 800650e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006512:	b672      	cpsid	i
 8006514:	f383 8811 	msr	BASEPRI, r3
 8006518:	f3bf 8f6f 	isb	sy
 800651c:	f3bf 8f4f 	dsb	sy
 8006520:	b662      	cpsie	i
 8006522:	607b      	str	r3, [r7, #4]
}
 8006524:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006526:	f7fe fecf 	bl	80052c8 <xTaskIncrementTick>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d003      	beq.n	8006538 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006530:	4b06      	ldr	r3, [pc, #24]	; (800654c <SysTick_Handler+0x44>)
 8006532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006536:	601a      	str	r2, [r3, #0]
 8006538:	2300      	movs	r3, #0
 800653a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	f383 8811 	msr	BASEPRI, r3
}
 8006542:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006544:	bf00      	nop
 8006546:	3708      	adds	r7, #8
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}
 800654c:	e000ed04 	.word	0xe000ed04

08006550 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006550:	b480      	push	{r7}
 8006552:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006554:	4b0b      	ldr	r3, [pc, #44]	; (8006584 <vPortSetupTimerInterrupt+0x34>)
 8006556:	2200      	movs	r2, #0
 8006558:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800655a:	4b0b      	ldr	r3, [pc, #44]	; (8006588 <vPortSetupTimerInterrupt+0x38>)
 800655c:	2200      	movs	r2, #0
 800655e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006560:	4b0a      	ldr	r3, [pc, #40]	; (800658c <vPortSetupTimerInterrupt+0x3c>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a0a      	ldr	r2, [pc, #40]	; (8006590 <vPortSetupTimerInterrupt+0x40>)
 8006566:	fba2 2303 	umull	r2, r3, r2, r3
 800656a:	099b      	lsrs	r3, r3, #6
 800656c:	4a09      	ldr	r2, [pc, #36]	; (8006594 <vPortSetupTimerInterrupt+0x44>)
 800656e:	3b01      	subs	r3, #1
 8006570:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006572:	4b04      	ldr	r3, [pc, #16]	; (8006584 <vPortSetupTimerInterrupt+0x34>)
 8006574:	2207      	movs	r2, #7
 8006576:	601a      	str	r2, [r3, #0]
}
 8006578:	bf00      	nop
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr
 8006582:	bf00      	nop
 8006584:	e000e010 	.word	0xe000e010
 8006588:	e000e018 	.word	0xe000e018
 800658c:	20000000 	.word	0x20000000
 8006590:	10624dd3 	.word	0x10624dd3
 8006594:	e000e014 	.word	0xe000e014

08006598 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006598:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80065a8 <vPortEnableVFP+0x10>
 800659c:	6801      	ldr	r1, [r0, #0]
 800659e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80065a2:	6001      	str	r1, [r0, #0]
 80065a4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80065a6:	bf00      	nop
 80065a8:	e000ed88 	.word	0xe000ed88

080065ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80065ac:	b480      	push	{r7}
 80065ae:	b085      	sub	sp, #20
 80065b0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80065b2:	f3ef 8305 	mrs	r3, IPSR
 80065b6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2b0f      	cmp	r3, #15
 80065bc:	d916      	bls.n	80065ec <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80065be:	4a19      	ldr	r2, [pc, #100]	; (8006624 <vPortValidateInterruptPriority+0x78>)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	4413      	add	r3, r2
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80065c8:	4b17      	ldr	r3, [pc, #92]	; (8006628 <vPortValidateInterruptPriority+0x7c>)
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	7afa      	ldrb	r2, [r7, #11]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d20c      	bcs.n	80065ec <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80065d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d6:	b672      	cpsid	i
 80065d8:	f383 8811 	msr	BASEPRI, r3
 80065dc:	f3bf 8f6f 	isb	sy
 80065e0:	f3bf 8f4f 	dsb	sy
 80065e4:	b662      	cpsie	i
 80065e6:	607b      	str	r3, [r7, #4]
}
 80065e8:	bf00      	nop
 80065ea:	e7fe      	b.n	80065ea <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80065ec:	4b0f      	ldr	r3, [pc, #60]	; (800662c <vPortValidateInterruptPriority+0x80>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80065f4:	4b0e      	ldr	r3, [pc, #56]	; (8006630 <vPortValidateInterruptPriority+0x84>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d90c      	bls.n	8006616 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80065fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006600:	b672      	cpsid	i
 8006602:	f383 8811 	msr	BASEPRI, r3
 8006606:	f3bf 8f6f 	isb	sy
 800660a:	f3bf 8f4f 	dsb	sy
 800660e:	b662      	cpsie	i
 8006610:	603b      	str	r3, [r7, #0]
}
 8006612:	bf00      	nop
 8006614:	e7fe      	b.n	8006614 <vPortValidateInterruptPriority+0x68>
	}
 8006616:	bf00      	nop
 8006618:	3714      	adds	r7, #20
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	e000e3f0 	.word	0xe000e3f0
 8006628:	20001068 	.word	0x20001068
 800662c:	e000ed0c 	.word	0xe000ed0c
 8006630:	2000106c 	.word	0x2000106c

08006634 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b08a      	sub	sp, #40	; 0x28
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800663c:	2300      	movs	r3, #0
 800663e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006640:	f7fe fd84 	bl	800514c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006644:	4b5b      	ldr	r3, [pc, #364]	; (80067b4 <pvPortMalloc+0x180>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d101      	bne.n	8006650 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800664c:	f000 f91a 	bl	8006884 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006650:	4b59      	ldr	r3, [pc, #356]	; (80067b8 <pvPortMalloc+0x184>)
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4013      	ands	r3, r2
 8006658:	2b00      	cmp	r3, #0
 800665a:	f040 8092 	bne.w	8006782 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d01f      	beq.n	80066a4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8006664:	2208      	movs	r2, #8
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4413      	add	r3, r2
 800666a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f003 0307 	and.w	r3, r3, #7
 8006672:	2b00      	cmp	r3, #0
 8006674:	d016      	beq.n	80066a4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f023 0307 	bic.w	r3, r3, #7
 800667c:	3308      	adds	r3, #8
 800667e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f003 0307 	and.w	r3, r3, #7
 8006686:	2b00      	cmp	r3, #0
 8006688:	d00c      	beq.n	80066a4 <pvPortMalloc+0x70>
	__asm volatile
 800668a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800668e:	b672      	cpsid	i
 8006690:	f383 8811 	msr	BASEPRI, r3
 8006694:	f3bf 8f6f 	isb	sy
 8006698:	f3bf 8f4f 	dsb	sy
 800669c:	b662      	cpsie	i
 800669e:	617b      	str	r3, [r7, #20]
}
 80066a0:	bf00      	nop
 80066a2:	e7fe      	b.n	80066a2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d06b      	beq.n	8006782 <pvPortMalloc+0x14e>
 80066aa:	4b44      	ldr	r3, [pc, #272]	; (80067bc <pvPortMalloc+0x188>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d866      	bhi.n	8006782 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80066b4:	4b42      	ldr	r3, [pc, #264]	; (80067c0 <pvPortMalloc+0x18c>)
 80066b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80066b8:	4b41      	ldr	r3, [pc, #260]	; (80067c0 <pvPortMalloc+0x18c>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066be:	e004      	b.n	80066ca <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80066c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80066c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d903      	bls.n	80066dc <pvPortMalloc+0xa8>
 80066d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d1f1      	bne.n	80066c0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80066dc:	4b35      	ldr	r3, [pc, #212]	; (80067b4 <pvPortMalloc+0x180>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d04d      	beq.n	8006782 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80066e6:	6a3b      	ldr	r3, [r7, #32]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2208      	movs	r2, #8
 80066ec:	4413      	add	r3, r2
 80066ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80066f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	6a3b      	ldr	r3, [r7, #32]
 80066f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80066f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fa:	685a      	ldr	r2, [r3, #4]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	1ad2      	subs	r2, r2, r3
 8006700:	2308      	movs	r3, #8
 8006702:	005b      	lsls	r3, r3, #1
 8006704:	429a      	cmp	r2, r3
 8006706:	d921      	bls.n	800674c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4413      	add	r3, r2
 800670e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	f003 0307 	and.w	r3, r3, #7
 8006716:	2b00      	cmp	r3, #0
 8006718:	d00c      	beq.n	8006734 <pvPortMalloc+0x100>
	__asm volatile
 800671a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671e:	b672      	cpsid	i
 8006720:	f383 8811 	msr	BASEPRI, r3
 8006724:	f3bf 8f6f 	isb	sy
 8006728:	f3bf 8f4f 	dsb	sy
 800672c:	b662      	cpsie	i
 800672e:	613b      	str	r3, [r7, #16]
}
 8006730:	bf00      	nop
 8006732:	e7fe      	b.n	8006732 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006736:	685a      	ldr	r2, [r3, #4]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	1ad2      	subs	r2, r2, r3
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006746:	69b8      	ldr	r0, [r7, #24]
 8006748:	f000 f8fe 	bl	8006948 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800674c:	4b1b      	ldr	r3, [pc, #108]	; (80067bc <pvPortMalloc+0x188>)
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	1ad3      	subs	r3, r2, r3
 8006756:	4a19      	ldr	r2, [pc, #100]	; (80067bc <pvPortMalloc+0x188>)
 8006758:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800675a:	4b18      	ldr	r3, [pc, #96]	; (80067bc <pvPortMalloc+0x188>)
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	4b19      	ldr	r3, [pc, #100]	; (80067c4 <pvPortMalloc+0x190>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	429a      	cmp	r2, r3
 8006764:	d203      	bcs.n	800676e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006766:	4b15      	ldr	r3, [pc, #84]	; (80067bc <pvPortMalloc+0x188>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a16      	ldr	r2, [pc, #88]	; (80067c4 <pvPortMalloc+0x190>)
 800676c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800676e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006770:	685a      	ldr	r2, [r3, #4]
 8006772:	4b11      	ldr	r3, [pc, #68]	; (80067b8 <pvPortMalloc+0x184>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	431a      	orrs	r2, r3
 8006778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800677c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677e:	2200      	movs	r2, #0
 8006780:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006782:	f7fe fcf1 	bl	8005168 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	f003 0307 	and.w	r3, r3, #7
 800678c:	2b00      	cmp	r3, #0
 800678e:	d00c      	beq.n	80067aa <pvPortMalloc+0x176>
	__asm volatile
 8006790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006794:	b672      	cpsid	i
 8006796:	f383 8811 	msr	BASEPRI, r3
 800679a:	f3bf 8f6f 	isb	sy
 800679e:	f3bf 8f4f 	dsb	sy
 80067a2:	b662      	cpsie	i
 80067a4:	60fb      	str	r3, [r7, #12]
}
 80067a6:	bf00      	nop
 80067a8:	e7fe      	b.n	80067a8 <pvPortMalloc+0x174>
	return pvReturn;
 80067aa:	69fb      	ldr	r3, [r7, #28]
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3728      	adds	r7, #40	; 0x28
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	20004c78 	.word	0x20004c78
 80067b8:	20004c84 	.word	0x20004c84
 80067bc:	20004c7c 	.word	0x20004c7c
 80067c0:	20004c70 	.word	0x20004c70
 80067c4:	20004c80 	.word	0x20004c80

080067c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b086      	sub	sp, #24
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d04c      	beq.n	8006874 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80067da:	2308      	movs	r3, #8
 80067dc:	425b      	negs	r3, r3
 80067de:	697a      	ldr	r2, [r7, #20]
 80067e0:	4413      	add	r3, r2
 80067e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	685a      	ldr	r2, [r3, #4]
 80067ec:	4b23      	ldr	r3, [pc, #140]	; (800687c <vPortFree+0xb4>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4013      	ands	r3, r2
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d10c      	bne.n	8006810 <vPortFree+0x48>
	__asm volatile
 80067f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fa:	b672      	cpsid	i
 80067fc:	f383 8811 	msr	BASEPRI, r3
 8006800:	f3bf 8f6f 	isb	sy
 8006804:	f3bf 8f4f 	dsb	sy
 8006808:	b662      	cpsie	i
 800680a:	60fb      	str	r3, [r7, #12]
}
 800680c:	bf00      	nop
 800680e:	e7fe      	b.n	800680e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00c      	beq.n	8006832 <vPortFree+0x6a>
	__asm volatile
 8006818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681c:	b672      	cpsid	i
 800681e:	f383 8811 	msr	BASEPRI, r3
 8006822:	f3bf 8f6f 	isb	sy
 8006826:	f3bf 8f4f 	dsb	sy
 800682a:	b662      	cpsie	i
 800682c:	60bb      	str	r3, [r7, #8]
}
 800682e:	bf00      	nop
 8006830:	e7fe      	b.n	8006830 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	685a      	ldr	r2, [r3, #4]
 8006836:	4b11      	ldr	r3, [pc, #68]	; (800687c <vPortFree+0xb4>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4013      	ands	r3, r2
 800683c:	2b00      	cmp	r3, #0
 800683e:	d019      	beq.n	8006874 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d115      	bne.n	8006874 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	685a      	ldr	r2, [r3, #4]
 800684c:	4b0b      	ldr	r3, [pc, #44]	; (800687c <vPortFree+0xb4>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	43db      	mvns	r3, r3
 8006852:	401a      	ands	r2, r3
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006858:	f7fe fc78 	bl	800514c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	685a      	ldr	r2, [r3, #4]
 8006860:	4b07      	ldr	r3, [pc, #28]	; (8006880 <vPortFree+0xb8>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4413      	add	r3, r2
 8006866:	4a06      	ldr	r2, [pc, #24]	; (8006880 <vPortFree+0xb8>)
 8006868:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800686a:	6938      	ldr	r0, [r7, #16]
 800686c:	f000 f86c 	bl	8006948 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006870:	f7fe fc7a 	bl	8005168 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006874:	bf00      	nop
 8006876:	3718      	adds	r7, #24
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}
 800687c:	20004c84 	.word	0x20004c84
 8006880:	20004c7c 	.word	0x20004c7c

08006884 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006884:	b480      	push	{r7}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800688a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800688e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006890:	4b27      	ldr	r3, [pc, #156]	; (8006930 <prvHeapInit+0xac>)
 8006892:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f003 0307 	and.w	r3, r3, #7
 800689a:	2b00      	cmp	r3, #0
 800689c:	d00c      	beq.n	80068b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	3307      	adds	r3, #7
 80068a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f023 0307 	bic.w	r3, r3, #7
 80068aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80068ac:	68ba      	ldr	r2, [r7, #8]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	4a1f      	ldr	r2, [pc, #124]	; (8006930 <prvHeapInit+0xac>)
 80068b4:	4413      	add	r3, r2
 80068b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80068bc:	4a1d      	ldr	r2, [pc, #116]	; (8006934 <prvHeapInit+0xb0>)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80068c2:	4b1c      	ldr	r3, [pc, #112]	; (8006934 <prvHeapInit+0xb0>)
 80068c4:	2200      	movs	r2, #0
 80068c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	68ba      	ldr	r2, [r7, #8]
 80068cc:	4413      	add	r3, r2
 80068ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80068d0:	2208      	movs	r2, #8
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	1a9b      	subs	r3, r3, r2
 80068d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f023 0307 	bic.w	r3, r3, #7
 80068de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	4a15      	ldr	r2, [pc, #84]	; (8006938 <prvHeapInit+0xb4>)
 80068e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80068e6:	4b14      	ldr	r3, [pc, #80]	; (8006938 <prvHeapInit+0xb4>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2200      	movs	r2, #0
 80068ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80068ee:	4b12      	ldr	r3, [pc, #72]	; (8006938 <prvHeapInit+0xb4>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	2200      	movs	r2, #0
 80068f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	1ad2      	subs	r2, r2, r3
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006904:	4b0c      	ldr	r3, [pc, #48]	; (8006938 <prvHeapInit+0xb4>)
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	4a0a      	ldr	r2, [pc, #40]	; (800693c <prvHeapInit+0xb8>)
 8006912:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	4a09      	ldr	r2, [pc, #36]	; (8006940 <prvHeapInit+0xbc>)
 800691a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800691c:	4b09      	ldr	r3, [pc, #36]	; (8006944 <prvHeapInit+0xc0>)
 800691e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006922:	601a      	str	r2, [r3, #0]
}
 8006924:	bf00      	nop
 8006926:	3714      	adds	r7, #20
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr
 8006930:	20001070 	.word	0x20001070
 8006934:	20004c70 	.word	0x20004c70
 8006938:	20004c78 	.word	0x20004c78
 800693c:	20004c80 	.word	0x20004c80
 8006940:	20004c7c 	.word	0x20004c7c
 8006944:	20004c84 	.word	0x20004c84

08006948 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006948:	b480      	push	{r7}
 800694a:	b085      	sub	sp, #20
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006950:	4b28      	ldr	r3, [pc, #160]	; (80069f4 <prvInsertBlockIntoFreeList+0xac>)
 8006952:	60fb      	str	r3, [r7, #12]
 8006954:	e002      	b.n	800695c <prvInsertBlockIntoFreeList+0x14>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	60fb      	str	r3, [r7, #12]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	429a      	cmp	r2, r3
 8006964:	d8f7      	bhi.n	8006956 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	68ba      	ldr	r2, [r7, #8]
 8006970:	4413      	add	r3, r2
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	429a      	cmp	r2, r3
 8006976:	d108      	bne.n	800698a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	685a      	ldr	r2, [r3, #4]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	441a      	add	r2, r3
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	68ba      	ldr	r2, [r7, #8]
 8006994:	441a      	add	r2, r3
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	429a      	cmp	r2, r3
 800699c:	d118      	bne.n	80069d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	4b15      	ldr	r3, [pc, #84]	; (80069f8 <prvInsertBlockIntoFreeList+0xb0>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d00d      	beq.n	80069c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	685a      	ldr	r2, [r3, #4]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	441a      	add	r2, r3
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	601a      	str	r2, [r3, #0]
 80069c4:	e008      	b.n	80069d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80069c6:	4b0c      	ldr	r3, [pc, #48]	; (80069f8 <prvInsertBlockIntoFreeList+0xb0>)
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	601a      	str	r2, [r3, #0]
 80069ce:	e003      	b.n	80069d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	429a      	cmp	r2, r3
 80069de:	d002      	beq.n	80069e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069e6:	bf00      	nop
 80069e8:	3714      	adds	r7, #20
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	20004c70 	.word	0x20004c70
 80069f8:	20004c78 	.word	0x20004c78

080069fc <__libc_init_array>:
 80069fc:	b570      	push	{r4, r5, r6, lr}
 80069fe:	4d0d      	ldr	r5, [pc, #52]	; (8006a34 <__libc_init_array+0x38>)
 8006a00:	4c0d      	ldr	r4, [pc, #52]	; (8006a38 <__libc_init_array+0x3c>)
 8006a02:	1b64      	subs	r4, r4, r5
 8006a04:	10a4      	asrs	r4, r4, #2
 8006a06:	2600      	movs	r6, #0
 8006a08:	42a6      	cmp	r6, r4
 8006a0a:	d109      	bne.n	8006a20 <__libc_init_array+0x24>
 8006a0c:	4d0b      	ldr	r5, [pc, #44]	; (8006a3c <__libc_init_array+0x40>)
 8006a0e:	4c0c      	ldr	r4, [pc, #48]	; (8006a40 <__libc_init_array+0x44>)
 8006a10:	f000 f8f2 	bl	8006bf8 <_init>
 8006a14:	1b64      	subs	r4, r4, r5
 8006a16:	10a4      	asrs	r4, r4, #2
 8006a18:	2600      	movs	r6, #0
 8006a1a:	42a6      	cmp	r6, r4
 8006a1c:	d105      	bne.n	8006a2a <__libc_init_array+0x2e>
 8006a1e:	bd70      	pop	{r4, r5, r6, pc}
 8006a20:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a24:	4798      	blx	r3
 8006a26:	3601      	adds	r6, #1
 8006a28:	e7ee      	b.n	8006a08 <__libc_init_array+0xc>
 8006a2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a2e:	4798      	blx	r3
 8006a30:	3601      	adds	r6, #1
 8006a32:	e7f2      	b.n	8006a1a <__libc_init_array+0x1e>
 8006a34:	08006d10 	.word	0x08006d10
 8006a38:	08006d10 	.word	0x08006d10
 8006a3c:	08006d10 	.word	0x08006d10
 8006a40:	08006d14 	.word	0x08006d14

08006a44 <__retarget_lock_acquire_recursive>:
 8006a44:	4770      	bx	lr

08006a46 <__retarget_lock_release_recursive>:
 8006a46:	4770      	bx	lr

08006a48 <memcpy>:
 8006a48:	440a      	add	r2, r1
 8006a4a:	4291      	cmp	r1, r2
 8006a4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a50:	d100      	bne.n	8006a54 <memcpy+0xc>
 8006a52:	4770      	bx	lr
 8006a54:	b510      	push	{r4, lr}
 8006a56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a5e:	4291      	cmp	r1, r2
 8006a60:	d1f9      	bne.n	8006a56 <memcpy+0xe>
 8006a62:	bd10      	pop	{r4, pc}

08006a64 <memset>:
 8006a64:	4402      	add	r2, r0
 8006a66:	4603      	mov	r3, r0
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d100      	bne.n	8006a6e <memset+0xa>
 8006a6c:	4770      	bx	lr
 8006a6e:	f803 1b01 	strb.w	r1, [r3], #1
 8006a72:	e7f9      	b.n	8006a68 <memset+0x4>

08006a74 <cleanup_glue>:
 8006a74:	b538      	push	{r3, r4, r5, lr}
 8006a76:	460c      	mov	r4, r1
 8006a78:	6809      	ldr	r1, [r1, #0]
 8006a7a:	4605      	mov	r5, r0
 8006a7c:	b109      	cbz	r1, 8006a82 <cleanup_glue+0xe>
 8006a7e:	f7ff fff9 	bl	8006a74 <cleanup_glue>
 8006a82:	4621      	mov	r1, r4
 8006a84:	4628      	mov	r0, r5
 8006a86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a8a:	f000 b869 	b.w	8006b60 <_free_r>
	...

08006a90 <_reclaim_reent>:
 8006a90:	4b2c      	ldr	r3, [pc, #176]	; (8006b44 <_reclaim_reent+0xb4>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4283      	cmp	r3, r0
 8006a96:	b570      	push	{r4, r5, r6, lr}
 8006a98:	4604      	mov	r4, r0
 8006a9a:	d051      	beq.n	8006b40 <_reclaim_reent+0xb0>
 8006a9c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006a9e:	b143      	cbz	r3, 8006ab2 <_reclaim_reent+0x22>
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d14a      	bne.n	8006b3c <_reclaim_reent+0xac>
 8006aa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006aa8:	6819      	ldr	r1, [r3, #0]
 8006aaa:	b111      	cbz	r1, 8006ab2 <_reclaim_reent+0x22>
 8006aac:	4620      	mov	r0, r4
 8006aae:	f000 f857 	bl	8006b60 <_free_r>
 8006ab2:	6961      	ldr	r1, [r4, #20]
 8006ab4:	b111      	cbz	r1, 8006abc <_reclaim_reent+0x2c>
 8006ab6:	4620      	mov	r0, r4
 8006ab8:	f000 f852 	bl	8006b60 <_free_r>
 8006abc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006abe:	b111      	cbz	r1, 8006ac6 <_reclaim_reent+0x36>
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	f000 f84d 	bl	8006b60 <_free_r>
 8006ac6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006ac8:	b111      	cbz	r1, 8006ad0 <_reclaim_reent+0x40>
 8006aca:	4620      	mov	r0, r4
 8006acc:	f000 f848 	bl	8006b60 <_free_r>
 8006ad0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006ad2:	b111      	cbz	r1, 8006ada <_reclaim_reent+0x4a>
 8006ad4:	4620      	mov	r0, r4
 8006ad6:	f000 f843 	bl	8006b60 <_free_r>
 8006ada:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006adc:	b111      	cbz	r1, 8006ae4 <_reclaim_reent+0x54>
 8006ade:	4620      	mov	r0, r4
 8006ae0:	f000 f83e 	bl	8006b60 <_free_r>
 8006ae4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006ae6:	b111      	cbz	r1, 8006aee <_reclaim_reent+0x5e>
 8006ae8:	4620      	mov	r0, r4
 8006aea:	f000 f839 	bl	8006b60 <_free_r>
 8006aee:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006af0:	b111      	cbz	r1, 8006af8 <_reclaim_reent+0x68>
 8006af2:	4620      	mov	r0, r4
 8006af4:	f000 f834 	bl	8006b60 <_free_r>
 8006af8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006afa:	b111      	cbz	r1, 8006b02 <_reclaim_reent+0x72>
 8006afc:	4620      	mov	r0, r4
 8006afe:	f000 f82f 	bl	8006b60 <_free_r>
 8006b02:	69a3      	ldr	r3, [r4, #24]
 8006b04:	b1e3      	cbz	r3, 8006b40 <_reclaim_reent+0xb0>
 8006b06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006b08:	4620      	mov	r0, r4
 8006b0a:	4798      	blx	r3
 8006b0c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006b0e:	b1b9      	cbz	r1, 8006b40 <_reclaim_reent+0xb0>
 8006b10:	4620      	mov	r0, r4
 8006b12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006b16:	f7ff bfad 	b.w	8006a74 <cleanup_glue>
 8006b1a:	5949      	ldr	r1, [r1, r5]
 8006b1c:	b941      	cbnz	r1, 8006b30 <_reclaim_reent+0xa0>
 8006b1e:	3504      	adds	r5, #4
 8006b20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b22:	2d80      	cmp	r5, #128	; 0x80
 8006b24:	68d9      	ldr	r1, [r3, #12]
 8006b26:	d1f8      	bne.n	8006b1a <_reclaim_reent+0x8a>
 8006b28:	4620      	mov	r0, r4
 8006b2a:	f000 f819 	bl	8006b60 <_free_r>
 8006b2e:	e7ba      	b.n	8006aa6 <_reclaim_reent+0x16>
 8006b30:	680e      	ldr	r6, [r1, #0]
 8006b32:	4620      	mov	r0, r4
 8006b34:	f000 f814 	bl	8006b60 <_free_r>
 8006b38:	4631      	mov	r1, r6
 8006b3a:	e7ef      	b.n	8006b1c <_reclaim_reent+0x8c>
 8006b3c:	2500      	movs	r5, #0
 8006b3e:	e7ef      	b.n	8006b20 <_reclaim_reent+0x90>
 8006b40:	bd70      	pop	{r4, r5, r6, pc}
 8006b42:	bf00      	nop
 8006b44:	20000010 	.word	0x20000010

08006b48 <__malloc_lock>:
 8006b48:	4801      	ldr	r0, [pc, #4]	; (8006b50 <__malloc_lock+0x8>)
 8006b4a:	f7ff bf7b 	b.w	8006a44 <__retarget_lock_acquire_recursive>
 8006b4e:	bf00      	nop
 8006b50:	20004c88 	.word	0x20004c88

08006b54 <__malloc_unlock>:
 8006b54:	4801      	ldr	r0, [pc, #4]	; (8006b5c <__malloc_unlock+0x8>)
 8006b56:	f7ff bf76 	b.w	8006a46 <__retarget_lock_release_recursive>
 8006b5a:	bf00      	nop
 8006b5c:	20004c88 	.word	0x20004c88

08006b60 <_free_r>:
 8006b60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b62:	2900      	cmp	r1, #0
 8006b64:	d044      	beq.n	8006bf0 <_free_r+0x90>
 8006b66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b6a:	9001      	str	r0, [sp, #4]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f1a1 0404 	sub.w	r4, r1, #4
 8006b72:	bfb8      	it	lt
 8006b74:	18e4      	addlt	r4, r4, r3
 8006b76:	f7ff ffe7 	bl	8006b48 <__malloc_lock>
 8006b7a:	4a1e      	ldr	r2, [pc, #120]	; (8006bf4 <_free_r+0x94>)
 8006b7c:	9801      	ldr	r0, [sp, #4]
 8006b7e:	6813      	ldr	r3, [r2, #0]
 8006b80:	b933      	cbnz	r3, 8006b90 <_free_r+0x30>
 8006b82:	6063      	str	r3, [r4, #4]
 8006b84:	6014      	str	r4, [r2, #0]
 8006b86:	b003      	add	sp, #12
 8006b88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b8c:	f7ff bfe2 	b.w	8006b54 <__malloc_unlock>
 8006b90:	42a3      	cmp	r3, r4
 8006b92:	d908      	bls.n	8006ba6 <_free_r+0x46>
 8006b94:	6825      	ldr	r5, [r4, #0]
 8006b96:	1961      	adds	r1, r4, r5
 8006b98:	428b      	cmp	r3, r1
 8006b9a:	bf01      	itttt	eq
 8006b9c:	6819      	ldreq	r1, [r3, #0]
 8006b9e:	685b      	ldreq	r3, [r3, #4]
 8006ba0:	1949      	addeq	r1, r1, r5
 8006ba2:	6021      	streq	r1, [r4, #0]
 8006ba4:	e7ed      	b.n	8006b82 <_free_r+0x22>
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	b10b      	cbz	r3, 8006bb0 <_free_r+0x50>
 8006bac:	42a3      	cmp	r3, r4
 8006bae:	d9fa      	bls.n	8006ba6 <_free_r+0x46>
 8006bb0:	6811      	ldr	r1, [r2, #0]
 8006bb2:	1855      	adds	r5, r2, r1
 8006bb4:	42a5      	cmp	r5, r4
 8006bb6:	d10b      	bne.n	8006bd0 <_free_r+0x70>
 8006bb8:	6824      	ldr	r4, [r4, #0]
 8006bba:	4421      	add	r1, r4
 8006bbc:	1854      	adds	r4, r2, r1
 8006bbe:	42a3      	cmp	r3, r4
 8006bc0:	6011      	str	r1, [r2, #0]
 8006bc2:	d1e0      	bne.n	8006b86 <_free_r+0x26>
 8006bc4:	681c      	ldr	r4, [r3, #0]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	6053      	str	r3, [r2, #4]
 8006bca:	4421      	add	r1, r4
 8006bcc:	6011      	str	r1, [r2, #0]
 8006bce:	e7da      	b.n	8006b86 <_free_r+0x26>
 8006bd0:	d902      	bls.n	8006bd8 <_free_r+0x78>
 8006bd2:	230c      	movs	r3, #12
 8006bd4:	6003      	str	r3, [r0, #0]
 8006bd6:	e7d6      	b.n	8006b86 <_free_r+0x26>
 8006bd8:	6825      	ldr	r5, [r4, #0]
 8006bda:	1961      	adds	r1, r4, r5
 8006bdc:	428b      	cmp	r3, r1
 8006bde:	bf04      	itt	eq
 8006be0:	6819      	ldreq	r1, [r3, #0]
 8006be2:	685b      	ldreq	r3, [r3, #4]
 8006be4:	6063      	str	r3, [r4, #4]
 8006be6:	bf04      	itt	eq
 8006be8:	1949      	addeq	r1, r1, r5
 8006bea:	6021      	streq	r1, [r4, #0]
 8006bec:	6054      	str	r4, [r2, #4]
 8006bee:	e7ca      	b.n	8006b86 <_free_r+0x26>
 8006bf0:	b003      	add	sp, #12
 8006bf2:	bd30      	pop	{r4, r5, pc}
 8006bf4:	20004c8c 	.word	0x20004c8c

08006bf8 <_init>:
 8006bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bfa:	bf00      	nop
 8006bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bfe:	bc08      	pop	{r3}
 8006c00:	469e      	mov	lr, r3
 8006c02:	4770      	bx	lr

08006c04 <_fini>:
 8006c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c06:	bf00      	nop
 8006c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c0a:	bc08      	pop	{r3}
 8006c0c:	469e      	mov	lr, r3
 8006c0e:	4770      	bx	lr
