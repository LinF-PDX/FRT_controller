
FRT_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007070  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08007270  08007270  00017270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007368  08007368  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007368  08007368  00017368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007370  08007370  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007370  08007370  00017370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007374  08007374  00017374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007378  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c24  20000074  080073ec  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c98  080073ec  00024c98  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019254  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031c7  00000000  00000000  000392f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b0  00000000  00000000  0003c4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001268  00000000  00000000  0003d870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003501  00000000  00000000  0003ead8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015bc2  00000000  00000000  00041fd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001073f3  00000000  00000000  00057b9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015ef8e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005644  00000000  00000000  0015efe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
 8000220:	08007258 	.word	0x08007258

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
 800023c:	08007258 	.word	0x08007258

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b974 	b.w	8000540 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <APPS1_ADC_Percent>:
static void CAN_Config(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t APPS1_ADC_Percent(void) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0
	uint16_t ADC_VAL;
	float ADC_Percent;
	uint8_t ADC_Out;

	HAL_ADC_Start(&hadc1);
 800054a:	4819      	ldr	r0, [pc, #100]	; (80005b0 <APPS1_ADC_Percent+0x6c>)
 800054c:	f001 f91a 	bl	8001784 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 10);
 8000550:	210a      	movs	r1, #10
 8000552:	4817      	ldr	r0, [pc, #92]	; (80005b0 <APPS1_ADC_Percent+0x6c>)
 8000554:	f001 fa18 	bl	8001988 <HAL_ADC_PollForConversion>
	ADC_VAL = HAL_ADC_GetValue(&hadc1);
 8000558:	4815      	ldr	r0, [pc, #84]	; (80005b0 <APPS1_ADC_Percent+0x6c>)
 800055a:	f001 faa0 	bl	8001a9e <HAL_ADC_GetValue>
 800055e:	4603      	mov	r3, r0
 8000560:	82fb      	strh	r3, [r7, #22]
	HAL_ADC_Stop(&hadc1);
 8000562:	4813      	ldr	r0, [pc, #76]	; (80005b0 <APPS1_ADC_Percent+0x6c>)
 8000564:	f001 f9dc 	bl	8001920 <HAL_ADC_Stop>
	ADC_Percent = (ADC_VAL/MAX_ADC_VALUE)*100;
 8000568:	8afa      	ldrh	r2, [r7, #22]
 800056a:	4b12      	ldr	r3, [pc, #72]	; (80005b4 <APPS1_ADC_Percent+0x70>)
 800056c:	fba3 1302 	umull	r1, r3, r3, r2
 8000570:	1ad2      	subs	r2, r2, r3
 8000572:	0852      	lsrs	r2, r2, #1
 8000574:	4413      	add	r3, r2
 8000576:	0adb      	lsrs	r3, r3, #11
 8000578:	b29b      	uxth	r3, r3
 800057a:	461a      	mov	r2, r3
 800057c:	2364      	movs	r3, #100	; 0x64
 800057e:	fb02 f303 	mul.w	r3, r2, r3
 8000582:	ee07 3a90 	vmov	s15, r3
 8000586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800058a:	edc7 7a04 	vstr	s15, [r7, #16]
	ADC_Out = (ADC_Percent - APPS1_MIN_VALUE)*(100/(APPS1_MAX_VALUE - APPS1_MIN_VALUE)); 	//apps1 travel from 15% to 85%
 800058e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000592:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8000596:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800059a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800059e:	edc7 7a01 	vstr	s15, [r7, #4]
 80005a2:	793b      	ldrb	r3, [r7, #4]
 80005a4:	73fb      	strb	r3, [r7, #15]
	if (ADC_Out < 0) {
		ADC_Out = 0;
	}
	return ADC_Out; //returns ADC percentage ranges from 0-1
 80005a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3718      	adds	r7, #24
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000090 	.word	0x20000090
 80005b4:	00100101 	.word	0x00100101

080005b8 <APPS2_ADC_Percent>:

uint8_t APPS2_ADC_Percent(void) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af00      	add	r7, sp, #0
	uint16_t ADC_VAL;
	float ADC_Percent;
	uint8_t ADC_Out;

	HAL_ADC_Start(&hadc2);
 80005be:	4819      	ldr	r0, [pc, #100]	; (8000624 <APPS2_ADC_Percent+0x6c>)
 80005c0:	f001 f8e0 	bl	8001784 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 10);
 80005c4:	210a      	movs	r1, #10
 80005c6:	4817      	ldr	r0, [pc, #92]	; (8000624 <APPS2_ADC_Percent+0x6c>)
 80005c8:	f001 f9de 	bl	8001988 <HAL_ADC_PollForConversion>
	ADC_VAL = HAL_ADC_GetValue(&hadc2);
 80005cc:	4815      	ldr	r0, [pc, #84]	; (8000624 <APPS2_ADC_Percent+0x6c>)
 80005ce:	f001 fa66 	bl	8001a9e <HAL_ADC_GetValue>
 80005d2:	4603      	mov	r3, r0
 80005d4:	82fb      	strh	r3, [r7, #22]
	HAL_ADC_Stop(&hadc2);
 80005d6:	4813      	ldr	r0, [pc, #76]	; (8000624 <APPS2_ADC_Percent+0x6c>)
 80005d8:	f001 f9a2 	bl	8001920 <HAL_ADC_Stop>
	ADC_Percent = (ADC_VAL/MAX_ADC_VALUE)*100;
 80005dc:	8afa      	ldrh	r2, [r7, #22]
 80005de:	4b12      	ldr	r3, [pc, #72]	; (8000628 <APPS2_ADC_Percent+0x70>)
 80005e0:	fba3 1302 	umull	r1, r3, r3, r2
 80005e4:	1ad2      	subs	r2, r2, r3
 80005e6:	0852      	lsrs	r2, r2, #1
 80005e8:	4413      	add	r3, r2
 80005ea:	0adb      	lsrs	r3, r3, #11
 80005ec:	b29b      	uxth	r3, r3
 80005ee:	461a      	mov	r2, r3
 80005f0:	2364      	movs	r3, #100	; 0x64
 80005f2:	fb02 f303 	mul.w	r3, r2, r3
 80005f6:	ee07 3a90 	vmov	s15, r3
 80005fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80005fe:	edc7 7a04 	vstr	s15, [r7, #16]
	ADC_Out = (ADC_Percent - APPS2_MIN_VALUE)*(100/(APPS2_MAX_VALUE - APPS2_MIN_VALUE));
 8000602:	edd7 7a04 	vldr	s15, [r7, #16]
 8000606:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800060a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800060e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000612:	edc7 7a01 	vstr	s15, [r7, #4]
 8000616:	793b      	ldrb	r3, [r7, #4]
 8000618:	73fb      	strb	r3, [r7, #15]
	if (ADC_Out < 0) {
			ADC_Out = 0;
	}
	return ADC_Out;
 800061a:	7bfb      	ldrb	r3, [r7, #15]
}
 800061c:	4618      	mov	r0, r3
 800061e:	3718      	adds	r7, #24
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	200000d8 	.word	0x200000d8
 8000628:	00100101 	.word	0x00100101

0800062c <BPPS_ADC_Percent>:

uint8_t BPPS_ADC_Percent(void) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0
	uint16_t ADC_VAL;
	float ADC_Percent;
	uint8_t ADC_Out;

	HAL_ADC_Start(&hadc3);
 8000632:	481b      	ldr	r0, [pc, #108]	; (80006a0 <BPPS_ADC_Percent+0x74>)
 8000634:	f001 f8a6 	bl	8001784 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3, 10);
 8000638:	210a      	movs	r1, #10
 800063a:	4819      	ldr	r0, [pc, #100]	; (80006a0 <BPPS_ADC_Percent+0x74>)
 800063c:	f001 f9a4 	bl	8001988 <HAL_ADC_PollForConversion>
	ADC_VAL = HAL_ADC_GetValue(&hadc3);
 8000640:	4817      	ldr	r0, [pc, #92]	; (80006a0 <BPPS_ADC_Percent+0x74>)
 8000642:	f001 fa2c 	bl	8001a9e <HAL_ADC_GetValue>
 8000646:	4603      	mov	r3, r0
 8000648:	82fb      	strh	r3, [r7, #22]
	HAL_ADC_Stop(&hadc3);
 800064a:	4815      	ldr	r0, [pc, #84]	; (80006a0 <BPPS_ADC_Percent+0x74>)
 800064c:	f001 f968 	bl	8001920 <HAL_ADC_Stop>
	ADC_Percent = (ADC_VAL/MAX_ADC_VALUE)*100;
 8000650:	8afa      	ldrh	r2, [r7, #22]
 8000652:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <BPPS_ADC_Percent+0x78>)
 8000654:	fba3 1302 	umull	r1, r3, r3, r2
 8000658:	1ad2      	subs	r2, r2, r3
 800065a:	0852      	lsrs	r2, r2, #1
 800065c:	4413      	add	r3, r2
 800065e:	0adb      	lsrs	r3, r3, #11
 8000660:	b29b      	uxth	r3, r3
 8000662:	461a      	mov	r2, r3
 8000664:	2364      	movs	r3, #100	; 0x64
 8000666:	fb02 f303 	mul.w	r3, r2, r3
 800066a:	ee07 3a90 	vmov	s15, r3
 800066e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000672:	edc7 7a04 	vstr	s15, [r7, #16]
	ADC_Out = (ADC_Percent - BPPS_MIN_VALUE)*(100/(BPPS_MAX_VALUE - BPPS_MIN_VALUE));
 8000676:	edd7 7a04 	vldr	s15, [r7, #16]
 800067a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800067e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000682:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8000686:	ee67 7a87 	vmul.f32	s15, s15, s14
 800068a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800068e:	edc7 7a01 	vstr	s15, [r7, #4]
 8000692:	793b      	ldrb	r3, [r7, #4]
 8000694:	73fb      	strb	r3, [r7, #15]
	if (ADC_Out < 0) {
			ADC_Out = 0;
	}
	return ADC_Out;
 8000696:	7bfb      	ldrb	r3, [r7, #15]
}
 8000698:	4618      	mov	r0, r3
 800069a:	3718      	adds	r7, #24
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	20000120 	.word	0x20000120
 80006a4:	00100101 	.word	0x00100101

080006a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ac:	f000 fff9 	bl	80016a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b0:	f000 f892 	bl	80007d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b4:	f000 fa5a 	bl	8000b6c <MX_GPIO_Init>
  MX_CAN1_Init();
 80006b8:	f000 f9ec 	bl	8000a94 <MX_CAN1_Init>
  MX_ADC1_Init();
 80006bc:	f000 f8f4 	bl	80008a8 <MX_ADC1_Init>
  MX_ADC2_Init();
 80006c0:	f000 f944 	bl	800094c <MX_ADC2_Init>
  MX_ADC3_Init();
 80006c4:	f000 f994 	bl	80009f0 <MX_ADC3_Init>
  MX_CAN3_Init();
 80006c8:	f000 fa1a 	bl	8000b00 <MX_CAN3_Init>
  /* USER CODE BEGIN 2 */
  	CAN_Config();
 80006cc:	f000 faba 	bl	8000c44 <CAN_Config>

	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80006d0:	2102      	movs	r1, #2
 80006d2:	4836      	ldr	r0, [pc, #216]	; (80007ac <main+0x104>)
 80006d4:	f002 f84e 	bl	8002774 <HAL_CAN_ActivateNotification>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <main+0x3a>
	{
	  Error_Handler();
 80006de:	f000 fdb7 	bl	8001250 <Error_Handler>
	}
	// Initialize TxHeader and TxData
	AMK_TxHeader_R.DLC = 8;
 80006e2:	4b33      	ldr	r3, [pc, #204]	; (80007b0 <main+0x108>)
 80006e4:	2208      	movs	r2, #8
 80006e6:	611a      	str	r2, [r3, #16]
	AMK_TxHeader_R.IDE = CAN_ID_STD;
 80006e8:	4b31      	ldr	r3, [pc, #196]	; (80007b0 <main+0x108>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
	AMK_TxHeader_R.RTR = CAN_RTR_DATA;
 80006ee:	4b30      	ldr	r3, [pc, #192]	; (80007b0 <main+0x108>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	60da      	str	r2, [r3, #12]
	AMK_TxHeader_R.StdId = 0x186;
 80006f4:	4b2e      	ldr	r3, [pc, #184]	; (80007b0 <main+0x108>)
 80006f6:	f44f 72c3 	mov.w	r2, #390	; 0x186
 80006fa:	601a      	str	r2, [r3, #0]
	AMK_TxHeader_R.TransmitGlobalTime = DISABLE;
 80006fc:	4b2c      	ldr	r3, [pc, #176]	; (80007b0 <main+0x108>)
 80006fe:	2200      	movs	r2, #0
 8000700:	751a      	strb	r2, [r3, #20]

	AMK_TxData_R[0] = 0x00;
 8000702:	4b2c      	ldr	r3, [pc, #176]	; (80007b4 <main+0x10c>)
 8000704:	2200      	movs	r2, #0
 8000706:	701a      	strb	r2, [r3, #0]
	AMK_TxData_R[1] = 0x00;
 8000708:	4b2a      	ldr	r3, [pc, #168]	; (80007b4 <main+0x10c>)
 800070a:	2200      	movs	r2, #0
 800070c:	705a      	strb	r2, [r3, #1]
	AMK_TxData_R[2] = 0x00;
 800070e:	4b29      	ldr	r3, [pc, #164]	; (80007b4 <main+0x10c>)
 8000710:	2200      	movs	r2, #0
 8000712:	709a      	strb	r2, [r3, #2]
	AMK_TxData_R[3] = 0x00;
 8000714:	4b27      	ldr	r3, [pc, #156]	; (80007b4 <main+0x10c>)
 8000716:	2200      	movs	r2, #0
 8000718:	70da      	strb	r2, [r3, #3]
	AMK_TxData_R[4] = 0x00;
 800071a:	4b26      	ldr	r3, [pc, #152]	; (80007b4 <main+0x10c>)
 800071c:	2200      	movs	r2, #0
 800071e:	711a      	strb	r2, [r3, #4]
	AMK_TxData_R[5] = 0x00;
 8000720:	4b24      	ldr	r3, [pc, #144]	; (80007b4 <main+0x10c>)
 8000722:	2200      	movs	r2, #0
 8000724:	715a      	strb	r2, [r3, #5]
	AMK_TxData_R[6] = 0x00;
 8000726:	4b23      	ldr	r3, [pc, #140]	; (80007b4 <main+0x10c>)
 8000728:	2200      	movs	r2, #0
 800072a:	719a      	strb	r2, [r3, #6]
	AMK_TxData_R[7] = 0x00;
 800072c:	4b21      	ldr	r3, [pc, #132]	; (80007b4 <main+0x10c>)
 800072e:	2200      	movs	r2, #0
 8000730:	71da      	strb	r2, [r3, #7]

	AMK_TxHeader_L.DLC = 8;
 8000732:	4b21      	ldr	r3, [pc, #132]	; (80007b8 <main+0x110>)
 8000734:	2208      	movs	r2, #8
 8000736:	611a      	str	r2, [r3, #16]
	AMK_TxHeader_L.IDE = CAN_ID_STD;
 8000738:	4b1f      	ldr	r3, [pc, #124]	; (80007b8 <main+0x110>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
	AMK_TxHeader_L.RTR = CAN_RTR_DATA;
 800073e:	4b1e      	ldr	r3, [pc, #120]	; (80007b8 <main+0x110>)
 8000740:	2200      	movs	r2, #0
 8000742:	60da      	str	r2, [r3, #12]
	AMK_TxHeader_L.StdId = 0x185;
 8000744:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <main+0x110>)
 8000746:	f240 1285 	movw	r2, #389	; 0x185
 800074a:	601a      	str	r2, [r3, #0]
	AMK_TxHeader_L.TransmitGlobalTime = DISABLE;
 800074c:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <main+0x110>)
 800074e:	2200      	movs	r2, #0
 8000750:	751a      	strb	r2, [r3, #20]

	AMK_TxData_L[0] = 0x00;
 8000752:	4b1a      	ldr	r3, [pc, #104]	; (80007bc <main+0x114>)
 8000754:	2200      	movs	r2, #0
 8000756:	701a      	strb	r2, [r3, #0]
	AMK_TxData_L[1] = 0x00;
 8000758:	4b18      	ldr	r3, [pc, #96]	; (80007bc <main+0x114>)
 800075a:	2200      	movs	r2, #0
 800075c:	705a      	strb	r2, [r3, #1]
	AMK_TxData_L[2] = 0x00;
 800075e:	4b17      	ldr	r3, [pc, #92]	; (80007bc <main+0x114>)
 8000760:	2200      	movs	r2, #0
 8000762:	709a      	strb	r2, [r3, #2]
	AMK_TxData_L[3] = 0x00;
 8000764:	4b15      	ldr	r3, [pc, #84]	; (80007bc <main+0x114>)
 8000766:	2200      	movs	r2, #0
 8000768:	70da      	strb	r2, [r3, #3]
	AMK_TxData_L[4] = 0x00;
 800076a:	4b14      	ldr	r3, [pc, #80]	; (80007bc <main+0x114>)
 800076c:	2200      	movs	r2, #0
 800076e:	711a      	strb	r2, [r3, #4]
	AMK_TxData_L[5] = 0x00;
 8000770:	4b12      	ldr	r3, [pc, #72]	; (80007bc <main+0x114>)
 8000772:	2200      	movs	r2, #0
 8000774:	715a      	strb	r2, [r3, #5]
	AMK_TxData_L[6] = 0x00;
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <main+0x114>)
 8000778:	2200      	movs	r2, #0
 800077a:	719a      	strb	r2, [r3, #6]
	AMK_TxData_L[7] = 0x00;
 800077c:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <main+0x114>)
 800077e:	2200      	movs	r2, #0
 8000780:	71da      	strb	r2, [r3, #7]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000782:	f003 fd01 	bl	8004188 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of controllerStart */
  controllerStartHandle = osThreadNew(Start_FRT_controller, NULL, &controllerStart_attributes);
 8000786:	4a0e      	ldr	r2, [pc, #56]	; (80007c0 <main+0x118>)
 8000788:	2100      	movs	r1, #0
 800078a:	480e      	ldr	r0, [pc, #56]	; (80007c4 <main+0x11c>)
 800078c:	f003 fd66 	bl	800425c <osThreadNew>
 8000790:	4603      	mov	r3, r0
 8000792:	4a0d      	ldr	r2, [pc, #52]	; (80007c8 <main+0x120>)
 8000794:	6013      	str	r3, [r2, #0]

  /* creation of motorControl */
  motorControlHandle = osThreadNew(Start_AMK, NULL, &motorControl_attributes);
 8000796:	4a0d      	ldr	r2, [pc, #52]	; (80007cc <main+0x124>)
 8000798:	2100      	movs	r1, #0
 800079a:	480d      	ldr	r0, [pc, #52]	; (80007d0 <main+0x128>)
 800079c:	f003 fd5e 	bl	800425c <osThreadNew>
 80007a0:	4603      	mov	r3, r0
 80007a2:	4a0c      	ldr	r2, [pc, #48]	; (80007d4 <main+0x12c>)
 80007a4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80007a6:	f003 fd23 	bl	80041f0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007aa:	e7fe      	b.n	80007aa <main+0x102>
 80007ac:	20000168 	.word	0x20000168
 80007b0:	200001c0 	.word	0x200001c0
 80007b4:	2000020c 	.word	0x2000020c
 80007b8:	200001d8 	.word	0x200001d8
 80007bc:	20000214 	.word	0x20000214
 80007c0:	080072a8 	.word	0x080072a8
 80007c4:	08000e15 	.word	0x08000e15
 80007c8:	200001b8 	.word	0x200001b8
 80007cc:	080072cc 	.word	0x080072cc
 80007d0:	08000f11 	.word	0x08000f11
 80007d4:	200001bc 	.word	0x200001bc

080007d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b094      	sub	sp, #80	; 0x50
 80007dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007de:	f107 031c 	add.w	r3, r7, #28
 80007e2:	2234      	movs	r2, #52	; 0x34
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f006 fc6c 	bl	80070c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ec:	f107 0308 	add.w	r3, r7, #8
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fc:	4b28      	ldr	r3, [pc, #160]	; (80008a0 <SystemClock_Config+0xc8>)
 80007fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000800:	4a27      	ldr	r2, [pc, #156]	; (80008a0 <SystemClock_Config+0xc8>)
 8000802:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000806:	6413      	str	r3, [r2, #64]	; 0x40
 8000808:	4b25      	ldr	r3, [pc, #148]	; (80008a0 <SystemClock_Config+0xc8>)
 800080a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000814:	4b23      	ldr	r3, [pc, #140]	; (80008a4 <SystemClock_Config+0xcc>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800081c:	4a21      	ldr	r2, [pc, #132]	; (80008a4 <SystemClock_Config+0xcc>)
 800081e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000822:	6013      	str	r3, [r2, #0]
 8000824:	4b1f      	ldr	r3, [pc, #124]	; (80008a4 <SystemClock_Config+0xcc>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800082c:	603b      	str	r3, [r7, #0]
 800082e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000830:	2302      	movs	r3, #2
 8000832:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000834:	2301      	movs	r3, #1
 8000836:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000838:	2310      	movs	r3, #16
 800083a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083c:	2302      	movs	r3, #2
 800083e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000840:	2300      	movs	r3, #0
 8000842:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000844:	2308      	movs	r3, #8
 8000846:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000848:	2360      	movs	r3, #96	; 0x60
 800084a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 800084c:	2306      	movs	r3, #6
 800084e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000850:	2302      	movs	r3, #2
 8000852:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000854:	2302      	movs	r3, #2
 8000856:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000858:	f107 031c 	add.w	r3, r7, #28
 800085c:	4618      	mov	r0, r3
 800085e:	f002 fcb9 	bl	80031d4 <HAL_RCC_OscConfig>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000868:	f000 fcf2 	bl	8001250 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086c:	230f      	movs	r3, #15
 800086e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000870:	2302      	movs	r3, #2
 8000872:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000874:	2380      	movs	r3, #128	; 0x80
 8000876:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000878:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800087c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800087e:	2300      	movs	r3, #0
 8000880:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000882:	f107 0308 	add.w	r3, r7, #8
 8000886:	2100      	movs	r1, #0
 8000888:	4618      	mov	r0, r3
 800088a:	f002 ff51 	bl	8003730 <HAL_RCC_ClockConfig>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000894:	f000 fcdc 	bl	8001250 <Error_Handler>
  }
}
 8000898:	bf00      	nop
 800089a:	3750      	adds	r7, #80	; 0x50
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40007000 	.word	0x40007000

080008a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008ae:	463b      	mov	r3, r7
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008ba:	4b21      	ldr	r3, [pc, #132]	; (8000940 <MX_ADC1_Init+0x98>)
 80008bc:	4a21      	ldr	r2, [pc, #132]	; (8000944 <MX_ADC1_Init+0x9c>)
 80008be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80008c0:	4b1f      	ldr	r3, [pc, #124]	; (8000940 <MX_ADC1_Init+0x98>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008c6:	4b1e      	ldr	r3, [pc, #120]	; (8000940 <MX_ADC1_Init+0x98>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008cc:	4b1c      	ldr	r3, [pc, #112]	; (8000940 <MX_ADC1_Init+0x98>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008d2:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <MX_ADC1_Init+0x98>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008d8:	4b19      	ldr	r3, [pc, #100]	; (8000940 <MX_ADC1_Init+0x98>)
 80008da:	2200      	movs	r2, #0
 80008dc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008e0:	4b17      	ldr	r3, [pc, #92]	; (8000940 <MX_ADC1_Init+0x98>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008e6:	4b16      	ldr	r3, [pc, #88]	; (8000940 <MX_ADC1_Init+0x98>)
 80008e8:	4a17      	ldr	r2, [pc, #92]	; (8000948 <MX_ADC1_Init+0xa0>)
 80008ea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008ec:	4b14      	ldr	r3, [pc, #80]	; (8000940 <MX_ADC1_Init+0x98>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008f2:	4b13      	ldr	r3, [pc, #76]	; (8000940 <MX_ADC1_Init+0x98>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_ADC1_Init+0x98>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <MX_ADC1_Init+0x98>)
 8000902:	2201      	movs	r2, #1
 8000904:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000906:	480e      	ldr	r0, [pc, #56]	; (8000940 <MX_ADC1_Init+0x98>)
 8000908:	f000 fef8 	bl	80016fc <HAL_ADC_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000912:	f000 fc9d 	bl	8001250 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000916:	230a      	movs	r3, #10
 8000918:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800091a:	2301      	movs	r3, #1
 800091c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800091e:	2300      	movs	r3, #0
 8000920:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000922:	463b      	mov	r3, r7
 8000924:	4619      	mov	r1, r3
 8000926:	4806      	ldr	r0, [pc, #24]	; (8000940 <MX_ADC1_Init+0x98>)
 8000928:	f001 f8c6 	bl	8001ab8 <HAL_ADC_ConfigChannel>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000932:	f000 fc8d 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	3710      	adds	r7, #16
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000090 	.word	0x20000090
 8000944:	40012000 	.word	0x40012000
 8000948:	0f000001 	.word	0x0f000001

0800094c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000952:	463b      	mov	r3, r7
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800095e:	4b21      	ldr	r3, [pc, #132]	; (80009e4 <MX_ADC2_Init+0x98>)
 8000960:	4a21      	ldr	r2, [pc, #132]	; (80009e8 <MX_ADC2_Init+0x9c>)
 8000962:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000964:	4b1f      	ldr	r3, [pc, #124]	; (80009e4 <MX_ADC2_Init+0x98>)
 8000966:	2200      	movs	r2, #0
 8000968:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800096a:	4b1e      	ldr	r3, [pc, #120]	; (80009e4 <MX_ADC2_Init+0x98>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000970:	4b1c      	ldr	r3, [pc, #112]	; (80009e4 <MX_ADC2_Init+0x98>)
 8000972:	2200      	movs	r2, #0
 8000974:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000976:	4b1b      	ldr	r3, [pc, #108]	; (80009e4 <MX_ADC2_Init+0x98>)
 8000978:	2201      	movs	r2, #1
 800097a:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800097c:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <MX_ADC2_Init+0x98>)
 800097e:	2200      	movs	r2, #0
 8000980:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000984:	4b17      	ldr	r3, [pc, #92]	; (80009e4 <MX_ADC2_Init+0x98>)
 8000986:	2200      	movs	r2, #0
 8000988:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800098a:	4b16      	ldr	r3, [pc, #88]	; (80009e4 <MX_ADC2_Init+0x98>)
 800098c:	4a17      	ldr	r2, [pc, #92]	; (80009ec <MX_ADC2_Init+0xa0>)
 800098e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000990:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <MX_ADC2_Init+0x98>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000996:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <MX_ADC2_Init+0x98>)
 8000998:	2201      	movs	r2, #1
 800099a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800099c:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <MX_ADC2_Init+0x98>)
 800099e:	2200      	movs	r2, #0
 80009a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009a4:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <MX_ADC2_Init+0x98>)
 80009a6:	2201      	movs	r2, #1
 80009a8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80009aa:	480e      	ldr	r0, [pc, #56]	; (80009e4 <MX_ADC2_Init+0x98>)
 80009ac:	f000 fea6 	bl	80016fc <HAL_ADC_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 80009b6:	f000 fc4b 	bl	8001250 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80009ba:	230b      	movs	r3, #11
 80009bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009be:	2301      	movs	r3, #1
 80009c0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009c2:	2300      	movs	r3, #0
 80009c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80009c6:	463b      	mov	r3, r7
 80009c8:	4619      	mov	r1, r3
 80009ca:	4806      	ldr	r0, [pc, #24]	; (80009e4 <MX_ADC2_Init+0x98>)
 80009cc:	f001 f874 	bl	8001ab8 <HAL_ADC_ConfigChannel>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80009d6:	f000 fc3b 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	3710      	adds	r7, #16
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	200000d8 	.word	0x200000d8
 80009e8:	40012100 	.word	0x40012100
 80009ec:	0f000001 	.word	0x0f000001

080009f0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009f6:	463b      	mov	r3, r7
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000a02:	4b21      	ldr	r3, [pc, #132]	; (8000a88 <MX_ADC3_Init+0x98>)
 8000a04:	4a21      	ldr	r2, [pc, #132]	; (8000a8c <MX_ADC3_Init+0x9c>)
 8000a06:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000a08:	4b1f      	ldr	r3, [pc, #124]	; (8000a88 <MX_ADC3_Init+0x98>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000a0e:	4b1e      	ldr	r3, [pc, #120]	; (8000a88 <MX_ADC3_Init+0x98>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a14:	4b1c      	ldr	r3, [pc, #112]	; (8000a88 <MX_ADC3_Init+0x98>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000a1a:	4b1b      	ldr	r3, [pc, #108]	; (8000a88 <MX_ADC3_Init+0x98>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000a20:	4b19      	ldr	r3, [pc, #100]	; (8000a88 <MX_ADC3_Init+0x98>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a28:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <MX_ADC3_Init+0x98>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a2e:	4b16      	ldr	r3, [pc, #88]	; (8000a88 <MX_ADC3_Init+0x98>)
 8000a30:	4a17      	ldr	r2, [pc, #92]	; (8000a90 <MX_ADC3_Init+0xa0>)
 8000a32:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a34:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <MX_ADC3_Init+0x98>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000a3a:	4b13      	ldr	r3, [pc, #76]	; (8000a88 <MX_ADC3_Init+0x98>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000a40:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <MX_ADC3_Init+0x98>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a48:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <MX_ADC3_Init+0x98>)
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000a4e:	480e      	ldr	r0, [pc, #56]	; (8000a88 <MX_ADC3_Init+0x98>)
 8000a50:	f000 fe54 	bl	80016fc <HAL_ADC_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8000a5a:	f000 fbf9 	bl	8001250 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000a5e:	230c      	movs	r3, #12
 8000a60:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a62:	2301      	movs	r3, #1
 8000a64:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a66:	2300      	movs	r3, #0
 8000a68:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000a6a:	463b      	mov	r3, r7
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4806      	ldr	r0, [pc, #24]	; (8000a88 <MX_ADC3_Init+0x98>)
 8000a70:	f001 f822 	bl	8001ab8 <HAL_ADC_ConfigChannel>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8000a7a:	f000 fbe9 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000a7e:	bf00      	nop
 8000a80:	3710      	adds	r7, #16
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000120 	.word	0x20000120
 8000a8c:	40012200 	.word	0x40012200
 8000a90:	0f000001 	.word	0x0f000001

08000a94 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a98:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <MX_CAN1_Init+0x64>)
 8000a9a:	4a18      	ldr	r2, [pc, #96]	; (8000afc <MX_CAN1_Init+0x68>)
 8000a9c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1;
 8000a9e:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <MX_CAN1_Init+0x64>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000aa4:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <MX_CAN1_Init+0x64>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000aaa:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <MX_CAN1_Init+0x64>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <MX_CAN1_Init+0x64>)
 8000ab2:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000ab6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <MX_CAN1_Init+0x64>)
 8000aba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000abe:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000ac0:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <MX_CAN1_Init+0x64>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000ac6:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <MX_CAN1_Init+0x64>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000acc:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <MX_CAN1_Init+0x64>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000ad2:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <MX_CAN1_Init+0x64>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000ad8:	4b07      	ldr	r3, [pc, #28]	; (8000af8 <MX_CAN1_Init+0x64>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000ade:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <MX_CAN1_Init+0x64>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000ae4:	4804      	ldr	r0, [pc, #16]	; (8000af8 <MX_CAN1_Init+0x64>)
 8000ae6:	f001 fa37 	bl	8001f58 <HAL_CAN_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000af0:	f000 fbae 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000168 	.word	0x20000168
 8000afc:	40006400 	.word	0x40006400

08000b00 <MX_CAN3_Init>:
  * @brief CAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN3_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 8000b04:	4b17      	ldr	r3, [pc, #92]	; (8000b64 <MX_CAN3_Init+0x64>)
 8000b06:	4a18      	ldr	r2, [pc, #96]	; (8000b68 <MX_CAN3_Init+0x68>)
 8000b08:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 1;
 8000b0a:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <MX_CAN3_Init+0x64>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8000b10:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <MX_CAN3_Init+0x64>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000b16:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <MX_CAN3_Init+0x64>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000b1c:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <MX_CAN3_Init+0x64>)
 8000b1e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000b22:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000b24:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <MX_CAN3_Init+0x64>)
 8000b26:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000b2a:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8000b2c:	4b0d      	ldr	r3, [pc, #52]	; (8000b64 <MX_CAN3_Init+0x64>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = ENABLE;
 8000b32:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <MX_CAN3_Init+0x64>)
 8000b34:	2201      	movs	r2, #1
 8000b36:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8000b38:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <MX_CAN3_Init+0x64>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8000b3e:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <MX_CAN3_Init+0x64>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8000b44:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <MX_CAN3_Init+0x64>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <MX_CAN3_Init+0x64>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8000b50:	4804      	ldr	r0, [pc, #16]	; (8000b64 <MX_CAN3_Init+0x64>)
 8000b52:	f001 fa01 	bl	8001f58 <HAL_CAN_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 8000b5c:	f000 fb78 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000190 	.word	0x20000190
 8000b68:	40003400 	.word	0x40003400

08000b6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b088      	sub	sp, #32
 8000b70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b72:	f107 030c 	add.w	r3, r7, #12
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]
 8000b7e:	60da      	str	r2, [r3, #12]
 8000b80:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b82:	4b2d      	ldr	r3, [pc, #180]	; (8000c38 <MX_GPIO_Init+0xcc>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a2c      	ldr	r2, [pc, #176]	; (8000c38 <MX_GPIO_Init+0xcc>)
 8000b88:	f043 0304 	orr.w	r3, r3, #4
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b2a      	ldr	r3, [pc, #168]	; (8000c38 <MX_GPIO_Init+0xcc>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0304 	and.w	r3, r3, #4
 8000b96:	60bb      	str	r3, [r7, #8]
 8000b98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9a:	4b27      	ldr	r3, [pc, #156]	; (8000c38 <MX_GPIO_Init+0xcc>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a26      	ldr	r2, [pc, #152]	; (8000c38 <MX_GPIO_Init+0xcc>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b24      	ldr	r3, [pc, #144]	; (8000c38 <MX_GPIO_Init+0xcc>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bb2:	4b21      	ldr	r3, [pc, #132]	; (8000c38 <MX_GPIO_Init+0xcc>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a20      	ldr	r2, [pc, #128]	; (8000c38 <MX_GPIO_Init+0xcc>)
 8000bb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b1e      	ldr	r3, [pc, #120]	; (8000c38 <MX_GPIO_Init+0xcc>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bc6:	603b      	str	r3, [r7, #0]
 8000bc8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED_Pin|START_BTN_LED_EN_Pin, GPIO_PIN_RESET);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2128      	movs	r1, #40	; 0x28
 8000bce:	481b      	ldr	r0, [pc, #108]	; (8000c3c <MX_GPIO_Init+0xd0>)
 8000bd0:	f002 facc 	bl	800316c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BRAKE_LIGHT_EN_Pin|RTDS_EN_Pin, GPIO_PIN_RESET);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2109      	movs	r1, #9
 8000bd8:	4819      	ldr	r0, [pc, #100]	; (8000c40 <MX_GPIO_Init+0xd4>)
 8000bda:	f002 fac7 	bl	800316c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_LED_Pin START_BTN_LED_EN_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|START_BTN_LED_EN_Pin;
 8000bde:	2328      	movs	r3, #40	; 0x28
 8000be0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be2:	2301      	movs	r3, #1
 8000be4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bee:	f107 030c 	add.w	r3, r7, #12
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4811      	ldr	r0, [pc, #68]	; (8000c3c <MX_GPIO_Init+0xd0>)
 8000bf6:	f002 f8f5 	bl	8002de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BRAKE_LIGHT_EN_Pin RTDS_EN_Pin */
  GPIO_InitStruct.Pin = BRAKE_LIGHT_EN_Pin|RTDS_EN_Pin;
 8000bfa:	2309      	movs	r3, #9
 8000bfc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c0a:	f107 030c 	add.w	r3, r7, #12
 8000c0e:	4619      	mov	r1, r3
 8000c10:	480b      	ldr	r0, [pc, #44]	; (8000c40 <MX_GPIO_Init+0xd4>)
 8000c12:	f002 f8e7 	bl	8002de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BTN_n_Pin */
  GPIO_InitStruct.Pin = START_BTN_n_Pin;
 8000c16:	2340      	movs	r3, #64	; 0x40
 8000c18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(START_BTN_n_GPIO_Port, &GPIO_InitStruct);
 8000c22:	f107 030c 	add.w	r3, r7, #12
 8000c26:	4619      	mov	r1, r3
 8000c28:	4805      	ldr	r0, [pc, #20]	; (8000c40 <MX_GPIO_Init+0xd4>)
 8000c2a:	f002 f8db 	bl	8002de4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c2e:	bf00      	nop
 8000c30:	3720      	adds	r7, #32
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40020000 	.word	0x40020000
 8000c40:	40021800 	.word	0x40021800

08000c44 <CAN_Config>:

/* USER CODE BEGIN 4 */
static void CAN_Config(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08a      	sub	sp, #40	; 0x28
 8000c48:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 13;
 8000c4a:	230d      	movs	r3, #13
 8000c4c:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000c52:	2301      	movs	r3, #1
 8000c54:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x284<<5;
 8000c56:	f44f 43a1 	mov.w	r3, #20608	; 0x5080
 8000c5a:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0xFFE<<5; //Only ID 0x284 and 0x285 can pass through
 8000c60:	4b13      	ldr	r3, [pc, #76]	; (8000cb0 <CAN_Config+0x6c>)
 8000c62:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8000c64:	2300      	movs	r3, #0
 8000c66:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8000c74:	463b      	mov	r3, r7
 8000c76:	4619      	mov	r1, r3
 8000c78:	480e      	ldr	r0, [pc, #56]	; (8000cb4 <CAN_Config+0x70>)
 8000c7a:	f001 fa69 	bl	8002150 <HAL_CAN_ConfigFilter>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <CAN_Config+0x44>
	{
		/* Filter configuration Error */
		Error_Handler();
 8000c84:	f000 fae4 	bl	8001250 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8000c88:	480a      	ldr	r0, [pc, #40]	; (8000cb4 <CAN_Config+0x70>)
 8000c8a:	f001 fb4d 	bl	8002328 <HAL_CAN_Start>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <CAN_Config+0x54>
	{
		/* Start Error */
		Error_Handler();
 8000c94:	f000 fadc 	bl	8001250 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan3) != HAL_OK)
 8000c98:	4807      	ldr	r0, [pc, #28]	; (8000cb8 <CAN_Config+0x74>)
 8000c9a:	f001 fb45 	bl	8002328 <HAL_CAN_Start>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <CAN_Config+0x64>
	{
		/* Start Error */
		Error_Handler();
 8000ca4:	f000 fad4 	bl	8001250 <Error_Handler>
	}
}
 8000ca8:	bf00      	nop
 8000caa:	3728      	adds	r7, #40	; 0x28
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	0001ffc0 	.word	0x0001ffc0
 8000cb4:	20000168 	.word	0x20000168
 8000cb8:	20000190 	.word	0x20000190

08000cbc <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
	//Get Rx message
	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8000cc4:	4b4e      	ldr	r3, [pc, #312]	; (8000e00 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000cc6:	4a4f      	ldr	r2, [pc, #316]	; (8000e04 <HAL_CAN_RxFifo0MsgPendingCallback+0x148>)
 8000cc8:	2100      	movs	r1, #0
 8000cca:	484f      	ldr	r0, [pc, #316]	; (8000e08 <HAL_CAN_RxFifo0MsgPendingCallback+0x14c>)
 8000ccc:	f001 fc40 	bl	8002550 <HAL_CAN_GetRxMessage>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
		Error_Handler();
 8000cd6:	f000 fabb 	bl	8001250 <Error_Handler>
	}

	if (RxHeader.StdId == 0x285) {
 8000cda:	4b4a      	ldr	r3, [pc, #296]	; (8000e04 <HAL_CAN_RxFifo0MsgPendingCallback+0x148>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f240 2285 	movw	r2, #645	; 0x285
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d142      	bne.n	8000d6c <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>
		if ((RxData[1] >> 1) & 1) {
 8000ce6:	4b46      	ldr	r3, [pc, #280]	; (8000e00 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000ce8:	785b      	ldrb	r3, [r3, #1]
 8000cea:	085b      	lsrs	r3, r3, #1
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d003      	beq.n	8000cfe <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
			MotorStatus_R = STATUS_ERROR;
 8000cf6:	4b45      	ldr	r3, [pc, #276]	; (8000e0c <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000cf8:	2207      	movs	r2, #7
 8000cfa:	701a      	strb	r2, [r3, #0]
			return;
 8000cfc:	e07d      	b.n	8000dfa <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
		} else if (RxData[1] >> 7 & 1){
 8000cfe:	4b40      	ldr	r3, [pc, #256]	; (8000e00 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000d00:	785b      	ldrb	r3, [r3, #1]
 8000d02:	09db      	lsrs	r3, r3, #7
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d003      	beq.n	8000d16 <HAL_CAN_RxFifo0MsgPendingCallback+0x5a>
			MotorStatus_R = STATUS_DERATING;
 8000d0e:	4b3f      	ldr	r3, [pc, #252]	; (8000e0c <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000d10:	2206      	movs	r2, #6
 8000d12:	701a      	strb	r2, [r3, #0]
			return;
 8000d14:	e071      	b.n	8000dfa <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
		} else {
			switch(RxData[1]) {
 8000d16:	4b3a      	ldr	r3, [pc, #232]	; (8000e00 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000d18:	785b      	ldrb	r3, [r3, #1]
 8000d1a:	2b79      	cmp	r3, #121	; 0x79
 8000d1c:	d01e      	beq.n	8000d5c <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>
 8000d1e:	2b79      	cmp	r3, #121	; 0x79
 8000d20:	dc20      	bgt.n	8000d64 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
 8000d22:	2b59      	cmp	r3, #89	; 0x59
 8000d24:	d016      	beq.n	8000d54 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>
 8000d26:	2b59      	cmp	r3, #89	; 0x59
 8000d28:	dc1c      	bgt.n	8000d64 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
 8000d2a:	2b19      	cmp	r3, #25
 8000d2c:	d00e      	beq.n	8000d4c <HAL_CAN_RxFifo0MsgPendingCallback+0x90>
 8000d2e:	2b19      	cmp	r3, #25
 8000d30:	dc18      	bgt.n	8000d64 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d002      	beq.n	8000d3c <HAL_CAN_RxFifo0MsgPendingCallback+0x80>
 8000d36:	2b11      	cmp	r3, #17
 8000d38:	d004      	beq.n	8000d44 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>
 8000d3a:	e013      	b.n	8000d64 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
				case 0x01:
					MotorStatus_R = STATUS_SYSTEM_READY;
 8000d3c:	4b33      	ldr	r3, [pc, #204]	; (8000e0c <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000d3e:	2201      	movs	r2, #1
 8000d40:	701a      	strb	r2, [r3, #0]
					break;
 8000d42:	e05a      	b.n	8000dfa <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x11:
					MotorStatus_R = STATUS_DC_ON;
 8000d44:	4b31      	ldr	r3, [pc, #196]	; (8000e0c <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000d46:	2202      	movs	r2, #2
 8000d48:	701a      	strb	r2, [r3, #0]
					break;
 8000d4a:	e056      	b.n	8000dfa <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x19:
					MotorStatus_R = STATUS_QUIT_DC_ON;
 8000d4c:	4b2f      	ldr	r3, [pc, #188]	; (8000e0c <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000d4e:	2203      	movs	r2, #3
 8000d50:	701a      	strb	r2, [r3, #0]
					break;
 8000d52:	e052      	b.n	8000dfa <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x59:
					MotorStatus_R = STATUS_INVERTER_ON;
 8000d54:	4b2d      	ldr	r3, [pc, #180]	; (8000e0c <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000d56:	2204      	movs	r2, #4
 8000d58:	701a      	strb	r2, [r3, #0]
					break;
 8000d5a:	e04e      	b.n	8000dfa <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x79:
					MotorStatus_R = STATUS_QUIT_INVERTER_ON;
 8000d5c:	4b2b      	ldr	r3, [pc, #172]	; (8000e0c <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000d5e:	2205      	movs	r2, #5
 8000d60:	701a      	strb	r2, [r3, #0]
					break;
 8000d62:	e04a      	b.n	8000dfa <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				default:
					MotorStatus_R = STATUS_UNKNOWN;
 8000d64:	4b29      	ldr	r3, [pc, #164]	; (8000e0c <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	701a      	strb	r2, [r3, #0]
 8000d6a:	e046      	b.n	8000dfa <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
			}
		}
	}
	else if (RxHeader.StdId == 0x284) {
 8000d6c:	4b25      	ldr	r3, [pc, #148]	; (8000e04 <HAL_CAN_RxFifo0MsgPendingCallback+0x148>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f5b3 7f21 	cmp.w	r3, #644	; 0x284
 8000d74:	d141      	bne.n	8000dfa <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
		if ((RxData[1] >> 1) & 1) {
 8000d76:	4b22      	ldr	r3, [pc, #136]	; (8000e00 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000d78:	785b      	ldrb	r3, [r3, #1]
 8000d7a:	085b      	lsrs	r3, r3, #1
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d003      	beq.n	8000d8e <HAL_CAN_RxFifo0MsgPendingCallback+0xd2>
			MotorStatus_L = STATUS_ERROR;
 8000d86:	4b22      	ldr	r3, [pc, #136]	; (8000e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000d88:	2207      	movs	r2, #7
 8000d8a:	701a      	strb	r2, [r3, #0]
			return;
 8000d8c:	e035      	b.n	8000dfa <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
		} else if (RxData[1] >> 7 & 1){
 8000d8e:	4b1c      	ldr	r3, [pc, #112]	; (8000e00 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000d90:	785b      	ldrb	r3, [r3, #1]
 8000d92:	09db      	lsrs	r3, r3, #7
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d003      	beq.n	8000da6 <HAL_CAN_RxFifo0MsgPendingCallback+0xea>
			MotorStatus_L = STATUS_DERATING;
 8000d9e:	4b1c      	ldr	r3, [pc, #112]	; (8000e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000da0:	2206      	movs	r2, #6
 8000da2:	701a      	strb	r2, [r3, #0]
			return;
 8000da4:	e029      	b.n	8000dfa <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
		} else {
			switch(RxData[1]) {
 8000da6:	4b16      	ldr	r3, [pc, #88]	; (8000e00 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000da8:	785b      	ldrb	r3, [r3, #1]
 8000daa:	2b79      	cmp	r3, #121	; 0x79
 8000dac:	d01e      	beq.n	8000dec <HAL_CAN_RxFifo0MsgPendingCallback+0x130>
 8000dae:	2b79      	cmp	r3, #121	; 0x79
 8000db0:	dc20      	bgt.n	8000df4 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>
 8000db2:	2b59      	cmp	r3, #89	; 0x59
 8000db4:	d016      	beq.n	8000de4 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>
 8000db6:	2b59      	cmp	r3, #89	; 0x59
 8000db8:	dc1c      	bgt.n	8000df4 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>
 8000dba:	2b19      	cmp	r3, #25
 8000dbc:	d00e      	beq.n	8000ddc <HAL_CAN_RxFifo0MsgPendingCallback+0x120>
 8000dbe:	2b19      	cmp	r3, #25
 8000dc0:	dc18      	bgt.n	8000df4 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d002      	beq.n	8000dcc <HAL_CAN_RxFifo0MsgPendingCallback+0x110>
 8000dc6:	2b11      	cmp	r3, #17
 8000dc8:	d004      	beq.n	8000dd4 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>
 8000dca:	e013      	b.n	8000df4 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>
				case 0x01:
					MotorStatus_L = STATUS_SYSTEM_READY;
 8000dcc:	4b10      	ldr	r3, [pc, #64]	; (8000e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	701a      	strb	r2, [r3, #0]
					break;
 8000dd2:	e012      	b.n	8000dfa <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x11:
					MotorStatus_L = STATUS_DC_ON;
 8000dd4:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000dd6:	2202      	movs	r2, #2
 8000dd8:	701a      	strb	r2, [r3, #0]
					break;
 8000dda:	e00e      	b.n	8000dfa <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x19:
					MotorStatus_L = STATUS_QUIT_DC_ON;
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000dde:	2203      	movs	r2, #3
 8000de0:	701a      	strb	r2, [r3, #0]
					break;
 8000de2:	e00a      	b.n	8000dfa <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x59:
					MotorStatus_L = STATUS_INVERTER_ON;
 8000de4:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000de6:	2204      	movs	r2, #4
 8000de8:	701a      	strb	r2, [r3, #0]
					break;
 8000dea:	e006      	b.n	8000dfa <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x79:
					MotorStatus_L = STATUS_QUIT_INVERTER_ON;
 8000dec:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000dee:	2205      	movs	r2, #5
 8000df0:	701a      	strb	r2, [r3, #0]
					break;
 8000df2:	e002      	b.n	8000dfa <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				default:
					MotorStatus_L = STATUS_UNKNOWN;
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	2000021c 	.word	0x2000021c
 8000e04:	200001f0 	.word	0x200001f0
 8000e08:	20000168 	.word	0x20000168
 8000e0c:	20000228 	.word	0x20000228
 8000e10:	20000229 	.word	0x20000229

08000e14 <Start_FRT_controller>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_FRT_controller */
void Start_FRT_controller(void *argument)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(50);
 8000e1c:	2032      	movs	r0, #50	; 0x32
 8000e1e:	f003 fb2b 	bl	8004478 <osDelay>
    if (HAL_GPIO_ReadPin(START_BTN_n_GPIO_Port, START_BTN_n_Pin) == 0) {
 8000e22:	2140      	movs	r1, #64	; 0x40
 8000e24:	4832      	ldr	r0, [pc, #200]	; (8000ef0 <Start_FRT_controller+0xdc>)
 8000e26:	f002 f989 	bl	800313c <HAL_GPIO_ReadPin>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d102      	bne.n	8000e36 <Start_FRT_controller+0x22>
    	//Read Ready to Drive button
    	TsOn_n = 1;
 8000e30:	4b30      	ldr	r3, [pc, #192]	; (8000ef4 <Start_FRT_controller+0xe0>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	701a      	strb	r2, [r3, #0]
    }
    if (RxData[1] == 0x79 && TsOn_n && BrakeOn) {
 8000e36:	4b30      	ldr	r3, [pc, #192]	; (8000ef8 <Start_FRT_controller+0xe4>)
 8000e38:	785b      	ldrb	r3, [r3, #1]
 8000e3a:	2b79      	cmp	r3, #121	; 0x79
 8000e3c:	d11e      	bne.n	8000e7c <Start_FRT_controller+0x68>
 8000e3e:	4b2d      	ldr	r3, [pc, #180]	; (8000ef4 <Start_FRT_controller+0xe0>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d01a      	beq.n	8000e7c <Start_FRT_controller+0x68>
 8000e46:	4b2d      	ldr	r3, [pc, #180]	; (8000efc <Start_FRT_controller+0xe8>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d016      	beq.n	8000e7c <Start_FRT_controller+0x68>
    	//Set ready to drive flag when all procedures are met
    	ReadyToDrive = 1;
 8000e4e:	4b2c      	ldr	r3, [pc, #176]	; (8000f00 <Start_FRT_controller+0xec>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	701a      	strb	r2, [r3, #0]
    	//Sound read to drive speaker for 2s

    	//HAL_GPIO_WritePin(RTDS_EN_GPIO_Port, RTDS_EN_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(RTDS_EN_GPIO_Port, RTDS_EN_Pin, GPIO_PIN_SET);
 8000e54:	2201      	movs	r2, #1
 8000e56:	2108      	movs	r1, #8
 8000e58:	4825      	ldr	r0, [pc, #148]	; (8000ef0 <Start_FRT_controller+0xdc>)
 8000e5a:	f002 f987 	bl	800316c <HAL_GPIO_WritePin>
    	osDelay(2000);
 8000e5e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e62:	f003 fb09 	bl	8004478 <osDelay>
    	//HAL_GPIO_WritePin(RTDS_EN_GPIO_Port, RTDS_EN_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RTDS_EN_GPIO_Port, RTDS_EN_Pin, GPIO_PIN_RESET);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2108      	movs	r1, #8
 8000e6a:	4821      	ldr	r0, [pc, #132]	; (8000ef0 <Start_FRT_controller+0xdc>)
 8000e6c:	f002 f97e 	bl	800316c <HAL_GPIO_WritePin>

		//Terminate thread when vehicle is ready to drive
    	osThreadSuspend(controllerStartHandle);
 8000e70:	4b24      	ldr	r3, [pc, #144]	; (8000f04 <Start_FRT_controller+0xf0>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f003 fa97 	bl	80043a8 <osThreadSuspend>
 8000e7a:	e038      	b.n	8000eee <Start_FRT_controller+0xda>
    } else if ((RxData[1] & 1) && !TsOn_n) {
 8000e7c:	4b1e      	ldr	r3, [pc, #120]	; (8000ef8 <Start_FRT_controller+0xe4>)
 8000e7e:	785b      	ldrb	r3, [r3, #1]
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d019      	beq.n	8000ebc <Start_FRT_controller+0xa8>
 8000e88:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <Start_FRT_controller+0xe0>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	f083 0301 	eor.w	r3, r3, #1
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d012      	beq.n	8000ebc <Start_FRT_controller+0xa8>
    	//Blink the status LED when AMK is ready
		HAL_GPIO_WritePin(START_BTN_LED_EN_GPIO_Port, START_BTN_LED_EN_Pin, GPIO_PIN_SET);
 8000e96:	2201      	movs	r2, #1
 8000e98:	2120      	movs	r1, #32
 8000e9a:	481b      	ldr	r0, [pc, #108]	; (8000f08 <Start_FRT_controller+0xf4>)
 8000e9c:	f002 f966 	bl	800316c <HAL_GPIO_WritePin>
		osDelay(500);
 8000ea0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ea4:	f003 fae8 	bl	8004478 <osDelay>
		HAL_GPIO_WritePin(START_BTN_LED_EN_GPIO_Port, START_BTN_LED_EN_Pin, GPIO_PIN_RESET);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2120      	movs	r1, #32
 8000eac:	4816      	ldr	r0, [pc, #88]	; (8000f08 <Start_FRT_controller+0xf4>)
 8000eae:	f002 f95d 	bl	800316c <HAL_GPIO_WritePin>
		osDelay(450);
 8000eb2:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8000eb6:	f003 fadf 	bl	8004478 <osDelay>
 8000eba:	e018      	b.n	8000eee <Start_FRT_controller+0xda>
    } else if (TsOn_n) {
 8000ebc:	4b0d      	ldr	r3, [pc, #52]	; (8000ef4 <Start_FRT_controller+0xe0>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d0ab      	beq.n	8000e1c <Start_FRT_controller+0x8>
    	//Send CAN messages to close AIRs
    	while ((MotorStatus_R == STATUS_DERATING) && (MotorStatus_R == STATUS_DERATING)) {
 8000ec4:	e006      	b.n	8000ed4 <Start_FRT_controller+0xc0>
    		osDelay(50);
 8000ec6:	2032      	movs	r0, #50	; 0x32
 8000ec8:	f003 fad6 	bl	8004478 <osDelay>
    		HAL_GPIO_TogglePin(START_BTN_LED_EN_GPIO_Port, START_BTN_LED_EN_Pin);
 8000ecc:	2120      	movs	r1, #32
 8000ece:	480e      	ldr	r0, [pc, #56]	; (8000f08 <Start_FRT_controller+0xf4>)
 8000ed0:	f002 f965 	bl	800319e <HAL_GPIO_TogglePin>
    	while ((MotorStatus_R == STATUS_DERATING) && (MotorStatus_R == STATUS_DERATING)) {
 8000ed4:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <Start_FRT_controller+0xf8>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b06      	cmp	r3, #6
 8000eda:	d103      	bne.n	8000ee4 <Start_FRT_controller+0xd0>
 8000edc:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <Start_FRT_controller+0xf8>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b06      	cmp	r3, #6
 8000ee2:	d0f0      	beq.n	8000ec6 <Start_FRT_controller+0xb2>
    	}
		HAL_GPIO_WritePin(START_BTN_LED_EN_GPIO_Port, START_BTN_LED_EN_Pin, GPIO_PIN_SET);
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	2120      	movs	r1, #32
 8000ee8:	4807      	ldr	r0, [pc, #28]	; (8000f08 <Start_FRT_controller+0xf4>)
 8000eea:	f002 f93f 	bl	800316c <HAL_GPIO_WritePin>
    osDelay(50);
 8000eee:	e795      	b.n	8000e1c <Start_FRT_controller+0x8>
 8000ef0:	40021800 	.word	0x40021800
 8000ef4:	2000022b 	.word	0x2000022b
 8000ef8:	2000021c 	.word	0x2000021c
 8000efc:	2000022c 	.word	0x2000022c
 8000f00:	2000022d 	.word	0x2000022d
 8000f04:	200001b8 	.word	0x200001b8
 8000f08:	40020000 	.word	0x40020000
 8000f0c:	20000228 	.word	0x20000228

08000f10 <Start_AMK>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_AMK */
void Start_AMK(void *argument)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_AMK */
  /* Infinite loop */
  for(;;)
  {

    osDelay(5);
 8000f18:	2005      	movs	r0, #5
 8000f1a:	f003 faad 	bl	8004478 <osDelay>
    //Read accelerator position
    APPS1_VAL = APPS1_ADC_Percent();
 8000f1e:	f7ff fb11 	bl	8000544 <APPS1_ADC_Percent>
 8000f22:	4603      	mov	r3, r0
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	4b8a      	ldr	r3, [pc, #552]	; (8001150 <Start_AMK+0x240>)
 8000f28:	801a      	strh	r2, [r3, #0]
    APPS2_VAL = APPS2_ADC_Percent();
 8000f2a:	f7ff fb45 	bl	80005b8 <APPS2_ADC_Percent>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	4b88      	ldr	r3, [pc, #544]	; (8001154 <Start_AMK+0x244>)
 8000f34:	801a      	strh	r2, [r3, #0]
    BPPS_VAL = BPPS_ADC_Percent();
 8000f36:	f7ff fb79 	bl	800062c <BPPS_ADC_Percent>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	b29a      	uxth	r2, r3
 8000f3e:	4b86      	ldr	r3, [pc, #536]	; (8001158 <Start_AMK+0x248>)
 8000f40:	801a      	strh	r2, [r3, #0]

    APPS1_VAL = APPS1_VAL*500;
 8000f42:	4b83      	ldr	r3, [pc, #524]	; (8001150 <Start_AMK+0x240>)
 8000f44:	881b      	ldrh	r3, [r3, #0]
 8000f46:	461a      	mov	r2, r3
 8000f48:	0152      	lsls	r2, r2, #5
 8000f4a:	1ad2      	subs	r2, r2, r3
 8000f4c:	0092      	lsls	r2, r2, #2
 8000f4e:	4413      	add	r3, r2
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	b29a      	uxth	r2, r3
 8000f54:	4b7e      	ldr	r3, [pc, #504]	; (8001150 <Start_AMK+0x240>)
 8000f56:	801a      	strh	r2, [r3, #0]
    //Read brake pressure
    if (BPPS_VAL > 0) {
 8000f58:	4b7f      	ldr	r3, [pc, #508]	; (8001158 <Start_AMK+0x248>)
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d008      	beq.n	8000f72 <Start_AMK+0x62>
    	BrakeOn = 1;
 8000f60:	4b7e      	ldr	r3, [pc, #504]	; (800115c <Start_AMK+0x24c>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	701a      	strb	r2, [r3, #0]
    	HAL_GPIO_WritePin(BRAKE_LIGHT_EN_GPIO_Port, BRAKE_LIGHT_EN_Pin, GPIO_PIN_SET);
 8000f66:	2201      	movs	r2, #1
 8000f68:	2101      	movs	r1, #1
 8000f6a:	487d      	ldr	r0, [pc, #500]	; (8001160 <Start_AMK+0x250>)
 8000f6c:	f002 f8fe 	bl	800316c <HAL_GPIO_WritePin>
 8000f70:	e007      	b.n	8000f82 <Start_AMK+0x72>
    } else {
    	BrakeOn = 0;
 8000f72:	4b7a      	ldr	r3, [pc, #488]	; (800115c <Start_AMK+0x24c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	701a      	strb	r2, [r3, #0]
    	HAL_GPIO_WritePin(BRAKE_LIGHT_EN_GPIO_Port, BRAKE_LIGHT_EN_Pin, GPIO_PIN_RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	4878      	ldr	r0, [pc, #480]	; (8001160 <Start_AMK+0x250>)
 8000f7e:	f002 f8f5 	bl	800316c <HAL_GPIO_WritePin>
    }
    //Check if APPS and brake are both on
    if (BrakeOn && (APPS1_VAL > 25)) {
 8000f82:	4b76      	ldr	r3, [pc, #472]	; (800115c <Start_AMK+0x24c>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d007      	beq.n	8000f9a <Start_AMK+0x8a>
 8000f8a:	4b71      	ldr	r3, [pc, #452]	; (8001150 <Start_AMK+0x240>)
 8000f8c:	881b      	ldrh	r3, [r3, #0]
 8000f8e:	2b19      	cmp	r3, #25
 8000f90:	d903      	bls.n	8000f9a <Start_AMK+0x8a>
    	PedalConflict = 1;
 8000f92:	4b74      	ldr	r3, [pc, #464]	; (8001164 <Start_AMK+0x254>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	701a      	strb	r2, [r3, #0]
 8000f98:	e00d      	b.n	8000fb6 <Start_AMK+0xa6>
    } else if ((BrakeOn == 0) && (APPS1_VAL < 5)) {
 8000f9a:	4b70      	ldr	r3, [pc, #448]	; (800115c <Start_AMK+0x24c>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	f083 0301 	eor.w	r3, r3, #1
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d006      	beq.n	8000fb6 <Start_AMK+0xa6>
 8000fa8:	4b69      	ldr	r3, [pc, #420]	; (8001150 <Start_AMK+0x240>)
 8000faa:	881b      	ldrh	r3, [r3, #0]
 8000fac:	2b04      	cmp	r3, #4
 8000fae:	d802      	bhi.n	8000fb6 <Start_AMK+0xa6>
    	PedalConflict = 0;
 8000fb0:	4b6c      	ldr	r3, [pc, #432]	; (8001164 <Start_AMK+0x254>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	701a      	strb	r2, [r3, #0]
    }
    //Check for accelerator plausibility
    if (abs(APPS1_VAL - APPS2_VAL) >= 10){
 8000fb6:	4b66      	ldr	r3, [pc, #408]	; (8001150 <Start_AMK+0x240>)
 8000fb8:	881b      	ldrh	r3, [r3, #0]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	4b65      	ldr	r3, [pc, #404]	; (8001154 <Start_AMK+0x244>)
 8000fbe:	881b      	ldrh	r3, [r3, #0]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	bfb8      	it	lt
 8000fc6:	425b      	neglt	r3, r3
 8000fc8:	2b09      	cmp	r3, #9
 8000fca:	dd02      	ble.n	8000fd2 <Start_AMK+0xc2>
    	ReadyToDrive = 0;
 8000fcc:	4b66      	ldr	r3, [pc, #408]	; (8001168 <Start_AMK+0x258>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	701a      	strb	r2, [r3, #0]
    }

	//HAL_GPIO_WritePin(BRAKE_LIGHT_EN_GPIO_Port, BRAKE_LIGHT_EN_Pin, GPIO_PIN_SET);
	//HAL_GPIO_WritePin(RTDS_EN_GPIO_Port, RTDS_EN_Pin, GPIO_PIN_SET);

    if ((MotorStatus_R == STATUS_SYSTEM_READY) && (MotorStatus_L == STATUS_SYSTEM_READY)) {
 8000fd2:	4b66      	ldr	r3, [pc, #408]	; (800116c <Start_AMK+0x25c>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d10d      	bne.n	8000ff6 <Start_AMK+0xe6>
 8000fda:	4b65      	ldr	r3, [pc, #404]	; (8001170 <Start_AMK+0x260>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d109      	bne.n	8000ff6 <Start_AMK+0xe6>
    	//Perform AMK start-up sequence
    	AMK_TxData_R[1] = 0x02;
 8000fe2:	4b64      	ldr	r3, [pc, #400]	; (8001174 <Start_AMK+0x264>)
 8000fe4:	2202      	movs	r2, #2
 8000fe6:	705a      	strb	r2, [r3, #1]
    	AMK_TxData_L[1] = 0x02;
 8000fe8:	4b63      	ldr	r3, [pc, #396]	; (8001178 <Start_AMK+0x268>)
 8000fea:	2202      	movs	r2, #2
 8000fec:	705a      	strb	r2, [r3, #1]
		ControlStatus = CONTROL_DC_ON;
 8000fee:	4b63      	ldr	r3, [pc, #396]	; (800117c <Start_AMK+0x26c>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	701a      	strb	r2, [r3, #0]
 8000ff4:	e0ea      	b.n	80011cc <Start_AMK+0x2bc>
    } else if ((MotorStatus_R == STATUS_QUIT_DC_ON) && (MotorStatus_L == STATUS_QUIT_DC_ON)) {
 8000ff6:	4b5d      	ldr	r3, [pc, #372]	; (800116c <Start_AMK+0x25c>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b03      	cmp	r3, #3
 8000ffc:	d117      	bne.n	800102e <Start_AMK+0x11e>
 8000ffe:	4b5c      	ldr	r3, [pc, #368]	; (8001170 <Start_AMK+0x260>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b03      	cmp	r3, #3
 8001004:	d113      	bne.n	800102e <Start_AMK+0x11e>
		AMK_TxData_L[1] = 0x07;
 8001006:	4b5c      	ldr	r3, [pc, #368]	; (8001178 <Start_AMK+0x268>)
 8001008:	2207      	movs	r2, #7
 800100a:	705a      	strb	r2, [r3, #1]
		AMK_TxData_R[1] = 0x07;
 800100c:	4b59      	ldr	r3, [pc, #356]	; (8001174 <Start_AMK+0x264>)
 800100e:	2207      	movs	r2, #7
 8001010:	705a      	strb	r2, [r3, #1]
		memset(&AMK_TxData_R[2],0x00, 4*sizeof(uint8_t));
 8001012:	2204      	movs	r2, #4
 8001014:	2100      	movs	r1, #0
 8001016:	485a      	ldr	r0, [pc, #360]	; (8001180 <Start_AMK+0x270>)
 8001018:	f006 f854 	bl	80070c4 <memset>
		memset(&AMK_TxData_L[2],0x00, 4*sizeof(uint8_t));
 800101c:	2204      	movs	r2, #4
 800101e:	2100      	movs	r1, #0
 8001020:	4858      	ldr	r0, [pc, #352]	; (8001184 <Start_AMK+0x274>)
 8001022:	f006 f84f 	bl	80070c4 <memset>
		ControlStatus = CONTROL_ENABLE;
 8001026:	4b55      	ldr	r3, [pc, #340]	; (800117c <Start_AMK+0x26c>)
 8001028:	2202      	movs	r2, #2
 800102a:	701a      	strb	r2, [r3, #0]
 800102c:	e0ce      	b.n	80011cc <Start_AMK+0x2bc>
    } else if ((MotorStatus_R == STATUS_INVERTER_ON) && (MotorStatus_L == STATUS_INVERTER_ON)) {
 800102e:	4b4f      	ldr	r3, [pc, #316]	; (800116c <Start_AMK+0x25c>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b04      	cmp	r3, #4
 8001034:	d11c      	bne.n	8001070 <Start_AMK+0x160>
 8001036:	4b4e      	ldr	r3, [pc, #312]	; (8001170 <Start_AMK+0x260>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b04      	cmp	r3, #4
 800103c:	d118      	bne.n	8001070 <Start_AMK+0x160>
    	osThreadResume(controllerStartHandle);
 800103e:	4b52      	ldr	r3, [pc, #328]	; (8001188 <Start_AMK+0x278>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4618      	mov	r0, r3
 8001044:	f003 f9e4 	bl	8004410 <osThreadResume>
    	AMK_TxData_L[1] = 0x07;
 8001048:	4b4b      	ldr	r3, [pc, #300]	; (8001178 <Start_AMK+0x268>)
 800104a:	2207      	movs	r2, #7
 800104c:	705a      	strb	r2, [r3, #1]
    	AMK_TxData_R[1] = 0x07;
 800104e:	4b49      	ldr	r3, [pc, #292]	; (8001174 <Start_AMK+0x264>)
 8001050:	2207      	movs	r2, #7
 8001052:	705a      	strb	r2, [r3, #1]
    	memset(&AMK_TxData_R[2],0x00, 4*sizeof(uint8_t));
 8001054:	2204      	movs	r2, #4
 8001056:	2100      	movs	r1, #0
 8001058:	4849      	ldr	r0, [pc, #292]	; (8001180 <Start_AMK+0x270>)
 800105a:	f006 f833 	bl	80070c4 <memset>
    	memset(&AMK_TxData_L[2],0x00, 4*sizeof(uint8_t));
 800105e:	2204      	movs	r2, #4
 8001060:	2100      	movs	r1, #0
 8001062:	4848      	ldr	r0, [pc, #288]	; (8001184 <Start_AMK+0x274>)
 8001064:	f006 f82e 	bl	80070c4 <memset>
    	ControlStatus = CONTROL_INVERTER_ON;
 8001068:	4b44      	ldr	r3, [pc, #272]	; (800117c <Start_AMK+0x26c>)
 800106a:	2203      	movs	r2, #3
 800106c:	701a      	strb	r2, [r3, #0]
 800106e:	e0ad      	b.n	80011cc <Start_AMK+0x2bc>
    } else if ((MotorStatus_R == STATUS_QUIT_INVERTER_ON) && (MotorStatus_L == STATUS_QUIT_INVERTER_ON) && TsOn_n) {
 8001070:	4b3e      	ldr	r3, [pc, #248]	; (800116c <Start_AMK+0x25c>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b05      	cmp	r3, #5
 8001076:	d14e      	bne.n	8001116 <Start_AMK+0x206>
 8001078:	4b3d      	ldr	r3, [pc, #244]	; (8001170 <Start_AMK+0x260>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b05      	cmp	r3, #5
 800107e:	d14a      	bne.n	8001116 <Start_AMK+0x206>
 8001080:	4b42      	ldr	r3, [pc, #264]	; (800118c <Start_AMK+0x27c>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d046      	beq.n	8001116 <Start_AMK+0x206>
    	if (ReadyToDrive && (PedalConflict == 0)) {
 8001088:	4b37      	ldr	r3, [pc, #220]	; (8001168 <Start_AMK+0x258>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d02e      	beq.n	80010ee <Start_AMK+0x1de>
 8001090:	4b34      	ldr	r3, [pc, #208]	; (8001164 <Start_AMK+0x254>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	f083 0301 	eor.w	r3, r3, #1
 8001098:	b2db      	uxtb	r3, r3
 800109a:	2b00      	cmp	r3, #0
 800109c:	d027      	beq.n	80010ee <Start_AMK+0x1de>
    		AMK_TxData_R[1] = 0x07;
 800109e:	4b35      	ldr	r3, [pc, #212]	; (8001174 <Start_AMK+0x264>)
 80010a0:	2207      	movs	r2, #7
 80010a2:	705a      	strb	r2, [r3, #1]
			AMK_TxData_L[1] = 0x07;
 80010a4:	4b34      	ldr	r3, [pc, #208]	; (8001178 <Start_AMK+0x268>)
 80010a6:	2207      	movs	r2, #7
 80010a8:	705a      	strb	r2, [r3, #1]

			AMK_TxData_R[2] = APPS1_VAL & 0xFF;
 80010aa:	4b29      	ldr	r3, [pc, #164]	; (8001150 <Start_AMK+0x240>)
 80010ac:	881b      	ldrh	r3, [r3, #0]
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	4b30      	ldr	r3, [pc, #192]	; (8001174 <Start_AMK+0x264>)
 80010b2:	709a      	strb	r2, [r3, #2]
			AMK_TxData_R[3] = (APPS1_VAL >> 8) & 0xFF;
 80010b4:	4b26      	ldr	r3, [pc, #152]	; (8001150 <Start_AMK+0x240>)
 80010b6:	881b      	ldrh	r3, [r3, #0]
 80010b8:	0a1b      	lsrs	r3, r3, #8
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	4b2d      	ldr	r3, [pc, #180]	; (8001174 <Start_AMK+0x264>)
 80010c0:	70da      	strb	r2, [r3, #3]
//			AMK_TxData_R[2] = 0xFF;
//			AMK_TxData_R[3] = 0x01;
			AMK_TxData_R[4] = 0x32; //set positive torque request to 50
 80010c2:	4b2c      	ldr	r3, [pc, #176]	; (8001174 <Start_AMK+0x264>)
 80010c4:	2232      	movs	r2, #50	; 0x32
 80010c6:	711a      	strb	r2, [r3, #4]

			AMK_TxData_L[2] = APPS1_VAL & 0xFF;
 80010c8:	4b21      	ldr	r3, [pc, #132]	; (8001150 <Start_AMK+0x240>)
 80010ca:	881b      	ldrh	r3, [r3, #0]
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	4b2a      	ldr	r3, [pc, #168]	; (8001178 <Start_AMK+0x268>)
 80010d0:	709a      	strb	r2, [r3, #2]
			AMK_TxData_L[3] = (APPS1_VAL >> 8) & 0xFF;
 80010d2:	4b1f      	ldr	r3, [pc, #124]	; (8001150 <Start_AMK+0x240>)
 80010d4:	881b      	ldrh	r3, [r3, #0]
 80010d6:	0a1b      	lsrs	r3, r3, #8
 80010d8:	b29b      	uxth	r3, r3
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	4b26      	ldr	r3, [pc, #152]	; (8001178 <Start_AMK+0x268>)
 80010de:	70da      	strb	r2, [r3, #3]
//			AMK_TxData_L[2] = 0xFF;
//			AMK_TxData_L[3] = 0x01;
			AMK_TxData_L[4] = 0x32;
 80010e0:	4b25      	ldr	r3, [pc, #148]	; (8001178 <Start_AMK+0x268>)
 80010e2:	2232      	movs	r2, #50	; 0x32
 80010e4:	711a      	strb	r2, [r3, #4]
			ControlStatus = CONTROL_RUNNING;
 80010e6:	4b25      	ldr	r3, [pc, #148]	; (800117c <Start_AMK+0x26c>)
 80010e8:	2207      	movs	r2, #7
 80010ea:	701a      	strb	r2, [r3, #0]
    	if (ReadyToDrive && (PedalConflict == 0)) {
 80010ec:	e06e      	b.n	80011cc <Start_AMK+0x2bc>
    	} else {
    		AMK_TxData_R[1] = 0x07;
 80010ee:	4b21      	ldr	r3, [pc, #132]	; (8001174 <Start_AMK+0x264>)
 80010f0:	2207      	movs	r2, #7
 80010f2:	705a      	strb	r2, [r3, #1]
    		AMK_TxData_L[1] = 0x07;
 80010f4:	4b20      	ldr	r3, [pc, #128]	; (8001178 <Start_AMK+0x268>)
 80010f6:	2207      	movs	r2, #7
 80010f8:	705a      	strb	r2, [r3, #1]
    		memset(&AMK_TxData_R[2],0x00, 4*sizeof(uint8_t));
 80010fa:	2204      	movs	r2, #4
 80010fc:	2100      	movs	r1, #0
 80010fe:	4820      	ldr	r0, [pc, #128]	; (8001180 <Start_AMK+0x270>)
 8001100:	f005 ffe0 	bl	80070c4 <memset>
    		memset(&AMK_TxData_L[2],0x00, 4*sizeof(uint8_t));
 8001104:	2204      	movs	r2, #4
 8001106:	2100      	movs	r1, #0
 8001108:	481e      	ldr	r0, [pc, #120]	; (8001184 <Start_AMK+0x274>)
 800110a:	f005 ffdb 	bl	80070c4 <memset>
    		ControlStatus = CONTROL_TS_READY;
 800110e:	4b1b      	ldr	r3, [pc, #108]	; (800117c <Start_AMK+0x26c>)
 8001110:	2204      	movs	r2, #4
 8001112:	701a      	strb	r2, [r3, #0]
    	if (ReadyToDrive && (PedalConflict == 0)) {
 8001114:	e05a      	b.n	80011cc <Start_AMK+0x2bc>
    	}
    } else if (MotorStatus_R == STATUS_ERROR) {
 8001116:	4b15      	ldr	r3, [pc, #84]	; (800116c <Start_AMK+0x25c>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b07      	cmp	r3, #7
 800111c:	d109      	bne.n	8001132 <Start_AMK+0x222>
    	ReadyToDrive = 0;
 800111e:	4b12      	ldr	r3, [pc, #72]	; (8001168 <Start_AMK+0x258>)
 8001120:	2200      	movs	r2, #0
 8001122:	701a      	strb	r2, [r3, #0]
    	AMK_TxData_R[1] = 0x08;
 8001124:	4b13      	ldr	r3, [pc, #76]	; (8001174 <Start_AMK+0x264>)
 8001126:	2208      	movs	r2, #8
 8001128:	705a      	strb	r2, [r3, #1]
		ControlStatus = CONTROL_ERROR_RESET_RIGHT;
 800112a:	4b14      	ldr	r3, [pc, #80]	; (800117c <Start_AMK+0x26c>)
 800112c:	2205      	movs	r2, #5
 800112e:	701a      	strb	r2, [r3, #0]
 8001130:	e04c      	b.n	80011cc <Start_AMK+0x2bc>
    } else if (MotorStatus_L == STATUS_ERROR) {
 8001132:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <Start_AMK+0x260>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b07      	cmp	r3, #7
 8001138:	d12a      	bne.n	8001190 <Start_AMK+0x280>
    	ReadyToDrive = 0;
 800113a:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <Start_AMK+0x258>)
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]
    	AMK_TxData_L[1] = 0x08;
 8001140:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <Start_AMK+0x268>)
 8001142:	2208      	movs	r2, #8
 8001144:	705a      	strb	r2, [r3, #1]
		ControlStatus = CONTROL_ERROR_RESET_LEFT;
 8001146:	4b0d      	ldr	r3, [pc, #52]	; (800117c <Start_AMK+0x26c>)
 8001148:	2206      	movs	r2, #6
 800114a:	701a      	strb	r2, [r3, #0]
 800114c:	e03e      	b.n	80011cc <Start_AMK+0x2bc>
 800114e:	bf00      	nop
 8001150:	20000230 	.word	0x20000230
 8001154:	20000232 	.word	0x20000232
 8001158:	20000234 	.word	0x20000234
 800115c:	2000022c 	.word	0x2000022c
 8001160:	40021800 	.word	0x40021800
 8001164:	2000022e 	.word	0x2000022e
 8001168:	2000022d 	.word	0x2000022d
 800116c:	20000228 	.word	0x20000228
 8001170:	20000229 	.word	0x20000229
 8001174:	2000020c 	.word	0x2000020c
 8001178:	20000214 	.word	0x20000214
 800117c:	2000022a 	.word	0x2000022a
 8001180:	2000020e 	.word	0x2000020e
 8001184:	20000216 	.word	0x20000216
 8001188:	200001b8 	.word	0x200001b8
 800118c:	2000022b 	.word	0x2000022b
    } else if ((MotorStatus_R == STATUS_DERATING) && (MotorStatus_L == STATUS_DERATING)) {
 8001190:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <Start_AMK+0x2ec>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b06      	cmp	r3, #6
 8001196:	d103      	bne.n	80011a0 <Start_AMK+0x290>
 8001198:	4b19      	ldr	r3, [pc, #100]	; (8001200 <Start_AMK+0x2f0>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b06      	cmp	r3, #6
 800119e:	d015      	beq.n	80011cc <Start_AMK+0x2bc>
    	//TsOn_n = 0;
    } else {
    	ReadyToDrive = 0;
 80011a0:	4b18      	ldr	r3, [pc, #96]	; (8001204 <Start_AMK+0x2f4>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	701a      	strb	r2, [r3, #0]
    	AMK_TxData_L[1] = 0x07;
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <Start_AMK+0x2f8>)
 80011a8:	2207      	movs	r2, #7
 80011aa:	705a      	strb	r2, [r3, #1]
		AMK_TxData_R[1] = 0x07;
 80011ac:	4b17      	ldr	r3, [pc, #92]	; (800120c <Start_AMK+0x2fc>)
 80011ae:	2207      	movs	r2, #7
 80011b0:	705a      	strb	r2, [r3, #1]
		memset(&AMK_TxData_R[2],0x00, 4*sizeof(uint8_t));
 80011b2:	2204      	movs	r2, #4
 80011b4:	2100      	movs	r1, #0
 80011b6:	4816      	ldr	r0, [pc, #88]	; (8001210 <Start_AMK+0x300>)
 80011b8:	f005 ff84 	bl	80070c4 <memset>
		memset(&AMK_TxData_L[2],0x00, 4*sizeof(uint8_t));
 80011bc:	2204      	movs	r2, #4
 80011be:	2100      	movs	r1, #0
 80011c0:	4814      	ldr	r0, [pc, #80]	; (8001214 <Start_AMK+0x304>)
 80011c2:	f005 ff7f 	bl	80070c4 <memset>
    	ControlStatus = CONTROL_UNKNOWN;
 80011c6:	4b14      	ldr	r3, [pc, #80]	; (8001218 <Start_AMK+0x308>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	701a      	strb	r2, [r3, #0]
    }

	HAL_CAN_AddTxMessage(&hcan1, &AMK_TxHeader_R, AMK_TxData_R, &TxMailbox);
 80011cc:	4b13      	ldr	r3, [pc, #76]	; (800121c <Start_AMK+0x30c>)
 80011ce:	4a0f      	ldr	r2, [pc, #60]	; (800120c <Start_AMK+0x2fc>)
 80011d0:	4913      	ldr	r1, [pc, #76]	; (8001220 <Start_AMK+0x310>)
 80011d2:	4814      	ldr	r0, [pc, #80]	; (8001224 <Start_AMK+0x314>)
 80011d4:	f001 f8ec 	bl	80023b0 <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&hcan1, &AMK_TxHeader_L, AMK_TxData_L, &TxMailbox);
 80011d8:	4b10      	ldr	r3, [pc, #64]	; (800121c <Start_AMK+0x30c>)
 80011da:	4a0b      	ldr	r2, [pc, #44]	; (8001208 <Start_AMK+0x2f8>)
 80011dc:	4912      	ldr	r1, [pc, #72]	; (8001228 <Start_AMK+0x318>)
 80011de:	4811      	ldr	r0, [pc, #68]	; (8001224 <Start_AMK+0x314>)
 80011e0:	f001 f8e6 	bl	80023b0 <HAL_CAN_AddTxMessage>
	memset(&AMK_TxData_R[0],0x00, 8*sizeof(uint8_t));
 80011e4:	2208      	movs	r2, #8
 80011e6:	2100      	movs	r1, #0
 80011e8:	4808      	ldr	r0, [pc, #32]	; (800120c <Start_AMK+0x2fc>)
 80011ea:	f005 ff6b 	bl	80070c4 <memset>
	memset(&AMK_TxData_L[0],0x00, 8*sizeof(uint8_t));
 80011ee:	2208      	movs	r2, #8
 80011f0:	2100      	movs	r1, #0
 80011f2:	4805      	ldr	r0, [pc, #20]	; (8001208 <Start_AMK+0x2f8>)
 80011f4:	f005 ff66 	bl	80070c4 <memset>
    osDelay(5);
 80011f8:	e68e      	b.n	8000f18 <Start_AMK+0x8>
 80011fa:	bf00      	nop
 80011fc:	20000228 	.word	0x20000228
 8001200:	20000229 	.word	0x20000229
 8001204:	2000022d 	.word	0x2000022d
 8001208:	20000214 	.word	0x20000214
 800120c:	2000020c 	.word	0x2000020c
 8001210:	2000020e 	.word	0x2000020e
 8001214:	20000216 	.word	0x20000216
 8001218:	2000022a 	.word	0x2000022a
 800121c:	20000224 	.word	0x20000224
 8001220:	200001c0 	.word	0x200001c0
 8001224:	20000168 	.word	0x20000168
 8001228:	200001d8 	.word	0x200001d8

0800122c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a04      	ldr	r2, [pc, #16]	; (800124c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d101      	bne.n	8001242 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800123e:	f000 fa3d 	bl	80016bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40001000 	.word	0x40001000

08001250 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001254:	b672      	cpsid	i
}
 8001256:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 1);
 8001258:	2201      	movs	r2, #1
 800125a:	2108      	movs	r1, #8
 800125c:	4801      	ldr	r0, [pc, #4]	; (8001264 <Error_Handler+0x14>)
 800125e:	f001 ff85 	bl	800316c <HAL_GPIO_WritePin>
  while (1)
 8001262:	e7fe      	b.n	8001262 <Error_Handler+0x12>
 8001264:	40020000 	.word	0x40020000

08001268 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800126e:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <HAL_MspInit+0x4c>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	4a10      	ldr	r2, [pc, #64]	; (80012b4 <HAL_MspInit+0x4c>)
 8001274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001278:	6413      	str	r3, [r2, #64]	; 0x40
 800127a:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <HAL_MspInit+0x4c>)
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001286:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <HAL_MspInit+0x4c>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128a:	4a0a      	ldr	r2, [pc, #40]	; (80012b4 <HAL_MspInit+0x4c>)
 800128c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001290:	6453      	str	r3, [r2, #68]	; 0x44
 8001292:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <HAL_MspInit+0x4c>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800129a:	603b      	str	r3, [r7, #0]
 800129c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800129e:	2200      	movs	r2, #0
 80012a0:	210f      	movs	r1, #15
 80012a2:	f06f 0001 	mvn.w	r0, #1
 80012a6:	f001 fd73 	bl	8002d90 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40023800 	.word	0x40023800

080012b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08e      	sub	sp, #56	; 0x38
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a3f      	ldr	r2, [pc, #252]	; (80013d4 <HAL_ADC_MspInit+0x11c>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d124      	bne.n	8001324 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012da:	4b3f      	ldr	r3, [pc, #252]	; (80013d8 <HAL_ADC_MspInit+0x120>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012de:	4a3e      	ldr	r2, [pc, #248]	; (80013d8 <HAL_ADC_MspInit+0x120>)
 80012e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e4:	6453      	str	r3, [r2, #68]	; 0x44
 80012e6:	4b3c      	ldr	r3, [pc, #240]	; (80013d8 <HAL_ADC_MspInit+0x120>)
 80012e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ee:	623b      	str	r3, [r7, #32]
 80012f0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f2:	4b39      	ldr	r3, [pc, #228]	; (80013d8 <HAL_ADC_MspInit+0x120>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a38      	ldr	r2, [pc, #224]	; (80013d8 <HAL_ADC_MspInit+0x120>)
 80012f8:	f043 0304 	orr.w	r3, r3, #4
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b36      	ldr	r3, [pc, #216]	; (80013d8 <HAL_ADC_MspInit+0x120>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0304 	and.w	r3, r3, #4
 8001306:	61fb      	str	r3, [r7, #28]
 8001308:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = APPS1_Pin;
 800130a:	2301      	movs	r3, #1
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800130e:	2303      	movs	r3, #3
 8001310:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(APPS1_GPIO_Port, &GPIO_InitStruct);
 8001316:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800131a:	4619      	mov	r1, r3
 800131c:	482f      	ldr	r0, [pc, #188]	; (80013dc <HAL_ADC_MspInit+0x124>)
 800131e:	f001 fd61 	bl	8002de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001322:	e052      	b.n	80013ca <HAL_ADC_MspInit+0x112>
  else if(hadc->Instance==ADC2)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a2d      	ldr	r2, [pc, #180]	; (80013e0 <HAL_ADC_MspInit+0x128>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d124      	bne.n	8001378 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800132e:	4b2a      	ldr	r3, [pc, #168]	; (80013d8 <HAL_ADC_MspInit+0x120>)
 8001330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001332:	4a29      	ldr	r2, [pc, #164]	; (80013d8 <HAL_ADC_MspInit+0x120>)
 8001334:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001338:	6453      	str	r3, [r2, #68]	; 0x44
 800133a:	4b27      	ldr	r3, [pc, #156]	; (80013d8 <HAL_ADC_MspInit+0x120>)
 800133c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001342:	61bb      	str	r3, [r7, #24]
 8001344:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001346:	4b24      	ldr	r3, [pc, #144]	; (80013d8 <HAL_ADC_MspInit+0x120>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a23      	ldr	r2, [pc, #140]	; (80013d8 <HAL_ADC_MspInit+0x120>)
 800134c:	f043 0304 	orr.w	r3, r3, #4
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b21      	ldr	r3, [pc, #132]	; (80013d8 <HAL_ADC_MspInit+0x120>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f003 0304 	and.w	r3, r3, #4
 800135a:	617b      	str	r3, [r7, #20]
 800135c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = APPS2_Pin;
 800135e:	2302      	movs	r3, #2
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001362:	2303      	movs	r3, #3
 8001364:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(APPS2_GPIO_Port, &GPIO_InitStruct);
 800136a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136e:	4619      	mov	r1, r3
 8001370:	481a      	ldr	r0, [pc, #104]	; (80013dc <HAL_ADC_MspInit+0x124>)
 8001372:	f001 fd37 	bl	8002de4 <HAL_GPIO_Init>
}
 8001376:	e028      	b.n	80013ca <HAL_ADC_MspInit+0x112>
  else if(hadc->Instance==ADC3)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a19      	ldr	r2, [pc, #100]	; (80013e4 <HAL_ADC_MspInit+0x12c>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d123      	bne.n	80013ca <HAL_ADC_MspInit+0x112>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <HAL_ADC_MspInit+0x120>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001386:	4a14      	ldr	r2, [pc, #80]	; (80013d8 <HAL_ADC_MspInit+0x120>)
 8001388:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800138c:	6453      	str	r3, [r2, #68]	; 0x44
 800138e:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <HAL_ADC_MspInit+0x120>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001392:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001396:	613b      	str	r3, [r7, #16]
 8001398:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800139a:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <HAL_ADC_MspInit+0x120>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	4a0e      	ldr	r2, [pc, #56]	; (80013d8 <HAL_ADC_MspInit+0x120>)
 80013a0:	f043 0304 	orr.w	r3, r3, #4
 80013a4:	6313      	str	r3, [r2, #48]	; 0x30
 80013a6:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <HAL_ADC_MspInit+0x120>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	f003 0304 	and.w	r3, r3, #4
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEERING_ANGLE_SENSOR_Pin|BPPS_BUFFERED_Pin;
 80013b2:	230c      	movs	r3, #12
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013b6:	2303      	movs	r3, #3
 80013b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c2:	4619      	mov	r1, r3
 80013c4:	4805      	ldr	r0, [pc, #20]	; (80013dc <HAL_ADC_MspInit+0x124>)
 80013c6:	f001 fd0d 	bl	8002de4 <HAL_GPIO_Init>
}
 80013ca:	bf00      	nop
 80013cc:	3738      	adds	r7, #56	; 0x38
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40012000 	.word	0x40012000
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40020800 	.word	0x40020800
 80013e0:	40012100 	.word	0x40012100
 80013e4:	40012200 	.word	0x40012200

080013e8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08c      	sub	sp, #48	; 0x30
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	f107 031c 	add.w	r3, r7, #28
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a33      	ldr	r2, [pc, #204]	; (80014d4 <HAL_CAN_MspInit+0xec>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d131      	bne.n	800146e <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800140a:	4b33      	ldr	r3, [pc, #204]	; (80014d8 <HAL_CAN_MspInit+0xf0>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	4a32      	ldr	r2, [pc, #200]	; (80014d8 <HAL_CAN_MspInit+0xf0>)
 8001410:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001414:	6413      	str	r3, [r2, #64]	; 0x40
 8001416:	4b30      	ldr	r3, [pc, #192]	; (80014d8 <HAL_CAN_MspInit+0xf0>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800141e:	61bb      	str	r3, [r7, #24]
 8001420:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001422:	4b2d      	ldr	r3, [pc, #180]	; (80014d8 <HAL_CAN_MspInit+0xf0>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a2c      	ldr	r2, [pc, #176]	; (80014d8 <HAL_CAN_MspInit+0xf0>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b2a      	ldr	r3, [pc, #168]	; (80014d8 <HAL_CAN_MspInit+0xf0>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	617b      	str	r3, [r7, #20]
 8001438:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800143a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800143e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001440:	2302      	movs	r3, #2
 8001442:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001448:	2303      	movs	r3, #3
 800144a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800144c:	2309      	movs	r3, #9
 800144e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001450:	f107 031c 	add.w	r3, r7, #28
 8001454:	4619      	mov	r1, r3
 8001456:	4821      	ldr	r0, [pc, #132]	; (80014dc <HAL_CAN_MspInit+0xf4>)
 8001458:	f001 fcc4 	bl	8002de4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800145c:	2200      	movs	r2, #0
 800145e:	2105      	movs	r1, #5
 8001460:	2014      	movs	r0, #20
 8001462:	f001 fc95 	bl	8002d90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001466:	2014      	movs	r0, #20
 8001468:	f001 fcae 	bl	8002dc8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }

}
 800146c:	e02d      	b.n	80014ca <HAL_CAN_MspInit+0xe2>
  else if(hcan->Instance==CAN3)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a1b      	ldr	r2, [pc, #108]	; (80014e0 <HAL_CAN_MspInit+0xf8>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d128      	bne.n	80014ca <HAL_CAN_MspInit+0xe2>
    __HAL_RCC_CAN3_CLK_ENABLE();
 8001478:	4b17      	ldr	r3, [pc, #92]	; (80014d8 <HAL_CAN_MspInit+0xf0>)
 800147a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147c:	4a16      	ldr	r2, [pc, #88]	; (80014d8 <HAL_CAN_MspInit+0xf0>)
 800147e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001482:	6413      	str	r3, [r2, #64]	; 0x40
 8001484:	4b14      	ldr	r3, [pc, #80]	; (80014d8 <HAL_CAN_MspInit+0xf0>)
 8001486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001488:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800148c:	613b      	str	r3, [r7, #16]
 800148e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001490:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <HAL_CAN_MspInit+0xf0>)
 8001492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001494:	4a10      	ldr	r2, [pc, #64]	; (80014d8 <HAL_CAN_MspInit+0xf0>)
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	6313      	str	r3, [r2, #48]	; 0x30
 800149c:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <HAL_CAN_MspInit+0xf0>)
 800149e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 80014a8:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80014ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ae:	2302      	movs	r3, #2
 80014b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b6:	2303      	movs	r3, #3
 80014b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 80014ba:	230b      	movs	r3, #11
 80014bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014be:	f107 031c 	add.w	r3, r7, #28
 80014c2:	4619      	mov	r1, r3
 80014c4:	4805      	ldr	r0, [pc, #20]	; (80014dc <HAL_CAN_MspInit+0xf4>)
 80014c6:	f001 fc8d 	bl	8002de4 <HAL_GPIO_Init>
}
 80014ca:	bf00      	nop
 80014cc:	3730      	adds	r7, #48	; 0x30
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40006400 	.word	0x40006400
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40020000 	.word	0x40020000
 80014e0:	40003400 	.word	0x40003400

080014e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08e      	sub	sp, #56	; 0x38
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80014ec:	2300      	movs	r3, #0
 80014ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80014f0:	2300      	movs	r3, #0
 80014f2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80014f4:	4b33      	ldr	r3, [pc, #204]	; (80015c4 <HAL_InitTick+0xe0>)
 80014f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f8:	4a32      	ldr	r2, [pc, #200]	; (80015c4 <HAL_InitTick+0xe0>)
 80014fa:	f043 0310 	orr.w	r3, r3, #16
 80014fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001500:	4b30      	ldr	r3, [pc, #192]	; (80015c4 <HAL_InitTick+0xe0>)
 8001502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001504:	f003 0310 	and.w	r3, r3, #16
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800150c:	f107 0210 	add.w	r2, r7, #16
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	4611      	mov	r1, r2
 8001516:	4618      	mov	r0, r3
 8001518:	f002 fb1c 	bl	8003b54 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800151c:	6a3b      	ldr	r3, [r7, #32]
 800151e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001522:	2b00      	cmp	r3, #0
 8001524:	d103      	bne.n	800152e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001526:	f002 fb01 	bl	8003b2c <HAL_RCC_GetPCLK1Freq>
 800152a:	6378      	str	r0, [r7, #52]	; 0x34
 800152c:	e004      	b.n	8001538 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800152e:	f002 fafd 	bl	8003b2c <HAL_RCC_GetPCLK1Freq>
 8001532:	4603      	mov	r3, r0
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800153a:	4a23      	ldr	r2, [pc, #140]	; (80015c8 <HAL_InitTick+0xe4>)
 800153c:	fba2 2303 	umull	r2, r3, r2, r3
 8001540:	0c9b      	lsrs	r3, r3, #18
 8001542:	3b01      	subs	r3, #1
 8001544:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001546:	4b21      	ldr	r3, [pc, #132]	; (80015cc <HAL_InitTick+0xe8>)
 8001548:	4a21      	ldr	r2, [pc, #132]	; (80015d0 <HAL_InitTick+0xec>)
 800154a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800154c:	4b1f      	ldr	r3, [pc, #124]	; (80015cc <HAL_InitTick+0xe8>)
 800154e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001552:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001554:	4a1d      	ldr	r2, [pc, #116]	; (80015cc <HAL_InitTick+0xe8>)
 8001556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001558:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800155a:	4b1c      	ldr	r3, [pc, #112]	; (80015cc <HAL_InitTick+0xe8>)
 800155c:	2200      	movs	r2, #0
 800155e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001560:	4b1a      	ldr	r3, [pc, #104]	; (80015cc <HAL_InitTick+0xe8>)
 8001562:	2200      	movs	r2, #0
 8001564:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001566:	4b19      	ldr	r3, [pc, #100]	; (80015cc <HAL_InitTick+0xe8>)
 8001568:	2200      	movs	r2, #0
 800156a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800156c:	4817      	ldr	r0, [pc, #92]	; (80015cc <HAL_InitTick+0xe8>)
 800156e:	f002 fb23 	bl	8003bb8 <HAL_TIM_Base_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001578:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800157c:	2b00      	cmp	r3, #0
 800157e:	d11b      	bne.n	80015b8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001580:	4812      	ldr	r0, [pc, #72]	; (80015cc <HAL_InitTick+0xe8>)
 8001582:	f002 fb7b 	bl	8003c7c <HAL_TIM_Base_Start_IT>
 8001586:	4603      	mov	r3, r0
 8001588:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800158c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001590:	2b00      	cmp	r3, #0
 8001592:	d111      	bne.n	80015b8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001594:	2036      	movs	r0, #54	; 0x36
 8001596:	f001 fc17 	bl	8002dc8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2b0f      	cmp	r3, #15
 800159e:	d808      	bhi.n	80015b2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80015a0:	2200      	movs	r2, #0
 80015a2:	6879      	ldr	r1, [r7, #4]
 80015a4:	2036      	movs	r0, #54	; 0x36
 80015a6:	f001 fbf3 	bl	8002d90 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015aa:	4a0a      	ldr	r2, [pc, #40]	; (80015d4 <HAL_InitTick+0xf0>)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6013      	str	r3, [r2, #0]
 80015b0:	e002      	b.n	80015b8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80015b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3738      	adds	r7, #56	; 0x38
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40023800 	.word	0x40023800
 80015c8:	431bde83 	.word	0x431bde83
 80015cc:	20000238 	.word	0x20000238
 80015d0:	40001000 	.word	0x40001000
 80015d4:	20000004 	.word	0x20000004

080015d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015dc:	e7fe      	b.n	80015dc <NMI_Handler+0x4>

080015de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e2:	e7fe      	b.n	80015e2 <HardFault_Handler+0x4>

080015e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <MemManage_Handler+0x4>

080015ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ee:	e7fe      	b.n	80015ee <BusFault_Handler+0x4>

080015f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <UsageFault_Handler+0x4>

080015f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001608:	4802      	ldr	r0, [pc, #8]	; (8001614 <CAN1_RX0_IRQHandler+0x10>)
 800160a:	f001 f8d9 	bl	80027c0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000168 	.word	0x20000168

08001618 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800161c:	4802      	ldr	r0, [pc, #8]	; (8001628 <TIM6_DAC_IRQHandler+0x10>)
 800161e:	f002 fba5 	bl	8003d6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000238 	.word	0x20000238

0800162c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001630:	4b06      	ldr	r3, [pc, #24]	; (800164c <SystemInit+0x20>)
 8001632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001636:	4a05      	ldr	r2, [pc, #20]	; (800164c <SystemInit+0x20>)
 8001638:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800163c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001650:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001688 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001654:	480d      	ldr	r0, [pc, #52]	; (800168c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001656:	490e      	ldr	r1, [pc, #56]	; (8001690 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001658:	4a0e      	ldr	r2, [pc, #56]	; (8001694 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800165a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800165c:	e002      	b.n	8001664 <LoopCopyDataInit>

0800165e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800165e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001662:	3304      	adds	r3, #4

08001664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001668:	d3f9      	bcc.n	800165e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800166a:	4a0b      	ldr	r2, [pc, #44]	; (8001698 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800166c:	4c0b      	ldr	r4, [pc, #44]	; (800169c <LoopFillZerobss+0x26>)
  movs r3, #0
 800166e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001670:	e001      	b.n	8001676 <LoopFillZerobss>

08001672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001674:	3204      	adds	r2, #4

08001676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001678:	d3fb      	bcc.n	8001672 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800167a:	f7ff ffd7 	bl	800162c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800167e:	f005 fced 	bl	800705c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001682:	f7ff f811 	bl	80006a8 <main>
  bx  lr    
 8001686:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001688:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800168c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001690:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001694:	08007378 	.word	0x08007378
  ldr r2, =_sbss
 8001698:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800169c:	20004c98 	.word	0x20004c98

080016a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016a0:	e7fe      	b.n	80016a0 <ADC_IRQHandler>

080016a2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a6:	2003      	movs	r0, #3
 80016a8:	f001 fb67 	bl	8002d7a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ac:	200f      	movs	r0, #15
 80016ae:	f7ff ff19 	bl	80014e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016b2:	f7ff fdd9 	bl	8001268 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	bd80      	pop	{r7, pc}

080016bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016c0:	4b06      	ldr	r3, [pc, #24]	; (80016dc <HAL_IncTick+0x20>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	461a      	mov	r2, r3
 80016c6:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <HAL_IncTick+0x24>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4413      	add	r3, r2
 80016cc:	4a04      	ldr	r2, [pc, #16]	; (80016e0 <HAL_IncTick+0x24>)
 80016ce:	6013      	str	r3, [r2, #0]
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	20000008 	.word	0x20000008
 80016e0:	20000284 	.word	0x20000284

080016e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  return uwTick;
 80016e8:	4b03      	ldr	r3, [pc, #12]	; (80016f8 <HAL_GetTick+0x14>)
 80016ea:	681b      	ldr	r3, [r3, #0]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	20000284 	.word	0x20000284

080016fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001704:	2300      	movs	r3, #0
 8001706:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d101      	bne.n	8001712 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e031      	b.n	8001776 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	2b00      	cmp	r3, #0
 8001718:	d109      	bne.n	800172e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff fdcc 	bl	80012b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	f003 0310 	and.w	r3, r3, #16
 8001736:	2b00      	cmp	r3, #0
 8001738:	d116      	bne.n	8001768 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800173e:	4b10      	ldr	r3, [pc, #64]	; (8001780 <HAL_ADC_Init+0x84>)
 8001740:	4013      	ands	r3, r2
 8001742:	f043 0202 	orr.w	r2, r3, #2
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f000 fb0a 	bl	8001d64 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	f023 0303 	bic.w	r3, r3, #3
 800175e:	f043 0201 	orr.w	r2, r3, #1
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	641a      	str	r2, [r3, #64]	; 0x40
 8001766:	e001      	b.n	800176c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001774:	7bfb      	ldrb	r3, [r7, #15]
}
 8001776:	4618      	mov	r0, r3
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	ffffeefd 	.word	0xffffeefd

08001784 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800178c:	2300      	movs	r3, #0
 800178e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001796:	2b01      	cmp	r3, #1
 8001798:	d101      	bne.n	800179e <HAL_ADC_Start+0x1a>
 800179a:	2302      	movs	r3, #2
 800179c:	e0ad      	b.n	80018fa <HAL_ADC_Start+0x176>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2201      	movs	r2, #1
 80017a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d018      	beq.n	80017e6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	689a      	ldr	r2, [r3, #8]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f042 0201 	orr.w	r2, r2, #1
 80017c2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80017c4:	4b50      	ldr	r3, [pc, #320]	; (8001908 <HAL_ADC_Start+0x184>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a50      	ldr	r2, [pc, #320]	; (800190c <HAL_ADC_Start+0x188>)
 80017ca:	fba2 2303 	umull	r2, r3, r2, r3
 80017ce:	0c9a      	lsrs	r2, r3, #18
 80017d0:	4613      	mov	r3, r2
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	4413      	add	r3, r2
 80017d6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80017d8:	e002      	b.n	80017e0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	3b01      	subs	r3, #1
 80017de:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1f9      	bne.n	80017da <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d175      	bne.n	80018e0 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017f8:	4b45      	ldr	r3, [pc, #276]	; (8001910 <HAL_ADC_Start+0x18c>)
 80017fa:	4013      	ands	r3, r2
 80017fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800180e:	2b00      	cmp	r3, #0
 8001810:	d007      	beq.n	8001822 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800181a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800182a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800182e:	d106      	bne.n	800183e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001834:	f023 0206 	bic.w	r2, r3, #6
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	645a      	str	r2, [r3, #68]	; 0x44
 800183c:	e002      	b.n	8001844 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001854:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001856:	4b2f      	ldr	r3, [pc, #188]	; (8001914 <HAL_ADC_Start+0x190>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f003 031f 	and.w	r3, r3, #31
 800185e:	2b00      	cmp	r3, #0
 8001860:	d10f      	bne.n	8001882 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d143      	bne.n	80018f8 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	689a      	ldr	r2, [r3, #8]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	e03a      	b.n	80018f8 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a24      	ldr	r2, [pc, #144]	; (8001918 <HAL_ADC_Start+0x194>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d10e      	bne.n	80018aa <HAL_ADC_Start+0x126>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d107      	bne.n	80018aa <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	689a      	ldr	r2, [r3, #8]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80018a8:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80018aa:	4b1a      	ldr	r3, [pc, #104]	; (8001914 <HAL_ADC_Start+0x190>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f003 0310 	and.w	r3, r3, #16
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d120      	bne.n	80018f8 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a18      	ldr	r2, [pc, #96]	; (800191c <HAL_ADC_Start+0x198>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d11b      	bne.n	80018f8 <HAL_ADC_Start+0x174>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d114      	bne.n	80018f8 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	689a      	ldr	r2, [r3, #8]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80018dc:	609a      	str	r2, [r3, #8]
 80018de:	e00b      	b.n	80018f8 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e4:	f043 0210 	orr.w	r2, r3, #16
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f0:	f043 0201 	orr.w	r2, r3, #1
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3714      	adds	r7, #20
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	20000000 	.word	0x20000000
 800190c:	431bde83 	.word	0x431bde83
 8001910:	fffff8fe 	.word	0xfffff8fe
 8001914:	40012300 	.word	0x40012300
 8001918:	40012000 	.word	0x40012000
 800191c:	40012200 	.word	0x40012200

08001920 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800192e:	2b01      	cmp	r3, #1
 8001930:	d101      	bne.n	8001936 <HAL_ADC_Stop+0x16>
 8001932:	2302      	movs	r3, #2
 8001934:	e01f      	b.n	8001976 <HAL_ADC_Stop+0x56>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2201      	movs	r2, #1
 800193a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	689a      	ldr	r2, [r3, #8]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f022 0201 	bic.w	r2, r2, #1
 800194c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	2b00      	cmp	r3, #0
 800195a:	d107      	bne.n	800196c <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001960:	4b08      	ldr	r3, [pc, #32]	; (8001984 <HAL_ADC_Stop+0x64>)
 8001962:	4013      	ands	r3, r2
 8001964:	f043 0201 	orr.w	r2, r3, #1
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	ffffeefe 	.word	0xffffeefe

08001988 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019a4:	d113      	bne.n	80019ce <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80019b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019b4:	d10b      	bne.n	80019ce <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	f043 0220 	orr.w	r2, r3, #32
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e063      	b.n	8001a96 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80019ce:	f7ff fe89 	bl	80016e4 <HAL_GetTick>
 80019d2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019d4:	e021      	b.n	8001a1a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019dc:	d01d      	beq.n	8001a1a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d007      	beq.n	80019f4 <HAL_ADC_PollForConversion+0x6c>
 80019e4:	f7ff fe7e 	bl	80016e4 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d212      	bcs.n	8001a1a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d00b      	beq.n	8001a1a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	f043 0204 	orr.w	r2, r3, #4
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e03d      	b.n	8001a96 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d1d6      	bne.n	80019d6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f06f 0212 	mvn.w	r2, #18
 8001a30:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d123      	bne.n	8001a94 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d11f      	bne.n	8001a94 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d006      	beq.n	8001a70 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d111      	bne.n	8001a94 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d105      	bne.n	8001a94 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8c:	f043 0201 	orr.w	r2, r3, #1
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d101      	bne.n	8001ad4 <HAL_ADC_ConfigChannel+0x1c>
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	e136      	b.n	8001d42 <HAL_ADC_ConfigChannel+0x28a>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2b09      	cmp	r3, #9
 8001ae2:	d93a      	bls.n	8001b5a <HAL_ADC_ConfigChannel+0xa2>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001aec:	d035      	beq.n	8001b5a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	68d9      	ldr	r1, [r3, #12]
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	461a      	mov	r2, r3
 8001afc:	4613      	mov	r3, r2
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	4413      	add	r3, r2
 8001b02:	3b1e      	subs	r3, #30
 8001b04:	2207      	movs	r2, #7
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	43da      	mvns	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	400a      	ands	r2, r1
 8001b12:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a8d      	ldr	r2, [pc, #564]	; (8001d50 <HAL_ADC_ConfigChannel+0x298>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d10a      	bne.n	8001b34 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	68d9      	ldr	r1, [r3, #12]
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	061a      	lsls	r2, r3, #24
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b32:	e035      	b.n	8001ba0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	68d9      	ldr	r1, [r3, #12]
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	689a      	ldr	r2, [r3, #8]
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	4618      	mov	r0, r3
 8001b46:	4603      	mov	r3, r0
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	4403      	add	r3, r0
 8001b4c:	3b1e      	subs	r3, #30
 8001b4e:	409a      	lsls	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	430a      	orrs	r2, r1
 8001b56:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b58:	e022      	b.n	8001ba0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6919      	ldr	r1, [r3, #16]
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	461a      	mov	r2, r3
 8001b68:	4613      	mov	r3, r2
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	4413      	add	r3, r2
 8001b6e:	2207      	movs	r2, #7
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43da      	mvns	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	400a      	ands	r2, r1
 8001b7c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	6919      	ldr	r1, [r3, #16]
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	4618      	mov	r0, r3
 8001b90:	4603      	mov	r3, r0
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	4403      	add	r3, r0
 8001b96:	409a      	lsls	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2b06      	cmp	r3, #6
 8001ba6:	d824      	bhi.n	8001bf2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685a      	ldr	r2, [r3, #4]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	4413      	add	r3, r2
 8001bb8:	3b05      	subs	r3, #5
 8001bba:	221f      	movs	r2, #31
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	43da      	mvns	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	400a      	ands	r2, r1
 8001bc8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4413      	add	r3, r2
 8001be2:	3b05      	subs	r3, #5
 8001be4:	fa00 f203 	lsl.w	r2, r0, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	430a      	orrs	r2, r1
 8001bee:	635a      	str	r2, [r3, #52]	; 0x34
 8001bf0:	e04c      	b.n	8001c8c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b0c      	cmp	r3, #12
 8001bf8:	d824      	bhi.n	8001c44 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	4613      	mov	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	3b23      	subs	r3, #35	; 0x23
 8001c0c:	221f      	movs	r2, #31
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	43da      	mvns	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	400a      	ands	r2, r1
 8001c1a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	4618      	mov	r0, r3
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	3b23      	subs	r3, #35	; 0x23
 8001c36:	fa00 f203 	lsl.w	r2, r0, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	631a      	str	r2, [r3, #48]	; 0x30
 8001c42:	e023      	b.n	8001c8c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685a      	ldr	r2, [r3, #4]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	4413      	add	r3, r2
 8001c54:	3b41      	subs	r3, #65	; 0x41
 8001c56:	221f      	movs	r2, #31
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43da      	mvns	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	400a      	ands	r2, r1
 8001c64:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	4618      	mov	r0, r3
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685a      	ldr	r2, [r3, #4]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4413      	add	r3, r2
 8001c7e:	3b41      	subs	r3, #65	; 0x41
 8001c80:	fa00 f203 	lsl.w	r2, r0, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a30      	ldr	r2, [pc, #192]	; (8001d54 <HAL_ADC_ConfigChannel+0x29c>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d10a      	bne.n	8001cac <HAL_ADC_ConfigChannel+0x1f4>
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c9e:	d105      	bne.n	8001cac <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001ca0:	4b2d      	ldr	r3, [pc, #180]	; (8001d58 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	4a2c      	ldr	r2, [pc, #176]	; (8001d58 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ca6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001caa:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a28      	ldr	r2, [pc, #160]	; (8001d54 <HAL_ADC_ConfigChannel+0x29c>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d10f      	bne.n	8001cd6 <HAL_ADC_ConfigChannel+0x21e>
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2b12      	cmp	r3, #18
 8001cbc:	d10b      	bne.n	8001cd6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001cbe:	4b26      	ldr	r3, [pc, #152]	; (8001d58 <HAL_ADC_ConfigChannel+0x2a0>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	4a25      	ldr	r2, [pc, #148]	; (8001d58 <HAL_ADC_ConfigChannel+0x2a0>)
 8001cc4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001cc8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001cca:	4b23      	ldr	r3, [pc, #140]	; (8001d58 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	4a22      	ldr	r2, [pc, #136]	; (8001d58 <HAL_ADC_ConfigChannel+0x2a0>)
 8001cd0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001cd4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a1e      	ldr	r2, [pc, #120]	; (8001d54 <HAL_ADC_ConfigChannel+0x29c>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d12b      	bne.n	8001d38 <HAL_ADC_ConfigChannel+0x280>
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a1a      	ldr	r2, [pc, #104]	; (8001d50 <HAL_ADC_ConfigChannel+0x298>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d003      	beq.n	8001cf2 <HAL_ADC_ConfigChannel+0x23a>
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2b11      	cmp	r3, #17
 8001cf0:	d122      	bne.n	8001d38 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001cf2:	4b19      	ldr	r3, [pc, #100]	; (8001d58 <HAL_ADC_ConfigChannel+0x2a0>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	4a18      	ldr	r2, [pc, #96]	; (8001d58 <HAL_ADC_ConfigChannel+0x2a0>)
 8001cf8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001cfc:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001cfe:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	4a15      	ldr	r2, [pc, #84]	; (8001d58 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d08:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a10      	ldr	r2, [pc, #64]	; (8001d50 <HAL_ADC_ConfigChannel+0x298>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d111      	bne.n	8001d38 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001d14:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <HAL_ADC_ConfigChannel+0x2a4>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a11      	ldr	r2, [pc, #68]	; (8001d60 <HAL_ADC_ConfigChannel+0x2a8>)
 8001d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1e:	0c9a      	lsrs	r2, r3, #18
 8001d20:	4613      	mov	r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	4413      	add	r3, r2
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001d2a:	e002      	b.n	8001d32 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1f9      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3714      	adds	r7, #20
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	10000012 	.word	0x10000012
 8001d54:	40012000 	.word	0x40012000
 8001d58:	40012300 	.word	0x40012300
 8001d5c:	20000000 	.word	0x20000000
 8001d60:	431bde83 	.word	0x431bde83

08001d64 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001d6c:	4b78      	ldr	r3, [pc, #480]	; (8001f50 <ADC_Init+0x1ec>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	4a77      	ldr	r2, [pc, #476]	; (8001f50 <ADC_Init+0x1ec>)
 8001d72:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001d76:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001d78:	4b75      	ldr	r3, [pc, #468]	; (8001f50 <ADC_Init+0x1ec>)
 8001d7a:	685a      	ldr	r2, [r3, #4]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	4973      	ldr	r1, [pc, #460]	; (8001f50 <ADC_Init+0x1ec>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	6859      	ldr	r1, [r3, #4]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	021a      	lsls	r2, r3, #8
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	430a      	orrs	r2, r1
 8001da8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	685a      	ldr	r2, [r3, #4]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001db8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	6859      	ldr	r1, [r3, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	689a      	ldr	r2, [r3, #8]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6899      	ldr	r1, [r3, #8]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68da      	ldr	r2, [r3, #12]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	430a      	orrs	r2, r1
 8001dec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df2:	4a58      	ldr	r2, [pc, #352]	; (8001f54 <ADC_Init+0x1f0>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d022      	beq.n	8001e3e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	689a      	ldr	r2, [r3, #8]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e06:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6899      	ldr	r1, [r3, #8]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	430a      	orrs	r2, r1
 8001e18:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	6899      	ldr	r1, [r3, #8]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	e00f      	b.n	8001e5e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e5c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 0202 	bic.w	r2, r2, #2
 8001e6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6899      	ldr	r1, [r3, #8]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	005a      	lsls	r2, r3, #1
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d01b      	beq.n	8001ec4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	685a      	ldr	r2, [r3, #4]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e9a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001eaa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6859      	ldr	r1, [r3, #4]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	035a      	lsls	r2, r3, #13
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	e007      	b.n	8001ed4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ed2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001ee2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	051a      	lsls	r2, r3, #20
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	6899      	ldr	r1, [r3, #8]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f16:	025a      	lsls	r2, r3, #9
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	689a      	ldr	r2, [r3, #8]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6899      	ldr	r1, [r3, #8]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	029a      	lsls	r2, r3, #10
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	430a      	orrs	r2, r1
 8001f42:	609a      	str	r2, [r3, #8]
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	40012300 	.word	0x40012300
 8001f54:	0f000001 	.word	0x0f000001

08001f58 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e0ed      	b.n	8002146 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d102      	bne.n	8001f7c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7ff fa36 	bl	80013e8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f042 0201 	orr.w	r2, r2, #1
 8001f8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f8c:	f7ff fbaa 	bl	80016e4 <HAL_GetTick>
 8001f90:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001f92:	e012      	b.n	8001fba <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f94:	f7ff fba6 	bl	80016e4 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b0a      	cmp	r3, #10
 8001fa0:	d90b      	bls.n	8001fba <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2205      	movs	r2, #5
 8001fb2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e0c5      	b.n	8002146 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 0301 	and.w	r3, r3, #1
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0e5      	beq.n	8001f94 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f022 0202 	bic.w	r2, r2, #2
 8001fd6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fd8:	f7ff fb84 	bl	80016e4 <HAL_GetTick>
 8001fdc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001fde:	e012      	b.n	8002006 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001fe0:	f7ff fb80 	bl	80016e4 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b0a      	cmp	r3, #10
 8001fec:	d90b      	bls.n	8002006 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2205      	movs	r2, #5
 8001ffe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e09f      	b.n	8002146 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1e5      	bne.n	8001fe0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	7e1b      	ldrb	r3, [r3, #24]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d108      	bne.n	800202e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	e007      	b.n	800203e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800203c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	7e5b      	ldrb	r3, [r3, #25]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d108      	bne.n	8002058 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	e007      	b.n	8002068 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002066:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	7e9b      	ldrb	r3, [r3, #26]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d108      	bne.n	8002082 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f042 0220 	orr.w	r2, r2, #32
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	e007      	b.n	8002092 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 0220 	bic.w	r2, r2, #32
 8002090:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	7edb      	ldrb	r3, [r3, #27]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d108      	bne.n	80020ac <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f022 0210 	bic.w	r2, r2, #16
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	e007      	b.n	80020bc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f042 0210 	orr.w	r2, r2, #16
 80020ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	7f1b      	ldrb	r3, [r3, #28]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d108      	bne.n	80020d6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f042 0208 	orr.w	r2, r2, #8
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	e007      	b.n	80020e6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 0208 	bic.w	r2, r2, #8
 80020e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	7f5b      	ldrb	r3, [r3, #29]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d108      	bne.n	8002100 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f042 0204 	orr.w	r2, r2, #4
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	e007      	b.n	8002110 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 0204 	bic.w	r2, r2, #4
 800210e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	431a      	orrs	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	431a      	orrs	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	695b      	ldr	r3, [r3, #20]
 8002124:	ea42 0103 	orr.w	r1, r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	1e5a      	subs	r2, r3, #1
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	430a      	orrs	r2, r1
 8002134:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
	...

08002150 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002150:	b480      	push	{r7}
 8002152:	b087      	sub	sp, #28
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002166:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002168:	7cfb      	ldrb	r3, [r7, #19]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d003      	beq.n	8002176 <HAL_CAN_ConfigFilter+0x26>
 800216e:	7cfb      	ldrb	r3, [r7, #19]
 8002170:	2b02      	cmp	r3, #2
 8002172:	f040 80c7 	bne.w	8002304 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a69      	ldr	r2, [pc, #420]	; (8002320 <HAL_CAN_ConfigFilter+0x1d0>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d001      	beq.n	8002184 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8002180:	4b68      	ldr	r3, [pc, #416]	; (8002324 <HAL_CAN_ConfigFilter+0x1d4>)
 8002182:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800218a:	f043 0201 	orr.w	r2, r3, #1
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	4a63      	ldr	r2, [pc, #396]	; (8002324 <HAL_CAN_ConfigFilter+0x1d4>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d111      	bne.n	80021c0 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80021a2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b6:	021b      	lsls	r3, r3, #8
 80021b8:	431a      	orrs	r2, r3
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	695b      	ldr	r3, [r3, #20]
 80021c4:	f003 031f 	and.w	r3, r3, #31
 80021c8:	2201      	movs	r2, #1
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	43db      	mvns	r3, r3
 80021da:	401a      	ands	r2, r3
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d123      	bne.n	8002232 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	43db      	mvns	r3, r3
 80021f4:	401a      	ands	r2, r3
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800220c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	3248      	adds	r2, #72	; 0x48
 8002212:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002226:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002228:	6979      	ldr	r1, [r7, #20]
 800222a:	3348      	adds	r3, #72	; 0x48
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	440b      	add	r3, r1
 8002230:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d122      	bne.n	8002280 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	431a      	orrs	r2, r3
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800225a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	3248      	adds	r2, #72	; 0x48
 8002260:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002274:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002276:	6979      	ldr	r1, [r7, #20]
 8002278:	3348      	adds	r3, #72	; 0x48
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	440b      	add	r3, r1
 800227e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d109      	bne.n	800229c <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	43db      	mvns	r3, r3
 8002292:	401a      	ands	r2, r3
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800229a:	e007      	b.n	80022ac <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	431a      	orrs	r2, r3
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d109      	bne.n	80022c8 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	43db      	mvns	r3, r3
 80022be:	401a      	ands	r2, r3
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80022c6:	e007      	b.n	80022d8 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	431a      	orrs	r2, r3
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d107      	bne.n	80022f0 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	431a      	orrs	r2, r3
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80022f6:	f023 0201 	bic.w	r2, r3, #1
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002300:	2300      	movs	r3, #0
 8002302:	e006      	b.n	8002312 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002308:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
  }
}
 8002312:	4618      	mov	r0, r3
 8002314:	371c      	adds	r7, #28
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	40003400 	.word	0x40003400
 8002324:	40006400 	.word	0x40006400

08002328 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002336:	b2db      	uxtb	r3, r3
 8002338:	2b01      	cmp	r3, #1
 800233a:	d12e      	bne.n	800239a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2202      	movs	r2, #2
 8002340:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 0201 	bic.w	r2, r2, #1
 8002352:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002354:	f7ff f9c6 	bl	80016e4 <HAL_GetTick>
 8002358:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800235a:	e012      	b.n	8002382 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800235c:	f7ff f9c2 	bl	80016e4 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b0a      	cmp	r3, #10
 8002368:	d90b      	bls.n	8002382 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2205      	movs	r2, #5
 800237a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e012      	b.n	80023a8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1e5      	bne.n	800235c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002396:	2300      	movs	r3, #0
 8002398:	e006      	b.n	80023a8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
  }
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b089      	sub	sp, #36	; 0x24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
 80023bc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023c4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80023ce:	7ffb      	ldrb	r3, [r7, #31]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d003      	beq.n	80023dc <HAL_CAN_AddTxMessage+0x2c>
 80023d4:	7ffb      	ldrb	r3, [r7, #31]
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	f040 80ad 	bne.w	8002536 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d10a      	bne.n	80023fc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d105      	bne.n	80023fc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f000 8095 	beq.w	8002526 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	0e1b      	lsrs	r3, r3, #24
 8002400:	f003 0303 	and.w	r3, r3, #3
 8002404:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002406:	2201      	movs	r2, #1
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	409a      	lsls	r2, r3
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d10d      	bne.n	8002434 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002422:	68f9      	ldr	r1, [r7, #12]
 8002424:	6809      	ldr	r1, [r1, #0]
 8002426:	431a      	orrs	r2, r3
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	3318      	adds	r3, #24
 800242c:	011b      	lsls	r3, r3, #4
 800242e:	440b      	add	r3, r1
 8002430:	601a      	str	r2, [r3, #0]
 8002432:	e00f      	b.n	8002454 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800243e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002444:	68f9      	ldr	r1, [r7, #12]
 8002446:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002448:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	3318      	adds	r3, #24
 800244e:	011b      	lsls	r3, r3, #4
 8002450:	440b      	add	r3, r1
 8002452:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6819      	ldr	r1, [r3, #0]
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	691a      	ldr	r2, [r3, #16]
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	3318      	adds	r3, #24
 8002460:	011b      	lsls	r3, r3, #4
 8002462:	440b      	add	r3, r1
 8002464:	3304      	adds	r3, #4
 8002466:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	7d1b      	ldrb	r3, [r3, #20]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d111      	bne.n	8002494 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	3318      	adds	r3, #24
 8002478:	011b      	lsls	r3, r3, #4
 800247a:	4413      	add	r3, r2
 800247c:	3304      	adds	r3, #4
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	6811      	ldr	r1, [r2, #0]
 8002484:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	3318      	adds	r3, #24
 800248c:	011b      	lsls	r3, r3, #4
 800248e:	440b      	add	r3, r1
 8002490:	3304      	adds	r3, #4
 8002492:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3307      	adds	r3, #7
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	061a      	lsls	r2, r3, #24
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3306      	adds	r3, #6
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	041b      	lsls	r3, r3, #16
 80024a4:	431a      	orrs	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	3305      	adds	r3, #5
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	021b      	lsls	r3, r3, #8
 80024ae:	4313      	orrs	r3, r2
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	3204      	adds	r2, #4
 80024b4:	7812      	ldrb	r2, [r2, #0]
 80024b6:	4610      	mov	r0, r2
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	6811      	ldr	r1, [r2, #0]
 80024bc:	ea43 0200 	orr.w	r2, r3, r0
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	011b      	lsls	r3, r3, #4
 80024c4:	440b      	add	r3, r1
 80024c6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80024ca:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	3303      	adds	r3, #3
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	061a      	lsls	r2, r3, #24
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3302      	adds	r3, #2
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	041b      	lsls	r3, r3, #16
 80024dc:	431a      	orrs	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	3301      	adds	r3, #1
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	021b      	lsls	r3, r3, #8
 80024e6:	4313      	orrs	r3, r2
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	7812      	ldrb	r2, [r2, #0]
 80024ec:	4610      	mov	r0, r2
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	6811      	ldr	r1, [r2, #0]
 80024f2:	ea43 0200 	orr.w	r2, r3, r0
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	011b      	lsls	r3, r3, #4
 80024fa:	440b      	add	r3, r1
 80024fc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002500:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	3318      	adds	r3, #24
 800250a:	011b      	lsls	r3, r3, #4
 800250c:	4413      	add	r3, r2
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	6811      	ldr	r1, [r2, #0]
 8002514:	f043 0201 	orr.w	r2, r3, #1
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	3318      	adds	r3, #24
 800251c:	011b      	lsls	r3, r3, #4
 800251e:	440b      	add	r3, r1
 8002520:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002522:	2300      	movs	r3, #0
 8002524:	e00e      	b.n	8002544 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e006      	b.n	8002544 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
  }
}
 8002544:	4618      	mov	r0, r3
 8002546:	3724      	adds	r7, #36	; 0x24
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002550:	b480      	push	{r7}
 8002552:	b087      	sub	sp, #28
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
 800255c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002564:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002566:	7dfb      	ldrb	r3, [r7, #23]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d003      	beq.n	8002574 <HAL_CAN_GetRxMessage+0x24>
 800256c:	7dfb      	ldrb	r3, [r7, #23]
 800256e:	2b02      	cmp	r3, #2
 8002570:	f040 80f3 	bne.w	800275a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d10e      	bne.n	8002598 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	f003 0303 	and.w	r3, r3, #3
 8002584:	2b00      	cmp	r3, #0
 8002586:	d116      	bne.n	80025b6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e0e7      	b.n	8002768 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	f003 0303 	and.w	r3, r3, #3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d107      	bne.n	80025b6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e0d8      	b.n	8002768 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	331b      	adds	r3, #27
 80025be:	011b      	lsls	r3, r3, #4
 80025c0:	4413      	add	r3, r2
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0204 	and.w	r2, r3, #4
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d10c      	bne.n	80025ee <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	331b      	adds	r3, #27
 80025dc:	011b      	lsls	r3, r3, #4
 80025de:	4413      	add	r3, r2
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	0d5b      	lsrs	r3, r3, #21
 80025e4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	e00b      	b.n	8002606 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	331b      	adds	r3, #27
 80025f6:	011b      	lsls	r3, r3, #4
 80025f8:	4413      	add	r3, r2
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	08db      	lsrs	r3, r3, #3
 80025fe:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	331b      	adds	r3, #27
 800260e:	011b      	lsls	r3, r3, #4
 8002610:	4413      	add	r3, r2
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0202 	and.w	r2, r3, #2
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	331b      	adds	r3, #27
 8002624:	011b      	lsls	r3, r3, #4
 8002626:	4413      	add	r3, r2
 8002628:	3304      	adds	r3, #4
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 020f 	and.w	r2, r3, #15
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	331b      	adds	r3, #27
 800263c:	011b      	lsls	r3, r3, #4
 800263e:	4413      	add	r3, r2
 8002640:	3304      	adds	r3, #4
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	0a1b      	lsrs	r3, r3, #8
 8002646:	b2da      	uxtb	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	331b      	adds	r3, #27
 8002654:	011b      	lsls	r3, r3, #4
 8002656:	4413      	add	r3, r2
 8002658:	3304      	adds	r3, #4
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	0c1b      	lsrs	r3, r3, #16
 800265e:	b29a      	uxth	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	011b      	lsls	r3, r3, #4
 800266c:	4413      	add	r3, r2
 800266e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	b2da      	uxtb	r2, r3
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	011b      	lsls	r3, r3, #4
 8002682:	4413      	add	r3, r2
 8002684:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	0a1a      	lsrs	r2, r3, #8
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	3301      	adds	r3, #1
 8002690:	b2d2      	uxtb	r2, r2
 8002692:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	011b      	lsls	r3, r3, #4
 800269c:	4413      	add	r3, r2
 800269e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	0c1a      	lsrs	r2, r3, #16
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	3302      	adds	r3, #2
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	011b      	lsls	r3, r3, #4
 80026b6:	4413      	add	r3, r2
 80026b8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	0e1a      	lsrs	r2, r3, #24
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	3303      	adds	r3, #3
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	4413      	add	r3, r2
 80026d2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	3304      	adds	r3, #4
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	011b      	lsls	r3, r3, #4
 80026e8:	4413      	add	r3, r2
 80026ea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	0a1a      	lsrs	r2, r3, #8
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	3305      	adds	r3, #5
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	011b      	lsls	r3, r3, #4
 8002702:	4413      	add	r3, r2
 8002704:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	0c1a      	lsrs	r2, r3, #16
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	3306      	adds	r3, #6
 8002710:	b2d2      	uxtb	r2, r2
 8002712:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	4413      	add	r3, r2
 800271e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	0e1a      	lsrs	r2, r3, #24
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	3307      	adds	r3, #7
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d108      	bne.n	8002746 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68da      	ldr	r2, [r3, #12]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f042 0220 	orr.w	r2, r2, #32
 8002742:	60da      	str	r2, [r3, #12]
 8002744:	e007      	b.n	8002756 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	691a      	ldr	r2, [r3, #16]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f042 0220 	orr.w	r2, r2, #32
 8002754:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002756:	2300      	movs	r3, #0
 8002758:	e006      	b.n	8002768 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
  }
}
 8002768:	4618      	mov	r0, r3
 800276a:	371c      	adds	r7, #28
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002784:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002786:	7bfb      	ldrb	r3, [r7, #15]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d002      	beq.n	8002792 <HAL_CAN_ActivateNotification+0x1e>
 800278c:	7bfb      	ldrb	r3, [r7, #15]
 800278e:	2b02      	cmp	r3, #2
 8002790:	d109      	bne.n	80027a6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6959      	ldr	r1, [r3, #20]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	430a      	orrs	r2, r1
 80027a0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80027a2:	2300      	movs	r3, #0
 80027a4:	e006      	b.n	80027b4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027aa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
  }
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b08a      	sub	sp, #40	; 0x28
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80027c8:	2300      	movs	r3, #0
 80027ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80027fc:	6a3b      	ldr	r3, [r7, #32]
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b00      	cmp	r3, #0
 8002804:	d07c      	beq.n	8002900 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	2b00      	cmp	r3, #0
 800280e:	d023      	beq.n	8002858 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2201      	movs	r2, #1
 8002816:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 f983 	bl	8002b2e <HAL_CAN_TxMailbox0CompleteCallback>
 8002828:	e016      	b.n	8002858 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	2b00      	cmp	r3, #0
 8002832:	d004      	beq.n	800283e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800283a:	627b      	str	r3, [r7, #36]	; 0x24
 800283c:	e00c      	b.n	8002858 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	f003 0308 	and.w	r3, r3, #8
 8002844:	2b00      	cmp	r3, #0
 8002846:	d004      	beq.n	8002852 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800284e:	627b      	str	r3, [r7, #36]	; 0x24
 8002850:	e002      	b.n	8002858 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f989 	bl	8002b6a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285e:	2b00      	cmp	r3, #0
 8002860:	d024      	beq.n	80028ac <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f44f 7280 	mov.w	r2, #256	; 0x100
 800286a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 f963 	bl	8002b42 <HAL_CAN_TxMailbox1CompleteCallback>
 800287c:	e016      	b.n	80028ac <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002884:	2b00      	cmp	r3, #0
 8002886:	d004      	beq.n	8002892 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800288e:	627b      	str	r3, [r7, #36]	; 0x24
 8002890:	e00c      	b.n	80028ac <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002898:	2b00      	cmp	r3, #0
 800289a:	d004      	beq.n	80028a6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028a2:	627b      	str	r3, [r7, #36]	; 0x24
 80028a4:	e002      	b.n	80028ac <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 f969 	bl	8002b7e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d024      	beq.n	8002900 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80028be:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d003      	beq.n	80028d2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 f943 	bl	8002b56 <HAL_CAN_TxMailbox2CompleteCallback>
 80028d0:	e016      	b.n	8002900 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d004      	beq.n	80028e6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028e2:	627b      	str	r3, [r7, #36]	; 0x24
 80028e4:	e00c      	b.n	8002900 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d004      	beq.n	80028fa <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80028f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028f6:	627b      	str	r3, [r7, #36]	; 0x24
 80028f8:	e002      	b.n	8002900 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 f949 	bl	8002b92 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002900:	6a3b      	ldr	r3, [r7, #32]
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00c      	beq.n	8002924 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	f003 0310 	and.w	r3, r3, #16
 8002910:	2b00      	cmp	r3, #0
 8002912:	d007      	beq.n	8002924 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002916:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800291a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2210      	movs	r2, #16
 8002922:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002924:	6a3b      	ldr	r3, [r7, #32]
 8002926:	f003 0304 	and.w	r3, r3, #4
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00b      	beq.n	8002946 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	f003 0308 	and.w	r3, r3, #8
 8002934:	2b00      	cmp	r3, #0
 8002936:	d006      	beq.n	8002946 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2208      	movs	r2, #8
 800293e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f000 f930 	bl	8002ba6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002946:	6a3b      	ldr	r3, [r7, #32]
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d009      	beq.n	8002964 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	f003 0303 	and.w	r3, r3, #3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d002      	beq.n	8002964 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7fe f9ac 	bl	8000cbc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002964:	6a3b      	ldr	r3, [r7, #32]
 8002966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00c      	beq.n	8002988 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	f003 0310 	and.w	r3, r3, #16
 8002974:	2b00      	cmp	r3, #0
 8002976:	d007      	beq.n	8002988 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800297e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2210      	movs	r2, #16
 8002986:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002988:	6a3b      	ldr	r3, [r7, #32]
 800298a:	f003 0320 	and.w	r3, r3, #32
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00b      	beq.n	80029aa <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	f003 0308 	and.w	r3, r3, #8
 8002998:	2b00      	cmp	r3, #0
 800299a:	d006      	beq.n	80029aa <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2208      	movs	r2, #8
 80029a2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 f912 	bl	8002bce <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80029aa:	6a3b      	ldr	r3, [r7, #32]
 80029ac:	f003 0310 	and.w	r3, r3, #16
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d009      	beq.n	80029c8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	f003 0303 	and.w	r3, r3, #3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d002      	beq.n	80029c8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f8f9 	bl	8002bba <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80029c8:	6a3b      	ldr	r3, [r7, #32]
 80029ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00b      	beq.n	80029ea <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	f003 0310 	and.w	r3, r3, #16
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d006      	beq.n	80029ea <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2210      	movs	r2, #16
 80029e2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 f8fc 	bl	8002be2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80029ea:	6a3b      	ldr	r3, [r7, #32]
 80029ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00b      	beq.n	8002a0c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	f003 0308 	and.w	r3, r3, #8
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d006      	beq.n	8002a0c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2208      	movs	r2, #8
 8002a04:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f8f5 	bl	8002bf6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002a0c:	6a3b      	ldr	r3, [r7, #32]
 8002a0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d07b      	beq.n	8002b0e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d072      	beq.n	8002b06 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002a20:	6a3b      	ldr	r3, [r7, #32]
 8002a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d008      	beq.n	8002a3c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d003      	beq.n	8002a3c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a36:	f043 0301 	orr.w	r3, r3, #1
 8002a3a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002a3c:	6a3b      	ldr	r3, [r7, #32]
 8002a3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d008      	beq.n	8002a58 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d003      	beq.n	8002a58 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	f043 0302 	orr.w	r3, r3, #2
 8002a56:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d008      	beq.n	8002a74 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d003      	beq.n	8002a74 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6e:	f043 0304 	orr.w	r3, r3, #4
 8002a72:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002a74:	6a3b      	ldr	r3, [r7, #32]
 8002a76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d043      	beq.n	8002b06 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d03e      	beq.n	8002b06 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a8e:	2b60      	cmp	r3, #96	; 0x60
 8002a90:	d02b      	beq.n	8002aea <HAL_CAN_IRQHandler+0x32a>
 8002a92:	2b60      	cmp	r3, #96	; 0x60
 8002a94:	d82e      	bhi.n	8002af4 <HAL_CAN_IRQHandler+0x334>
 8002a96:	2b50      	cmp	r3, #80	; 0x50
 8002a98:	d022      	beq.n	8002ae0 <HAL_CAN_IRQHandler+0x320>
 8002a9a:	2b50      	cmp	r3, #80	; 0x50
 8002a9c:	d82a      	bhi.n	8002af4 <HAL_CAN_IRQHandler+0x334>
 8002a9e:	2b40      	cmp	r3, #64	; 0x40
 8002aa0:	d019      	beq.n	8002ad6 <HAL_CAN_IRQHandler+0x316>
 8002aa2:	2b40      	cmp	r3, #64	; 0x40
 8002aa4:	d826      	bhi.n	8002af4 <HAL_CAN_IRQHandler+0x334>
 8002aa6:	2b30      	cmp	r3, #48	; 0x30
 8002aa8:	d010      	beq.n	8002acc <HAL_CAN_IRQHandler+0x30c>
 8002aaa:	2b30      	cmp	r3, #48	; 0x30
 8002aac:	d822      	bhi.n	8002af4 <HAL_CAN_IRQHandler+0x334>
 8002aae:	2b10      	cmp	r3, #16
 8002ab0:	d002      	beq.n	8002ab8 <HAL_CAN_IRQHandler+0x2f8>
 8002ab2:	2b20      	cmp	r3, #32
 8002ab4:	d005      	beq.n	8002ac2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002ab6:	e01d      	b.n	8002af4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aba:	f043 0308 	orr.w	r3, r3, #8
 8002abe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ac0:	e019      	b.n	8002af6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	f043 0310 	orr.w	r3, r3, #16
 8002ac8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002aca:	e014      	b.n	8002af6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ace:	f043 0320 	orr.w	r3, r3, #32
 8002ad2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ad4:	e00f      	b.n	8002af6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002adc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ade:	e00a      	b.n	8002af6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ae6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ae8:	e005      	b.n	8002af6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002af2:	e000      	b.n	8002af6 <HAL_CAN_IRQHandler+0x336>
            break;
 8002af4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	699a      	ldr	r2, [r3, #24]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002b04:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2204      	movs	r2, #4
 8002b0c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d008      	beq.n	8002b26 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 f872 	bl	8002c0a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002b26:	bf00      	nop
 8002b28:	3728      	adds	r7, #40	; 0x28
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b083      	sub	sp, #12
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002b36:	bf00      	nop
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b083      	sub	sp, #12
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr

08002b56 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b56:	b480      	push	{r7}
 8002b58:	b083      	sub	sp, #12
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr

08002b6a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b083      	sub	sp, #12
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr

08002b7e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b083      	sub	sp, #12
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002b86:	bf00      	nop
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr

08002b92 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b083      	sub	sp, #12
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002b9a:	bf00      	nop
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b083      	sub	sp, #12
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b083      	sub	sp, #12
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002bc2:	bf00      	nop
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b083      	sub	sp, #12
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b083      	sub	sp, #12
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002bfe:	bf00      	nop
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr

08002c0a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b083      	sub	sp, #12
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
	...

08002c20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f003 0307 	and.w	r3, r3, #7
 8002c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c30:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <__NVIC_SetPriorityGrouping+0x40>)
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c36:	68ba      	ldr	r2, [r7, #8]
 8002c38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c48:	4b06      	ldr	r3, [pc, #24]	; (8002c64 <__NVIC_SetPriorityGrouping+0x44>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c4e:	4a04      	ldr	r2, [pc, #16]	; (8002c60 <__NVIC_SetPriorityGrouping+0x40>)
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	60d3      	str	r3, [r2, #12]
}
 8002c54:	bf00      	nop
 8002c56:	3714      	adds	r7, #20
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	e000ed00 	.word	0xe000ed00
 8002c64:	05fa0000 	.word	0x05fa0000

08002c68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c6c:	4b04      	ldr	r3, [pc, #16]	; (8002c80 <__NVIC_GetPriorityGrouping+0x18>)
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	0a1b      	lsrs	r3, r3, #8
 8002c72:	f003 0307 	and.w	r3, r3, #7
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	e000ed00 	.word	0xe000ed00

08002c84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	db0b      	blt.n	8002cae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c96:	79fb      	ldrb	r3, [r7, #7]
 8002c98:	f003 021f 	and.w	r2, r3, #31
 8002c9c:	4907      	ldr	r1, [pc, #28]	; (8002cbc <__NVIC_EnableIRQ+0x38>)
 8002c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca2:	095b      	lsrs	r3, r3, #5
 8002ca4:	2001      	movs	r0, #1
 8002ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8002caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	e000e100 	.word	0xe000e100

08002cc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	6039      	str	r1, [r7, #0]
 8002cca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	db0a      	blt.n	8002cea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	b2da      	uxtb	r2, r3
 8002cd8:	490c      	ldr	r1, [pc, #48]	; (8002d0c <__NVIC_SetPriority+0x4c>)
 8002cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cde:	0112      	lsls	r2, r2, #4
 8002ce0:	b2d2      	uxtb	r2, r2
 8002ce2:	440b      	add	r3, r1
 8002ce4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ce8:	e00a      	b.n	8002d00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	b2da      	uxtb	r2, r3
 8002cee:	4908      	ldr	r1, [pc, #32]	; (8002d10 <__NVIC_SetPriority+0x50>)
 8002cf0:	79fb      	ldrb	r3, [r7, #7]
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	3b04      	subs	r3, #4
 8002cf8:	0112      	lsls	r2, r2, #4
 8002cfa:	b2d2      	uxtb	r2, r2
 8002cfc:	440b      	add	r3, r1
 8002cfe:	761a      	strb	r2, [r3, #24]
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	e000e100 	.word	0xe000e100
 8002d10:	e000ed00 	.word	0xe000ed00

08002d14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b089      	sub	sp, #36	; 0x24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	f1c3 0307 	rsb	r3, r3, #7
 8002d2e:	2b04      	cmp	r3, #4
 8002d30:	bf28      	it	cs
 8002d32:	2304      	movcs	r3, #4
 8002d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	3304      	adds	r3, #4
 8002d3a:	2b06      	cmp	r3, #6
 8002d3c:	d902      	bls.n	8002d44 <NVIC_EncodePriority+0x30>
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	3b03      	subs	r3, #3
 8002d42:	e000      	b.n	8002d46 <NVIC_EncodePriority+0x32>
 8002d44:	2300      	movs	r3, #0
 8002d46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d48:	f04f 32ff 	mov.w	r2, #4294967295
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d52:	43da      	mvns	r2, r3
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	401a      	ands	r2, r3
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	fa01 f303 	lsl.w	r3, r1, r3
 8002d66:	43d9      	mvns	r1, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d6c:	4313      	orrs	r3, r2
         );
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3724      	adds	r7, #36	; 0x24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b082      	sub	sp, #8
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f7ff ff4c 	bl	8002c20 <__NVIC_SetPriorityGrouping>
}
 8002d88:	bf00      	nop
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	4603      	mov	r3, r0
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
 8002d9c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002da2:	f7ff ff61 	bl	8002c68 <__NVIC_GetPriorityGrouping>
 8002da6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	68b9      	ldr	r1, [r7, #8]
 8002dac:	6978      	ldr	r0, [r7, #20]
 8002dae:	f7ff ffb1 	bl	8002d14 <NVIC_EncodePriority>
 8002db2:	4602      	mov	r2, r0
 8002db4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002db8:	4611      	mov	r1, r2
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff ff80 	bl	8002cc0 <__NVIC_SetPriority>
}
 8002dc0:	bf00      	nop
 8002dc2:	3718      	adds	r7, #24
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	4603      	mov	r3, r0
 8002dd0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7ff ff54 	bl	8002c84 <__NVIC_EnableIRQ>
}
 8002ddc:	bf00      	nop
 8002dde:	3708      	adds	r7, #8
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b089      	sub	sp, #36	; 0x24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002dee:	2300      	movs	r3, #0
 8002df0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002df2:	2300      	movs	r3, #0
 8002df4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002df6:	2300      	movs	r3, #0
 8002df8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002dfe:	2300      	movs	r3, #0
 8002e00:	61fb      	str	r3, [r7, #28]
 8002e02:	e175      	b.n	80030f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002e04:	2201      	movs	r2, #1
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	4013      	ands	r3, r2
 8002e16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e18:	693a      	ldr	r2, [r7, #16]
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	f040 8164 	bne.w	80030ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f003 0303 	and.w	r3, r3, #3
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d005      	beq.n	8002e3a <HAL_GPIO_Init+0x56>
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f003 0303 	and.w	r3, r3, #3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d130      	bne.n	8002e9c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	2203      	movs	r2, #3
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	68da      	ldr	r2, [r3, #12]
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e70:	2201      	movs	r2, #1
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	091b      	lsrs	r3, r3, #4
 8002e86:	f003 0201 	and.w	r2, r3, #1
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f003 0303 	and.w	r3, r3, #3
 8002ea4:	2b03      	cmp	r3, #3
 8002ea6:	d017      	beq.n	8002ed8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	2203      	movs	r2, #3
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	689a      	ldr	r2, [r3, #8]
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f003 0303 	and.w	r3, r3, #3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d123      	bne.n	8002f2c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	08da      	lsrs	r2, r3, #3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3208      	adds	r2, #8
 8002eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	f003 0307 	and.w	r3, r3, #7
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	220f      	movs	r2, #15
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	43db      	mvns	r3, r3
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	4013      	ands	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	691a      	ldr	r2, [r3, #16]
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	f003 0307 	and.w	r3, r3, #7
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	08da      	lsrs	r2, r3, #3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	3208      	adds	r2, #8
 8002f26:	69b9      	ldr	r1, [r7, #24]
 8002f28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	2203      	movs	r2, #3
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	4013      	ands	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f003 0203 	and.w	r2, r3, #3
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f000 80be 	beq.w	80030ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f6e:	4b66      	ldr	r3, [pc, #408]	; (8003108 <HAL_GPIO_Init+0x324>)
 8002f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f72:	4a65      	ldr	r2, [pc, #404]	; (8003108 <HAL_GPIO_Init+0x324>)
 8002f74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f78:	6453      	str	r3, [r2, #68]	; 0x44
 8002f7a:	4b63      	ldr	r3, [pc, #396]	; (8003108 <HAL_GPIO_Init+0x324>)
 8002f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f82:	60fb      	str	r3, [r7, #12]
 8002f84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002f86:	4a61      	ldr	r2, [pc, #388]	; (800310c <HAL_GPIO_Init+0x328>)
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	089b      	lsrs	r3, r3, #2
 8002f8c:	3302      	adds	r3, #2
 8002f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	f003 0303 	and.w	r3, r3, #3
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	220f      	movs	r2, #15
 8002f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a58      	ldr	r2, [pc, #352]	; (8003110 <HAL_GPIO_Init+0x32c>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d037      	beq.n	8003022 <HAL_GPIO_Init+0x23e>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a57      	ldr	r2, [pc, #348]	; (8003114 <HAL_GPIO_Init+0x330>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d031      	beq.n	800301e <HAL_GPIO_Init+0x23a>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a56      	ldr	r2, [pc, #344]	; (8003118 <HAL_GPIO_Init+0x334>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d02b      	beq.n	800301a <HAL_GPIO_Init+0x236>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a55      	ldr	r2, [pc, #340]	; (800311c <HAL_GPIO_Init+0x338>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d025      	beq.n	8003016 <HAL_GPIO_Init+0x232>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a54      	ldr	r2, [pc, #336]	; (8003120 <HAL_GPIO_Init+0x33c>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d01f      	beq.n	8003012 <HAL_GPIO_Init+0x22e>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a53      	ldr	r2, [pc, #332]	; (8003124 <HAL_GPIO_Init+0x340>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d019      	beq.n	800300e <HAL_GPIO_Init+0x22a>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a52      	ldr	r2, [pc, #328]	; (8003128 <HAL_GPIO_Init+0x344>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d013      	beq.n	800300a <HAL_GPIO_Init+0x226>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a51      	ldr	r2, [pc, #324]	; (800312c <HAL_GPIO_Init+0x348>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d00d      	beq.n	8003006 <HAL_GPIO_Init+0x222>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a50      	ldr	r2, [pc, #320]	; (8003130 <HAL_GPIO_Init+0x34c>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d007      	beq.n	8003002 <HAL_GPIO_Init+0x21e>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a4f      	ldr	r2, [pc, #316]	; (8003134 <HAL_GPIO_Init+0x350>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d101      	bne.n	8002ffe <HAL_GPIO_Init+0x21a>
 8002ffa:	2309      	movs	r3, #9
 8002ffc:	e012      	b.n	8003024 <HAL_GPIO_Init+0x240>
 8002ffe:	230a      	movs	r3, #10
 8003000:	e010      	b.n	8003024 <HAL_GPIO_Init+0x240>
 8003002:	2308      	movs	r3, #8
 8003004:	e00e      	b.n	8003024 <HAL_GPIO_Init+0x240>
 8003006:	2307      	movs	r3, #7
 8003008:	e00c      	b.n	8003024 <HAL_GPIO_Init+0x240>
 800300a:	2306      	movs	r3, #6
 800300c:	e00a      	b.n	8003024 <HAL_GPIO_Init+0x240>
 800300e:	2305      	movs	r3, #5
 8003010:	e008      	b.n	8003024 <HAL_GPIO_Init+0x240>
 8003012:	2304      	movs	r3, #4
 8003014:	e006      	b.n	8003024 <HAL_GPIO_Init+0x240>
 8003016:	2303      	movs	r3, #3
 8003018:	e004      	b.n	8003024 <HAL_GPIO_Init+0x240>
 800301a:	2302      	movs	r3, #2
 800301c:	e002      	b.n	8003024 <HAL_GPIO_Init+0x240>
 800301e:	2301      	movs	r3, #1
 8003020:	e000      	b.n	8003024 <HAL_GPIO_Init+0x240>
 8003022:	2300      	movs	r3, #0
 8003024:	69fa      	ldr	r2, [r7, #28]
 8003026:	f002 0203 	and.w	r2, r2, #3
 800302a:	0092      	lsls	r2, r2, #2
 800302c:	4093      	lsls	r3, r2
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4313      	orrs	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003034:	4935      	ldr	r1, [pc, #212]	; (800310c <HAL_GPIO_Init+0x328>)
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	089b      	lsrs	r3, r3, #2
 800303a:	3302      	adds	r3, #2
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003042:	4b3d      	ldr	r3, [pc, #244]	; (8003138 <HAL_GPIO_Init+0x354>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	43db      	mvns	r3, r3
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	4013      	ands	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	4313      	orrs	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003066:	4a34      	ldr	r2, [pc, #208]	; (8003138 <HAL_GPIO_Init+0x354>)
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800306c:	4b32      	ldr	r3, [pc, #200]	; (8003138 <HAL_GPIO_Init+0x354>)
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	43db      	mvns	r3, r3
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	4013      	ands	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d003      	beq.n	8003090 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	4313      	orrs	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003090:	4a29      	ldr	r2, [pc, #164]	; (8003138 <HAL_GPIO_Init+0x354>)
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003096:	4b28      	ldr	r3, [pc, #160]	; (8003138 <HAL_GPIO_Init+0x354>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	43db      	mvns	r3, r3
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	4013      	ands	r3, r2
 80030a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030ba:	4a1f      	ldr	r2, [pc, #124]	; (8003138 <HAL_GPIO_Init+0x354>)
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030c0:	4b1d      	ldr	r3, [pc, #116]	; (8003138 <HAL_GPIO_Init+0x354>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	43db      	mvns	r3, r3
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	4013      	ands	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030e4:	4a14      	ldr	r2, [pc, #80]	; (8003138 <HAL_GPIO_Init+0x354>)
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	3301      	adds	r3, #1
 80030ee:	61fb      	str	r3, [r7, #28]
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	2b0f      	cmp	r3, #15
 80030f4:	f67f ae86 	bls.w	8002e04 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80030f8:	bf00      	nop
 80030fa:	bf00      	nop
 80030fc:	3724      	adds	r7, #36	; 0x24
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	40023800 	.word	0x40023800
 800310c:	40013800 	.word	0x40013800
 8003110:	40020000 	.word	0x40020000
 8003114:	40020400 	.word	0x40020400
 8003118:	40020800 	.word	0x40020800
 800311c:	40020c00 	.word	0x40020c00
 8003120:	40021000 	.word	0x40021000
 8003124:	40021400 	.word	0x40021400
 8003128:	40021800 	.word	0x40021800
 800312c:	40021c00 	.word	0x40021c00
 8003130:	40022000 	.word	0x40022000
 8003134:	40022400 	.word	0x40022400
 8003138:	40013c00 	.word	0x40013c00

0800313c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	460b      	mov	r3, r1
 8003146:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	691a      	ldr	r2, [r3, #16]
 800314c:	887b      	ldrh	r3, [r7, #2]
 800314e:	4013      	ands	r3, r2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d002      	beq.n	800315a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003154:	2301      	movs	r3, #1
 8003156:	73fb      	strb	r3, [r7, #15]
 8003158:	e001      	b.n	800315e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800315a:	2300      	movs	r3, #0
 800315c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800315e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003160:	4618      	mov	r0, r3
 8003162:	3714      	adds	r7, #20
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	460b      	mov	r3, r1
 8003176:	807b      	strh	r3, [r7, #2]
 8003178:	4613      	mov	r3, r2
 800317a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800317c:	787b      	ldrb	r3, [r7, #1]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003182:	887a      	ldrh	r2, [r7, #2]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003188:	e003      	b.n	8003192 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800318a:	887b      	ldrh	r3, [r7, #2]
 800318c:	041a      	lsls	r2, r3, #16
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	619a      	str	r2, [r3, #24]
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800319e:	b480      	push	{r7}
 80031a0:	b085      	sub	sp, #20
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
 80031a6:	460b      	mov	r3, r1
 80031a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80031b0:	887a      	ldrh	r2, [r7, #2]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	4013      	ands	r3, r2
 80031b6:	041a      	lsls	r2, r3, #16
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	43d9      	mvns	r1, r3
 80031bc:	887b      	ldrh	r3, [r7, #2]
 80031be:	400b      	ands	r3, r1
 80031c0:	431a      	orrs	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	619a      	str	r2, [r3, #24]
}
 80031c6:	bf00      	nop
 80031c8:	3714      	adds	r7, #20
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
	...

080031d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80031dc:	2300      	movs	r3, #0
 80031de:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e29b      	b.n	8003722 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f000 8087 	beq.w	8003306 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031f8:	4b96      	ldr	r3, [pc, #600]	; (8003454 <HAL_RCC_OscConfig+0x280>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f003 030c 	and.w	r3, r3, #12
 8003200:	2b04      	cmp	r3, #4
 8003202:	d00c      	beq.n	800321e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003204:	4b93      	ldr	r3, [pc, #588]	; (8003454 <HAL_RCC_OscConfig+0x280>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f003 030c 	and.w	r3, r3, #12
 800320c:	2b08      	cmp	r3, #8
 800320e:	d112      	bne.n	8003236 <HAL_RCC_OscConfig+0x62>
 8003210:	4b90      	ldr	r3, [pc, #576]	; (8003454 <HAL_RCC_OscConfig+0x280>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003218:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800321c:	d10b      	bne.n	8003236 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800321e:	4b8d      	ldr	r3, [pc, #564]	; (8003454 <HAL_RCC_OscConfig+0x280>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d06c      	beq.n	8003304 <HAL_RCC_OscConfig+0x130>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d168      	bne.n	8003304 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e275      	b.n	8003722 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800323e:	d106      	bne.n	800324e <HAL_RCC_OscConfig+0x7a>
 8003240:	4b84      	ldr	r3, [pc, #528]	; (8003454 <HAL_RCC_OscConfig+0x280>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a83      	ldr	r2, [pc, #524]	; (8003454 <HAL_RCC_OscConfig+0x280>)
 8003246:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800324a:	6013      	str	r3, [r2, #0]
 800324c:	e02e      	b.n	80032ac <HAL_RCC_OscConfig+0xd8>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10c      	bne.n	8003270 <HAL_RCC_OscConfig+0x9c>
 8003256:	4b7f      	ldr	r3, [pc, #508]	; (8003454 <HAL_RCC_OscConfig+0x280>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a7e      	ldr	r2, [pc, #504]	; (8003454 <HAL_RCC_OscConfig+0x280>)
 800325c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003260:	6013      	str	r3, [r2, #0]
 8003262:	4b7c      	ldr	r3, [pc, #496]	; (8003454 <HAL_RCC_OscConfig+0x280>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a7b      	ldr	r2, [pc, #492]	; (8003454 <HAL_RCC_OscConfig+0x280>)
 8003268:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800326c:	6013      	str	r3, [r2, #0]
 800326e:	e01d      	b.n	80032ac <HAL_RCC_OscConfig+0xd8>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003278:	d10c      	bne.n	8003294 <HAL_RCC_OscConfig+0xc0>
 800327a:	4b76      	ldr	r3, [pc, #472]	; (8003454 <HAL_RCC_OscConfig+0x280>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a75      	ldr	r2, [pc, #468]	; (8003454 <HAL_RCC_OscConfig+0x280>)
 8003280:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003284:	6013      	str	r3, [r2, #0]
 8003286:	4b73      	ldr	r3, [pc, #460]	; (8003454 <HAL_RCC_OscConfig+0x280>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a72      	ldr	r2, [pc, #456]	; (8003454 <HAL_RCC_OscConfig+0x280>)
 800328c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003290:	6013      	str	r3, [r2, #0]
 8003292:	e00b      	b.n	80032ac <HAL_RCC_OscConfig+0xd8>
 8003294:	4b6f      	ldr	r3, [pc, #444]	; (8003454 <HAL_RCC_OscConfig+0x280>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a6e      	ldr	r2, [pc, #440]	; (8003454 <HAL_RCC_OscConfig+0x280>)
 800329a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800329e:	6013      	str	r3, [r2, #0]
 80032a0:	4b6c      	ldr	r3, [pc, #432]	; (8003454 <HAL_RCC_OscConfig+0x280>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a6b      	ldr	r2, [pc, #428]	; (8003454 <HAL_RCC_OscConfig+0x280>)
 80032a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d013      	beq.n	80032dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b4:	f7fe fa16 	bl	80016e4 <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ba:	e008      	b.n	80032ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032bc:	f7fe fa12 	bl	80016e4 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b64      	cmp	r3, #100	; 0x64
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e229      	b.n	8003722 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ce:	4b61      	ldr	r3, [pc, #388]	; (8003454 <HAL_RCC_OscConfig+0x280>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d0f0      	beq.n	80032bc <HAL_RCC_OscConfig+0xe8>
 80032da:	e014      	b.n	8003306 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032dc:	f7fe fa02 	bl	80016e4 <HAL_GetTick>
 80032e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032e2:	e008      	b.n	80032f6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032e4:	f7fe f9fe 	bl	80016e4 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b64      	cmp	r3, #100	; 0x64
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e215      	b.n	8003722 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032f6:	4b57      	ldr	r3, [pc, #348]	; (8003454 <HAL_RCC_OscConfig+0x280>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1f0      	bne.n	80032e4 <HAL_RCC_OscConfig+0x110>
 8003302:	e000      	b.n	8003306 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003304:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d069      	beq.n	80033e6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003312:	4b50      	ldr	r3, [pc, #320]	; (8003454 <HAL_RCC_OscConfig+0x280>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 030c 	and.w	r3, r3, #12
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00b      	beq.n	8003336 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800331e:	4b4d      	ldr	r3, [pc, #308]	; (8003454 <HAL_RCC_OscConfig+0x280>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 030c 	and.w	r3, r3, #12
 8003326:	2b08      	cmp	r3, #8
 8003328:	d11c      	bne.n	8003364 <HAL_RCC_OscConfig+0x190>
 800332a:	4b4a      	ldr	r3, [pc, #296]	; (8003454 <HAL_RCC_OscConfig+0x280>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d116      	bne.n	8003364 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003336:	4b47      	ldr	r3, [pc, #284]	; (8003454 <HAL_RCC_OscConfig+0x280>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d005      	beq.n	800334e <HAL_RCC_OscConfig+0x17a>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d001      	beq.n	800334e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e1e9      	b.n	8003722 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800334e:	4b41      	ldr	r3, [pc, #260]	; (8003454 <HAL_RCC_OscConfig+0x280>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	493d      	ldr	r1, [pc, #244]	; (8003454 <HAL_RCC_OscConfig+0x280>)
 800335e:	4313      	orrs	r3, r2
 8003360:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003362:	e040      	b.n	80033e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d023      	beq.n	80033b4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800336c:	4b39      	ldr	r3, [pc, #228]	; (8003454 <HAL_RCC_OscConfig+0x280>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a38      	ldr	r2, [pc, #224]	; (8003454 <HAL_RCC_OscConfig+0x280>)
 8003372:	f043 0301 	orr.w	r3, r3, #1
 8003376:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003378:	f7fe f9b4 	bl	80016e4 <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800337e:	e008      	b.n	8003392 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003380:	f7fe f9b0 	bl	80016e4 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e1c7      	b.n	8003722 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003392:	4b30      	ldr	r3, [pc, #192]	; (8003454 <HAL_RCC_OscConfig+0x280>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d0f0      	beq.n	8003380 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800339e:	4b2d      	ldr	r3, [pc, #180]	; (8003454 <HAL_RCC_OscConfig+0x280>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	4929      	ldr	r1, [pc, #164]	; (8003454 <HAL_RCC_OscConfig+0x280>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	600b      	str	r3, [r1, #0]
 80033b2:	e018      	b.n	80033e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033b4:	4b27      	ldr	r3, [pc, #156]	; (8003454 <HAL_RCC_OscConfig+0x280>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a26      	ldr	r2, [pc, #152]	; (8003454 <HAL_RCC_OscConfig+0x280>)
 80033ba:	f023 0301 	bic.w	r3, r3, #1
 80033be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c0:	f7fe f990 	bl	80016e4 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033c8:	f7fe f98c 	bl	80016e4 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e1a3      	b.n	8003722 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033da:	4b1e      	ldr	r3, [pc, #120]	; (8003454 <HAL_RCC_OscConfig+0x280>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1f0      	bne.n	80033c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0308 	and.w	r3, r3, #8
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d038      	beq.n	8003464 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d019      	beq.n	800342e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033fa:	4b16      	ldr	r3, [pc, #88]	; (8003454 <HAL_RCC_OscConfig+0x280>)
 80033fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033fe:	4a15      	ldr	r2, [pc, #84]	; (8003454 <HAL_RCC_OscConfig+0x280>)
 8003400:	f043 0301 	orr.w	r3, r3, #1
 8003404:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003406:	f7fe f96d 	bl	80016e4 <HAL_GetTick>
 800340a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800340c:	e008      	b.n	8003420 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800340e:	f7fe f969 	bl	80016e4 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e180      	b.n	8003722 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003420:	4b0c      	ldr	r3, [pc, #48]	; (8003454 <HAL_RCC_OscConfig+0x280>)
 8003422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d0f0      	beq.n	800340e <HAL_RCC_OscConfig+0x23a>
 800342c:	e01a      	b.n	8003464 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800342e:	4b09      	ldr	r3, [pc, #36]	; (8003454 <HAL_RCC_OscConfig+0x280>)
 8003430:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003432:	4a08      	ldr	r2, [pc, #32]	; (8003454 <HAL_RCC_OscConfig+0x280>)
 8003434:	f023 0301 	bic.w	r3, r3, #1
 8003438:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800343a:	f7fe f953 	bl	80016e4 <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003440:	e00a      	b.n	8003458 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003442:	f7fe f94f 	bl	80016e4 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d903      	bls.n	8003458 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e166      	b.n	8003722 <HAL_RCC_OscConfig+0x54e>
 8003454:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003458:	4b92      	ldr	r3, [pc, #584]	; (80036a4 <HAL_RCC_OscConfig+0x4d0>)
 800345a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1ee      	bne.n	8003442 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0304 	and.w	r3, r3, #4
 800346c:	2b00      	cmp	r3, #0
 800346e:	f000 80a4 	beq.w	80035ba <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003472:	4b8c      	ldr	r3, [pc, #560]	; (80036a4 <HAL_RCC_OscConfig+0x4d0>)
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10d      	bne.n	800349a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800347e:	4b89      	ldr	r3, [pc, #548]	; (80036a4 <HAL_RCC_OscConfig+0x4d0>)
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	4a88      	ldr	r2, [pc, #544]	; (80036a4 <HAL_RCC_OscConfig+0x4d0>)
 8003484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003488:	6413      	str	r3, [r2, #64]	; 0x40
 800348a:	4b86      	ldr	r3, [pc, #536]	; (80036a4 <HAL_RCC_OscConfig+0x4d0>)
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003492:	60bb      	str	r3, [r7, #8]
 8003494:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003496:	2301      	movs	r3, #1
 8003498:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800349a:	4b83      	ldr	r3, [pc, #524]	; (80036a8 <HAL_RCC_OscConfig+0x4d4>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d118      	bne.n	80034d8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80034a6:	4b80      	ldr	r3, [pc, #512]	; (80036a8 <HAL_RCC_OscConfig+0x4d4>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a7f      	ldr	r2, [pc, #508]	; (80036a8 <HAL_RCC_OscConfig+0x4d4>)
 80034ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034b2:	f7fe f917 	bl	80016e4 <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034b8:	e008      	b.n	80034cc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ba:	f7fe f913 	bl	80016e4 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b64      	cmp	r3, #100	; 0x64
 80034c6:	d901      	bls.n	80034cc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e12a      	b.n	8003722 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034cc:	4b76      	ldr	r3, [pc, #472]	; (80036a8 <HAL_RCC_OscConfig+0x4d4>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0f0      	beq.n	80034ba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d106      	bne.n	80034ee <HAL_RCC_OscConfig+0x31a>
 80034e0:	4b70      	ldr	r3, [pc, #448]	; (80036a4 <HAL_RCC_OscConfig+0x4d0>)
 80034e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e4:	4a6f      	ldr	r2, [pc, #444]	; (80036a4 <HAL_RCC_OscConfig+0x4d0>)
 80034e6:	f043 0301 	orr.w	r3, r3, #1
 80034ea:	6713      	str	r3, [r2, #112]	; 0x70
 80034ec:	e02d      	b.n	800354a <HAL_RCC_OscConfig+0x376>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10c      	bne.n	8003510 <HAL_RCC_OscConfig+0x33c>
 80034f6:	4b6b      	ldr	r3, [pc, #428]	; (80036a4 <HAL_RCC_OscConfig+0x4d0>)
 80034f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fa:	4a6a      	ldr	r2, [pc, #424]	; (80036a4 <HAL_RCC_OscConfig+0x4d0>)
 80034fc:	f023 0301 	bic.w	r3, r3, #1
 8003500:	6713      	str	r3, [r2, #112]	; 0x70
 8003502:	4b68      	ldr	r3, [pc, #416]	; (80036a4 <HAL_RCC_OscConfig+0x4d0>)
 8003504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003506:	4a67      	ldr	r2, [pc, #412]	; (80036a4 <HAL_RCC_OscConfig+0x4d0>)
 8003508:	f023 0304 	bic.w	r3, r3, #4
 800350c:	6713      	str	r3, [r2, #112]	; 0x70
 800350e:	e01c      	b.n	800354a <HAL_RCC_OscConfig+0x376>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	2b05      	cmp	r3, #5
 8003516:	d10c      	bne.n	8003532 <HAL_RCC_OscConfig+0x35e>
 8003518:	4b62      	ldr	r3, [pc, #392]	; (80036a4 <HAL_RCC_OscConfig+0x4d0>)
 800351a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351c:	4a61      	ldr	r2, [pc, #388]	; (80036a4 <HAL_RCC_OscConfig+0x4d0>)
 800351e:	f043 0304 	orr.w	r3, r3, #4
 8003522:	6713      	str	r3, [r2, #112]	; 0x70
 8003524:	4b5f      	ldr	r3, [pc, #380]	; (80036a4 <HAL_RCC_OscConfig+0x4d0>)
 8003526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003528:	4a5e      	ldr	r2, [pc, #376]	; (80036a4 <HAL_RCC_OscConfig+0x4d0>)
 800352a:	f043 0301 	orr.w	r3, r3, #1
 800352e:	6713      	str	r3, [r2, #112]	; 0x70
 8003530:	e00b      	b.n	800354a <HAL_RCC_OscConfig+0x376>
 8003532:	4b5c      	ldr	r3, [pc, #368]	; (80036a4 <HAL_RCC_OscConfig+0x4d0>)
 8003534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003536:	4a5b      	ldr	r2, [pc, #364]	; (80036a4 <HAL_RCC_OscConfig+0x4d0>)
 8003538:	f023 0301 	bic.w	r3, r3, #1
 800353c:	6713      	str	r3, [r2, #112]	; 0x70
 800353e:	4b59      	ldr	r3, [pc, #356]	; (80036a4 <HAL_RCC_OscConfig+0x4d0>)
 8003540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003542:	4a58      	ldr	r2, [pc, #352]	; (80036a4 <HAL_RCC_OscConfig+0x4d0>)
 8003544:	f023 0304 	bic.w	r3, r3, #4
 8003548:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d015      	beq.n	800357e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003552:	f7fe f8c7 	bl	80016e4 <HAL_GetTick>
 8003556:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003558:	e00a      	b.n	8003570 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800355a:	f7fe f8c3 	bl	80016e4 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	f241 3288 	movw	r2, #5000	; 0x1388
 8003568:	4293      	cmp	r3, r2
 800356a:	d901      	bls.n	8003570 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e0d8      	b.n	8003722 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003570:	4b4c      	ldr	r3, [pc, #304]	; (80036a4 <HAL_RCC_OscConfig+0x4d0>)
 8003572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d0ee      	beq.n	800355a <HAL_RCC_OscConfig+0x386>
 800357c:	e014      	b.n	80035a8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800357e:	f7fe f8b1 	bl	80016e4 <HAL_GetTick>
 8003582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003584:	e00a      	b.n	800359c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003586:	f7fe f8ad 	bl	80016e4 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	f241 3288 	movw	r2, #5000	; 0x1388
 8003594:	4293      	cmp	r3, r2
 8003596:	d901      	bls.n	800359c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e0c2      	b.n	8003722 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800359c:	4b41      	ldr	r3, [pc, #260]	; (80036a4 <HAL_RCC_OscConfig+0x4d0>)
 800359e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1ee      	bne.n	8003586 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035a8:	7dfb      	ldrb	r3, [r7, #23]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d105      	bne.n	80035ba <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035ae:	4b3d      	ldr	r3, [pc, #244]	; (80036a4 <HAL_RCC_OscConfig+0x4d0>)
 80035b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b2:	4a3c      	ldr	r2, [pc, #240]	; (80036a4 <HAL_RCC_OscConfig+0x4d0>)
 80035b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 80ae 	beq.w	8003720 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035c4:	4b37      	ldr	r3, [pc, #220]	; (80036a4 <HAL_RCC_OscConfig+0x4d0>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f003 030c 	and.w	r3, r3, #12
 80035cc:	2b08      	cmp	r3, #8
 80035ce:	d06d      	beq.n	80036ac <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d14b      	bne.n	8003670 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035d8:	4b32      	ldr	r3, [pc, #200]	; (80036a4 <HAL_RCC_OscConfig+0x4d0>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a31      	ldr	r2, [pc, #196]	; (80036a4 <HAL_RCC_OscConfig+0x4d0>)
 80035de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e4:	f7fe f87e 	bl	80016e4 <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ec:	f7fe f87a 	bl	80016e4 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e091      	b.n	8003722 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035fe:	4b29      	ldr	r3, [pc, #164]	; (80036a4 <HAL_RCC_OscConfig+0x4d0>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1f0      	bne.n	80035ec <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	69da      	ldr	r2, [r3, #28]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	431a      	orrs	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003618:	019b      	lsls	r3, r3, #6
 800361a:	431a      	orrs	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003620:	085b      	lsrs	r3, r3, #1
 8003622:	3b01      	subs	r3, #1
 8003624:	041b      	lsls	r3, r3, #16
 8003626:	431a      	orrs	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362c:	061b      	lsls	r3, r3, #24
 800362e:	431a      	orrs	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003634:	071b      	lsls	r3, r3, #28
 8003636:	491b      	ldr	r1, [pc, #108]	; (80036a4 <HAL_RCC_OscConfig+0x4d0>)
 8003638:	4313      	orrs	r3, r2
 800363a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800363c:	4b19      	ldr	r3, [pc, #100]	; (80036a4 <HAL_RCC_OscConfig+0x4d0>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a18      	ldr	r2, [pc, #96]	; (80036a4 <HAL_RCC_OscConfig+0x4d0>)
 8003642:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003646:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003648:	f7fe f84c 	bl	80016e4 <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003650:	f7fe f848 	bl	80016e4 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e05f      	b.n	8003722 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003662:	4b10      	ldr	r3, [pc, #64]	; (80036a4 <HAL_RCC_OscConfig+0x4d0>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d0f0      	beq.n	8003650 <HAL_RCC_OscConfig+0x47c>
 800366e:	e057      	b.n	8003720 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003670:	4b0c      	ldr	r3, [pc, #48]	; (80036a4 <HAL_RCC_OscConfig+0x4d0>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a0b      	ldr	r2, [pc, #44]	; (80036a4 <HAL_RCC_OscConfig+0x4d0>)
 8003676:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800367a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800367c:	f7fe f832 	bl	80016e4 <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003684:	f7fe f82e 	bl	80016e4 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e045      	b.n	8003722 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003696:	4b03      	ldr	r3, [pc, #12]	; (80036a4 <HAL_RCC_OscConfig+0x4d0>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1f0      	bne.n	8003684 <HAL_RCC_OscConfig+0x4b0>
 80036a2:	e03d      	b.n	8003720 <HAL_RCC_OscConfig+0x54c>
 80036a4:	40023800 	.word	0x40023800
 80036a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80036ac:	4b1f      	ldr	r3, [pc, #124]	; (800372c <HAL_RCC_OscConfig+0x558>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d030      	beq.n	800371c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d129      	bne.n	800371c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d122      	bne.n	800371c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036dc:	4013      	ands	r3, r2
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036e2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d119      	bne.n	800371c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f2:	085b      	lsrs	r3, r3, #1
 80036f4:	3b01      	subs	r3, #1
 80036f6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d10f      	bne.n	800371c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003706:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003708:	429a      	cmp	r2, r3
 800370a:	d107      	bne.n	800371c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003716:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003718:	429a      	cmp	r2, r3
 800371a:	d001      	beq.n	8003720 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e000      	b.n	8003722 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3718      	adds	r7, #24
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	40023800 	.word	0x40023800

08003730 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800373a:	2300      	movs	r3, #0
 800373c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d101      	bne.n	8003748 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e0d0      	b.n	80038ea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003748:	4b6a      	ldr	r3, [pc, #424]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 030f 	and.w	r3, r3, #15
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	429a      	cmp	r2, r3
 8003754:	d910      	bls.n	8003778 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003756:	4b67      	ldr	r3, [pc, #412]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f023 020f 	bic.w	r2, r3, #15
 800375e:	4965      	ldr	r1, [pc, #404]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	4313      	orrs	r3, r2
 8003764:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003766:	4b63      	ldr	r3, [pc, #396]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 030f 	and.w	r3, r3, #15
 800376e:	683a      	ldr	r2, [r7, #0]
 8003770:	429a      	cmp	r2, r3
 8003772:	d001      	beq.n	8003778 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e0b8      	b.n	80038ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d020      	beq.n	80037c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0304 	and.w	r3, r3, #4
 800378c:	2b00      	cmp	r3, #0
 800378e:	d005      	beq.n	800379c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003790:	4b59      	ldr	r3, [pc, #356]	; (80038f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	4a58      	ldr	r2, [pc, #352]	; (80038f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003796:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800379a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0308 	and.w	r3, r3, #8
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d005      	beq.n	80037b4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037a8:	4b53      	ldr	r3, [pc, #332]	; (80038f8 <HAL_RCC_ClockConfig+0x1c8>)
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	4a52      	ldr	r2, [pc, #328]	; (80038f8 <HAL_RCC_ClockConfig+0x1c8>)
 80037ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037b4:	4b50      	ldr	r3, [pc, #320]	; (80038f8 <HAL_RCC_ClockConfig+0x1c8>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	494d      	ldr	r1, [pc, #308]	; (80038f8 <HAL_RCC_ClockConfig+0x1c8>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d040      	beq.n	8003854 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d107      	bne.n	80037ea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037da:	4b47      	ldr	r3, [pc, #284]	; (80038f8 <HAL_RCC_ClockConfig+0x1c8>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d115      	bne.n	8003812 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e07f      	b.n	80038ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d107      	bne.n	8003802 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037f2:	4b41      	ldr	r3, [pc, #260]	; (80038f8 <HAL_RCC_ClockConfig+0x1c8>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d109      	bne.n	8003812 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e073      	b.n	80038ea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003802:	4b3d      	ldr	r3, [pc, #244]	; (80038f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e06b      	b.n	80038ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003812:	4b39      	ldr	r3, [pc, #228]	; (80038f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f023 0203 	bic.w	r2, r3, #3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	4936      	ldr	r1, [pc, #216]	; (80038f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003820:	4313      	orrs	r3, r2
 8003822:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003824:	f7fd ff5e 	bl	80016e4 <HAL_GetTick>
 8003828:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800382a:	e00a      	b.n	8003842 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800382c:	f7fd ff5a 	bl	80016e4 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	f241 3288 	movw	r2, #5000	; 0x1388
 800383a:	4293      	cmp	r3, r2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e053      	b.n	80038ea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003842:	4b2d      	ldr	r3, [pc, #180]	; (80038f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 020c 	and.w	r2, r3, #12
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	429a      	cmp	r2, r3
 8003852:	d1eb      	bne.n	800382c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003854:	4b27      	ldr	r3, [pc, #156]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 030f 	and.w	r3, r3, #15
 800385c:	683a      	ldr	r2, [r7, #0]
 800385e:	429a      	cmp	r2, r3
 8003860:	d210      	bcs.n	8003884 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003862:	4b24      	ldr	r3, [pc, #144]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f023 020f 	bic.w	r2, r3, #15
 800386a:	4922      	ldr	r1, [pc, #136]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	4313      	orrs	r3, r2
 8003870:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003872:	4b20      	ldr	r3, [pc, #128]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 030f 	and.w	r3, r3, #15
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	429a      	cmp	r2, r3
 800387e:	d001      	beq.n	8003884 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e032      	b.n	80038ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0304 	and.w	r3, r3, #4
 800388c:	2b00      	cmp	r3, #0
 800388e:	d008      	beq.n	80038a2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003890:	4b19      	ldr	r3, [pc, #100]	; (80038f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	4916      	ldr	r1, [pc, #88]	; (80038f8 <HAL_RCC_ClockConfig+0x1c8>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0308 	and.w	r3, r3, #8
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d009      	beq.n	80038c2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038ae:	4b12      	ldr	r3, [pc, #72]	; (80038f8 <HAL_RCC_ClockConfig+0x1c8>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	490e      	ldr	r1, [pc, #56]	; (80038f8 <HAL_RCC_ClockConfig+0x1c8>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038c2:	f000 f821 	bl	8003908 <HAL_RCC_GetSysClockFreq>
 80038c6:	4602      	mov	r2, r0
 80038c8:	4b0b      	ldr	r3, [pc, #44]	; (80038f8 <HAL_RCC_ClockConfig+0x1c8>)
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	091b      	lsrs	r3, r3, #4
 80038ce:	f003 030f 	and.w	r3, r3, #15
 80038d2:	490a      	ldr	r1, [pc, #40]	; (80038fc <HAL_RCC_ClockConfig+0x1cc>)
 80038d4:	5ccb      	ldrb	r3, [r1, r3]
 80038d6:	fa22 f303 	lsr.w	r3, r2, r3
 80038da:	4a09      	ldr	r2, [pc, #36]	; (8003900 <HAL_RCC_ClockConfig+0x1d0>)
 80038dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038de:	4b09      	ldr	r3, [pc, #36]	; (8003904 <HAL_RCC_ClockConfig+0x1d4>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7fd fdfe 	bl	80014e4 <HAL_InitTick>

  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	40023c00 	.word	0x40023c00
 80038f8:	40023800 	.word	0x40023800
 80038fc:	080072f0 	.word	0x080072f0
 8003900:	20000000 	.word	0x20000000
 8003904:	20000004 	.word	0x20000004

08003908 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003908:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800390c:	b094      	sub	sp, #80	; 0x50
 800390e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003910:	2300      	movs	r3, #0
 8003912:	647b      	str	r3, [r7, #68]	; 0x44
 8003914:	2300      	movs	r3, #0
 8003916:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003918:	2300      	movs	r3, #0
 800391a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800391c:	2300      	movs	r3, #0
 800391e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003920:	4b79      	ldr	r3, [pc, #484]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f003 030c 	and.w	r3, r3, #12
 8003928:	2b08      	cmp	r3, #8
 800392a:	d00d      	beq.n	8003948 <HAL_RCC_GetSysClockFreq+0x40>
 800392c:	2b08      	cmp	r3, #8
 800392e:	f200 80e1 	bhi.w	8003af4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003932:	2b00      	cmp	r3, #0
 8003934:	d002      	beq.n	800393c <HAL_RCC_GetSysClockFreq+0x34>
 8003936:	2b04      	cmp	r3, #4
 8003938:	d003      	beq.n	8003942 <HAL_RCC_GetSysClockFreq+0x3a>
 800393a:	e0db      	b.n	8003af4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800393c:	4b73      	ldr	r3, [pc, #460]	; (8003b0c <HAL_RCC_GetSysClockFreq+0x204>)
 800393e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003940:	e0db      	b.n	8003afa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003942:	4b73      	ldr	r3, [pc, #460]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x208>)
 8003944:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003946:	e0d8      	b.n	8003afa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003948:	4b6f      	ldr	r3, [pc, #444]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x200>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003950:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003952:	4b6d      	ldr	r3, [pc, #436]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d063      	beq.n	8003a26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800395e:	4b6a      	ldr	r3, [pc, #424]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	099b      	lsrs	r3, r3, #6
 8003964:	2200      	movs	r2, #0
 8003966:	63bb      	str	r3, [r7, #56]	; 0x38
 8003968:	63fa      	str	r2, [r7, #60]	; 0x3c
 800396a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800396c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003970:	633b      	str	r3, [r7, #48]	; 0x30
 8003972:	2300      	movs	r3, #0
 8003974:	637b      	str	r3, [r7, #52]	; 0x34
 8003976:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800397a:	4622      	mov	r2, r4
 800397c:	462b      	mov	r3, r5
 800397e:	f04f 0000 	mov.w	r0, #0
 8003982:	f04f 0100 	mov.w	r1, #0
 8003986:	0159      	lsls	r1, r3, #5
 8003988:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800398c:	0150      	lsls	r0, r2, #5
 800398e:	4602      	mov	r2, r0
 8003990:	460b      	mov	r3, r1
 8003992:	4621      	mov	r1, r4
 8003994:	1a51      	subs	r1, r2, r1
 8003996:	6139      	str	r1, [r7, #16]
 8003998:	4629      	mov	r1, r5
 800399a:	eb63 0301 	sbc.w	r3, r3, r1
 800399e:	617b      	str	r3, [r7, #20]
 80039a0:	f04f 0200 	mov.w	r2, #0
 80039a4:	f04f 0300 	mov.w	r3, #0
 80039a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039ac:	4659      	mov	r1, fp
 80039ae:	018b      	lsls	r3, r1, #6
 80039b0:	4651      	mov	r1, sl
 80039b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039b6:	4651      	mov	r1, sl
 80039b8:	018a      	lsls	r2, r1, #6
 80039ba:	4651      	mov	r1, sl
 80039bc:	ebb2 0801 	subs.w	r8, r2, r1
 80039c0:	4659      	mov	r1, fp
 80039c2:	eb63 0901 	sbc.w	r9, r3, r1
 80039c6:	f04f 0200 	mov.w	r2, #0
 80039ca:	f04f 0300 	mov.w	r3, #0
 80039ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039da:	4690      	mov	r8, r2
 80039dc:	4699      	mov	r9, r3
 80039de:	4623      	mov	r3, r4
 80039e0:	eb18 0303 	adds.w	r3, r8, r3
 80039e4:	60bb      	str	r3, [r7, #8]
 80039e6:	462b      	mov	r3, r5
 80039e8:	eb49 0303 	adc.w	r3, r9, r3
 80039ec:	60fb      	str	r3, [r7, #12]
 80039ee:	f04f 0200 	mov.w	r2, #0
 80039f2:	f04f 0300 	mov.w	r3, #0
 80039f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80039fa:	4629      	mov	r1, r5
 80039fc:	024b      	lsls	r3, r1, #9
 80039fe:	4621      	mov	r1, r4
 8003a00:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a04:	4621      	mov	r1, r4
 8003a06:	024a      	lsls	r2, r1, #9
 8003a08:	4610      	mov	r0, r2
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a0e:	2200      	movs	r2, #0
 8003a10:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a18:	f7fc fc12 	bl	8000240 <__aeabi_uldivmod>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	460b      	mov	r3, r1
 8003a20:	4613      	mov	r3, r2
 8003a22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a24:	e058      	b.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a26:	4b38      	ldr	r3, [pc, #224]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	099b      	lsrs	r3, r3, #6
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	4618      	mov	r0, r3
 8003a30:	4611      	mov	r1, r2
 8003a32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a36:	623b      	str	r3, [r7, #32]
 8003a38:	2300      	movs	r3, #0
 8003a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a40:	4642      	mov	r2, r8
 8003a42:	464b      	mov	r3, r9
 8003a44:	f04f 0000 	mov.w	r0, #0
 8003a48:	f04f 0100 	mov.w	r1, #0
 8003a4c:	0159      	lsls	r1, r3, #5
 8003a4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a52:	0150      	lsls	r0, r2, #5
 8003a54:	4602      	mov	r2, r0
 8003a56:	460b      	mov	r3, r1
 8003a58:	4641      	mov	r1, r8
 8003a5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a5e:	4649      	mov	r1, r9
 8003a60:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a64:	f04f 0200 	mov.w	r2, #0
 8003a68:	f04f 0300 	mov.w	r3, #0
 8003a6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a78:	ebb2 040a 	subs.w	r4, r2, sl
 8003a7c:	eb63 050b 	sbc.w	r5, r3, fp
 8003a80:	f04f 0200 	mov.w	r2, #0
 8003a84:	f04f 0300 	mov.w	r3, #0
 8003a88:	00eb      	lsls	r3, r5, #3
 8003a8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a8e:	00e2      	lsls	r2, r4, #3
 8003a90:	4614      	mov	r4, r2
 8003a92:	461d      	mov	r5, r3
 8003a94:	4643      	mov	r3, r8
 8003a96:	18e3      	adds	r3, r4, r3
 8003a98:	603b      	str	r3, [r7, #0]
 8003a9a:	464b      	mov	r3, r9
 8003a9c:	eb45 0303 	adc.w	r3, r5, r3
 8003aa0:	607b      	str	r3, [r7, #4]
 8003aa2:	f04f 0200 	mov.w	r2, #0
 8003aa6:	f04f 0300 	mov.w	r3, #0
 8003aaa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003aae:	4629      	mov	r1, r5
 8003ab0:	028b      	lsls	r3, r1, #10
 8003ab2:	4621      	mov	r1, r4
 8003ab4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ab8:	4621      	mov	r1, r4
 8003aba:	028a      	lsls	r2, r1, #10
 8003abc:	4610      	mov	r0, r2
 8003abe:	4619      	mov	r1, r3
 8003ac0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	61bb      	str	r3, [r7, #24]
 8003ac6:	61fa      	str	r2, [r7, #28]
 8003ac8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003acc:	f7fc fbb8 	bl	8000240 <__aeabi_uldivmod>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003ad8:	4b0b      	ldr	r3, [pc, #44]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	0c1b      	lsrs	r3, r3, #16
 8003ade:	f003 0303 	and.w	r3, r3, #3
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	005b      	lsls	r3, r3, #1
 8003ae6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003ae8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003aea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003af2:	e002      	b.n	8003afa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003af4:	4b05      	ldr	r3, [pc, #20]	; (8003b0c <HAL_RCC_GetSysClockFreq+0x204>)
 8003af6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003af8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003afa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3750      	adds	r7, #80	; 0x50
 8003b00:	46bd      	mov	sp, r7
 8003b02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b06:	bf00      	nop
 8003b08:	40023800 	.word	0x40023800
 8003b0c:	00f42400 	.word	0x00f42400
 8003b10:	007a1200 	.word	0x007a1200

08003b14 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b18:	4b03      	ldr	r3, [pc, #12]	; (8003b28 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	20000000 	.word	0x20000000

08003b2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b30:	f7ff fff0 	bl	8003b14 <HAL_RCC_GetHCLKFreq>
 8003b34:	4602      	mov	r2, r0
 8003b36:	4b05      	ldr	r3, [pc, #20]	; (8003b4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	0a9b      	lsrs	r3, r3, #10
 8003b3c:	f003 0307 	and.w	r3, r3, #7
 8003b40:	4903      	ldr	r1, [pc, #12]	; (8003b50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b42:	5ccb      	ldrb	r3, [r1, r3]
 8003b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	08007300 	.word	0x08007300

08003b54 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	220f      	movs	r2, #15
 8003b62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003b64:	4b12      	ldr	r3, [pc, #72]	; (8003bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f003 0203 	and.w	r2, r3, #3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003b70:	4b0f      	ldr	r3, [pc, #60]	; (8003bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003b7c:	4b0c      	ldr	r3, [pc, #48]	; (8003bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003b88:	4b09      	ldr	r3, [pc, #36]	; (8003bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	08db      	lsrs	r3, r3, #3
 8003b8e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003b96:	4b07      	ldr	r3, [pc, #28]	; (8003bb4 <HAL_RCC_GetClockConfig+0x60>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 020f 	and.w	r2, r3, #15
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	601a      	str	r2, [r3, #0]
}
 8003ba2:	bf00      	nop
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	40023c00 	.word	0x40023c00

08003bb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e049      	b.n	8003c5e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d106      	bne.n	8003be4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 f841 	bl	8003c66 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2202      	movs	r2, #2
 8003be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	3304      	adds	r3, #4
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	4610      	mov	r0, r2
 8003bf8:	f000 fa00 	bl	8003ffc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3708      	adds	r7, #8
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003c66:	b480      	push	{r7}
 8003c68:	b083      	sub	sp, #12
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003c6e:	bf00      	nop
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
	...

08003c7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d001      	beq.n	8003c94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e054      	b.n	8003d3e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2202      	movs	r2, #2
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68da      	ldr	r2, [r3, #12]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f042 0201 	orr.w	r2, r2, #1
 8003caa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a26      	ldr	r2, [pc, #152]	; (8003d4c <HAL_TIM_Base_Start_IT+0xd0>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d022      	beq.n	8003cfc <HAL_TIM_Base_Start_IT+0x80>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cbe:	d01d      	beq.n	8003cfc <HAL_TIM_Base_Start_IT+0x80>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a22      	ldr	r2, [pc, #136]	; (8003d50 <HAL_TIM_Base_Start_IT+0xd4>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d018      	beq.n	8003cfc <HAL_TIM_Base_Start_IT+0x80>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a21      	ldr	r2, [pc, #132]	; (8003d54 <HAL_TIM_Base_Start_IT+0xd8>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d013      	beq.n	8003cfc <HAL_TIM_Base_Start_IT+0x80>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a1f      	ldr	r2, [pc, #124]	; (8003d58 <HAL_TIM_Base_Start_IT+0xdc>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d00e      	beq.n	8003cfc <HAL_TIM_Base_Start_IT+0x80>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a1e      	ldr	r2, [pc, #120]	; (8003d5c <HAL_TIM_Base_Start_IT+0xe0>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d009      	beq.n	8003cfc <HAL_TIM_Base_Start_IT+0x80>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a1c      	ldr	r2, [pc, #112]	; (8003d60 <HAL_TIM_Base_Start_IT+0xe4>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d004      	beq.n	8003cfc <HAL_TIM_Base_Start_IT+0x80>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a1b      	ldr	r2, [pc, #108]	; (8003d64 <HAL_TIM_Base_Start_IT+0xe8>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d115      	bne.n	8003d28 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	689a      	ldr	r2, [r3, #8]
 8003d02:	4b19      	ldr	r3, [pc, #100]	; (8003d68 <HAL_TIM_Base_Start_IT+0xec>)
 8003d04:	4013      	ands	r3, r2
 8003d06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2b06      	cmp	r3, #6
 8003d0c:	d015      	beq.n	8003d3a <HAL_TIM_Base_Start_IT+0xbe>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d14:	d011      	beq.n	8003d3a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f042 0201 	orr.w	r2, r2, #1
 8003d24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d26:	e008      	b.n	8003d3a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f042 0201 	orr.w	r2, r2, #1
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	e000      	b.n	8003d3c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d3a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3714      	adds	r7, #20
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	40010000 	.word	0x40010000
 8003d50:	40000400 	.word	0x40000400
 8003d54:	40000800 	.word	0x40000800
 8003d58:	40000c00 	.word	0x40000c00
 8003d5c:	40010400 	.word	0x40010400
 8003d60:	40014000 	.word	0x40014000
 8003d64:	40001800 	.word	0x40001800
 8003d68:	00010007 	.word	0x00010007

08003d6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d122      	bne.n	8003dc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d11b      	bne.n	8003dc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f06f 0202 	mvn.w	r2, #2
 8003d98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	f003 0303 	and.w	r3, r3, #3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d003      	beq.n	8003db6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f905 	bl	8003fbe <HAL_TIM_IC_CaptureCallback>
 8003db4:	e005      	b.n	8003dc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f8f7 	bl	8003faa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 f908 	bl	8003fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	f003 0304 	and.w	r3, r3, #4
 8003dd2:	2b04      	cmp	r3, #4
 8003dd4:	d122      	bne.n	8003e1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	f003 0304 	and.w	r3, r3, #4
 8003de0:	2b04      	cmp	r3, #4
 8003de2:	d11b      	bne.n	8003e1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f06f 0204 	mvn.w	r2, #4
 8003dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2202      	movs	r2, #2
 8003df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d003      	beq.n	8003e0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f8db 	bl	8003fbe <HAL_TIM_IC_CaptureCallback>
 8003e08:	e005      	b.n	8003e16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 f8cd 	bl	8003faa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 f8de 	bl	8003fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	f003 0308 	and.w	r3, r3, #8
 8003e26:	2b08      	cmp	r3, #8
 8003e28:	d122      	bne.n	8003e70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	f003 0308 	and.w	r3, r3, #8
 8003e34:	2b08      	cmp	r3, #8
 8003e36:	d11b      	bne.n	8003e70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f06f 0208 	mvn.w	r2, #8
 8003e40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2204      	movs	r2, #4
 8003e46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	69db      	ldr	r3, [r3, #28]
 8003e4e:	f003 0303 	and.w	r3, r3, #3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d003      	beq.n	8003e5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 f8b1 	bl	8003fbe <HAL_TIM_IC_CaptureCallback>
 8003e5c:	e005      	b.n	8003e6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 f8a3 	bl	8003faa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 f8b4 	bl	8003fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	f003 0310 	and.w	r3, r3, #16
 8003e7a:	2b10      	cmp	r3, #16
 8003e7c:	d122      	bne.n	8003ec4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	f003 0310 	and.w	r3, r3, #16
 8003e88:	2b10      	cmp	r3, #16
 8003e8a:	d11b      	bne.n	8003ec4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f06f 0210 	mvn.w	r2, #16
 8003e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2208      	movs	r2, #8
 8003e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	69db      	ldr	r3, [r3, #28]
 8003ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d003      	beq.n	8003eb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 f887 	bl	8003fbe <HAL_TIM_IC_CaptureCallback>
 8003eb0:	e005      	b.n	8003ebe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 f879 	bl	8003faa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 f88a 	bl	8003fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d10e      	bne.n	8003ef0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d107      	bne.n	8003ef0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f06f 0201 	mvn.w	r2, #1
 8003ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f7fd f99e 	bl	800122c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003efa:	2b80      	cmp	r3, #128	; 0x80
 8003efc:	d10e      	bne.n	8003f1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f08:	2b80      	cmp	r3, #128	; 0x80
 8003f0a:	d107      	bne.n	8003f1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 f91a 	bl	8004150 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f2a:	d10e      	bne.n	8003f4a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f36:	2b80      	cmp	r3, #128	; 0x80
 8003f38:	d107      	bne.n	8003f4a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 f90d 	bl	8004164 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f54:	2b40      	cmp	r3, #64	; 0x40
 8003f56:	d10e      	bne.n	8003f76 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f62:	2b40      	cmp	r3, #64	; 0x40
 8003f64:	d107      	bne.n	8003f76 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 f838 	bl	8003fe6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	f003 0320 	and.w	r3, r3, #32
 8003f80:	2b20      	cmp	r3, #32
 8003f82:	d10e      	bne.n	8003fa2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	f003 0320 	and.w	r3, r3, #32
 8003f8e:	2b20      	cmp	r3, #32
 8003f90:	d107      	bne.n	8003fa2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f06f 0220 	mvn.w	r2, #32
 8003f9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 f8cd 	bl	800413c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fa2:	bf00      	nop
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003faa:	b480      	push	{r7}
 8003fac:	b083      	sub	sp, #12
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fb2:	bf00      	nop
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b083      	sub	sp, #12
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fc6:	bf00      	nop
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr

08003fd2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b083      	sub	sp, #12
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fda:	bf00      	nop
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr

08003fe6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	b083      	sub	sp, #12
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fee:	bf00      	nop
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
	...

08003ffc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a40      	ldr	r2, [pc, #256]	; (8004110 <TIM_Base_SetConfig+0x114>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d013      	beq.n	800403c <TIM_Base_SetConfig+0x40>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800401a:	d00f      	beq.n	800403c <TIM_Base_SetConfig+0x40>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a3d      	ldr	r2, [pc, #244]	; (8004114 <TIM_Base_SetConfig+0x118>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d00b      	beq.n	800403c <TIM_Base_SetConfig+0x40>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a3c      	ldr	r2, [pc, #240]	; (8004118 <TIM_Base_SetConfig+0x11c>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d007      	beq.n	800403c <TIM_Base_SetConfig+0x40>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a3b      	ldr	r2, [pc, #236]	; (800411c <TIM_Base_SetConfig+0x120>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d003      	beq.n	800403c <TIM_Base_SetConfig+0x40>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a3a      	ldr	r2, [pc, #232]	; (8004120 <TIM_Base_SetConfig+0x124>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d108      	bne.n	800404e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004042:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	4313      	orrs	r3, r2
 800404c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a2f      	ldr	r2, [pc, #188]	; (8004110 <TIM_Base_SetConfig+0x114>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d02b      	beq.n	80040ae <TIM_Base_SetConfig+0xb2>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800405c:	d027      	beq.n	80040ae <TIM_Base_SetConfig+0xb2>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a2c      	ldr	r2, [pc, #176]	; (8004114 <TIM_Base_SetConfig+0x118>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d023      	beq.n	80040ae <TIM_Base_SetConfig+0xb2>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a2b      	ldr	r2, [pc, #172]	; (8004118 <TIM_Base_SetConfig+0x11c>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d01f      	beq.n	80040ae <TIM_Base_SetConfig+0xb2>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a2a      	ldr	r2, [pc, #168]	; (800411c <TIM_Base_SetConfig+0x120>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d01b      	beq.n	80040ae <TIM_Base_SetConfig+0xb2>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a29      	ldr	r2, [pc, #164]	; (8004120 <TIM_Base_SetConfig+0x124>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d017      	beq.n	80040ae <TIM_Base_SetConfig+0xb2>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a28      	ldr	r2, [pc, #160]	; (8004124 <TIM_Base_SetConfig+0x128>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d013      	beq.n	80040ae <TIM_Base_SetConfig+0xb2>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a27      	ldr	r2, [pc, #156]	; (8004128 <TIM_Base_SetConfig+0x12c>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d00f      	beq.n	80040ae <TIM_Base_SetConfig+0xb2>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a26      	ldr	r2, [pc, #152]	; (800412c <TIM_Base_SetConfig+0x130>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d00b      	beq.n	80040ae <TIM_Base_SetConfig+0xb2>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a25      	ldr	r2, [pc, #148]	; (8004130 <TIM_Base_SetConfig+0x134>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d007      	beq.n	80040ae <TIM_Base_SetConfig+0xb2>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a24      	ldr	r2, [pc, #144]	; (8004134 <TIM_Base_SetConfig+0x138>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d003      	beq.n	80040ae <TIM_Base_SetConfig+0xb2>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a23      	ldr	r2, [pc, #140]	; (8004138 <TIM_Base_SetConfig+0x13c>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d108      	bne.n	80040c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	4313      	orrs	r3, r2
 80040be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a0a      	ldr	r2, [pc, #40]	; (8004110 <TIM_Base_SetConfig+0x114>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d003      	beq.n	80040f4 <TIM_Base_SetConfig+0xf8>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a0c      	ldr	r2, [pc, #48]	; (8004120 <TIM_Base_SetConfig+0x124>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d103      	bne.n	80040fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	691a      	ldr	r2, [r3, #16]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	615a      	str	r2, [r3, #20]
}
 8004102:	bf00      	nop
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	40010000 	.word	0x40010000
 8004114:	40000400 	.word	0x40000400
 8004118:	40000800 	.word	0x40000800
 800411c:	40000c00 	.word	0x40000c00
 8004120:	40010400 	.word	0x40010400
 8004124:	40014000 	.word	0x40014000
 8004128:	40014400 	.word	0x40014400
 800412c:	40014800 	.word	0x40014800
 8004130:	40001800 	.word	0x40001800
 8004134:	40001c00 	.word	0x40001c00
 8004138:	40002000 	.word	0x40002000

0800413c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800417c:	bf00      	nop
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
	...

08004188 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800418e:	f3ef 8305 	mrs	r3, IPSR
 8004192:	60bb      	str	r3, [r7, #8]
  return(result);
 8004194:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004196:	2b00      	cmp	r3, #0
 8004198:	d10f      	bne.n	80041ba <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800419a:	f3ef 8310 	mrs	r3, PRIMASK
 800419e:	607b      	str	r3, [r7, #4]
  return(result);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d105      	bne.n	80041b2 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80041a6:	f3ef 8311 	mrs	r3, BASEPRI
 80041aa:	603b      	str	r3, [r7, #0]
  return(result);
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d007      	beq.n	80041c2 <osKernelInitialize+0x3a>
 80041b2:	4b0e      	ldr	r3, [pc, #56]	; (80041ec <osKernelInitialize+0x64>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d103      	bne.n	80041c2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80041ba:	f06f 0305 	mvn.w	r3, #5
 80041be:	60fb      	str	r3, [r7, #12]
 80041c0:	e00c      	b.n	80041dc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80041c2:	4b0a      	ldr	r3, [pc, #40]	; (80041ec <osKernelInitialize+0x64>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d105      	bne.n	80041d6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80041ca:	4b08      	ldr	r3, [pc, #32]	; (80041ec <osKernelInitialize+0x64>)
 80041cc:	2201      	movs	r2, #1
 80041ce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80041d0:	2300      	movs	r3, #0
 80041d2:	60fb      	str	r3, [r7, #12]
 80041d4:	e002      	b.n	80041dc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80041d6:	f04f 33ff 	mov.w	r3, #4294967295
 80041da:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80041dc:	68fb      	ldr	r3, [r7, #12]
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	20000288 	.word	0x20000288

080041f0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041f6:	f3ef 8305 	mrs	r3, IPSR
 80041fa:	60bb      	str	r3, [r7, #8]
  return(result);
 80041fc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10f      	bne.n	8004222 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004202:	f3ef 8310 	mrs	r3, PRIMASK
 8004206:	607b      	str	r3, [r7, #4]
  return(result);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d105      	bne.n	800421a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800420e:	f3ef 8311 	mrs	r3, BASEPRI
 8004212:	603b      	str	r3, [r7, #0]
  return(result);
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d007      	beq.n	800422a <osKernelStart+0x3a>
 800421a:	4b0f      	ldr	r3, [pc, #60]	; (8004258 <osKernelStart+0x68>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2b02      	cmp	r3, #2
 8004220:	d103      	bne.n	800422a <osKernelStart+0x3a>
    stat = osErrorISR;
 8004222:	f06f 0305 	mvn.w	r3, #5
 8004226:	60fb      	str	r3, [r7, #12]
 8004228:	e010      	b.n	800424c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800422a:	4b0b      	ldr	r3, [pc, #44]	; (8004258 <osKernelStart+0x68>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d109      	bne.n	8004246 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004232:	f7ff ffa1 	bl	8004178 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004236:	4b08      	ldr	r3, [pc, #32]	; (8004258 <osKernelStart+0x68>)
 8004238:	2202      	movs	r2, #2
 800423a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800423c:	f001 fa3e 	bl	80056bc <vTaskStartScheduler>
      stat = osOK;
 8004240:	2300      	movs	r3, #0
 8004242:	60fb      	str	r3, [r7, #12]
 8004244:	e002      	b.n	800424c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004246:	f04f 33ff 	mov.w	r3, #4294967295
 800424a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800424c:	68fb      	ldr	r3, [r7, #12]
}
 800424e:	4618      	mov	r0, r3
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	20000288 	.word	0x20000288

0800425c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800425c:	b580      	push	{r7, lr}
 800425e:	b090      	sub	sp, #64	; 0x40
 8004260:	af04      	add	r7, sp, #16
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004268:	2300      	movs	r3, #0
 800426a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800426c:	f3ef 8305 	mrs	r3, IPSR
 8004270:	61fb      	str	r3, [r7, #28]
  return(result);
 8004272:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004274:	2b00      	cmp	r3, #0
 8004276:	f040 808f 	bne.w	8004398 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800427a:	f3ef 8310 	mrs	r3, PRIMASK
 800427e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d105      	bne.n	8004292 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004286:	f3ef 8311 	mrs	r3, BASEPRI
 800428a:	617b      	str	r3, [r7, #20]
  return(result);
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d003      	beq.n	800429a <osThreadNew+0x3e>
 8004292:	4b44      	ldr	r3, [pc, #272]	; (80043a4 <osThreadNew+0x148>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2b02      	cmp	r3, #2
 8004298:	d07e      	beq.n	8004398 <osThreadNew+0x13c>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d07b      	beq.n	8004398 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80042a0:	2380      	movs	r3, #128	; 0x80
 80042a2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80042a4:	2318      	movs	r3, #24
 80042a6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80042a8:	2300      	movs	r3, #0
 80042aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80042ac:	f04f 33ff 	mov.w	r3, #4294967295
 80042b0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d045      	beq.n	8004344 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d002      	beq.n	80042c6 <osThreadNew+0x6a>
        name = attr->name;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d002      	beq.n	80042d4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80042d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d008      	beq.n	80042ec <osThreadNew+0x90>
 80042da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042dc:	2b38      	cmp	r3, #56	; 0x38
 80042de:	d805      	bhi.n	80042ec <osThreadNew+0x90>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f003 0301 	and.w	r3, r3, #1
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d001      	beq.n	80042f0 <osThreadNew+0x94>
        return (NULL);
 80042ec:	2300      	movs	r3, #0
 80042ee:	e054      	b.n	800439a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d003      	beq.n	8004300 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	089b      	lsrs	r3, r3, #2
 80042fe:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00e      	beq.n	8004326 <osThreadNew+0xca>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	2bbb      	cmp	r3, #187	; 0xbb
 800430e:	d90a      	bls.n	8004326 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004314:	2b00      	cmp	r3, #0
 8004316:	d006      	beq.n	8004326 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d002      	beq.n	8004326 <osThreadNew+0xca>
        mem = 1;
 8004320:	2301      	movs	r3, #1
 8004322:	623b      	str	r3, [r7, #32]
 8004324:	e010      	b.n	8004348 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10c      	bne.n	8004348 <osThreadNew+0xec>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d108      	bne.n	8004348 <osThreadNew+0xec>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d104      	bne.n	8004348 <osThreadNew+0xec>
          mem = 0;
 800433e:	2300      	movs	r3, #0
 8004340:	623b      	str	r3, [r7, #32]
 8004342:	e001      	b.n	8004348 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004344:	2300      	movs	r3, #0
 8004346:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004348:	6a3b      	ldr	r3, [r7, #32]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d110      	bne.n	8004370 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004356:	9202      	str	r2, [sp, #8]
 8004358:	9301      	str	r3, [sp, #4]
 800435a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435c:	9300      	str	r3, [sp, #0]
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004362:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004364:	68f8      	ldr	r0, [r7, #12]
 8004366:	f000 fea7 	bl	80050b8 <xTaskCreateStatic>
 800436a:	4603      	mov	r3, r0
 800436c:	613b      	str	r3, [r7, #16]
 800436e:	e013      	b.n	8004398 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004370:	6a3b      	ldr	r3, [r7, #32]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d110      	bne.n	8004398 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004378:	b29a      	uxth	r2, r3
 800437a:	f107 0310 	add.w	r3, r7, #16
 800437e:	9301      	str	r3, [sp, #4]
 8004380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004382:	9300      	str	r3, [sp, #0]
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f000 fef8 	bl	800517e <xTaskCreate>
 800438e:	4603      	mov	r3, r0
 8004390:	2b01      	cmp	r3, #1
 8004392:	d001      	beq.n	8004398 <osThreadNew+0x13c>
          hTask = NULL;
 8004394:	2300      	movs	r3, #0
 8004396:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004398:	693b      	ldr	r3, [r7, #16]
}
 800439a:	4618      	mov	r0, r3
 800439c:	3730      	adds	r7, #48	; 0x30
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	20000288 	.word	0x20000288

080043a8 <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b088      	sub	sp, #32
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043b4:	f3ef 8305 	mrs	r3, IPSR
 80043b8:	617b      	str	r3, [r7, #20]
  return(result);
 80043ba:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10f      	bne.n	80043e0 <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043c0:	f3ef 8310 	mrs	r3, PRIMASK
 80043c4:	613b      	str	r3, [r7, #16]
  return(result);
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d105      	bne.n	80043d8 <osThreadSuspend+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80043cc:	f3ef 8311 	mrs	r3, BASEPRI
 80043d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d007      	beq.n	80043e8 <osThreadSuspend+0x40>
 80043d8:	4b0c      	ldr	r3, [pc, #48]	; (800440c <osThreadSuspend+0x64>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d103      	bne.n	80043e8 <osThreadSuspend+0x40>
    stat = osErrorISR;
 80043e0:	f06f 0305 	mvn.w	r3, #5
 80043e4:	61fb      	str	r3, [r7, #28]
 80043e6:	e00b      	b.n	8004400 <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d103      	bne.n	80043f6 <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 80043ee:	f06f 0303 	mvn.w	r3, #3
 80043f2:	61fb      	str	r3, [r7, #28]
 80043f4:	e004      	b.n	8004400 <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 80043f6:	2300      	movs	r3, #0
 80043f8:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 80043fa:	69b8      	ldr	r0, [r7, #24]
 80043fc:	f001 f852 	bl	80054a4 <vTaskSuspend>
  }

  return (stat);
 8004400:	69fb      	ldr	r3, [r7, #28]
}
 8004402:	4618      	mov	r0, r3
 8004404:	3720      	adds	r7, #32
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	20000288 	.word	0x20000288

08004410 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8004410:	b580      	push	{r7, lr}
 8004412:	b088      	sub	sp, #32
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800441c:	f3ef 8305 	mrs	r3, IPSR
 8004420:	617b      	str	r3, [r7, #20]
  return(result);
 8004422:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10f      	bne.n	8004448 <osThreadResume+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004428:	f3ef 8310 	mrs	r3, PRIMASK
 800442c:	613b      	str	r3, [r7, #16]
  return(result);
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d105      	bne.n	8004440 <osThreadResume+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004434:	f3ef 8311 	mrs	r3, BASEPRI
 8004438:	60fb      	str	r3, [r7, #12]
  return(result);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d007      	beq.n	8004450 <osThreadResume+0x40>
 8004440:	4b0c      	ldr	r3, [pc, #48]	; (8004474 <osThreadResume+0x64>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2b02      	cmp	r3, #2
 8004446:	d103      	bne.n	8004450 <osThreadResume+0x40>
    stat = osErrorISR;
 8004448:	f06f 0305 	mvn.w	r3, #5
 800444c:	61fb      	str	r3, [r7, #28]
 800444e:	e00b      	b.n	8004468 <osThreadResume+0x58>
  }
  else if (hTask == NULL) {
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d103      	bne.n	800445e <osThreadResume+0x4e>
    stat = osErrorParameter;
 8004456:	f06f 0303 	mvn.w	r3, #3
 800445a:	61fb      	str	r3, [r7, #28]
 800445c:	e004      	b.n	8004468 <osThreadResume+0x58>
  }
  else {
    stat = osOK;
 800445e:	2300      	movs	r3, #0
 8004460:	61fb      	str	r3, [r7, #28]
    vTaskResume (hTask);
 8004462:	69b8      	ldr	r0, [r7, #24]
 8004464:	f001 f8ca 	bl	80055fc <vTaskResume>
  }

  return (stat);
 8004468:	69fb      	ldr	r3, [r7, #28]
}
 800446a:	4618      	mov	r0, r3
 800446c:	3720      	adds	r7, #32
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	20000288 	.word	0x20000288

08004478 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004478:	b580      	push	{r7, lr}
 800447a:	b086      	sub	sp, #24
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004480:	f3ef 8305 	mrs	r3, IPSR
 8004484:	613b      	str	r3, [r7, #16]
  return(result);
 8004486:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10f      	bne.n	80044ac <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800448c:	f3ef 8310 	mrs	r3, PRIMASK
 8004490:	60fb      	str	r3, [r7, #12]
  return(result);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d105      	bne.n	80044a4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004498:	f3ef 8311 	mrs	r3, BASEPRI
 800449c:	60bb      	str	r3, [r7, #8]
  return(result);
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d007      	beq.n	80044b4 <osDelay+0x3c>
 80044a4:	4b0a      	ldr	r3, [pc, #40]	; (80044d0 <osDelay+0x58>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d103      	bne.n	80044b4 <osDelay+0x3c>
    stat = osErrorISR;
 80044ac:	f06f 0305 	mvn.w	r3, #5
 80044b0:	617b      	str	r3, [r7, #20]
 80044b2:	e007      	b.n	80044c4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80044b4:	2300      	movs	r3, #0
 80044b6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d002      	beq.n	80044c4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 ffba 	bl	8005438 <vTaskDelay>
    }
  }

  return (stat);
 80044c4:	697b      	ldr	r3, [r7, #20]
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3718      	adds	r7, #24
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	20000288 	.word	0x20000288

080044d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	4a07      	ldr	r2, [pc, #28]	; (8004500 <vApplicationGetIdleTaskMemory+0x2c>)
 80044e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	4a06      	ldr	r2, [pc, #24]	; (8004504 <vApplicationGetIdleTaskMemory+0x30>)
 80044ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2280      	movs	r2, #128	; 0x80
 80044f0:	601a      	str	r2, [r3, #0]
}
 80044f2:	bf00      	nop
 80044f4:	3714      	adds	r7, #20
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	2000028c 	.word	0x2000028c
 8004504:	20000348 	.word	0x20000348

08004508 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	4a07      	ldr	r2, [pc, #28]	; (8004534 <vApplicationGetTimerTaskMemory+0x2c>)
 8004518:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	4a06      	ldr	r2, [pc, #24]	; (8004538 <vApplicationGetTimerTaskMemory+0x30>)
 800451e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004526:	601a      	str	r2, [r3, #0]
}
 8004528:	bf00      	nop
 800452a:	3714      	adds	r7, #20
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr
 8004534:	20000548 	.word	0x20000548
 8004538:	20000604 	.word	0x20000604

0800453c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f103 0208 	add.w	r2, r3, #8
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f04f 32ff 	mov.w	r2, #4294967295
 8004554:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f103 0208 	add.w	r2, r3, #8
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f103 0208 	add.w	r2, r3, #8
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800458a:	bf00      	nop
 800458c:	370c      	adds	r7, #12
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr

08004596 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004596:	b480      	push	{r7}
 8004598:	b085      	sub	sp, #20
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
 800459e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	689a      	ldr	r2, [r3, #8]
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	683a      	ldr	r2, [r7, #0]
 80045ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	683a      	ldr	r2, [r7, #0]
 80045c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	1c5a      	adds	r2, r3, #1
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	601a      	str	r2, [r3, #0]
}
 80045d2:	bf00      	nop
 80045d4:	3714      	adds	r7, #20
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045de:	b480      	push	{r7}
 80045e0:	b085      	sub	sp, #20
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
 80045e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f4:	d103      	bne.n	80045fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	60fb      	str	r3, [r7, #12]
 80045fc:	e00c      	b.n	8004618 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	3308      	adds	r3, #8
 8004602:	60fb      	str	r3, [r7, #12]
 8004604:	e002      	b.n	800460c <vListInsert+0x2e>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	60fb      	str	r3, [r7, #12]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	429a      	cmp	r2, r3
 8004616:	d2f6      	bcs.n	8004606 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	685a      	ldr	r2, [r3, #4]
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	683a      	ldr	r2, [r7, #0]
 8004626:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	683a      	ldr	r2, [r7, #0]
 8004632:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	1c5a      	adds	r2, r3, #1
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	601a      	str	r2, [r3, #0]
}
 8004644:	bf00      	nop
 8004646:	3714      	adds	r7, #20
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	6892      	ldr	r2, [r2, #8]
 8004666:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	6852      	ldr	r2, [r2, #4]
 8004670:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	429a      	cmp	r2, r3
 800467a:	d103      	bne.n	8004684 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689a      	ldr	r2, [r3, #8]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	1e5a      	subs	r2, r3, #1
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
}
 8004698:	4618      	mov	r0, r3
 800469a:	3714      	adds	r7, #20
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d10c      	bne.n	80046d2 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80046b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046bc:	b672      	cpsid	i
 80046be:	f383 8811 	msr	BASEPRI, r3
 80046c2:	f3bf 8f6f 	isb	sy
 80046c6:	f3bf 8f4f 	dsb	sy
 80046ca:	b662      	cpsie	i
 80046cc:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80046ce:	bf00      	nop
 80046d0:	e7fe      	b.n	80046d0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80046d2:	f002 f9b3 	bl	8006a3c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046de:	68f9      	ldr	r1, [r7, #12]
 80046e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80046e2:	fb01 f303 	mul.w	r3, r1, r3
 80046e6:	441a      	add	r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004702:	3b01      	subs	r3, #1
 8004704:	68f9      	ldr	r1, [r7, #12]
 8004706:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004708:	fb01 f303 	mul.w	r3, r1, r3
 800470c:	441a      	add	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	22ff      	movs	r2, #255	; 0xff
 8004716:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	22ff      	movs	r2, #255	; 0xff
 800471e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d114      	bne.n	8004752 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d01a      	beq.n	8004766 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	3310      	adds	r3, #16
 8004734:	4618      	mov	r0, r3
 8004736:	f001 fa69 	bl	8005c0c <xTaskRemoveFromEventList>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d012      	beq.n	8004766 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004740:	4b0c      	ldr	r3, [pc, #48]	; (8004774 <xQueueGenericReset+0xd0>)
 8004742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004746:	601a      	str	r2, [r3, #0]
 8004748:	f3bf 8f4f 	dsb	sy
 800474c:	f3bf 8f6f 	isb	sy
 8004750:	e009      	b.n	8004766 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	3310      	adds	r3, #16
 8004756:	4618      	mov	r0, r3
 8004758:	f7ff fef0 	bl	800453c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	3324      	adds	r3, #36	; 0x24
 8004760:	4618      	mov	r0, r3
 8004762:	f7ff feeb 	bl	800453c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004766:	f002 f99d 	bl	8006aa4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800476a:	2301      	movs	r3, #1
}
 800476c:	4618      	mov	r0, r3
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}
 8004774:	e000ed04 	.word	0xe000ed04

08004778 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004778:	b580      	push	{r7, lr}
 800477a:	b08e      	sub	sp, #56	; 0x38
 800477c:	af02      	add	r7, sp, #8
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	607a      	str	r2, [r7, #4]
 8004784:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10c      	bne.n	80047a6 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800478c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004790:	b672      	cpsid	i
 8004792:	f383 8811 	msr	BASEPRI, r3
 8004796:	f3bf 8f6f 	isb	sy
 800479a:	f3bf 8f4f 	dsb	sy
 800479e:	b662      	cpsie	i
 80047a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80047a2:	bf00      	nop
 80047a4:	e7fe      	b.n	80047a4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d10c      	bne.n	80047c6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80047ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b0:	b672      	cpsid	i
 80047b2:	f383 8811 	msr	BASEPRI, r3
 80047b6:	f3bf 8f6f 	isb	sy
 80047ba:	f3bf 8f4f 	dsb	sy
 80047be:	b662      	cpsie	i
 80047c0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80047c2:	bf00      	nop
 80047c4:	e7fe      	b.n	80047c4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d002      	beq.n	80047d2 <xQueueGenericCreateStatic+0x5a>
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d001      	beq.n	80047d6 <xQueueGenericCreateStatic+0x5e>
 80047d2:	2301      	movs	r3, #1
 80047d4:	e000      	b.n	80047d8 <xQueueGenericCreateStatic+0x60>
 80047d6:	2300      	movs	r3, #0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10c      	bne.n	80047f6 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80047dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e0:	b672      	cpsid	i
 80047e2:	f383 8811 	msr	BASEPRI, r3
 80047e6:	f3bf 8f6f 	isb	sy
 80047ea:	f3bf 8f4f 	dsb	sy
 80047ee:	b662      	cpsie	i
 80047f0:	623b      	str	r3, [r7, #32]
}
 80047f2:	bf00      	nop
 80047f4:	e7fe      	b.n	80047f4 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d102      	bne.n	8004802 <xQueueGenericCreateStatic+0x8a>
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <xQueueGenericCreateStatic+0x8e>
 8004802:	2301      	movs	r3, #1
 8004804:	e000      	b.n	8004808 <xQueueGenericCreateStatic+0x90>
 8004806:	2300      	movs	r3, #0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d10c      	bne.n	8004826 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800480c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004810:	b672      	cpsid	i
 8004812:	f383 8811 	msr	BASEPRI, r3
 8004816:	f3bf 8f6f 	isb	sy
 800481a:	f3bf 8f4f 	dsb	sy
 800481e:	b662      	cpsie	i
 8004820:	61fb      	str	r3, [r7, #28]
}
 8004822:	bf00      	nop
 8004824:	e7fe      	b.n	8004824 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004826:	2350      	movs	r3, #80	; 0x50
 8004828:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	2b50      	cmp	r3, #80	; 0x50
 800482e:	d00c      	beq.n	800484a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8004830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004834:	b672      	cpsid	i
 8004836:	f383 8811 	msr	BASEPRI, r3
 800483a:	f3bf 8f6f 	isb	sy
 800483e:	f3bf 8f4f 	dsb	sy
 8004842:	b662      	cpsie	i
 8004844:	61bb      	str	r3, [r7, #24]
}
 8004846:	bf00      	nop
 8004848:	e7fe      	b.n	8004848 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800484a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00d      	beq.n	8004872 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004858:	2201      	movs	r2, #1
 800485a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800485e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004864:	9300      	str	r3, [sp, #0]
 8004866:	4613      	mov	r3, r2
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	68b9      	ldr	r1, [r7, #8]
 800486c:	68f8      	ldr	r0, [r7, #12]
 800486e:	f000 f805 	bl	800487c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004874:	4618      	mov	r0, r3
 8004876:	3730      	adds	r7, #48	; 0x30
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
 8004888:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d103      	bne.n	8004898 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	69ba      	ldr	r2, [r7, #24]
 8004894:	601a      	str	r2, [r3, #0]
 8004896:	e002      	b.n	800489e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80048aa:	2101      	movs	r1, #1
 80048ac:	69b8      	ldr	r0, [r7, #24]
 80048ae:	f7ff fef9 	bl	80046a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	78fa      	ldrb	r2, [r7, #3]
 80048b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80048ba:	bf00      	nop
 80048bc:	3710      	adds	r7, #16
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
	...

080048c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b08e      	sub	sp, #56	; 0x38
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	607a      	str	r2, [r7, #4]
 80048d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80048d2:	2300      	movs	r3, #0
 80048d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80048da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10c      	bne.n	80048fa <xQueueGenericSend+0x36>
	__asm volatile
 80048e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e4:	b672      	cpsid	i
 80048e6:	f383 8811 	msr	BASEPRI, r3
 80048ea:	f3bf 8f6f 	isb	sy
 80048ee:	f3bf 8f4f 	dsb	sy
 80048f2:	b662      	cpsie	i
 80048f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80048f6:	bf00      	nop
 80048f8:	e7fe      	b.n	80048f8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d103      	bne.n	8004908 <xQueueGenericSend+0x44>
 8004900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004904:	2b00      	cmp	r3, #0
 8004906:	d101      	bne.n	800490c <xQueueGenericSend+0x48>
 8004908:	2301      	movs	r3, #1
 800490a:	e000      	b.n	800490e <xQueueGenericSend+0x4a>
 800490c:	2300      	movs	r3, #0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d10c      	bne.n	800492c <xQueueGenericSend+0x68>
	__asm volatile
 8004912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004916:	b672      	cpsid	i
 8004918:	f383 8811 	msr	BASEPRI, r3
 800491c:	f3bf 8f6f 	isb	sy
 8004920:	f3bf 8f4f 	dsb	sy
 8004924:	b662      	cpsie	i
 8004926:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004928:	bf00      	nop
 800492a:	e7fe      	b.n	800492a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	2b02      	cmp	r3, #2
 8004930:	d103      	bne.n	800493a <xQueueGenericSend+0x76>
 8004932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004936:	2b01      	cmp	r3, #1
 8004938:	d101      	bne.n	800493e <xQueueGenericSend+0x7a>
 800493a:	2301      	movs	r3, #1
 800493c:	e000      	b.n	8004940 <xQueueGenericSend+0x7c>
 800493e:	2300      	movs	r3, #0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10c      	bne.n	800495e <xQueueGenericSend+0x9a>
	__asm volatile
 8004944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004948:	b672      	cpsid	i
 800494a:	f383 8811 	msr	BASEPRI, r3
 800494e:	f3bf 8f6f 	isb	sy
 8004952:	f3bf 8f4f 	dsb	sy
 8004956:	b662      	cpsie	i
 8004958:	623b      	str	r3, [r7, #32]
}
 800495a:	bf00      	nop
 800495c:	e7fe      	b.n	800495c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800495e:	f001 fb1f 	bl	8005fa0 <xTaskGetSchedulerState>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d102      	bne.n	800496e <xQueueGenericSend+0xaa>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <xQueueGenericSend+0xae>
 800496e:	2301      	movs	r3, #1
 8004970:	e000      	b.n	8004974 <xQueueGenericSend+0xb0>
 8004972:	2300      	movs	r3, #0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d10c      	bne.n	8004992 <xQueueGenericSend+0xce>
	__asm volatile
 8004978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800497c:	b672      	cpsid	i
 800497e:	f383 8811 	msr	BASEPRI, r3
 8004982:	f3bf 8f6f 	isb	sy
 8004986:	f3bf 8f4f 	dsb	sy
 800498a:	b662      	cpsie	i
 800498c:	61fb      	str	r3, [r7, #28]
}
 800498e:	bf00      	nop
 8004990:	e7fe      	b.n	8004990 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004992:	f002 f853 	bl	8006a3c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004998:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800499a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800499e:	429a      	cmp	r2, r3
 80049a0:	d302      	bcc.n	80049a8 <xQueueGenericSend+0xe4>
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d129      	bne.n	80049fc <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	68b9      	ldr	r1, [r7, #8]
 80049ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049ae:	f000 fa15 	bl	8004ddc <prvCopyDataToQueue>
 80049b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d010      	beq.n	80049de <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049be:	3324      	adds	r3, #36	; 0x24
 80049c0:	4618      	mov	r0, r3
 80049c2:	f001 f923 	bl	8005c0c <xTaskRemoveFromEventList>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d013      	beq.n	80049f4 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80049cc:	4b3f      	ldr	r3, [pc, #252]	; (8004acc <xQueueGenericSend+0x208>)
 80049ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049d2:	601a      	str	r2, [r3, #0]
 80049d4:	f3bf 8f4f 	dsb	sy
 80049d8:	f3bf 8f6f 	isb	sy
 80049dc:	e00a      	b.n	80049f4 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80049de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d007      	beq.n	80049f4 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80049e4:	4b39      	ldr	r3, [pc, #228]	; (8004acc <xQueueGenericSend+0x208>)
 80049e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049ea:	601a      	str	r2, [r3, #0]
 80049ec:	f3bf 8f4f 	dsb	sy
 80049f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80049f4:	f002 f856 	bl	8006aa4 <vPortExitCritical>
				return pdPASS;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e063      	b.n	8004ac4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d103      	bne.n	8004a0a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a02:	f002 f84f 	bl	8006aa4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004a06:	2300      	movs	r3, #0
 8004a08:	e05c      	b.n	8004ac4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d106      	bne.n	8004a1e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a10:	f107 0314 	add.w	r3, r7, #20
 8004a14:	4618      	mov	r0, r3
 8004a16:	f001 f95f 	bl	8005cd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a1e:	f002 f841 	bl	8006aa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a22:	f000 febf 	bl	80057a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a26:	f002 f809 	bl	8006a3c <vPortEnterCritical>
 8004a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a30:	b25b      	sxtb	r3, r3
 8004a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a36:	d103      	bne.n	8004a40 <xQueueGenericSend+0x17c>
 8004a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a46:	b25b      	sxtb	r3, r3
 8004a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a4c:	d103      	bne.n	8004a56 <xQueueGenericSend+0x192>
 8004a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a56:	f002 f825 	bl	8006aa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a5a:	1d3a      	adds	r2, r7, #4
 8004a5c:	f107 0314 	add.w	r3, r7, #20
 8004a60:	4611      	mov	r1, r2
 8004a62:	4618      	mov	r0, r3
 8004a64:	f001 f94e 	bl	8005d04 <xTaskCheckForTimeOut>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d124      	bne.n	8004ab8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004a6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a70:	f000 faac 	bl	8004fcc <prvIsQueueFull>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d018      	beq.n	8004aac <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7c:	3310      	adds	r3, #16
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	4611      	mov	r1, r2
 8004a82:	4618      	mov	r0, r3
 8004a84:	f001 f86e 	bl	8005b64 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004a88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a8a:	f000 fa37 	bl	8004efc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004a8e:	f000 fe97 	bl	80057c0 <xTaskResumeAll>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f47f af7c 	bne.w	8004992 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8004a9a:	4b0c      	ldr	r3, [pc, #48]	; (8004acc <xQueueGenericSend+0x208>)
 8004a9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aa0:	601a      	str	r2, [r3, #0]
 8004aa2:	f3bf 8f4f 	dsb	sy
 8004aa6:	f3bf 8f6f 	isb	sy
 8004aaa:	e772      	b.n	8004992 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004aac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004aae:	f000 fa25 	bl	8004efc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ab2:	f000 fe85 	bl	80057c0 <xTaskResumeAll>
 8004ab6:	e76c      	b.n	8004992 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004ab8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004aba:	f000 fa1f 	bl	8004efc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004abe:	f000 fe7f 	bl	80057c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004ac2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3738      	adds	r7, #56	; 0x38
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	e000ed04 	.word	0xe000ed04

08004ad0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b08e      	sub	sp, #56	; 0x38
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
 8004adc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d10c      	bne.n	8004b02 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8004ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aec:	b672      	cpsid	i
 8004aee:	f383 8811 	msr	BASEPRI, r3
 8004af2:	f3bf 8f6f 	isb	sy
 8004af6:	f3bf 8f4f 	dsb	sy
 8004afa:	b662      	cpsie	i
 8004afc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004afe:	bf00      	nop
 8004b00:	e7fe      	b.n	8004b00 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d103      	bne.n	8004b10 <xQueueGenericSendFromISR+0x40>
 8004b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d101      	bne.n	8004b14 <xQueueGenericSendFromISR+0x44>
 8004b10:	2301      	movs	r3, #1
 8004b12:	e000      	b.n	8004b16 <xQueueGenericSendFromISR+0x46>
 8004b14:	2300      	movs	r3, #0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10c      	bne.n	8004b34 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8004b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1e:	b672      	cpsid	i
 8004b20:	f383 8811 	msr	BASEPRI, r3
 8004b24:	f3bf 8f6f 	isb	sy
 8004b28:	f3bf 8f4f 	dsb	sy
 8004b2c:	b662      	cpsie	i
 8004b2e:	623b      	str	r3, [r7, #32]
}
 8004b30:	bf00      	nop
 8004b32:	e7fe      	b.n	8004b32 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d103      	bne.n	8004b42 <xQueueGenericSendFromISR+0x72>
 8004b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d101      	bne.n	8004b46 <xQueueGenericSendFromISR+0x76>
 8004b42:	2301      	movs	r3, #1
 8004b44:	e000      	b.n	8004b48 <xQueueGenericSendFromISR+0x78>
 8004b46:	2300      	movs	r3, #0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d10c      	bne.n	8004b66 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8004b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b50:	b672      	cpsid	i
 8004b52:	f383 8811 	msr	BASEPRI, r3
 8004b56:	f3bf 8f6f 	isb	sy
 8004b5a:	f3bf 8f4f 	dsb	sy
 8004b5e:	b662      	cpsie	i
 8004b60:	61fb      	str	r3, [r7, #28]
}
 8004b62:	bf00      	nop
 8004b64:	e7fe      	b.n	8004b64 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b66:	f002 f851 	bl	8006c0c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004b6a:	f3ef 8211 	mrs	r2, BASEPRI
 8004b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b72:	b672      	cpsid	i
 8004b74:	f383 8811 	msr	BASEPRI, r3
 8004b78:	f3bf 8f6f 	isb	sy
 8004b7c:	f3bf 8f4f 	dsb	sy
 8004b80:	b662      	cpsie	i
 8004b82:	61ba      	str	r2, [r7, #24]
 8004b84:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004b86:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b88:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d302      	bcc.n	8004b9c <xQueueGenericSendFromISR+0xcc>
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d12c      	bne.n	8004bf6 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ba2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ba6:	683a      	ldr	r2, [r7, #0]
 8004ba8:	68b9      	ldr	r1, [r7, #8]
 8004baa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bac:	f000 f916 	bl	8004ddc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004bb0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb8:	d112      	bne.n	8004be0 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d016      	beq.n	8004bf0 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc4:	3324      	adds	r3, #36	; 0x24
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f001 f820 	bl	8005c0c <xTaskRemoveFromEventList>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00e      	beq.n	8004bf0 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00b      	beq.n	8004bf0 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	601a      	str	r2, [r3, #0]
 8004bde:	e007      	b.n	8004bf0 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004be0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004be4:	3301      	adds	r3, #1
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	b25a      	sxtb	r2, r3
 8004bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004bf4:	e001      	b.n	8004bfa <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	637b      	str	r3, [r7, #52]	; 0x34
 8004bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bfc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004c04:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3738      	adds	r7, #56	; 0x38
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b08c      	sub	sp, #48	; 0x30
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d10c      	bne.n	8004c44 <xQueueReceive+0x34>
	__asm volatile
 8004c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c2e:	b672      	cpsid	i
 8004c30:	f383 8811 	msr	BASEPRI, r3
 8004c34:	f3bf 8f6f 	isb	sy
 8004c38:	f3bf 8f4f 	dsb	sy
 8004c3c:	b662      	cpsie	i
 8004c3e:	623b      	str	r3, [r7, #32]
}
 8004c40:	bf00      	nop
 8004c42:	e7fe      	b.n	8004c42 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d103      	bne.n	8004c52 <xQueueReceive+0x42>
 8004c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <xQueueReceive+0x46>
 8004c52:	2301      	movs	r3, #1
 8004c54:	e000      	b.n	8004c58 <xQueueReceive+0x48>
 8004c56:	2300      	movs	r3, #0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d10c      	bne.n	8004c76 <xQueueReceive+0x66>
	__asm volatile
 8004c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c60:	b672      	cpsid	i
 8004c62:	f383 8811 	msr	BASEPRI, r3
 8004c66:	f3bf 8f6f 	isb	sy
 8004c6a:	f3bf 8f4f 	dsb	sy
 8004c6e:	b662      	cpsie	i
 8004c70:	61fb      	str	r3, [r7, #28]
}
 8004c72:	bf00      	nop
 8004c74:	e7fe      	b.n	8004c74 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c76:	f001 f993 	bl	8005fa0 <xTaskGetSchedulerState>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d102      	bne.n	8004c86 <xQueueReceive+0x76>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <xQueueReceive+0x7a>
 8004c86:	2301      	movs	r3, #1
 8004c88:	e000      	b.n	8004c8c <xQueueReceive+0x7c>
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d10c      	bne.n	8004caa <xQueueReceive+0x9a>
	__asm volatile
 8004c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c94:	b672      	cpsid	i
 8004c96:	f383 8811 	msr	BASEPRI, r3
 8004c9a:	f3bf 8f6f 	isb	sy
 8004c9e:	f3bf 8f4f 	dsb	sy
 8004ca2:	b662      	cpsie	i
 8004ca4:	61bb      	str	r3, [r7, #24]
}
 8004ca6:	bf00      	nop
 8004ca8:	e7fe      	b.n	8004ca8 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004caa:	f001 fec7 	bl	8006a3c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d01f      	beq.n	8004cfa <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004cba:	68b9      	ldr	r1, [r7, #8]
 8004cbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cbe:	f000 f8f7 	bl	8004eb0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc4:	1e5a      	subs	r2, r3, #1
 8004cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00f      	beq.n	8004cf2 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd4:	3310      	adds	r3, #16
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f000 ff98 	bl	8005c0c <xTaskRemoveFromEventList>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d007      	beq.n	8004cf2 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004ce2:	4b3d      	ldr	r3, [pc, #244]	; (8004dd8 <xQueueReceive+0x1c8>)
 8004ce4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ce8:	601a      	str	r2, [r3, #0]
 8004cea:	f3bf 8f4f 	dsb	sy
 8004cee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004cf2:	f001 fed7 	bl	8006aa4 <vPortExitCritical>
				return pdPASS;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e069      	b.n	8004dce <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d103      	bne.n	8004d08 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d00:	f001 fed0 	bl	8006aa4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004d04:	2300      	movs	r3, #0
 8004d06:	e062      	b.n	8004dce <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d106      	bne.n	8004d1c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d0e:	f107 0310 	add.w	r3, r7, #16
 8004d12:	4618      	mov	r0, r3
 8004d14:	f000 ffe0 	bl	8005cd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d1c:	f001 fec2 	bl	8006aa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d20:	f000 fd40 	bl	80057a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d24:	f001 fe8a 	bl	8006a3c <vPortEnterCritical>
 8004d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d2e:	b25b      	sxtb	r3, r3
 8004d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d34:	d103      	bne.n	8004d3e <xQueueReceive+0x12e>
 8004d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d44:	b25b      	sxtb	r3, r3
 8004d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d4a:	d103      	bne.n	8004d54 <xQueueReceive+0x144>
 8004d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d54:	f001 fea6 	bl	8006aa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d58:	1d3a      	adds	r2, r7, #4
 8004d5a:	f107 0310 	add.w	r3, r7, #16
 8004d5e:	4611      	mov	r1, r2
 8004d60:	4618      	mov	r0, r3
 8004d62:	f000 ffcf 	bl	8005d04 <xTaskCheckForTimeOut>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d123      	bne.n	8004db4 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d6e:	f000 f917 	bl	8004fa0 <prvIsQueueEmpty>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d017      	beq.n	8004da8 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7a:	3324      	adds	r3, #36	; 0x24
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	4611      	mov	r1, r2
 8004d80:	4618      	mov	r0, r3
 8004d82:	f000 feef 	bl	8005b64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004d86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d88:	f000 f8b8 	bl	8004efc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004d8c:	f000 fd18 	bl	80057c0 <xTaskResumeAll>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d189      	bne.n	8004caa <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8004d96:	4b10      	ldr	r3, [pc, #64]	; (8004dd8 <xQueueReceive+0x1c8>)
 8004d98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d9c:	601a      	str	r2, [r3, #0]
 8004d9e:	f3bf 8f4f 	dsb	sy
 8004da2:	f3bf 8f6f 	isb	sy
 8004da6:	e780      	b.n	8004caa <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004da8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004daa:	f000 f8a7 	bl	8004efc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004dae:	f000 fd07 	bl	80057c0 <xTaskResumeAll>
 8004db2:	e77a      	b.n	8004caa <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004db4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004db6:	f000 f8a1 	bl	8004efc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004dba:	f000 fd01 	bl	80057c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004dbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dc0:	f000 f8ee 	bl	8004fa0 <prvIsQueueEmpty>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	f43f af6f 	beq.w	8004caa <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004dcc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3730      	adds	r7, #48	; 0x30
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	e000ed04 	.word	0xe000ed04

08004ddc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b086      	sub	sp, #24
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004de8:	2300      	movs	r3, #0
 8004dea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d10d      	bne.n	8004e16 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d14d      	bne.n	8004e9e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f001 f8e8 	bl	8005fdc <xTaskPriorityDisinherit>
 8004e0c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2200      	movs	r2, #0
 8004e12:	609a      	str	r2, [r3, #8]
 8004e14:	e043      	b.n	8004e9e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d119      	bne.n	8004e50 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6858      	ldr	r0, [r3, #4]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e24:	461a      	mov	r2, r3
 8004e26:	68b9      	ldr	r1, [r7, #8]
 8004e28:	f002 f93e 	bl	80070a8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e34:	441a      	add	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	685a      	ldr	r2, [r3, #4]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d32b      	bcc.n	8004e9e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	605a      	str	r2, [r3, #4]
 8004e4e:	e026      	b.n	8004e9e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	68d8      	ldr	r0, [r3, #12]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e58:	461a      	mov	r2, r3
 8004e5a:	68b9      	ldr	r1, [r7, #8]
 8004e5c:	f002 f924 	bl	80070a8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	68da      	ldr	r2, [r3, #12]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e68:	425b      	negs	r3, r3
 8004e6a:	441a      	add	r2, r3
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	68da      	ldr	r2, [r3, #12]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d207      	bcs.n	8004e8c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	689a      	ldr	r2, [r3, #8]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e84:	425b      	negs	r3, r3
 8004e86:	441a      	add	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d105      	bne.n	8004e9e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d002      	beq.n	8004e9e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	1c5a      	adds	r2, r3, #1
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004ea6:	697b      	ldr	r3, [r7, #20]
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3718      	adds	r7, #24
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d018      	beq.n	8004ef4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	68da      	ldr	r2, [r3, #12]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eca:	441a      	add	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	68da      	ldr	r2, [r3, #12]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d303      	bcc.n	8004ee4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	68d9      	ldr	r1, [r3, #12]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eec:	461a      	mov	r2, r3
 8004eee:	6838      	ldr	r0, [r7, #0]
 8004ef0:	f002 f8da 	bl	80070a8 <memcpy>
	}
}
 8004ef4:	bf00      	nop
 8004ef6:	3708      	adds	r7, #8
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004f04:	f001 fd9a 	bl	8006a3c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f0e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f10:	e011      	b.n	8004f36 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d012      	beq.n	8004f40 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	3324      	adds	r3, #36	; 0x24
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 fe74 	bl	8005c0c <xTaskRemoveFromEventList>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d001      	beq.n	8004f2e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004f2a:	f000 ff51 	bl	8005dd0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004f2e:	7bfb      	ldrb	r3, [r7, #15]
 8004f30:	3b01      	subs	r3, #1
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	dce9      	bgt.n	8004f12 <prvUnlockQueue+0x16>
 8004f3e:	e000      	b.n	8004f42 <prvUnlockQueue+0x46>
					break;
 8004f40:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	22ff      	movs	r2, #255	; 0xff
 8004f46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004f4a:	f001 fdab 	bl	8006aa4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004f4e:	f001 fd75 	bl	8006a3c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f58:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f5a:	e011      	b.n	8004f80 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d012      	beq.n	8004f8a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	3310      	adds	r3, #16
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f000 fe4f 	bl	8005c0c <xTaskRemoveFromEventList>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d001      	beq.n	8004f78 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004f74:	f000 ff2c 	bl	8005dd0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004f78:	7bbb      	ldrb	r3, [r7, #14]
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	dce9      	bgt.n	8004f5c <prvUnlockQueue+0x60>
 8004f88:	e000      	b.n	8004f8c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004f8a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	22ff      	movs	r2, #255	; 0xff
 8004f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004f94:	f001 fd86 	bl	8006aa4 <vPortExitCritical>
}
 8004f98:	bf00      	nop
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004fa8:	f001 fd48 	bl	8006a3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d102      	bne.n	8004fba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	60fb      	str	r3, [r7, #12]
 8004fb8:	e001      	b.n	8004fbe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004fbe:	f001 fd71 	bl	8006aa4 <vPortExitCritical>

	return xReturn;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004fd4:	f001 fd32 	bl	8006a3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d102      	bne.n	8004fea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	60fb      	str	r3, [r7, #12]
 8004fe8:	e001      	b.n	8004fee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004fea:	2300      	movs	r3, #0
 8004fec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004fee:	f001 fd59 	bl	8006aa4 <vPortExitCritical>

	return xReturn;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3710      	adds	r7, #16
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005006:	2300      	movs	r3, #0
 8005008:	60fb      	str	r3, [r7, #12]
 800500a:	e014      	b.n	8005036 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800500c:	4a0f      	ldr	r2, [pc, #60]	; (800504c <vQueueAddToRegistry+0x50>)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d10b      	bne.n	8005030 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005018:	490c      	ldr	r1, [pc, #48]	; (800504c <vQueueAddToRegistry+0x50>)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	683a      	ldr	r2, [r7, #0]
 800501e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005022:	4a0a      	ldr	r2, [pc, #40]	; (800504c <vQueueAddToRegistry+0x50>)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	00db      	lsls	r3, r3, #3
 8005028:	4413      	add	r3, r2
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800502e:	e006      	b.n	800503e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	3301      	adds	r3, #1
 8005034:	60fb      	str	r3, [r7, #12]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2b07      	cmp	r3, #7
 800503a:	d9e7      	bls.n	800500c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800503c:	bf00      	nop
 800503e:	bf00      	nop
 8005040:	3714      	adds	r7, #20
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	20000a04 	.word	0x20000a04

08005050 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005050:	b580      	push	{r7, lr}
 8005052:	b086      	sub	sp, #24
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005060:	f001 fcec 	bl	8006a3c <vPortEnterCritical>
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800506a:	b25b      	sxtb	r3, r3
 800506c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005070:	d103      	bne.n	800507a <vQueueWaitForMessageRestricted+0x2a>
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005080:	b25b      	sxtb	r3, r3
 8005082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005086:	d103      	bne.n	8005090 <vQueueWaitForMessageRestricted+0x40>
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005090:	f001 fd08 	bl	8006aa4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005098:	2b00      	cmp	r3, #0
 800509a:	d106      	bne.n	80050aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	3324      	adds	r3, #36	; 0x24
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	68b9      	ldr	r1, [r7, #8]
 80050a4:	4618      	mov	r0, r3
 80050a6:	f000 fd83 	bl	8005bb0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80050aa:	6978      	ldr	r0, [r7, #20]
 80050ac:	f7ff ff26 	bl	8004efc <prvUnlockQueue>
	}
 80050b0:	bf00      	nop
 80050b2:	3718      	adds	r7, #24
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b08e      	sub	sp, #56	; 0x38
 80050bc:	af04      	add	r7, sp, #16
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
 80050c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80050c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d10c      	bne.n	80050e6 <xTaskCreateStatic+0x2e>
	__asm volatile
 80050cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d0:	b672      	cpsid	i
 80050d2:	f383 8811 	msr	BASEPRI, r3
 80050d6:	f3bf 8f6f 	isb	sy
 80050da:	f3bf 8f4f 	dsb	sy
 80050de:	b662      	cpsie	i
 80050e0:	623b      	str	r3, [r7, #32]
}
 80050e2:	bf00      	nop
 80050e4:	e7fe      	b.n	80050e4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80050e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10c      	bne.n	8005106 <xTaskCreateStatic+0x4e>
	__asm volatile
 80050ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f0:	b672      	cpsid	i
 80050f2:	f383 8811 	msr	BASEPRI, r3
 80050f6:	f3bf 8f6f 	isb	sy
 80050fa:	f3bf 8f4f 	dsb	sy
 80050fe:	b662      	cpsie	i
 8005100:	61fb      	str	r3, [r7, #28]
}
 8005102:	bf00      	nop
 8005104:	e7fe      	b.n	8005104 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005106:	23bc      	movs	r3, #188	; 0xbc
 8005108:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	2bbc      	cmp	r3, #188	; 0xbc
 800510e:	d00c      	beq.n	800512a <xTaskCreateStatic+0x72>
	__asm volatile
 8005110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005114:	b672      	cpsid	i
 8005116:	f383 8811 	msr	BASEPRI, r3
 800511a:	f3bf 8f6f 	isb	sy
 800511e:	f3bf 8f4f 	dsb	sy
 8005122:	b662      	cpsie	i
 8005124:	61bb      	str	r3, [r7, #24]
}
 8005126:	bf00      	nop
 8005128:	e7fe      	b.n	8005128 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800512a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800512c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512e:	2b00      	cmp	r3, #0
 8005130:	d01e      	beq.n	8005170 <xTaskCreateStatic+0xb8>
 8005132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005134:	2b00      	cmp	r3, #0
 8005136:	d01b      	beq.n	8005170 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800513a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800513c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005140:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005144:	2202      	movs	r2, #2
 8005146:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800514a:	2300      	movs	r3, #0
 800514c:	9303      	str	r3, [sp, #12]
 800514e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005150:	9302      	str	r3, [sp, #8]
 8005152:	f107 0314 	add.w	r3, r7, #20
 8005156:	9301      	str	r3, [sp, #4]
 8005158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515a:	9300      	str	r3, [sp, #0]
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	68b9      	ldr	r1, [r7, #8]
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	f000 f850 	bl	8005208 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005168:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800516a:	f000 f8f5 	bl	8005358 <prvAddNewTaskToReadyList>
 800516e:	e001      	b.n	8005174 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8005170:	2300      	movs	r3, #0
 8005172:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005174:	697b      	ldr	r3, [r7, #20]
	}
 8005176:	4618      	mov	r0, r3
 8005178:	3728      	adds	r7, #40	; 0x28
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800517e:	b580      	push	{r7, lr}
 8005180:	b08c      	sub	sp, #48	; 0x30
 8005182:	af04      	add	r7, sp, #16
 8005184:	60f8      	str	r0, [r7, #12]
 8005186:	60b9      	str	r1, [r7, #8]
 8005188:	603b      	str	r3, [r7, #0]
 800518a:	4613      	mov	r3, r2
 800518c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800518e:	88fb      	ldrh	r3, [r7, #6]
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4618      	mov	r0, r3
 8005194:	f001 fd7e 	bl	8006c94 <pvPortMalloc>
 8005198:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d00e      	beq.n	80051be <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80051a0:	20bc      	movs	r0, #188	; 0xbc
 80051a2:	f001 fd77 	bl	8006c94 <pvPortMalloc>
 80051a6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d003      	beq.n	80051b6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	631a      	str	r2, [r3, #48]	; 0x30
 80051b4:	e005      	b.n	80051c2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80051b6:	6978      	ldr	r0, [r7, #20]
 80051b8:	f001 fe36 	bl	8006e28 <vPortFree>
 80051bc:	e001      	b.n	80051c2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80051be:	2300      	movs	r3, #0
 80051c0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d017      	beq.n	80051f8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80051d0:	88fa      	ldrh	r2, [r7, #6]
 80051d2:	2300      	movs	r3, #0
 80051d4:	9303      	str	r3, [sp, #12]
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	9302      	str	r3, [sp, #8]
 80051da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051dc:	9301      	str	r3, [sp, #4]
 80051de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e0:	9300      	str	r3, [sp, #0]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	68b9      	ldr	r1, [r7, #8]
 80051e6:	68f8      	ldr	r0, [r7, #12]
 80051e8:	f000 f80e 	bl	8005208 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051ec:	69f8      	ldr	r0, [r7, #28]
 80051ee:	f000 f8b3 	bl	8005358 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80051f2:	2301      	movs	r3, #1
 80051f4:	61bb      	str	r3, [r7, #24]
 80051f6:	e002      	b.n	80051fe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80051f8:	f04f 33ff 	mov.w	r3, #4294967295
 80051fc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80051fe:	69bb      	ldr	r3, [r7, #24]
	}
 8005200:	4618      	mov	r0, r3
 8005202:	3720      	adds	r7, #32
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b088      	sub	sp, #32
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
 8005214:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005218:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	461a      	mov	r2, r3
 8005220:	21a5      	movs	r1, #165	; 0xa5
 8005222:	f001 ff4f 	bl	80070c4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005228:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800522a:	6879      	ldr	r1, [r7, #4]
 800522c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005230:	440b      	add	r3, r1
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4413      	add	r3, r2
 8005236:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	f023 0307 	bic.w	r3, r3, #7
 800523e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	f003 0307 	and.w	r3, r3, #7
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00c      	beq.n	8005264 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800524a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524e:	b672      	cpsid	i
 8005250:	f383 8811 	msr	BASEPRI, r3
 8005254:	f3bf 8f6f 	isb	sy
 8005258:	f3bf 8f4f 	dsb	sy
 800525c:	b662      	cpsie	i
 800525e:	617b      	str	r3, [r7, #20]
}
 8005260:	bf00      	nop
 8005262:	e7fe      	b.n	8005262 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d01f      	beq.n	80052aa <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800526a:	2300      	movs	r3, #0
 800526c:	61fb      	str	r3, [r7, #28]
 800526e:	e012      	b.n	8005296 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005270:	68ba      	ldr	r2, [r7, #8]
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	4413      	add	r3, r2
 8005276:	7819      	ldrb	r1, [r3, #0]
 8005278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	4413      	add	r3, r2
 800527e:	3334      	adds	r3, #52	; 0x34
 8005280:	460a      	mov	r2, r1
 8005282:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005284:	68ba      	ldr	r2, [r7, #8]
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	4413      	add	r3, r2
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d006      	beq.n	800529e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	3301      	adds	r3, #1
 8005294:	61fb      	str	r3, [r7, #28]
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	2b0f      	cmp	r3, #15
 800529a:	d9e9      	bls.n	8005270 <prvInitialiseNewTask+0x68>
 800529c:	e000      	b.n	80052a0 <prvInitialiseNewTask+0x98>
			{
				break;
 800529e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80052a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052a8:	e003      	b.n	80052b2 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80052aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80052b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b4:	2b37      	cmp	r3, #55	; 0x37
 80052b6:	d901      	bls.n	80052bc <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80052b8:	2337      	movs	r3, #55	; 0x37
 80052ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80052bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80052c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052c6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80052c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ca:	2200      	movs	r2, #0
 80052cc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80052ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d0:	3304      	adds	r3, #4
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7ff f952 	bl	800457c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80052d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052da:	3318      	adds	r3, #24
 80052dc:	4618      	mov	r0, r3
 80052de:	f7ff f94d 	bl	800457c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80052e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80052ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80052f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80052f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fa:	2200      	movs	r2, #0
 80052fc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005302:	2200      	movs	r2, #0
 8005304:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530a:	3354      	adds	r3, #84	; 0x54
 800530c:	2260      	movs	r2, #96	; 0x60
 800530e:	2100      	movs	r1, #0
 8005310:	4618      	mov	r0, r3
 8005312:	f001 fed7 	bl	80070c4 <memset>
 8005316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005318:	4a0c      	ldr	r2, [pc, #48]	; (800534c <prvInitialiseNewTask+0x144>)
 800531a:	659a      	str	r2, [r3, #88]	; 0x58
 800531c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531e:	4a0c      	ldr	r2, [pc, #48]	; (8005350 <prvInitialiseNewTask+0x148>)
 8005320:	65da      	str	r2, [r3, #92]	; 0x5c
 8005322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005324:	4a0b      	ldr	r2, [pc, #44]	; (8005354 <prvInitialiseNewTask+0x14c>)
 8005326:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005328:	683a      	ldr	r2, [r7, #0]
 800532a:	68f9      	ldr	r1, [r7, #12]
 800532c:	69b8      	ldr	r0, [r7, #24]
 800532e:	f001 fa77 	bl	8006820 <pxPortInitialiseStack>
 8005332:	4602      	mov	r2, r0
 8005334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005336:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800533a:	2b00      	cmp	r3, #0
 800533c:	d002      	beq.n	8005344 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800533e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005342:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005344:	bf00      	nop
 8005346:	3720      	adds	r7, #32
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}
 800534c:	08007328 	.word	0x08007328
 8005350:	08007348 	.word	0x08007348
 8005354:	08007308 	.word	0x08007308

08005358 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b082      	sub	sp, #8
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005360:	f001 fb6c 	bl	8006a3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005364:	4b2d      	ldr	r3, [pc, #180]	; (800541c <prvAddNewTaskToReadyList+0xc4>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	3301      	adds	r3, #1
 800536a:	4a2c      	ldr	r2, [pc, #176]	; (800541c <prvAddNewTaskToReadyList+0xc4>)
 800536c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800536e:	4b2c      	ldr	r3, [pc, #176]	; (8005420 <prvAddNewTaskToReadyList+0xc8>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d109      	bne.n	800538a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005376:	4a2a      	ldr	r2, [pc, #168]	; (8005420 <prvAddNewTaskToReadyList+0xc8>)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800537c:	4b27      	ldr	r3, [pc, #156]	; (800541c <prvAddNewTaskToReadyList+0xc4>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2b01      	cmp	r3, #1
 8005382:	d110      	bne.n	80053a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005384:	f000 fd48 	bl	8005e18 <prvInitialiseTaskLists>
 8005388:	e00d      	b.n	80053a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800538a:	4b26      	ldr	r3, [pc, #152]	; (8005424 <prvAddNewTaskToReadyList+0xcc>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d109      	bne.n	80053a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005392:	4b23      	ldr	r3, [pc, #140]	; (8005420 <prvAddNewTaskToReadyList+0xc8>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539c:	429a      	cmp	r2, r3
 800539e:	d802      	bhi.n	80053a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80053a0:	4a1f      	ldr	r2, [pc, #124]	; (8005420 <prvAddNewTaskToReadyList+0xc8>)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80053a6:	4b20      	ldr	r3, [pc, #128]	; (8005428 <prvAddNewTaskToReadyList+0xd0>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	3301      	adds	r3, #1
 80053ac:	4a1e      	ldr	r2, [pc, #120]	; (8005428 <prvAddNewTaskToReadyList+0xd0>)
 80053ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80053b0:	4b1d      	ldr	r3, [pc, #116]	; (8005428 <prvAddNewTaskToReadyList+0xd0>)
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053bc:	4b1b      	ldr	r3, [pc, #108]	; (800542c <prvAddNewTaskToReadyList+0xd4>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d903      	bls.n	80053cc <prvAddNewTaskToReadyList+0x74>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c8:	4a18      	ldr	r2, [pc, #96]	; (800542c <prvAddNewTaskToReadyList+0xd4>)
 80053ca:	6013      	str	r3, [r2, #0]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053d0:	4613      	mov	r3, r2
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	4413      	add	r3, r2
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	4a15      	ldr	r2, [pc, #84]	; (8005430 <prvAddNewTaskToReadyList+0xd8>)
 80053da:	441a      	add	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	3304      	adds	r3, #4
 80053e0:	4619      	mov	r1, r3
 80053e2:	4610      	mov	r0, r2
 80053e4:	f7ff f8d7 	bl	8004596 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80053e8:	f001 fb5c 	bl	8006aa4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80053ec:	4b0d      	ldr	r3, [pc, #52]	; (8005424 <prvAddNewTaskToReadyList+0xcc>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00e      	beq.n	8005412 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80053f4:	4b0a      	ldr	r3, [pc, #40]	; (8005420 <prvAddNewTaskToReadyList+0xc8>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fe:	429a      	cmp	r2, r3
 8005400:	d207      	bcs.n	8005412 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005402:	4b0c      	ldr	r3, [pc, #48]	; (8005434 <prvAddNewTaskToReadyList+0xdc>)
 8005404:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005408:	601a      	str	r2, [r3, #0]
 800540a:	f3bf 8f4f 	dsb	sy
 800540e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005412:	bf00      	nop
 8005414:	3708      	adds	r7, #8
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	20000f18 	.word	0x20000f18
 8005420:	20000a44 	.word	0x20000a44
 8005424:	20000f24 	.word	0x20000f24
 8005428:	20000f34 	.word	0x20000f34
 800542c:	20000f20 	.word	0x20000f20
 8005430:	20000a48 	.word	0x20000a48
 8005434:	e000ed04 	.word	0xe000ed04

08005438 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005440:	2300      	movs	r3, #0
 8005442:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d019      	beq.n	800547e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800544a:	4b14      	ldr	r3, [pc, #80]	; (800549c <vTaskDelay+0x64>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00c      	beq.n	800546c <vTaskDelay+0x34>
	__asm volatile
 8005452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005456:	b672      	cpsid	i
 8005458:	f383 8811 	msr	BASEPRI, r3
 800545c:	f3bf 8f6f 	isb	sy
 8005460:	f3bf 8f4f 	dsb	sy
 8005464:	b662      	cpsie	i
 8005466:	60bb      	str	r3, [r7, #8]
}
 8005468:	bf00      	nop
 800546a:	e7fe      	b.n	800546a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800546c:	f000 f99a 	bl	80057a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005470:	2100      	movs	r1, #0
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 fe24 	bl	80060c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005478:	f000 f9a2 	bl	80057c0 <xTaskResumeAll>
 800547c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d107      	bne.n	8005494 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8005484:	4b06      	ldr	r3, [pc, #24]	; (80054a0 <vTaskDelay+0x68>)
 8005486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800548a:	601a      	str	r2, [r3, #0]
 800548c:	f3bf 8f4f 	dsb	sy
 8005490:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005494:	bf00      	nop
 8005496:	3710      	adds	r7, #16
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	20000f40 	.word	0x20000f40
 80054a0:	e000ed04 	.word	0xe000ed04

080054a4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80054ac:	f001 fac6 	bl	8006a3c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d102      	bne.n	80054bc <vTaskSuspend+0x18>
 80054b6:	4b31      	ldr	r3, [pc, #196]	; (800557c <vTaskSuspend+0xd8>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	e000      	b.n	80054be <vTaskSuspend+0x1a>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	3304      	adds	r3, #4
 80054c4:	4618      	mov	r0, r3
 80054c6:	f7ff f8c3 	bl	8004650 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d004      	beq.n	80054dc <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	3318      	adds	r3, #24
 80054d6:	4618      	mov	r0, r3
 80054d8:	f7ff f8ba 	bl	8004650 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	3304      	adds	r3, #4
 80054e0:	4619      	mov	r1, r3
 80054e2:	4827      	ldr	r0, [pc, #156]	; (8005580 <vTaskSuspend+0xdc>)
 80054e4:	f7ff f857 	bl	8004596 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d103      	bne.n	80054fc <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80054fc:	f001 fad2 	bl	8006aa4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8005500:	4b20      	ldr	r3, [pc, #128]	; (8005584 <vTaskSuspend+0xe0>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d005      	beq.n	8005514 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8005508:	f001 fa98 	bl	8006a3c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800550c:	f000 fd28 	bl	8005f60 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8005510:	f001 fac8 	bl	8006aa4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8005514:	4b19      	ldr	r3, [pc, #100]	; (800557c <vTaskSuspend+0xd8>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	429a      	cmp	r2, r3
 800551c:	d129      	bne.n	8005572 <vTaskSuspend+0xce>
		{
			if( xSchedulerRunning != pdFALSE )
 800551e:	4b19      	ldr	r3, [pc, #100]	; (8005584 <vTaskSuspend+0xe0>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d019      	beq.n	800555a <vTaskSuspend+0xb6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8005526:	4b18      	ldr	r3, [pc, #96]	; (8005588 <vTaskSuspend+0xe4>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00c      	beq.n	8005548 <vTaskSuspend+0xa4>
	__asm volatile
 800552e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005532:	b672      	cpsid	i
 8005534:	f383 8811 	msr	BASEPRI, r3
 8005538:	f3bf 8f6f 	isb	sy
 800553c:	f3bf 8f4f 	dsb	sy
 8005540:	b662      	cpsie	i
 8005542:	60bb      	str	r3, [r7, #8]
}
 8005544:	bf00      	nop
 8005546:	e7fe      	b.n	8005546 <vTaskSuspend+0xa2>
				portYIELD_WITHIN_API();
 8005548:	4b10      	ldr	r3, [pc, #64]	; (800558c <vTaskSuspend+0xe8>)
 800554a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800554e:	601a      	str	r2, [r3, #0]
 8005550:	f3bf 8f4f 	dsb	sy
 8005554:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005558:	e00b      	b.n	8005572 <vTaskSuspend+0xce>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800555a:	4b09      	ldr	r3, [pc, #36]	; (8005580 <vTaskSuspend+0xdc>)
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	4b0c      	ldr	r3, [pc, #48]	; (8005590 <vTaskSuspend+0xec>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	429a      	cmp	r2, r3
 8005564:	d103      	bne.n	800556e <vTaskSuspend+0xca>
					pxCurrentTCB = NULL;
 8005566:	4b05      	ldr	r3, [pc, #20]	; (800557c <vTaskSuspend+0xd8>)
 8005568:	2200      	movs	r2, #0
 800556a:	601a      	str	r2, [r3, #0]
	}
 800556c:	e001      	b.n	8005572 <vTaskSuspend+0xce>
					vTaskSwitchContext();
 800556e:	f000 fa93 	bl	8005a98 <vTaskSwitchContext>
	}
 8005572:	bf00      	nop
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	20000a44 	.word	0x20000a44
 8005580:	20000f04 	.word	0x20000f04
 8005584:	20000f24 	.word	0x20000f24
 8005588:	20000f40 	.word	0x20000f40
 800558c:	e000ed04 	.word	0xe000ed04
 8005590:	20000f18 	.word	0x20000f18

08005594 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8005594:	b480      	push	{r7}
 8005596:	b087      	sub	sp, #28
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800559c:	2300      	movs	r3, #0
 800559e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d10c      	bne.n	80055c4 <prvTaskIsTaskSuspended+0x30>
	__asm volatile
 80055aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ae:	b672      	cpsid	i
 80055b0:	f383 8811 	msr	BASEPRI, r3
 80055b4:	f3bf 8f6f 	isb	sy
 80055b8:	f3bf 8f4f 	dsb	sy
 80055bc:	b662      	cpsie	i
 80055be:	60fb      	str	r3, [r7, #12]
}
 80055c0:	bf00      	nop
 80055c2:	e7fe      	b.n	80055c2 <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	695b      	ldr	r3, [r3, #20]
 80055c8:	4a0a      	ldr	r2, [pc, #40]	; (80055f4 <prvTaskIsTaskSuspended+0x60>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d10a      	bne.n	80055e4 <prvTaskIsTaskSuspended+0x50>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d2:	4a09      	ldr	r2, [pc, #36]	; (80055f8 <prvTaskIsTaskSuspended+0x64>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d005      	beq.n	80055e4 <prvTaskIsTaskSuspended+0x50>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d101      	bne.n	80055e4 <prvTaskIsTaskSuspended+0x50>
				{
					xReturn = pdTRUE;
 80055e0:	2301      	movs	r3, #1
 80055e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80055e4:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80055e6:	4618      	mov	r0, r3
 80055e8:	371c      	adds	r7, #28
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	20000f04 	.word	0x20000f04
 80055f8:	20000ed8 	.word	0x20000ed8

080055fc <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d10c      	bne.n	8005628 <vTaskResume+0x2c>
	__asm volatile
 800560e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005612:	b672      	cpsid	i
 8005614:	f383 8811 	msr	BASEPRI, r3
 8005618:	f3bf 8f6f 	isb	sy
 800561c:	f3bf 8f4f 	dsb	sy
 8005620:	b662      	cpsie	i
 8005622:	60bb      	str	r3, [r7, #8]
}
 8005624:	bf00      	nop
 8005626:	e7fe      	b.n	8005626 <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8005628:	4b20      	ldr	r3, [pc, #128]	; (80056ac <vTaskResume+0xb0>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	429a      	cmp	r2, r3
 8005630:	d038      	beq.n	80056a4 <vTaskResume+0xa8>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d035      	beq.n	80056a4 <vTaskResume+0xa8>
		{
			taskENTER_CRITICAL();
 8005638:	f001 fa00 	bl	8006a3c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800563c:	68f8      	ldr	r0, [r7, #12]
 800563e:	f7ff ffa9 	bl	8005594 <prvTaskIsTaskSuspended>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d02b      	beq.n	80056a0 <vTaskResume+0xa4>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	3304      	adds	r3, #4
 800564c:	4618      	mov	r0, r3
 800564e:	f7fe ffff 	bl	8004650 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005656:	4b16      	ldr	r3, [pc, #88]	; (80056b0 <vTaskResume+0xb4>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	429a      	cmp	r2, r3
 800565c:	d903      	bls.n	8005666 <vTaskResume+0x6a>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005662:	4a13      	ldr	r2, [pc, #76]	; (80056b0 <vTaskResume+0xb4>)
 8005664:	6013      	str	r3, [r2, #0]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800566a:	4613      	mov	r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	4413      	add	r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	4a10      	ldr	r2, [pc, #64]	; (80056b4 <vTaskResume+0xb8>)
 8005674:	441a      	add	r2, r3
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	3304      	adds	r3, #4
 800567a:	4619      	mov	r1, r3
 800567c:	4610      	mov	r0, r2
 800567e:	f7fe ff8a 	bl	8004596 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005686:	4b09      	ldr	r3, [pc, #36]	; (80056ac <vTaskResume+0xb0>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800568c:	429a      	cmp	r2, r3
 800568e:	d307      	bcc.n	80056a0 <vTaskResume+0xa4>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8005690:	4b09      	ldr	r3, [pc, #36]	; (80056b8 <vTaskResume+0xbc>)
 8005692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005696:	601a      	str	r2, [r3, #0]
 8005698:	f3bf 8f4f 	dsb	sy
 800569c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80056a0:	f001 fa00 	bl	8006aa4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80056a4:	bf00      	nop
 80056a6:	3710      	adds	r7, #16
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	20000a44 	.word	0x20000a44
 80056b0:	20000f20 	.word	0x20000f20
 80056b4:	20000a48 	.word	0x20000a48
 80056b8:	e000ed04 	.word	0xe000ed04

080056bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b08a      	sub	sp, #40	; 0x28
 80056c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80056c2:	2300      	movs	r3, #0
 80056c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80056c6:	2300      	movs	r3, #0
 80056c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80056ca:	463a      	mov	r2, r7
 80056cc:	1d39      	adds	r1, r7, #4
 80056ce:	f107 0308 	add.w	r3, r7, #8
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7fe fefe 	bl	80044d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80056d8:	6839      	ldr	r1, [r7, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	68ba      	ldr	r2, [r7, #8]
 80056de:	9202      	str	r2, [sp, #8]
 80056e0:	9301      	str	r3, [sp, #4]
 80056e2:	2300      	movs	r3, #0
 80056e4:	9300      	str	r3, [sp, #0]
 80056e6:	2300      	movs	r3, #0
 80056e8:	460a      	mov	r2, r1
 80056ea:	4926      	ldr	r1, [pc, #152]	; (8005784 <vTaskStartScheduler+0xc8>)
 80056ec:	4826      	ldr	r0, [pc, #152]	; (8005788 <vTaskStartScheduler+0xcc>)
 80056ee:	f7ff fce3 	bl	80050b8 <xTaskCreateStatic>
 80056f2:	4603      	mov	r3, r0
 80056f4:	4a25      	ldr	r2, [pc, #148]	; (800578c <vTaskStartScheduler+0xd0>)
 80056f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80056f8:	4b24      	ldr	r3, [pc, #144]	; (800578c <vTaskStartScheduler+0xd0>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d002      	beq.n	8005706 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005700:	2301      	movs	r3, #1
 8005702:	617b      	str	r3, [r7, #20]
 8005704:	e001      	b.n	800570a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005706:	2300      	movs	r3, #0
 8005708:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d102      	bne.n	8005716 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005710:	f000 fd2a 	bl	8006168 <xTimerCreateTimerTask>
 8005714:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d11d      	bne.n	8005758 <vTaskStartScheduler+0x9c>
	__asm volatile
 800571c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005720:	b672      	cpsid	i
 8005722:	f383 8811 	msr	BASEPRI, r3
 8005726:	f3bf 8f6f 	isb	sy
 800572a:	f3bf 8f4f 	dsb	sy
 800572e:	b662      	cpsie	i
 8005730:	613b      	str	r3, [r7, #16]
}
 8005732:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005734:	4b16      	ldr	r3, [pc, #88]	; (8005790 <vTaskStartScheduler+0xd4>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	3354      	adds	r3, #84	; 0x54
 800573a:	4a16      	ldr	r2, [pc, #88]	; (8005794 <vTaskStartScheduler+0xd8>)
 800573c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800573e:	4b16      	ldr	r3, [pc, #88]	; (8005798 <vTaskStartScheduler+0xdc>)
 8005740:	f04f 32ff 	mov.w	r2, #4294967295
 8005744:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005746:	4b15      	ldr	r3, [pc, #84]	; (800579c <vTaskStartScheduler+0xe0>)
 8005748:	2201      	movs	r2, #1
 800574a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800574c:	4b14      	ldr	r3, [pc, #80]	; (80057a0 <vTaskStartScheduler+0xe4>)
 800574e:	2200      	movs	r2, #0
 8005750:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005752:	f001 f8f5 	bl	8006940 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005756:	e010      	b.n	800577a <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800575e:	d10c      	bne.n	800577a <vTaskStartScheduler+0xbe>
	__asm volatile
 8005760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005764:	b672      	cpsid	i
 8005766:	f383 8811 	msr	BASEPRI, r3
 800576a:	f3bf 8f6f 	isb	sy
 800576e:	f3bf 8f4f 	dsb	sy
 8005772:	b662      	cpsie	i
 8005774:	60fb      	str	r3, [r7, #12]
}
 8005776:	bf00      	nop
 8005778:	e7fe      	b.n	8005778 <vTaskStartScheduler+0xbc>
}
 800577a:	bf00      	nop
 800577c:	3718      	adds	r7, #24
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	08007290 	.word	0x08007290
 8005788:	08005de9 	.word	0x08005de9
 800578c:	20000f3c 	.word	0x20000f3c
 8005790:	20000a44 	.word	0x20000a44
 8005794:	20000010 	.word	0x20000010
 8005798:	20000f38 	.word	0x20000f38
 800579c:	20000f24 	.word	0x20000f24
 80057a0:	20000f1c 	.word	0x20000f1c

080057a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80057a4:	b480      	push	{r7}
 80057a6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80057a8:	4b04      	ldr	r3, [pc, #16]	; (80057bc <vTaskSuspendAll+0x18>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	3301      	adds	r3, #1
 80057ae:	4a03      	ldr	r2, [pc, #12]	; (80057bc <vTaskSuspendAll+0x18>)
 80057b0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80057b2:	bf00      	nop
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr
 80057bc:	20000f40 	.word	0x20000f40

080057c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80057c6:	2300      	movs	r3, #0
 80057c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80057ca:	2300      	movs	r3, #0
 80057cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80057ce:	4b43      	ldr	r3, [pc, #268]	; (80058dc <xTaskResumeAll+0x11c>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10c      	bne.n	80057f0 <xTaskResumeAll+0x30>
	__asm volatile
 80057d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057da:	b672      	cpsid	i
 80057dc:	f383 8811 	msr	BASEPRI, r3
 80057e0:	f3bf 8f6f 	isb	sy
 80057e4:	f3bf 8f4f 	dsb	sy
 80057e8:	b662      	cpsie	i
 80057ea:	603b      	str	r3, [r7, #0]
}
 80057ec:	bf00      	nop
 80057ee:	e7fe      	b.n	80057ee <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80057f0:	f001 f924 	bl	8006a3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80057f4:	4b39      	ldr	r3, [pc, #228]	; (80058dc <xTaskResumeAll+0x11c>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	3b01      	subs	r3, #1
 80057fa:	4a38      	ldr	r2, [pc, #224]	; (80058dc <xTaskResumeAll+0x11c>)
 80057fc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057fe:	4b37      	ldr	r3, [pc, #220]	; (80058dc <xTaskResumeAll+0x11c>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d162      	bne.n	80058cc <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005806:	4b36      	ldr	r3, [pc, #216]	; (80058e0 <xTaskResumeAll+0x120>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d05e      	beq.n	80058cc <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800580e:	e02f      	b.n	8005870 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005810:	4b34      	ldr	r3, [pc, #208]	; (80058e4 <xTaskResumeAll+0x124>)
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	3318      	adds	r3, #24
 800581c:	4618      	mov	r0, r3
 800581e:	f7fe ff17 	bl	8004650 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	3304      	adds	r3, #4
 8005826:	4618      	mov	r0, r3
 8005828:	f7fe ff12 	bl	8004650 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005830:	4b2d      	ldr	r3, [pc, #180]	; (80058e8 <xTaskResumeAll+0x128>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	429a      	cmp	r2, r3
 8005836:	d903      	bls.n	8005840 <xTaskResumeAll+0x80>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583c:	4a2a      	ldr	r2, [pc, #168]	; (80058e8 <xTaskResumeAll+0x128>)
 800583e:	6013      	str	r3, [r2, #0]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005844:	4613      	mov	r3, r2
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	4413      	add	r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	4a27      	ldr	r2, [pc, #156]	; (80058ec <xTaskResumeAll+0x12c>)
 800584e:	441a      	add	r2, r3
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	3304      	adds	r3, #4
 8005854:	4619      	mov	r1, r3
 8005856:	4610      	mov	r0, r2
 8005858:	f7fe fe9d 	bl	8004596 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005860:	4b23      	ldr	r3, [pc, #140]	; (80058f0 <xTaskResumeAll+0x130>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005866:	429a      	cmp	r2, r3
 8005868:	d302      	bcc.n	8005870 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800586a:	4b22      	ldr	r3, [pc, #136]	; (80058f4 <xTaskResumeAll+0x134>)
 800586c:	2201      	movs	r2, #1
 800586e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005870:	4b1c      	ldr	r3, [pc, #112]	; (80058e4 <xTaskResumeAll+0x124>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1cb      	bne.n	8005810 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d001      	beq.n	8005882 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800587e:	f000 fb6f 	bl	8005f60 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005882:	4b1d      	ldr	r3, [pc, #116]	; (80058f8 <xTaskResumeAll+0x138>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d010      	beq.n	80058b0 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800588e:	f000 f847 	bl	8005920 <xTaskIncrementTick>
 8005892:	4603      	mov	r3, r0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d002      	beq.n	800589e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8005898:	4b16      	ldr	r3, [pc, #88]	; (80058f4 <xTaskResumeAll+0x134>)
 800589a:	2201      	movs	r2, #1
 800589c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	3b01      	subs	r3, #1
 80058a2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d1f1      	bne.n	800588e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80058aa:	4b13      	ldr	r3, [pc, #76]	; (80058f8 <xTaskResumeAll+0x138>)
 80058ac:	2200      	movs	r2, #0
 80058ae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80058b0:	4b10      	ldr	r3, [pc, #64]	; (80058f4 <xTaskResumeAll+0x134>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d009      	beq.n	80058cc <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80058b8:	2301      	movs	r3, #1
 80058ba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80058bc:	4b0f      	ldr	r3, [pc, #60]	; (80058fc <xTaskResumeAll+0x13c>)
 80058be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058c2:	601a      	str	r2, [r3, #0]
 80058c4:	f3bf 8f4f 	dsb	sy
 80058c8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80058cc:	f001 f8ea 	bl	8006aa4 <vPortExitCritical>

	return xAlreadyYielded;
 80058d0:	68bb      	ldr	r3, [r7, #8]
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3710      	adds	r7, #16
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	20000f40 	.word	0x20000f40
 80058e0:	20000f18 	.word	0x20000f18
 80058e4:	20000ed8 	.word	0x20000ed8
 80058e8:	20000f20 	.word	0x20000f20
 80058ec:	20000a48 	.word	0x20000a48
 80058f0:	20000a44 	.word	0x20000a44
 80058f4:	20000f2c 	.word	0x20000f2c
 80058f8:	20000f28 	.word	0x20000f28
 80058fc:	e000ed04 	.word	0xe000ed04

08005900 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005906:	4b05      	ldr	r3, [pc, #20]	; (800591c <xTaskGetTickCount+0x1c>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800590c:	687b      	ldr	r3, [r7, #4]
}
 800590e:	4618      	mov	r0, r3
 8005910:	370c      	adds	r7, #12
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	20000f1c 	.word	0x20000f1c

08005920 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b086      	sub	sp, #24
 8005924:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005926:	2300      	movs	r3, #0
 8005928:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800592a:	4b50      	ldr	r3, [pc, #320]	; (8005a6c <xTaskIncrementTick+0x14c>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	f040 808b 	bne.w	8005a4a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005934:	4b4e      	ldr	r3, [pc, #312]	; (8005a70 <xTaskIncrementTick+0x150>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	3301      	adds	r3, #1
 800593a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800593c:	4a4c      	ldr	r2, [pc, #304]	; (8005a70 <xTaskIncrementTick+0x150>)
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d122      	bne.n	800598e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8005948:	4b4a      	ldr	r3, [pc, #296]	; (8005a74 <xTaskIncrementTick+0x154>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00c      	beq.n	800596c <xTaskIncrementTick+0x4c>
	__asm volatile
 8005952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005956:	b672      	cpsid	i
 8005958:	f383 8811 	msr	BASEPRI, r3
 800595c:	f3bf 8f6f 	isb	sy
 8005960:	f3bf 8f4f 	dsb	sy
 8005964:	b662      	cpsie	i
 8005966:	603b      	str	r3, [r7, #0]
}
 8005968:	bf00      	nop
 800596a:	e7fe      	b.n	800596a <xTaskIncrementTick+0x4a>
 800596c:	4b41      	ldr	r3, [pc, #260]	; (8005a74 <xTaskIncrementTick+0x154>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	60fb      	str	r3, [r7, #12]
 8005972:	4b41      	ldr	r3, [pc, #260]	; (8005a78 <xTaskIncrementTick+0x158>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a3f      	ldr	r2, [pc, #252]	; (8005a74 <xTaskIncrementTick+0x154>)
 8005978:	6013      	str	r3, [r2, #0]
 800597a:	4a3f      	ldr	r2, [pc, #252]	; (8005a78 <xTaskIncrementTick+0x158>)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6013      	str	r3, [r2, #0]
 8005980:	4b3e      	ldr	r3, [pc, #248]	; (8005a7c <xTaskIncrementTick+0x15c>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	3301      	adds	r3, #1
 8005986:	4a3d      	ldr	r2, [pc, #244]	; (8005a7c <xTaskIncrementTick+0x15c>)
 8005988:	6013      	str	r3, [r2, #0]
 800598a:	f000 fae9 	bl	8005f60 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800598e:	4b3c      	ldr	r3, [pc, #240]	; (8005a80 <xTaskIncrementTick+0x160>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	693a      	ldr	r2, [r7, #16]
 8005994:	429a      	cmp	r2, r3
 8005996:	d349      	bcc.n	8005a2c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005998:	4b36      	ldr	r3, [pc, #216]	; (8005a74 <xTaskIncrementTick+0x154>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d104      	bne.n	80059ac <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059a2:	4b37      	ldr	r3, [pc, #220]	; (8005a80 <xTaskIncrementTick+0x160>)
 80059a4:	f04f 32ff 	mov.w	r2, #4294967295
 80059a8:	601a      	str	r2, [r3, #0]
					break;
 80059aa:	e03f      	b.n	8005a2c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059ac:	4b31      	ldr	r3, [pc, #196]	; (8005a74 <xTaskIncrementTick+0x154>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80059bc:	693a      	ldr	r2, [r7, #16]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d203      	bcs.n	80059cc <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80059c4:	4a2e      	ldr	r2, [pc, #184]	; (8005a80 <xTaskIncrementTick+0x160>)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80059ca:	e02f      	b.n	8005a2c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	3304      	adds	r3, #4
 80059d0:	4618      	mov	r0, r3
 80059d2:	f7fe fe3d 	bl	8004650 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d004      	beq.n	80059e8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	3318      	adds	r3, #24
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7fe fe34 	bl	8004650 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ec:	4b25      	ldr	r3, [pc, #148]	; (8005a84 <xTaskIncrementTick+0x164>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d903      	bls.n	80059fc <xTaskIncrementTick+0xdc>
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f8:	4a22      	ldr	r2, [pc, #136]	; (8005a84 <xTaskIncrementTick+0x164>)
 80059fa:	6013      	str	r3, [r2, #0]
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a00:	4613      	mov	r3, r2
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	4413      	add	r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	4a1f      	ldr	r2, [pc, #124]	; (8005a88 <xTaskIncrementTick+0x168>)
 8005a0a:	441a      	add	r2, r3
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	3304      	adds	r3, #4
 8005a10:	4619      	mov	r1, r3
 8005a12:	4610      	mov	r0, r2
 8005a14:	f7fe fdbf 	bl	8004596 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a1c:	4b1b      	ldr	r3, [pc, #108]	; (8005a8c <xTaskIncrementTick+0x16c>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d3b8      	bcc.n	8005998 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8005a26:	2301      	movs	r3, #1
 8005a28:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a2a:	e7b5      	b.n	8005998 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a2c:	4b17      	ldr	r3, [pc, #92]	; (8005a8c <xTaskIncrementTick+0x16c>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a32:	4915      	ldr	r1, [pc, #84]	; (8005a88 <xTaskIncrementTick+0x168>)
 8005a34:	4613      	mov	r3, r2
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	4413      	add	r3, r2
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	440b      	add	r3, r1
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d907      	bls.n	8005a54 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8005a44:	2301      	movs	r3, #1
 8005a46:	617b      	str	r3, [r7, #20]
 8005a48:	e004      	b.n	8005a54 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005a4a:	4b11      	ldr	r3, [pc, #68]	; (8005a90 <xTaskIncrementTick+0x170>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	3301      	adds	r3, #1
 8005a50:	4a0f      	ldr	r2, [pc, #60]	; (8005a90 <xTaskIncrementTick+0x170>)
 8005a52:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005a54:	4b0f      	ldr	r3, [pc, #60]	; (8005a94 <xTaskIncrementTick+0x174>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d001      	beq.n	8005a60 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005a60:	697b      	ldr	r3, [r7, #20]
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3718      	adds	r7, #24
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	20000f40 	.word	0x20000f40
 8005a70:	20000f1c 	.word	0x20000f1c
 8005a74:	20000ed0 	.word	0x20000ed0
 8005a78:	20000ed4 	.word	0x20000ed4
 8005a7c:	20000f30 	.word	0x20000f30
 8005a80:	20000f38 	.word	0x20000f38
 8005a84:	20000f20 	.word	0x20000f20
 8005a88:	20000a48 	.word	0x20000a48
 8005a8c:	20000a44 	.word	0x20000a44
 8005a90:	20000f28 	.word	0x20000f28
 8005a94:	20000f2c 	.word	0x20000f2c

08005a98 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a9e:	4b2b      	ldr	r3, [pc, #172]	; (8005b4c <vTaskSwitchContext+0xb4>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d003      	beq.n	8005aae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005aa6:	4b2a      	ldr	r3, [pc, #168]	; (8005b50 <vTaskSwitchContext+0xb8>)
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005aac:	e048      	b.n	8005b40 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8005aae:	4b28      	ldr	r3, [pc, #160]	; (8005b50 <vTaskSwitchContext+0xb8>)
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ab4:	4b27      	ldr	r3, [pc, #156]	; (8005b54 <vTaskSwitchContext+0xbc>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	60fb      	str	r3, [r7, #12]
 8005aba:	e012      	b.n	8005ae2 <vTaskSwitchContext+0x4a>
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d10c      	bne.n	8005adc <vTaskSwitchContext+0x44>
	__asm volatile
 8005ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac6:	b672      	cpsid	i
 8005ac8:	f383 8811 	msr	BASEPRI, r3
 8005acc:	f3bf 8f6f 	isb	sy
 8005ad0:	f3bf 8f4f 	dsb	sy
 8005ad4:	b662      	cpsie	i
 8005ad6:	607b      	str	r3, [r7, #4]
}
 8005ad8:	bf00      	nop
 8005ada:	e7fe      	b.n	8005ada <vTaskSwitchContext+0x42>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	60fb      	str	r3, [r7, #12]
 8005ae2:	491d      	ldr	r1, [pc, #116]	; (8005b58 <vTaskSwitchContext+0xc0>)
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	4413      	add	r3, r2
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	440b      	add	r3, r1
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d0e2      	beq.n	8005abc <vTaskSwitchContext+0x24>
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	4613      	mov	r3, r2
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	4413      	add	r3, r2
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	4a15      	ldr	r2, [pc, #84]	; (8005b58 <vTaskSwitchContext+0xc0>)
 8005b02:	4413      	add	r3, r2
 8005b04:	60bb      	str	r3, [r7, #8]
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	685a      	ldr	r2, [r3, #4]
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	605a      	str	r2, [r3, #4]
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	685a      	ldr	r2, [r3, #4]
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	3308      	adds	r3, #8
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d104      	bne.n	8005b26 <vTaskSwitchContext+0x8e>
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	685a      	ldr	r2, [r3, #4]
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	605a      	str	r2, [r3, #4]
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	4a0b      	ldr	r2, [pc, #44]	; (8005b5c <vTaskSwitchContext+0xc4>)
 8005b2e:	6013      	str	r3, [r2, #0]
 8005b30:	4a08      	ldr	r2, [pc, #32]	; (8005b54 <vTaskSwitchContext+0xbc>)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005b36:	4b09      	ldr	r3, [pc, #36]	; (8005b5c <vTaskSwitchContext+0xc4>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	3354      	adds	r3, #84	; 0x54
 8005b3c:	4a08      	ldr	r2, [pc, #32]	; (8005b60 <vTaskSwitchContext+0xc8>)
 8005b3e:	6013      	str	r3, [r2, #0]
}
 8005b40:	bf00      	nop
 8005b42:	3714      	adds	r7, #20
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr
 8005b4c:	20000f40 	.word	0x20000f40
 8005b50:	20000f2c 	.word	0x20000f2c
 8005b54:	20000f20 	.word	0x20000f20
 8005b58:	20000a48 	.word	0x20000a48
 8005b5c:	20000a44 	.word	0x20000a44
 8005b60:	20000010 	.word	0x20000010

08005b64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d10c      	bne.n	8005b8e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8005b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b78:	b672      	cpsid	i
 8005b7a:	f383 8811 	msr	BASEPRI, r3
 8005b7e:	f3bf 8f6f 	isb	sy
 8005b82:	f3bf 8f4f 	dsb	sy
 8005b86:	b662      	cpsie	i
 8005b88:	60fb      	str	r3, [r7, #12]
}
 8005b8a:	bf00      	nop
 8005b8c:	e7fe      	b.n	8005b8c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b8e:	4b07      	ldr	r3, [pc, #28]	; (8005bac <vTaskPlaceOnEventList+0x48>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	3318      	adds	r3, #24
 8005b94:	4619      	mov	r1, r3
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f7fe fd21 	bl	80045de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005b9c:	2101      	movs	r1, #1
 8005b9e:	6838      	ldr	r0, [r7, #0]
 8005ba0:	f000 fa8e 	bl	80060c0 <prvAddCurrentTaskToDelayedList>
}
 8005ba4:	bf00      	nop
 8005ba6:	3710      	adds	r7, #16
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	20000a44 	.word	0x20000a44

08005bb0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b086      	sub	sp, #24
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d10c      	bne.n	8005bdc <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8005bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc6:	b672      	cpsid	i
 8005bc8:	f383 8811 	msr	BASEPRI, r3
 8005bcc:	f3bf 8f6f 	isb	sy
 8005bd0:	f3bf 8f4f 	dsb	sy
 8005bd4:	b662      	cpsie	i
 8005bd6:	617b      	str	r3, [r7, #20]
}
 8005bd8:	bf00      	nop
 8005bda:	e7fe      	b.n	8005bda <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005bdc:	4b0a      	ldr	r3, [pc, #40]	; (8005c08 <vTaskPlaceOnEventListRestricted+0x58>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	3318      	adds	r3, #24
 8005be2:	4619      	mov	r1, r3
 8005be4:	68f8      	ldr	r0, [r7, #12]
 8005be6:	f7fe fcd6 	bl	8004596 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d002      	beq.n	8005bf6 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8005bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8005bf4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005bf6:	6879      	ldr	r1, [r7, #4]
 8005bf8:	68b8      	ldr	r0, [r7, #8]
 8005bfa:	f000 fa61 	bl	80060c0 <prvAddCurrentTaskToDelayedList>
	}
 8005bfe:	bf00      	nop
 8005c00:	3718      	adds	r7, #24
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	20000a44 	.word	0x20000a44

08005c0c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d10c      	bne.n	8005c3c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8005c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c26:	b672      	cpsid	i
 8005c28:	f383 8811 	msr	BASEPRI, r3
 8005c2c:	f3bf 8f6f 	isb	sy
 8005c30:	f3bf 8f4f 	dsb	sy
 8005c34:	b662      	cpsie	i
 8005c36:	60fb      	str	r3, [r7, #12]
}
 8005c38:	bf00      	nop
 8005c3a:	e7fe      	b.n	8005c3a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	3318      	adds	r3, #24
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7fe fd05 	bl	8004650 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c46:	4b1e      	ldr	r3, [pc, #120]	; (8005cc0 <xTaskRemoveFromEventList+0xb4>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d11d      	bne.n	8005c8a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	3304      	adds	r3, #4
 8005c52:	4618      	mov	r0, r3
 8005c54:	f7fe fcfc 	bl	8004650 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c5c:	4b19      	ldr	r3, [pc, #100]	; (8005cc4 <xTaskRemoveFromEventList+0xb8>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d903      	bls.n	8005c6c <xTaskRemoveFromEventList+0x60>
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c68:	4a16      	ldr	r2, [pc, #88]	; (8005cc4 <xTaskRemoveFromEventList+0xb8>)
 8005c6a:	6013      	str	r3, [r2, #0]
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c70:	4613      	mov	r3, r2
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	4413      	add	r3, r2
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	4a13      	ldr	r2, [pc, #76]	; (8005cc8 <xTaskRemoveFromEventList+0xbc>)
 8005c7a:	441a      	add	r2, r3
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	3304      	adds	r3, #4
 8005c80:	4619      	mov	r1, r3
 8005c82:	4610      	mov	r0, r2
 8005c84:	f7fe fc87 	bl	8004596 <vListInsertEnd>
 8005c88:	e005      	b.n	8005c96 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	3318      	adds	r3, #24
 8005c8e:	4619      	mov	r1, r3
 8005c90:	480e      	ldr	r0, [pc, #56]	; (8005ccc <xTaskRemoveFromEventList+0xc0>)
 8005c92:	f7fe fc80 	bl	8004596 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c9a:	4b0d      	ldr	r3, [pc, #52]	; (8005cd0 <xTaskRemoveFromEventList+0xc4>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d905      	bls.n	8005cb0 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005ca8:	4b0a      	ldr	r3, [pc, #40]	; (8005cd4 <xTaskRemoveFromEventList+0xc8>)
 8005caa:	2201      	movs	r2, #1
 8005cac:	601a      	str	r2, [r3, #0]
 8005cae:	e001      	b.n	8005cb4 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005cb4:	697b      	ldr	r3, [r7, #20]
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3718      	adds	r7, #24
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	20000f40 	.word	0x20000f40
 8005cc4:	20000f20 	.word	0x20000f20
 8005cc8:	20000a48 	.word	0x20000a48
 8005ccc:	20000ed8 	.word	0x20000ed8
 8005cd0:	20000a44 	.word	0x20000a44
 8005cd4:	20000f2c 	.word	0x20000f2c

08005cd8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005ce0:	4b06      	ldr	r3, [pc, #24]	; (8005cfc <vTaskInternalSetTimeOutState+0x24>)
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005ce8:	4b05      	ldr	r3, [pc, #20]	; (8005d00 <vTaskInternalSetTimeOutState+0x28>)
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	605a      	str	r2, [r3, #4]
}
 8005cf0:	bf00      	nop
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr
 8005cfc:	20000f30 	.word	0x20000f30
 8005d00:	20000f1c 	.word	0x20000f1c

08005d04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b088      	sub	sp, #32
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10c      	bne.n	8005d2e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8005d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d18:	b672      	cpsid	i
 8005d1a:	f383 8811 	msr	BASEPRI, r3
 8005d1e:	f3bf 8f6f 	isb	sy
 8005d22:	f3bf 8f4f 	dsb	sy
 8005d26:	b662      	cpsie	i
 8005d28:	613b      	str	r3, [r7, #16]
}
 8005d2a:	bf00      	nop
 8005d2c:	e7fe      	b.n	8005d2c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d10c      	bne.n	8005d4e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8005d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d38:	b672      	cpsid	i
 8005d3a:	f383 8811 	msr	BASEPRI, r3
 8005d3e:	f3bf 8f6f 	isb	sy
 8005d42:	f3bf 8f4f 	dsb	sy
 8005d46:	b662      	cpsie	i
 8005d48:	60fb      	str	r3, [r7, #12]
}
 8005d4a:	bf00      	nop
 8005d4c:	e7fe      	b.n	8005d4c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8005d4e:	f000 fe75 	bl	8006a3c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005d52:	4b1d      	ldr	r3, [pc, #116]	; (8005dc8 <xTaskCheckForTimeOut+0xc4>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	69ba      	ldr	r2, [r7, #24]
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d6a:	d102      	bne.n	8005d72 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	61fb      	str	r3, [r7, #28]
 8005d70:	e023      	b.n	8005dba <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	4b15      	ldr	r3, [pc, #84]	; (8005dcc <xTaskCheckForTimeOut+0xc8>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d007      	beq.n	8005d8e <xTaskCheckForTimeOut+0x8a>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	69ba      	ldr	r2, [r7, #24]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d302      	bcc.n	8005d8e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	61fb      	str	r3, [r7, #28]
 8005d8c:	e015      	b.n	8005dba <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d20b      	bcs.n	8005db0 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	1ad2      	subs	r2, r2, r3
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f7ff ff97 	bl	8005cd8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005daa:	2300      	movs	r3, #0
 8005dac:	61fb      	str	r3, [r7, #28]
 8005dae:	e004      	b.n	8005dba <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	2200      	movs	r2, #0
 8005db4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005db6:	2301      	movs	r3, #1
 8005db8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005dba:	f000 fe73 	bl	8006aa4 <vPortExitCritical>

	return xReturn;
 8005dbe:	69fb      	ldr	r3, [r7, #28]
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3720      	adds	r7, #32
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	20000f1c 	.word	0x20000f1c
 8005dcc:	20000f30 	.word	0x20000f30

08005dd0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005dd4:	4b03      	ldr	r3, [pc, #12]	; (8005de4 <vTaskMissedYield+0x14>)
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	601a      	str	r2, [r3, #0]
}
 8005dda:	bf00      	nop
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr
 8005de4:	20000f2c 	.word	0x20000f2c

08005de8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005df0:	f000 f852 	bl	8005e98 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005df4:	4b06      	ldr	r3, [pc, #24]	; (8005e10 <prvIdleTask+0x28>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d9f9      	bls.n	8005df0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005dfc:	4b05      	ldr	r3, [pc, #20]	; (8005e14 <prvIdleTask+0x2c>)
 8005dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e02:	601a      	str	r2, [r3, #0]
 8005e04:	f3bf 8f4f 	dsb	sy
 8005e08:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005e0c:	e7f0      	b.n	8005df0 <prvIdleTask+0x8>
 8005e0e:	bf00      	nop
 8005e10:	20000a48 	.word	0x20000a48
 8005e14:	e000ed04 	.word	0xe000ed04

08005e18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e1e:	2300      	movs	r3, #0
 8005e20:	607b      	str	r3, [r7, #4]
 8005e22:	e00c      	b.n	8005e3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	4613      	mov	r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	4413      	add	r3, r2
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	4a12      	ldr	r2, [pc, #72]	; (8005e78 <prvInitialiseTaskLists+0x60>)
 8005e30:	4413      	add	r3, r2
 8005e32:	4618      	mov	r0, r3
 8005e34:	f7fe fb82 	bl	800453c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	607b      	str	r3, [r7, #4]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2b37      	cmp	r3, #55	; 0x37
 8005e42:	d9ef      	bls.n	8005e24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005e44:	480d      	ldr	r0, [pc, #52]	; (8005e7c <prvInitialiseTaskLists+0x64>)
 8005e46:	f7fe fb79 	bl	800453c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005e4a:	480d      	ldr	r0, [pc, #52]	; (8005e80 <prvInitialiseTaskLists+0x68>)
 8005e4c:	f7fe fb76 	bl	800453c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005e50:	480c      	ldr	r0, [pc, #48]	; (8005e84 <prvInitialiseTaskLists+0x6c>)
 8005e52:	f7fe fb73 	bl	800453c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005e56:	480c      	ldr	r0, [pc, #48]	; (8005e88 <prvInitialiseTaskLists+0x70>)
 8005e58:	f7fe fb70 	bl	800453c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005e5c:	480b      	ldr	r0, [pc, #44]	; (8005e8c <prvInitialiseTaskLists+0x74>)
 8005e5e:	f7fe fb6d 	bl	800453c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005e62:	4b0b      	ldr	r3, [pc, #44]	; (8005e90 <prvInitialiseTaskLists+0x78>)
 8005e64:	4a05      	ldr	r2, [pc, #20]	; (8005e7c <prvInitialiseTaskLists+0x64>)
 8005e66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005e68:	4b0a      	ldr	r3, [pc, #40]	; (8005e94 <prvInitialiseTaskLists+0x7c>)
 8005e6a:	4a05      	ldr	r2, [pc, #20]	; (8005e80 <prvInitialiseTaskLists+0x68>)
 8005e6c:	601a      	str	r2, [r3, #0]
}
 8005e6e:	bf00      	nop
 8005e70:	3708      	adds	r7, #8
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	20000a48 	.word	0x20000a48
 8005e7c:	20000ea8 	.word	0x20000ea8
 8005e80:	20000ebc 	.word	0x20000ebc
 8005e84:	20000ed8 	.word	0x20000ed8
 8005e88:	20000eec 	.word	0x20000eec
 8005e8c:	20000f04 	.word	0x20000f04
 8005e90:	20000ed0 	.word	0x20000ed0
 8005e94:	20000ed4 	.word	0x20000ed4

08005e98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e9e:	e019      	b.n	8005ed4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005ea0:	f000 fdcc 	bl	8006a3c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ea4:	4b10      	ldr	r3, [pc, #64]	; (8005ee8 <prvCheckTasksWaitingTermination+0x50>)
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	3304      	adds	r3, #4
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f7fe fbcd 	bl	8004650 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005eb6:	4b0d      	ldr	r3, [pc, #52]	; (8005eec <prvCheckTasksWaitingTermination+0x54>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	4a0b      	ldr	r2, [pc, #44]	; (8005eec <prvCheckTasksWaitingTermination+0x54>)
 8005ebe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005ec0:	4b0b      	ldr	r3, [pc, #44]	; (8005ef0 <prvCheckTasksWaitingTermination+0x58>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	3b01      	subs	r3, #1
 8005ec6:	4a0a      	ldr	r2, [pc, #40]	; (8005ef0 <prvCheckTasksWaitingTermination+0x58>)
 8005ec8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005eca:	f000 fdeb 	bl	8006aa4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 f810 	bl	8005ef4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ed4:	4b06      	ldr	r3, [pc, #24]	; (8005ef0 <prvCheckTasksWaitingTermination+0x58>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d1e1      	bne.n	8005ea0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005edc:	bf00      	nop
 8005ede:	bf00      	nop
 8005ee0:	3708      	adds	r7, #8
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	20000eec 	.word	0x20000eec
 8005eec:	20000f18 	.word	0x20000f18
 8005ef0:	20000f00 	.word	0x20000f00

08005ef4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	3354      	adds	r3, #84	; 0x54
 8005f00:	4618      	mov	r0, r3
 8005f02:	f001 f8f5 	bl	80070f0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d108      	bne.n	8005f22 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f14:	4618      	mov	r0, r3
 8005f16:	f000 ff87 	bl	8006e28 <vPortFree>
				vPortFree( pxTCB );
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 ff84 	bl	8006e28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005f20:	e01a      	b.n	8005f58 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d103      	bne.n	8005f34 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 ff7b 	bl	8006e28 <vPortFree>
	}
 8005f32:	e011      	b.n	8005f58 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	d00c      	beq.n	8005f58 <prvDeleteTCB+0x64>
	__asm volatile
 8005f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f42:	b672      	cpsid	i
 8005f44:	f383 8811 	msr	BASEPRI, r3
 8005f48:	f3bf 8f6f 	isb	sy
 8005f4c:	f3bf 8f4f 	dsb	sy
 8005f50:	b662      	cpsie	i
 8005f52:	60fb      	str	r3, [r7, #12]
}
 8005f54:	bf00      	nop
 8005f56:	e7fe      	b.n	8005f56 <prvDeleteTCB+0x62>
	}
 8005f58:	bf00      	nop
 8005f5a:	3710      	adds	r7, #16
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f66:	4b0c      	ldr	r3, [pc, #48]	; (8005f98 <prvResetNextTaskUnblockTime+0x38>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d104      	bne.n	8005f7a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005f70:	4b0a      	ldr	r3, [pc, #40]	; (8005f9c <prvResetNextTaskUnblockTime+0x3c>)
 8005f72:	f04f 32ff 	mov.w	r2, #4294967295
 8005f76:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005f78:	e008      	b.n	8005f8c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f7a:	4b07      	ldr	r3, [pc, #28]	; (8005f98 <prvResetNextTaskUnblockTime+0x38>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	4a04      	ldr	r2, [pc, #16]	; (8005f9c <prvResetNextTaskUnblockTime+0x3c>)
 8005f8a:	6013      	str	r3, [r2, #0]
}
 8005f8c:	bf00      	nop
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr
 8005f98:	20000ed0 	.word	0x20000ed0
 8005f9c:	20000f38 	.word	0x20000f38

08005fa0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005fa6:	4b0b      	ldr	r3, [pc, #44]	; (8005fd4 <xTaskGetSchedulerState+0x34>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d102      	bne.n	8005fb4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	607b      	str	r3, [r7, #4]
 8005fb2:	e008      	b.n	8005fc6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fb4:	4b08      	ldr	r3, [pc, #32]	; (8005fd8 <xTaskGetSchedulerState+0x38>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d102      	bne.n	8005fc2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005fbc:	2302      	movs	r3, #2
 8005fbe:	607b      	str	r3, [r7, #4]
 8005fc0:	e001      	b.n	8005fc6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005fc6:	687b      	ldr	r3, [r7, #4]
	}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr
 8005fd4:	20000f24 	.word	0x20000f24
 8005fd8:	20000f40 	.word	0x20000f40

08005fdc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b086      	sub	sp, #24
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d05a      	beq.n	80060a8 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005ff2:	4b30      	ldr	r3, [pc, #192]	; (80060b4 <xTaskPriorityDisinherit+0xd8>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	693a      	ldr	r2, [r7, #16]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d00c      	beq.n	8006016 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8005ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006000:	b672      	cpsid	i
 8006002:	f383 8811 	msr	BASEPRI, r3
 8006006:	f3bf 8f6f 	isb	sy
 800600a:	f3bf 8f4f 	dsb	sy
 800600e:	b662      	cpsie	i
 8006010:	60fb      	str	r3, [r7, #12]
}
 8006012:	bf00      	nop
 8006014:	e7fe      	b.n	8006014 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800601a:	2b00      	cmp	r3, #0
 800601c:	d10c      	bne.n	8006038 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800601e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006022:	b672      	cpsid	i
 8006024:	f383 8811 	msr	BASEPRI, r3
 8006028:	f3bf 8f6f 	isb	sy
 800602c:	f3bf 8f4f 	dsb	sy
 8006030:	b662      	cpsie	i
 8006032:	60bb      	str	r3, [r7, #8]
}
 8006034:	bf00      	nop
 8006036:	e7fe      	b.n	8006036 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800603c:	1e5a      	subs	r2, r3, #1
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800604a:	429a      	cmp	r2, r3
 800604c:	d02c      	beq.n	80060a8 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006052:	2b00      	cmp	r3, #0
 8006054:	d128      	bne.n	80060a8 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	3304      	adds	r3, #4
 800605a:	4618      	mov	r0, r3
 800605c:	f7fe faf8 	bl	8004650 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006078:	4b0f      	ldr	r3, [pc, #60]	; (80060b8 <xTaskPriorityDisinherit+0xdc>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	429a      	cmp	r2, r3
 800607e:	d903      	bls.n	8006088 <xTaskPriorityDisinherit+0xac>
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006084:	4a0c      	ldr	r2, [pc, #48]	; (80060b8 <xTaskPriorityDisinherit+0xdc>)
 8006086:	6013      	str	r3, [r2, #0]
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800608c:	4613      	mov	r3, r2
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	4413      	add	r3, r2
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	4a09      	ldr	r2, [pc, #36]	; (80060bc <xTaskPriorityDisinherit+0xe0>)
 8006096:	441a      	add	r2, r3
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	3304      	adds	r3, #4
 800609c:	4619      	mov	r1, r3
 800609e:	4610      	mov	r0, r2
 80060a0:	f7fe fa79 	bl	8004596 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80060a4:	2301      	movs	r3, #1
 80060a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80060a8:	697b      	ldr	r3, [r7, #20]
	}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3718      	adds	r7, #24
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	20000a44 	.word	0x20000a44
 80060b8:	20000f20 	.word	0x20000f20
 80060bc:	20000a48 	.word	0x20000a48

080060c0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80060ca:	4b21      	ldr	r3, [pc, #132]	; (8006150 <prvAddCurrentTaskToDelayedList+0x90>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060d0:	4b20      	ldr	r3, [pc, #128]	; (8006154 <prvAddCurrentTaskToDelayedList+0x94>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	3304      	adds	r3, #4
 80060d6:	4618      	mov	r0, r3
 80060d8:	f7fe faba 	bl	8004650 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e2:	d10a      	bne.n	80060fa <prvAddCurrentTaskToDelayedList+0x3a>
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d007      	beq.n	80060fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060ea:	4b1a      	ldr	r3, [pc, #104]	; (8006154 <prvAddCurrentTaskToDelayedList+0x94>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	3304      	adds	r3, #4
 80060f0:	4619      	mov	r1, r3
 80060f2:	4819      	ldr	r0, [pc, #100]	; (8006158 <prvAddCurrentTaskToDelayedList+0x98>)
 80060f4:	f7fe fa4f 	bl	8004596 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80060f8:	e026      	b.n	8006148 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4413      	add	r3, r2
 8006100:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006102:	4b14      	ldr	r3, [pc, #80]	; (8006154 <prvAddCurrentTaskToDelayedList+0x94>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68ba      	ldr	r2, [r7, #8]
 8006108:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800610a:	68ba      	ldr	r2, [r7, #8]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	429a      	cmp	r2, r3
 8006110:	d209      	bcs.n	8006126 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006112:	4b12      	ldr	r3, [pc, #72]	; (800615c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	4b0f      	ldr	r3, [pc, #60]	; (8006154 <prvAddCurrentTaskToDelayedList+0x94>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	3304      	adds	r3, #4
 800611c:	4619      	mov	r1, r3
 800611e:	4610      	mov	r0, r2
 8006120:	f7fe fa5d 	bl	80045de <vListInsert>
}
 8006124:	e010      	b.n	8006148 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006126:	4b0e      	ldr	r3, [pc, #56]	; (8006160 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	4b0a      	ldr	r3, [pc, #40]	; (8006154 <prvAddCurrentTaskToDelayedList+0x94>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	3304      	adds	r3, #4
 8006130:	4619      	mov	r1, r3
 8006132:	4610      	mov	r0, r2
 8006134:	f7fe fa53 	bl	80045de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006138:	4b0a      	ldr	r3, [pc, #40]	; (8006164 <prvAddCurrentTaskToDelayedList+0xa4>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	68ba      	ldr	r2, [r7, #8]
 800613e:	429a      	cmp	r2, r3
 8006140:	d202      	bcs.n	8006148 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006142:	4a08      	ldr	r2, [pc, #32]	; (8006164 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	6013      	str	r3, [r2, #0]
}
 8006148:	bf00      	nop
 800614a:	3710      	adds	r7, #16
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}
 8006150:	20000f1c 	.word	0x20000f1c
 8006154:	20000a44 	.word	0x20000a44
 8006158:	20000f04 	.word	0x20000f04
 800615c:	20000ed4 	.word	0x20000ed4
 8006160:	20000ed0 	.word	0x20000ed0
 8006164:	20000f38 	.word	0x20000f38

08006168 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b08a      	sub	sp, #40	; 0x28
 800616c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800616e:	2300      	movs	r3, #0
 8006170:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006172:	f000 fb15 	bl	80067a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006176:	4b1d      	ldr	r3, [pc, #116]	; (80061ec <xTimerCreateTimerTask+0x84>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d021      	beq.n	80061c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800617e:	2300      	movs	r3, #0
 8006180:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006182:	2300      	movs	r3, #0
 8006184:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006186:	1d3a      	adds	r2, r7, #4
 8006188:	f107 0108 	add.w	r1, r7, #8
 800618c:	f107 030c 	add.w	r3, r7, #12
 8006190:	4618      	mov	r0, r3
 8006192:	f7fe f9b9 	bl	8004508 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006196:	6879      	ldr	r1, [r7, #4]
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	9202      	str	r2, [sp, #8]
 800619e:	9301      	str	r3, [sp, #4]
 80061a0:	2302      	movs	r3, #2
 80061a2:	9300      	str	r3, [sp, #0]
 80061a4:	2300      	movs	r3, #0
 80061a6:	460a      	mov	r2, r1
 80061a8:	4911      	ldr	r1, [pc, #68]	; (80061f0 <xTimerCreateTimerTask+0x88>)
 80061aa:	4812      	ldr	r0, [pc, #72]	; (80061f4 <xTimerCreateTimerTask+0x8c>)
 80061ac:	f7fe ff84 	bl	80050b8 <xTaskCreateStatic>
 80061b0:	4603      	mov	r3, r0
 80061b2:	4a11      	ldr	r2, [pc, #68]	; (80061f8 <xTimerCreateTimerTask+0x90>)
 80061b4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80061b6:	4b10      	ldr	r3, [pc, #64]	; (80061f8 <xTimerCreateTimerTask+0x90>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d001      	beq.n	80061c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80061be:	2301      	movs	r3, #1
 80061c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d10c      	bne.n	80061e2 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80061c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061cc:	b672      	cpsid	i
 80061ce:	f383 8811 	msr	BASEPRI, r3
 80061d2:	f3bf 8f6f 	isb	sy
 80061d6:	f3bf 8f4f 	dsb	sy
 80061da:	b662      	cpsie	i
 80061dc:	613b      	str	r3, [r7, #16]
}
 80061de:	bf00      	nop
 80061e0:	e7fe      	b.n	80061e0 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80061e2:	697b      	ldr	r3, [r7, #20]
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3718      	adds	r7, #24
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	20000f74 	.word	0x20000f74
 80061f0:	08007298 	.word	0x08007298
 80061f4:	08006339 	.word	0x08006339
 80061f8:	20000f78 	.word	0x20000f78

080061fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b08a      	sub	sp, #40	; 0x28
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	607a      	str	r2, [r7, #4]
 8006208:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800620a:	2300      	movs	r3, #0
 800620c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d10c      	bne.n	800622e <xTimerGenericCommand+0x32>
	__asm volatile
 8006214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006218:	b672      	cpsid	i
 800621a:	f383 8811 	msr	BASEPRI, r3
 800621e:	f3bf 8f6f 	isb	sy
 8006222:	f3bf 8f4f 	dsb	sy
 8006226:	b662      	cpsie	i
 8006228:	623b      	str	r3, [r7, #32]
}
 800622a:	bf00      	nop
 800622c:	e7fe      	b.n	800622c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800622e:	4b1a      	ldr	r3, [pc, #104]	; (8006298 <xTimerGenericCommand+0x9c>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d02a      	beq.n	800628c <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	2b05      	cmp	r3, #5
 8006246:	dc18      	bgt.n	800627a <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006248:	f7ff feaa 	bl	8005fa0 <xTaskGetSchedulerState>
 800624c:	4603      	mov	r3, r0
 800624e:	2b02      	cmp	r3, #2
 8006250:	d109      	bne.n	8006266 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006252:	4b11      	ldr	r3, [pc, #68]	; (8006298 <xTimerGenericCommand+0x9c>)
 8006254:	6818      	ldr	r0, [r3, #0]
 8006256:	f107 0110 	add.w	r1, r7, #16
 800625a:	2300      	movs	r3, #0
 800625c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800625e:	f7fe fb31 	bl	80048c4 <xQueueGenericSend>
 8006262:	6278      	str	r0, [r7, #36]	; 0x24
 8006264:	e012      	b.n	800628c <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006266:	4b0c      	ldr	r3, [pc, #48]	; (8006298 <xTimerGenericCommand+0x9c>)
 8006268:	6818      	ldr	r0, [r3, #0]
 800626a:	f107 0110 	add.w	r1, r7, #16
 800626e:	2300      	movs	r3, #0
 8006270:	2200      	movs	r2, #0
 8006272:	f7fe fb27 	bl	80048c4 <xQueueGenericSend>
 8006276:	6278      	str	r0, [r7, #36]	; 0x24
 8006278:	e008      	b.n	800628c <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800627a:	4b07      	ldr	r3, [pc, #28]	; (8006298 <xTimerGenericCommand+0x9c>)
 800627c:	6818      	ldr	r0, [r3, #0]
 800627e:	f107 0110 	add.w	r1, r7, #16
 8006282:	2300      	movs	r3, #0
 8006284:	683a      	ldr	r2, [r7, #0]
 8006286:	f7fe fc23 	bl	8004ad0 <xQueueGenericSendFromISR>
 800628a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800628c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800628e:	4618      	mov	r0, r3
 8006290:	3728      	adds	r7, #40	; 0x28
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	20000f74 	.word	0x20000f74

0800629c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b088      	sub	sp, #32
 80062a0:	af02      	add	r7, sp, #8
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062a6:	4b23      	ldr	r3, [pc, #140]	; (8006334 <prvProcessExpiredTimer+0x98>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	3304      	adds	r3, #4
 80062b4:	4618      	mov	r0, r3
 80062b6:	f7fe f9cb 	bl	8004650 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062c0:	f003 0304 	and.w	r3, r3, #4
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d024      	beq.n	8006312 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	699a      	ldr	r2, [r3, #24]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	18d1      	adds	r1, r2, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	683a      	ldr	r2, [r7, #0]
 80062d4:	6978      	ldr	r0, [r7, #20]
 80062d6:	f000 f8d3 	bl	8006480 <prvInsertTimerInActiveList>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d021      	beq.n	8006324 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80062e0:	2300      	movs	r3, #0
 80062e2:	9300      	str	r3, [sp, #0]
 80062e4:	2300      	movs	r3, #0
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	2100      	movs	r1, #0
 80062ea:	6978      	ldr	r0, [r7, #20]
 80062ec:	f7ff ff86 	bl	80061fc <xTimerGenericCommand>
 80062f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d115      	bne.n	8006324 <prvProcessExpiredTimer+0x88>
	__asm volatile
 80062f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fc:	b672      	cpsid	i
 80062fe:	f383 8811 	msr	BASEPRI, r3
 8006302:	f3bf 8f6f 	isb	sy
 8006306:	f3bf 8f4f 	dsb	sy
 800630a:	b662      	cpsie	i
 800630c:	60fb      	str	r3, [r7, #12]
}
 800630e:	bf00      	nop
 8006310:	e7fe      	b.n	8006310 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006318:	f023 0301 	bic.w	r3, r3, #1
 800631c:	b2da      	uxtb	r2, r3
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	6a1b      	ldr	r3, [r3, #32]
 8006328:	6978      	ldr	r0, [r7, #20]
 800632a:	4798      	blx	r3
}
 800632c:	bf00      	nop
 800632e:	3718      	adds	r7, #24
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	20000f6c 	.word	0x20000f6c

08006338 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006340:	f107 0308 	add.w	r3, r7, #8
 8006344:	4618      	mov	r0, r3
 8006346:	f000 f857 	bl	80063f8 <prvGetNextExpireTime>
 800634a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	4619      	mov	r1, r3
 8006350:	68f8      	ldr	r0, [r7, #12]
 8006352:	f000 f803 	bl	800635c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006356:	f000 f8d5 	bl	8006504 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800635a:	e7f1      	b.n	8006340 <prvTimerTask+0x8>

0800635c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006366:	f7ff fa1d 	bl	80057a4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800636a:	f107 0308 	add.w	r3, r7, #8
 800636e:	4618      	mov	r0, r3
 8006370:	f000 f866 	bl	8006440 <prvSampleTimeNow>
 8006374:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d130      	bne.n	80063de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d10a      	bne.n	8006398 <prvProcessTimerOrBlockTask+0x3c>
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	429a      	cmp	r2, r3
 8006388:	d806      	bhi.n	8006398 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800638a:	f7ff fa19 	bl	80057c0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800638e:	68f9      	ldr	r1, [r7, #12]
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f7ff ff83 	bl	800629c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006396:	e024      	b.n	80063e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d008      	beq.n	80063b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800639e:	4b13      	ldr	r3, [pc, #76]	; (80063ec <prvProcessTimerOrBlockTask+0x90>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d101      	bne.n	80063ac <prvProcessTimerOrBlockTask+0x50>
 80063a8:	2301      	movs	r3, #1
 80063aa:	e000      	b.n	80063ae <prvProcessTimerOrBlockTask+0x52>
 80063ac:	2300      	movs	r3, #0
 80063ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80063b0:	4b0f      	ldr	r3, [pc, #60]	; (80063f0 <prvProcessTimerOrBlockTask+0x94>)
 80063b2:	6818      	ldr	r0, [r3, #0]
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	683a      	ldr	r2, [r7, #0]
 80063bc:	4619      	mov	r1, r3
 80063be:	f7fe fe47 	bl	8005050 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80063c2:	f7ff f9fd 	bl	80057c0 <xTaskResumeAll>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d10a      	bne.n	80063e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80063cc:	4b09      	ldr	r3, [pc, #36]	; (80063f4 <prvProcessTimerOrBlockTask+0x98>)
 80063ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063d2:	601a      	str	r2, [r3, #0]
 80063d4:	f3bf 8f4f 	dsb	sy
 80063d8:	f3bf 8f6f 	isb	sy
}
 80063dc:	e001      	b.n	80063e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80063de:	f7ff f9ef 	bl	80057c0 <xTaskResumeAll>
}
 80063e2:	bf00      	nop
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	20000f70 	.word	0x20000f70
 80063f0:	20000f74 	.word	0x20000f74
 80063f4:	e000ed04 	.word	0xe000ed04

080063f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006400:	4b0e      	ldr	r3, [pc, #56]	; (800643c <prvGetNextExpireTime+0x44>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d101      	bne.n	800640e <prvGetNextExpireTime+0x16>
 800640a:	2201      	movs	r2, #1
 800640c:	e000      	b.n	8006410 <prvGetNextExpireTime+0x18>
 800640e:	2200      	movs	r2, #0
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d105      	bne.n	8006428 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800641c:	4b07      	ldr	r3, [pc, #28]	; (800643c <prvGetNextExpireTime+0x44>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	60fb      	str	r3, [r7, #12]
 8006426:	e001      	b.n	800642c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006428:	2300      	movs	r3, #0
 800642a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800642c:	68fb      	ldr	r3, [r7, #12]
}
 800642e:	4618      	mov	r0, r3
 8006430:	3714      	adds	r7, #20
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	20000f6c 	.word	0x20000f6c

08006440 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006448:	f7ff fa5a 	bl	8005900 <xTaskGetTickCount>
 800644c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800644e:	4b0b      	ldr	r3, [pc, #44]	; (800647c <prvSampleTimeNow+0x3c>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	429a      	cmp	r2, r3
 8006456:	d205      	bcs.n	8006464 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006458:	f000 f93c 	bl	80066d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	601a      	str	r2, [r3, #0]
 8006462:	e002      	b.n	800646a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800646a:	4a04      	ldr	r2, [pc, #16]	; (800647c <prvSampleTimeNow+0x3c>)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006470:	68fb      	ldr	r3, [r7, #12]
}
 8006472:	4618      	mov	r0, r3
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	20000f7c 	.word	0x20000f7c

08006480 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b086      	sub	sp, #24
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	607a      	str	r2, [r7, #4]
 800648c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800648e:	2300      	movs	r3, #0
 8006490:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	68ba      	ldr	r2, [r7, #8]
 8006496:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800649e:	68ba      	ldr	r2, [r7, #8]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d812      	bhi.n	80064cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	1ad2      	subs	r2, r2, r3
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	699b      	ldr	r3, [r3, #24]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d302      	bcc.n	80064ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80064b4:	2301      	movs	r3, #1
 80064b6:	617b      	str	r3, [r7, #20]
 80064b8:	e01b      	b.n	80064f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80064ba:	4b10      	ldr	r3, [pc, #64]	; (80064fc <prvInsertTimerInActiveList+0x7c>)
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	3304      	adds	r3, #4
 80064c2:	4619      	mov	r1, r3
 80064c4:	4610      	mov	r0, r2
 80064c6:	f7fe f88a 	bl	80045de <vListInsert>
 80064ca:	e012      	b.n	80064f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d206      	bcs.n	80064e2 <prvInsertTimerInActiveList+0x62>
 80064d4:	68ba      	ldr	r2, [r7, #8]
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	429a      	cmp	r2, r3
 80064da:	d302      	bcc.n	80064e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80064dc:	2301      	movs	r3, #1
 80064de:	617b      	str	r3, [r7, #20]
 80064e0:	e007      	b.n	80064f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80064e2:	4b07      	ldr	r3, [pc, #28]	; (8006500 <prvInsertTimerInActiveList+0x80>)
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	3304      	adds	r3, #4
 80064ea:	4619      	mov	r1, r3
 80064ec:	4610      	mov	r0, r2
 80064ee:	f7fe f876 	bl	80045de <vListInsert>
		}
	}

	return xProcessTimerNow;
 80064f2:	697b      	ldr	r3, [r7, #20]
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3718      	adds	r7, #24
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	20000f70 	.word	0x20000f70
 8006500:	20000f6c 	.word	0x20000f6c

08006504 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b08e      	sub	sp, #56	; 0x38
 8006508:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800650a:	e0d0      	b.n	80066ae <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	da1a      	bge.n	8006548 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006512:	1d3b      	adds	r3, r7, #4
 8006514:	3304      	adds	r3, #4
 8006516:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800651a:	2b00      	cmp	r3, #0
 800651c:	d10c      	bne.n	8006538 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800651e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006522:	b672      	cpsid	i
 8006524:	f383 8811 	msr	BASEPRI, r3
 8006528:	f3bf 8f6f 	isb	sy
 800652c:	f3bf 8f4f 	dsb	sy
 8006530:	b662      	cpsie	i
 8006532:	61fb      	str	r3, [r7, #28]
}
 8006534:	bf00      	nop
 8006536:	e7fe      	b.n	8006536 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800653e:	6850      	ldr	r0, [r2, #4]
 8006540:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006542:	6892      	ldr	r2, [r2, #8]
 8006544:	4611      	mov	r1, r2
 8006546:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2b00      	cmp	r3, #0
 800654c:	f2c0 80ae 	blt.w	80066ac <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006556:	695b      	ldr	r3, [r3, #20]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d004      	beq.n	8006566 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800655c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655e:	3304      	adds	r3, #4
 8006560:	4618      	mov	r0, r3
 8006562:	f7fe f875 	bl	8004650 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006566:	463b      	mov	r3, r7
 8006568:	4618      	mov	r0, r3
 800656a:	f7ff ff69 	bl	8006440 <prvSampleTimeNow>
 800656e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2b09      	cmp	r3, #9
 8006574:	f200 809b 	bhi.w	80066ae <prvProcessReceivedCommands+0x1aa>
 8006578:	a201      	add	r2, pc, #4	; (adr r2, 8006580 <prvProcessReceivedCommands+0x7c>)
 800657a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800657e:	bf00      	nop
 8006580:	080065a9 	.word	0x080065a9
 8006584:	080065a9 	.word	0x080065a9
 8006588:	080065a9 	.word	0x080065a9
 800658c:	08006621 	.word	0x08006621
 8006590:	08006635 	.word	0x08006635
 8006594:	08006683 	.word	0x08006683
 8006598:	080065a9 	.word	0x080065a9
 800659c:	080065a9 	.word	0x080065a9
 80065a0:	08006621 	.word	0x08006621
 80065a4:	08006635 	.word	0x08006635
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80065a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065ae:	f043 0301 	orr.w	r3, r3, #1
 80065b2:	b2da      	uxtb	r2, r3
 80065b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80065ba:	68ba      	ldr	r2, [r7, #8]
 80065bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	18d1      	adds	r1, r2, r3
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065c8:	f7ff ff5a 	bl	8006480 <prvInsertTimerInActiveList>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d06d      	beq.n	80066ae <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d4:	6a1b      	ldr	r3, [r3, #32]
 80065d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80065da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065e0:	f003 0304 	and.w	r3, r3, #4
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d062      	beq.n	80066ae <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80065e8:	68ba      	ldr	r2, [r7, #8]
 80065ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ec:	699b      	ldr	r3, [r3, #24]
 80065ee:	441a      	add	r2, r3
 80065f0:	2300      	movs	r3, #0
 80065f2:	9300      	str	r3, [sp, #0]
 80065f4:	2300      	movs	r3, #0
 80065f6:	2100      	movs	r1, #0
 80065f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065fa:	f7ff fdff 	bl	80061fc <xTimerGenericCommand>
 80065fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006600:	6a3b      	ldr	r3, [r7, #32]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d153      	bne.n	80066ae <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8006606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800660a:	b672      	cpsid	i
 800660c:	f383 8811 	msr	BASEPRI, r3
 8006610:	f3bf 8f6f 	isb	sy
 8006614:	f3bf 8f4f 	dsb	sy
 8006618:	b662      	cpsie	i
 800661a:	61bb      	str	r3, [r7, #24]
}
 800661c:	bf00      	nop
 800661e:	e7fe      	b.n	800661e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006622:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006626:	f023 0301 	bic.w	r3, r3, #1
 800662a:	b2da      	uxtb	r2, r3
 800662c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006632:	e03c      	b.n	80066ae <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006636:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800663a:	f043 0301 	orr.w	r3, r3, #1
 800663e:	b2da      	uxtb	r2, r3
 8006640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006642:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006646:	68ba      	ldr	r2, [r7, #8]
 8006648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800664c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664e:	699b      	ldr	r3, [r3, #24]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d10c      	bne.n	800666e <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8006654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006658:	b672      	cpsid	i
 800665a:	f383 8811 	msr	BASEPRI, r3
 800665e:	f3bf 8f6f 	isb	sy
 8006662:	f3bf 8f4f 	dsb	sy
 8006666:	b662      	cpsie	i
 8006668:	617b      	str	r3, [r7, #20]
}
 800666a:	bf00      	nop
 800666c:	e7fe      	b.n	800666c <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800666e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006670:	699a      	ldr	r2, [r3, #24]
 8006672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006674:	18d1      	adds	r1, r2, r3
 8006676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800667a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800667c:	f7ff ff00 	bl	8006480 <prvInsertTimerInActiveList>
					break;
 8006680:	e015      	b.n	80066ae <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006684:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006688:	f003 0302 	and.w	r3, r3, #2
 800668c:	2b00      	cmp	r3, #0
 800668e:	d103      	bne.n	8006698 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8006690:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006692:	f000 fbc9 	bl	8006e28 <vPortFree>
 8006696:	e00a      	b.n	80066ae <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800669a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800669e:	f023 0301 	bic.w	r3, r3, #1
 80066a2:	b2da      	uxtb	r2, r3
 80066a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80066aa:	e000      	b.n	80066ae <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80066ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80066ae:	4b08      	ldr	r3, [pc, #32]	; (80066d0 <prvProcessReceivedCommands+0x1cc>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	1d39      	adds	r1, r7, #4
 80066b4:	2200      	movs	r2, #0
 80066b6:	4618      	mov	r0, r3
 80066b8:	f7fe faaa 	bl	8004c10 <xQueueReceive>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	f47f af24 	bne.w	800650c <prvProcessReceivedCommands+0x8>
	}
}
 80066c4:	bf00      	nop
 80066c6:	bf00      	nop
 80066c8:	3730      	adds	r7, #48	; 0x30
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	20000f74 	.word	0x20000f74

080066d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b088      	sub	sp, #32
 80066d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80066da:	e04a      	b.n	8006772 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80066dc:	4b2e      	ldr	r3, [pc, #184]	; (8006798 <prvSwitchTimerLists+0xc4>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066e6:	4b2c      	ldr	r3, [pc, #176]	; (8006798 <prvSwitchTimerLists+0xc4>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	3304      	adds	r3, #4
 80066f4:	4618      	mov	r0, r3
 80066f6:	f7fd ffab 	bl	8004650 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	68f8      	ldr	r0, [r7, #12]
 8006700:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006708:	f003 0304 	and.w	r3, r3, #4
 800670c:	2b00      	cmp	r3, #0
 800670e:	d030      	beq.n	8006772 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	693a      	ldr	r2, [r7, #16]
 8006716:	4413      	add	r3, r2
 8006718:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800671a:	68ba      	ldr	r2, [r7, #8]
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	429a      	cmp	r2, r3
 8006720:	d90e      	bls.n	8006740 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	68ba      	ldr	r2, [r7, #8]
 8006726:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	68fa      	ldr	r2, [r7, #12]
 800672c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800672e:	4b1a      	ldr	r3, [pc, #104]	; (8006798 <prvSwitchTimerLists+0xc4>)
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	3304      	adds	r3, #4
 8006736:	4619      	mov	r1, r3
 8006738:	4610      	mov	r0, r2
 800673a:	f7fd ff50 	bl	80045de <vListInsert>
 800673e:	e018      	b.n	8006772 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006740:	2300      	movs	r3, #0
 8006742:	9300      	str	r3, [sp, #0]
 8006744:	2300      	movs	r3, #0
 8006746:	693a      	ldr	r2, [r7, #16]
 8006748:	2100      	movs	r1, #0
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f7ff fd56 	bl	80061fc <xTimerGenericCommand>
 8006750:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d10c      	bne.n	8006772 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8006758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675c:	b672      	cpsid	i
 800675e:	f383 8811 	msr	BASEPRI, r3
 8006762:	f3bf 8f6f 	isb	sy
 8006766:	f3bf 8f4f 	dsb	sy
 800676a:	b662      	cpsie	i
 800676c:	603b      	str	r3, [r7, #0]
}
 800676e:	bf00      	nop
 8006770:	e7fe      	b.n	8006770 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006772:	4b09      	ldr	r3, [pc, #36]	; (8006798 <prvSwitchTimerLists+0xc4>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d1af      	bne.n	80066dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800677c:	4b06      	ldr	r3, [pc, #24]	; (8006798 <prvSwitchTimerLists+0xc4>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006782:	4b06      	ldr	r3, [pc, #24]	; (800679c <prvSwitchTimerLists+0xc8>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a04      	ldr	r2, [pc, #16]	; (8006798 <prvSwitchTimerLists+0xc4>)
 8006788:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800678a:	4a04      	ldr	r2, [pc, #16]	; (800679c <prvSwitchTimerLists+0xc8>)
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	6013      	str	r3, [r2, #0]
}
 8006790:	bf00      	nop
 8006792:	3718      	adds	r7, #24
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}
 8006798:	20000f6c 	.word	0x20000f6c
 800679c:	20000f70 	.word	0x20000f70

080067a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80067a6:	f000 f949 	bl	8006a3c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80067aa:	4b15      	ldr	r3, [pc, #84]	; (8006800 <prvCheckForValidListAndQueue+0x60>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d120      	bne.n	80067f4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80067b2:	4814      	ldr	r0, [pc, #80]	; (8006804 <prvCheckForValidListAndQueue+0x64>)
 80067b4:	f7fd fec2 	bl	800453c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80067b8:	4813      	ldr	r0, [pc, #76]	; (8006808 <prvCheckForValidListAndQueue+0x68>)
 80067ba:	f7fd febf 	bl	800453c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80067be:	4b13      	ldr	r3, [pc, #76]	; (800680c <prvCheckForValidListAndQueue+0x6c>)
 80067c0:	4a10      	ldr	r2, [pc, #64]	; (8006804 <prvCheckForValidListAndQueue+0x64>)
 80067c2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80067c4:	4b12      	ldr	r3, [pc, #72]	; (8006810 <prvCheckForValidListAndQueue+0x70>)
 80067c6:	4a10      	ldr	r2, [pc, #64]	; (8006808 <prvCheckForValidListAndQueue+0x68>)
 80067c8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80067ca:	2300      	movs	r3, #0
 80067cc:	9300      	str	r3, [sp, #0]
 80067ce:	4b11      	ldr	r3, [pc, #68]	; (8006814 <prvCheckForValidListAndQueue+0x74>)
 80067d0:	4a11      	ldr	r2, [pc, #68]	; (8006818 <prvCheckForValidListAndQueue+0x78>)
 80067d2:	2110      	movs	r1, #16
 80067d4:	200a      	movs	r0, #10
 80067d6:	f7fd ffcf 	bl	8004778 <xQueueGenericCreateStatic>
 80067da:	4603      	mov	r3, r0
 80067dc:	4a08      	ldr	r2, [pc, #32]	; (8006800 <prvCheckForValidListAndQueue+0x60>)
 80067de:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80067e0:	4b07      	ldr	r3, [pc, #28]	; (8006800 <prvCheckForValidListAndQueue+0x60>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d005      	beq.n	80067f4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80067e8:	4b05      	ldr	r3, [pc, #20]	; (8006800 <prvCheckForValidListAndQueue+0x60>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	490b      	ldr	r1, [pc, #44]	; (800681c <prvCheckForValidListAndQueue+0x7c>)
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7fe fc04 	bl	8004ffc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80067f4:	f000 f956 	bl	8006aa4 <vPortExitCritical>
}
 80067f8:	bf00      	nop
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	20000f74 	.word	0x20000f74
 8006804:	20000f44 	.word	0x20000f44
 8006808:	20000f58 	.word	0x20000f58
 800680c:	20000f6c 	.word	0x20000f6c
 8006810:	20000f70 	.word	0x20000f70
 8006814:	20001020 	.word	0x20001020
 8006818:	20000f80 	.word	0x20000f80
 800681c:	080072a0 	.word	0x080072a0

08006820 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006820:	b480      	push	{r7}
 8006822:	b085      	sub	sp, #20
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	3b04      	subs	r3, #4
 8006830:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006838:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	3b04      	subs	r3, #4
 800683e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	f023 0201 	bic.w	r2, r3, #1
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	3b04      	subs	r3, #4
 800684e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006850:	4a0c      	ldr	r2, [pc, #48]	; (8006884 <pxPortInitialiseStack+0x64>)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	3b14      	subs	r3, #20
 800685a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	3b04      	subs	r3, #4
 8006866:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f06f 0202 	mvn.w	r2, #2
 800686e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	3b20      	subs	r3, #32
 8006874:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006876:	68fb      	ldr	r3, [r7, #12]
}
 8006878:	4618      	mov	r0, r3
 800687a:	3714      	adds	r7, #20
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr
 8006884:	08006889 	.word	0x08006889

08006888 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006888:	b480      	push	{r7}
 800688a:	b085      	sub	sp, #20
 800688c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800688e:	2300      	movs	r3, #0
 8006890:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006892:	4b14      	ldr	r3, [pc, #80]	; (80068e4 <prvTaskExitError+0x5c>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800689a:	d00c      	beq.n	80068b6 <prvTaskExitError+0x2e>
	__asm volatile
 800689c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a0:	b672      	cpsid	i
 80068a2:	f383 8811 	msr	BASEPRI, r3
 80068a6:	f3bf 8f6f 	isb	sy
 80068aa:	f3bf 8f4f 	dsb	sy
 80068ae:	b662      	cpsie	i
 80068b0:	60fb      	str	r3, [r7, #12]
}
 80068b2:	bf00      	nop
 80068b4:	e7fe      	b.n	80068b4 <prvTaskExitError+0x2c>
	__asm volatile
 80068b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ba:	b672      	cpsid	i
 80068bc:	f383 8811 	msr	BASEPRI, r3
 80068c0:	f3bf 8f6f 	isb	sy
 80068c4:	f3bf 8f4f 	dsb	sy
 80068c8:	b662      	cpsie	i
 80068ca:	60bb      	str	r3, [r7, #8]
}
 80068cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80068ce:	bf00      	nop
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d0fc      	beq.n	80068d0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80068d6:	bf00      	nop
 80068d8:	bf00      	nop
 80068da:	3714      	adds	r7, #20
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr
 80068e4:	2000000c 	.word	0x2000000c
	...

080068f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80068f0:	4b07      	ldr	r3, [pc, #28]	; (8006910 <pxCurrentTCBConst2>)
 80068f2:	6819      	ldr	r1, [r3, #0]
 80068f4:	6808      	ldr	r0, [r1, #0]
 80068f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068fa:	f380 8809 	msr	PSP, r0
 80068fe:	f3bf 8f6f 	isb	sy
 8006902:	f04f 0000 	mov.w	r0, #0
 8006906:	f380 8811 	msr	BASEPRI, r0
 800690a:	4770      	bx	lr
 800690c:	f3af 8000 	nop.w

08006910 <pxCurrentTCBConst2>:
 8006910:	20000a44 	.word	0x20000a44
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006914:	bf00      	nop
 8006916:	bf00      	nop

08006918 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006918:	4808      	ldr	r0, [pc, #32]	; (800693c <prvPortStartFirstTask+0x24>)
 800691a:	6800      	ldr	r0, [r0, #0]
 800691c:	6800      	ldr	r0, [r0, #0]
 800691e:	f380 8808 	msr	MSP, r0
 8006922:	f04f 0000 	mov.w	r0, #0
 8006926:	f380 8814 	msr	CONTROL, r0
 800692a:	b662      	cpsie	i
 800692c:	b661      	cpsie	f
 800692e:	f3bf 8f4f 	dsb	sy
 8006932:	f3bf 8f6f 	isb	sy
 8006936:	df00      	svc	0
 8006938:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800693a:	bf00      	nop
 800693c:	e000ed08 	.word	0xe000ed08

08006940 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006946:	4b37      	ldr	r3, [pc, #220]	; (8006a24 <xPortStartScheduler+0xe4>)
 8006948:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	b2db      	uxtb	r3, r3
 8006950:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	22ff      	movs	r2, #255	; 0xff
 8006956:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	b2db      	uxtb	r3, r3
 800695e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006960:	78fb      	ldrb	r3, [r7, #3]
 8006962:	b2db      	uxtb	r3, r3
 8006964:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006968:	b2da      	uxtb	r2, r3
 800696a:	4b2f      	ldr	r3, [pc, #188]	; (8006a28 <xPortStartScheduler+0xe8>)
 800696c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800696e:	4b2f      	ldr	r3, [pc, #188]	; (8006a2c <xPortStartScheduler+0xec>)
 8006970:	2207      	movs	r2, #7
 8006972:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006974:	e009      	b.n	800698a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006976:	4b2d      	ldr	r3, [pc, #180]	; (8006a2c <xPortStartScheduler+0xec>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	3b01      	subs	r3, #1
 800697c:	4a2b      	ldr	r2, [pc, #172]	; (8006a2c <xPortStartScheduler+0xec>)
 800697e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006980:	78fb      	ldrb	r3, [r7, #3]
 8006982:	b2db      	uxtb	r3, r3
 8006984:	005b      	lsls	r3, r3, #1
 8006986:	b2db      	uxtb	r3, r3
 8006988:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800698a:	78fb      	ldrb	r3, [r7, #3]
 800698c:	b2db      	uxtb	r3, r3
 800698e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006992:	2b80      	cmp	r3, #128	; 0x80
 8006994:	d0ef      	beq.n	8006976 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006996:	4b25      	ldr	r3, [pc, #148]	; (8006a2c <xPortStartScheduler+0xec>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f1c3 0307 	rsb	r3, r3, #7
 800699e:	2b04      	cmp	r3, #4
 80069a0:	d00c      	beq.n	80069bc <xPortStartScheduler+0x7c>
	__asm volatile
 80069a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a6:	b672      	cpsid	i
 80069a8:	f383 8811 	msr	BASEPRI, r3
 80069ac:	f3bf 8f6f 	isb	sy
 80069b0:	f3bf 8f4f 	dsb	sy
 80069b4:	b662      	cpsie	i
 80069b6:	60bb      	str	r3, [r7, #8]
}
 80069b8:	bf00      	nop
 80069ba:	e7fe      	b.n	80069ba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80069bc:	4b1b      	ldr	r3, [pc, #108]	; (8006a2c <xPortStartScheduler+0xec>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	021b      	lsls	r3, r3, #8
 80069c2:	4a1a      	ldr	r2, [pc, #104]	; (8006a2c <xPortStartScheduler+0xec>)
 80069c4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80069c6:	4b19      	ldr	r3, [pc, #100]	; (8006a2c <xPortStartScheduler+0xec>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80069ce:	4a17      	ldr	r2, [pc, #92]	; (8006a2c <xPortStartScheduler+0xec>)
 80069d0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	b2da      	uxtb	r2, r3
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80069da:	4b15      	ldr	r3, [pc, #84]	; (8006a30 <xPortStartScheduler+0xf0>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a14      	ldr	r2, [pc, #80]	; (8006a30 <xPortStartScheduler+0xf0>)
 80069e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80069e4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80069e6:	4b12      	ldr	r3, [pc, #72]	; (8006a30 <xPortStartScheduler+0xf0>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a11      	ldr	r2, [pc, #68]	; (8006a30 <xPortStartScheduler+0xf0>)
 80069ec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80069f0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80069f2:	f000 f8dd 	bl	8006bb0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80069f6:	4b0f      	ldr	r3, [pc, #60]	; (8006a34 <xPortStartScheduler+0xf4>)
 80069f8:	2200      	movs	r2, #0
 80069fa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80069fc:	f000 f8fc 	bl	8006bf8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006a00:	4b0d      	ldr	r3, [pc, #52]	; (8006a38 <xPortStartScheduler+0xf8>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a0c      	ldr	r2, [pc, #48]	; (8006a38 <xPortStartScheduler+0xf8>)
 8006a06:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006a0a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006a0c:	f7ff ff84 	bl	8006918 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006a10:	f7ff f842 	bl	8005a98 <vTaskSwitchContext>
	prvTaskExitError();
 8006a14:	f7ff ff38 	bl	8006888 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3710      	adds	r7, #16
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	e000e400 	.word	0xe000e400
 8006a28:	20001070 	.word	0x20001070
 8006a2c:	20001074 	.word	0x20001074
 8006a30:	e000ed20 	.word	0xe000ed20
 8006a34:	2000000c 	.word	0x2000000c
 8006a38:	e000ef34 	.word	0xe000ef34

08006a3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
	__asm volatile
 8006a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a46:	b672      	cpsid	i
 8006a48:	f383 8811 	msr	BASEPRI, r3
 8006a4c:	f3bf 8f6f 	isb	sy
 8006a50:	f3bf 8f4f 	dsb	sy
 8006a54:	b662      	cpsie	i
 8006a56:	607b      	str	r3, [r7, #4]
}
 8006a58:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006a5a:	4b10      	ldr	r3, [pc, #64]	; (8006a9c <vPortEnterCritical+0x60>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	3301      	adds	r3, #1
 8006a60:	4a0e      	ldr	r2, [pc, #56]	; (8006a9c <vPortEnterCritical+0x60>)
 8006a62:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006a64:	4b0d      	ldr	r3, [pc, #52]	; (8006a9c <vPortEnterCritical+0x60>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d111      	bne.n	8006a90 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006a6c:	4b0c      	ldr	r3, [pc, #48]	; (8006aa0 <vPortEnterCritical+0x64>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d00c      	beq.n	8006a90 <vPortEnterCritical+0x54>
	__asm volatile
 8006a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7a:	b672      	cpsid	i
 8006a7c:	f383 8811 	msr	BASEPRI, r3
 8006a80:	f3bf 8f6f 	isb	sy
 8006a84:	f3bf 8f4f 	dsb	sy
 8006a88:	b662      	cpsie	i
 8006a8a:	603b      	str	r3, [r7, #0]
}
 8006a8c:	bf00      	nop
 8006a8e:	e7fe      	b.n	8006a8e <vPortEnterCritical+0x52>
	}
}
 8006a90:	bf00      	nop
 8006a92:	370c      	adds	r7, #12
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr
 8006a9c:	2000000c 	.word	0x2000000c
 8006aa0:	e000ed04 	.word	0xe000ed04

08006aa4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006aaa:	4b13      	ldr	r3, [pc, #76]	; (8006af8 <vPortExitCritical+0x54>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d10c      	bne.n	8006acc <vPortExitCritical+0x28>
	__asm volatile
 8006ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab6:	b672      	cpsid	i
 8006ab8:	f383 8811 	msr	BASEPRI, r3
 8006abc:	f3bf 8f6f 	isb	sy
 8006ac0:	f3bf 8f4f 	dsb	sy
 8006ac4:	b662      	cpsie	i
 8006ac6:	607b      	str	r3, [r7, #4]
}
 8006ac8:	bf00      	nop
 8006aca:	e7fe      	b.n	8006aca <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8006acc:	4b0a      	ldr	r3, [pc, #40]	; (8006af8 <vPortExitCritical+0x54>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	3b01      	subs	r3, #1
 8006ad2:	4a09      	ldr	r2, [pc, #36]	; (8006af8 <vPortExitCritical+0x54>)
 8006ad4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006ad6:	4b08      	ldr	r3, [pc, #32]	; (8006af8 <vPortExitCritical+0x54>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d105      	bne.n	8006aea <vPortExitCritical+0x46>
 8006ade:	2300      	movs	r3, #0
 8006ae0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	f383 8811 	msr	BASEPRI, r3
}
 8006ae8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006aea:	bf00      	nop
 8006aec:	370c      	adds	r7, #12
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	2000000c 	.word	0x2000000c
 8006afc:	00000000 	.word	0x00000000

08006b00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006b00:	f3ef 8009 	mrs	r0, PSP
 8006b04:	f3bf 8f6f 	isb	sy
 8006b08:	4b15      	ldr	r3, [pc, #84]	; (8006b60 <pxCurrentTCBConst>)
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	f01e 0f10 	tst.w	lr, #16
 8006b10:	bf08      	it	eq
 8006b12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006b16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b1a:	6010      	str	r0, [r2, #0]
 8006b1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006b20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006b24:	b672      	cpsid	i
 8006b26:	f380 8811 	msr	BASEPRI, r0
 8006b2a:	f3bf 8f4f 	dsb	sy
 8006b2e:	f3bf 8f6f 	isb	sy
 8006b32:	b662      	cpsie	i
 8006b34:	f7fe ffb0 	bl	8005a98 <vTaskSwitchContext>
 8006b38:	f04f 0000 	mov.w	r0, #0
 8006b3c:	f380 8811 	msr	BASEPRI, r0
 8006b40:	bc09      	pop	{r0, r3}
 8006b42:	6819      	ldr	r1, [r3, #0]
 8006b44:	6808      	ldr	r0, [r1, #0]
 8006b46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b4a:	f01e 0f10 	tst.w	lr, #16
 8006b4e:	bf08      	it	eq
 8006b50:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006b54:	f380 8809 	msr	PSP, r0
 8006b58:	f3bf 8f6f 	isb	sy
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop

08006b60 <pxCurrentTCBConst>:
 8006b60:	20000a44 	.word	0x20000a44
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006b64:	bf00      	nop
 8006b66:	bf00      	nop

08006b68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b72:	b672      	cpsid	i
 8006b74:	f383 8811 	msr	BASEPRI, r3
 8006b78:	f3bf 8f6f 	isb	sy
 8006b7c:	f3bf 8f4f 	dsb	sy
 8006b80:	b662      	cpsie	i
 8006b82:	607b      	str	r3, [r7, #4]
}
 8006b84:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006b86:	f7fe fecb 	bl	8005920 <xTaskIncrementTick>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d003      	beq.n	8006b98 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006b90:	4b06      	ldr	r3, [pc, #24]	; (8006bac <SysTick_Handler+0x44>)
 8006b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b96:	601a      	str	r2, [r3, #0]
 8006b98:	2300      	movs	r3, #0
 8006b9a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	f383 8811 	msr	BASEPRI, r3
}
 8006ba2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006ba4:	bf00      	nop
 8006ba6:	3708      	adds	r7, #8
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	e000ed04 	.word	0xe000ed04

08006bb0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006bb4:	4b0b      	ldr	r3, [pc, #44]	; (8006be4 <vPortSetupTimerInterrupt+0x34>)
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006bba:	4b0b      	ldr	r3, [pc, #44]	; (8006be8 <vPortSetupTimerInterrupt+0x38>)
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006bc0:	4b0a      	ldr	r3, [pc, #40]	; (8006bec <vPortSetupTimerInterrupt+0x3c>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a0a      	ldr	r2, [pc, #40]	; (8006bf0 <vPortSetupTimerInterrupt+0x40>)
 8006bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8006bca:	099b      	lsrs	r3, r3, #6
 8006bcc:	4a09      	ldr	r2, [pc, #36]	; (8006bf4 <vPortSetupTimerInterrupt+0x44>)
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006bd2:	4b04      	ldr	r3, [pc, #16]	; (8006be4 <vPortSetupTimerInterrupt+0x34>)
 8006bd4:	2207      	movs	r2, #7
 8006bd6:	601a      	str	r2, [r3, #0]
}
 8006bd8:	bf00      	nop
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop
 8006be4:	e000e010 	.word	0xe000e010
 8006be8:	e000e018 	.word	0xe000e018
 8006bec:	20000000 	.word	0x20000000
 8006bf0:	10624dd3 	.word	0x10624dd3
 8006bf4:	e000e014 	.word	0xe000e014

08006bf8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006bf8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006c08 <vPortEnableVFP+0x10>
 8006bfc:	6801      	ldr	r1, [r0, #0]
 8006bfe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006c02:	6001      	str	r1, [r0, #0]
 8006c04:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006c06:	bf00      	nop
 8006c08:	e000ed88 	.word	0xe000ed88

08006c0c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b085      	sub	sp, #20
 8006c10:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006c12:	f3ef 8305 	mrs	r3, IPSR
 8006c16:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2b0f      	cmp	r3, #15
 8006c1c:	d916      	bls.n	8006c4c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006c1e:	4a19      	ldr	r2, [pc, #100]	; (8006c84 <vPortValidateInterruptPriority+0x78>)
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	4413      	add	r3, r2
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006c28:	4b17      	ldr	r3, [pc, #92]	; (8006c88 <vPortValidateInterruptPriority+0x7c>)
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	7afa      	ldrb	r2, [r7, #11]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d20c      	bcs.n	8006c4c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8006c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c36:	b672      	cpsid	i
 8006c38:	f383 8811 	msr	BASEPRI, r3
 8006c3c:	f3bf 8f6f 	isb	sy
 8006c40:	f3bf 8f4f 	dsb	sy
 8006c44:	b662      	cpsie	i
 8006c46:	607b      	str	r3, [r7, #4]
}
 8006c48:	bf00      	nop
 8006c4a:	e7fe      	b.n	8006c4a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006c4c:	4b0f      	ldr	r3, [pc, #60]	; (8006c8c <vPortValidateInterruptPriority+0x80>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006c54:	4b0e      	ldr	r3, [pc, #56]	; (8006c90 <vPortValidateInterruptPriority+0x84>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d90c      	bls.n	8006c76 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8006c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c60:	b672      	cpsid	i
 8006c62:	f383 8811 	msr	BASEPRI, r3
 8006c66:	f3bf 8f6f 	isb	sy
 8006c6a:	f3bf 8f4f 	dsb	sy
 8006c6e:	b662      	cpsie	i
 8006c70:	603b      	str	r3, [r7, #0]
}
 8006c72:	bf00      	nop
 8006c74:	e7fe      	b.n	8006c74 <vPortValidateInterruptPriority+0x68>
	}
 8006c76:	bf00      	nop
 8006c78:	3714      	adds	r7, #20
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	e000e3f0 	.word	0xe000e3f0
 8006c88:	20001070 	.word	0x20001070
 8006c8c:	e000ed0c 	.word	0xe000ed0c
 8006c90:	20001074 	.word	0x20001074

08006c94 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b08a      	sub	sp, #40	; 0x28
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006ca0:	f7fe fd80 	bl	80057a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006ca4:	4b5b      	ldr	r3, [pc, #364]	; (8006e14 <pvPortMalloc+0x180>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d101      	bne.n	8006cb0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006cac:	f000 f91a 	bl	8006ee4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006cb0:	4b59      	ldr	r3, [pc, #356]	; (8006e18 <pvPortMalloc+0x184>)
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4013      	ands	r3, r2
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f040 8092 	bne.w	8006de2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d01f      	beq.n	8006d04 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8006cc4:	2208      	movs	r2, #8
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4413      	add	r3, r2
 8006cca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f003 0307 	and.w	r3, r3, #7
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d016      	beq.n	8006d04 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f023 0307 	bic.w	r3, r3, #7
 8006cdc:	3308      	adds	r3, #8
 8006cde:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f003 0307 	and.w	r3, r3, #7
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d00c      	beq.n	8006d04 <pvPortMalloc+0x70>
	__asm volatile
 8006cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cee:	b672      	cpsid	i
 8006cf0:	f383 8811 	msr	BASEPRI, r3
 8006cf4:	f3bf 8f6f 	isb	sy
 8006cf8:	f3bf 8f4f 	dsb	sy
 8006cfc:	b662      	cpsie	i
 8006cfe:	617b      	str	r3, [r7, #20]
}
 8006d00:	bf00      	nop
 8006d02:	e7fe      	b.n	8006d02 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d06b      	beq.n	8006de2 <pvPortMalloc+0x14e>
 8006d0a:	4b44      	ldr	r3, [pc, #272]	; (8006e1c <pvPortMalloc+0x188>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d866      	bhi.n	8006de2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006d14:	4b42      	ldr	r3, [pc, #264]	; (8006e20 <pvPortMalloc+0x18c>)
 8006d16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006d18:	4b41      	ldr	r3, [pc, #260]	; (8006e20 <pvPortMalloc+0x18c>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d1e:	e004      	b.n	8006d2a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8006d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d903      	bls.n	8006d3c <pvPortMalloc+0xa8>
 8006d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d1f1      	bne.n	8006d20 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006d3c:	4b35      	ldr	r3, [pc, #212]	; (8006e14 <pvPortMalloc+0x180>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d04d      	beq.n	8006de2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006d46:	6a3b      	ldr	r3, [r7, #32]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	2208      	movs	r2, #8
 8006d4c:	4413      	add	r3, r2
 8006d4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	6a3b      	ldr	r3, [r7, #32]
 8006d56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5a:	685a      	ldr	r2, [r3, #4]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	1ad2      	subs	r2, r2, r3
 8006d60:	2308      	movs	r3, #8
 8006d62:	005b      	lsls	r3, r3, #1
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d921      	bls.n	8006dac <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	f003 0307 	and.w	r3, r3, #7
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00c      	beq.n	8006d94 <pvPortMalloc+0x100>
	__asm volatile
 8006d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7e:	b672      	cpsid	i
 8006d80:	f383 8811 	msr	BASEPRI, r3
 8006d84:	f3bf 8f6f 	isb	sy
 8006d88:	f3bf 8f4f 	dsb	sy
 8006d8c:	b662      	cpsie	i
 8006d8e:	613b      	str	r3, [r7, #16]
}
 8006d90:	bf00      	nop
 8006d92:	e7fe      	b.n	8006d92 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d96:	685a      	ldr	r2, [r3, #4]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	1ad2      	subs	r2, r2, r3
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006da6:	69b8      	ldr	r0, [r7, #24]
 8006da8:	f000 f8fe 	bl	8006fa8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006dac:	4b1b      	ldr	r3, [pc, #108]	; (8006e1c <pvPortMalloc+0x188>)
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	1ad3      	subs	r3, r2, r3
 8006db6:	4a19      	ldr	r2, [pc, #100]	; (8006e1c <pvPortMalloc+0x188>)
 8006db8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006dba:	4b18      	ldr	r3, [pc, #96]	; (8006e1c <pvPortMalloc+0x188>)
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	4b19      	ldr	r3, [pc, #100]	; (8006e24 <pvPortMalloc+0x190>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d203      	bcs.n	8006dce <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006dc6:	4b15      	ldr	r3, [pc, #84]	; (8006e1c <pvPortMalloc+0x188>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a16      	ldr	r2, [pc, #88]	; (8006e24 <pvPortMalloc+0x190>)
 8006dcc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd0:	685a      	ldr	r2, [r3, #4]
 8006dd2:	4b11      	ldr	r3, [pc, #68]	; (8006e18 <pvPortMalloc+0x184>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	431a      	orrs	r2, r3
 8006dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dda:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dde:	2200      	movs	r2, #0
 8006de0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006de2:	f7fe fced 	bl	80057c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	f003 0307 	and.w	r3, r3, #7
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d00c      	beq.n	8006e0a <pvPortMalloc+0x176>
	__asm volatile
 8006df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df4:	b672      	cpsid	i
 8006df6:	f383 8811 	msr	BASEPRI, r3
 8006dfa:	f3bf 8f6f 	isb	sy
 8006dfe:	f3bf 8f4f 	dsb	sy
 8006e02:	b662      	cpsie	i
 8006e04:	60fb      	str	r3, [r7, #12]
}
 8006e06:	bf00      	nop
 8006e08:	e7fe      	b.n	8006e08 <pvPortMalloc+0x174>
	return pvReturn;
 8006e0a:	69fb      	ldr	r3, [r7, #28]
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3728      	adds	r7, #40	; 0x28
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	20004c80 	.word	0x20004c80
 8006e18:	20004c8c 	.word	0x20004c8c
 8006e1c:	20004c84 	.word	0x20004c84
 8006e20:	20004c78 	.word	0x20004c78
 8006e24:	20004c88 	.word	0x20004c88

08006e28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b086      	sub	sp, #24
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d04c      	beq.n	8006ed4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006e3a:	2308      	movs	r3, #8
 8006e3c:	425b      	negs	r3, r3
 8006e3e:	697a      	ldr	r2, [r7, #20]
 8006e40:	4413      	add	r3, r2
 8006e42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	685a      	ldr	r2, [r3, #4]
 8006e4c:	4b23      	ldr	r3, [pc, #140]	; (8006edc <vPortFree+0xb4>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4013      	ands	r3, r2
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d10c      	bne.n	8006e70 <vPortFree+0x48>
	__asm volatile
 8006e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5a:	b672      	cpsid	i
 8006e5c:	f383 8811 	msr	BASEPRI, r3
 8006e60:	f3bf 8f6f 	isb	sy
 8006e64:	f3bf 8f4f 	dsb	sy
 8006e68:	b662      	cpsie	i
 8006e6a:	60fb      	str	r3, [r7, #12]
}
 8006e6c:	bf00      	nop
 8006e6e:	e7fe      	b.n	8006e6e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00c      	beq.n	8006e92 <vPortFree+0x6a>
	__asm volatile
 8006e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e7c:	b672      	cpsid	i
 8006e7e:	f383 8811 	msr	BASEPRI, r3
 8006e82:	f3bf 8f6f 	isb	sy
 8006e86:	f3bf 8f4f 	dsb	sy
 8006e8a:	b662      	cpsie	i
 8006e8c:	60bb      	str	r3, [r7, #8]
}
 8006e8e:	bf00      	nop
 8006e90:	e7fe      	b.n	8006e90 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	685a      	ldr	r2, [r3, #4]
 8006e96:	4b11      	ldr	r3, [pc, #68]	; (8006edc <vPortFree+0xb4>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4013      	ands	r3, r2
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d019      	beq.n	8006ed4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d115      	bne.n	8006ed4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	685a      	ldr	r2, [r3, #4]
 8006eac:	4b0b      	ldr	r3, [pc, #44]	; (8006edc <vPortFree+0xb4>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	43db      	mvns	r3, r3
 8006eb2:	401a      	ands	r2, r3
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006eb8:	f7fe fc74 	bl	80057a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	685a      	ldr	r2, [r3, #4]
 8006ec0:	4b07      	ldr	r3, [pc, #28]	; (8006ee0 <vPortFree+0xb8>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	4a06      	ldr	r2, [pc, #24]	; (8006ee0 <vPortFree+0xb8>)
 8006ec8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006eca:	6938      	ldr	r0, [r7, #16]
 8006ecc:	f000 f86c 	bl	8006fa8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006ed0:	f7fe fc76 	bl	80057c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006ed4:	bf00      	nop
 8006ed6:	3718      	adds	r7, #24
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	20004c8c 	.word	0x20004c8c
 8006ee0:	20004c84 	.word	0x20004c84

08006ee4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006eea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006eee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006ef0:	4b27      	ldr	r3, [pc, #156]	; (8006f90 <prvHeapInit+0xac>)
 8006ef2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f003 0307 	and.w	r3, r3, #7
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00c      	beq.n	8006f18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	3307      	adds	r3, #7
 8006f02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f023 0307 	bic.w	r3, r3, #7
 8006f0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006f0c:	68ba      	ldr	r2, [r7, #8]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	1ad3      	subs	r3, r2, r3
 8006f12:	4a1f      	ldr	r2, [pc, #124]	; (8006f90 <prvHeapInit+0xac>)
 8006f14:	4413      	add	r3, r2
 8006f16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006f1c:	4a1d      	ldr	r2, [pc, #116]	; (8006f94 <prvHeapInit+0xb0>)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006f22:	4b1c      	ldr	r3, [pc, #112]	; (8006f94 <prvHeapInit+0xb0>)
 8006f24:	2200      	movs	r2, #0
 8006f26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	68ba      	ldr	r2, [r7, #8]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006f30:	2208      	movs	r2, #8
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	1a9b      	subs	r3, r3, r2
 8006f36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f023 0307 	bic.w	r3, r3, #7
 8006f3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	4a15      	ldr	r2, [pc, #84]	; (8006f98 <prvHeapInit+0xb4>)
 8006f44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006f46:	4b14      	ldr	r3, [pc, #80]	; (8006f98 <prvHeapInit+0xb4>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006f4e:	4b12      	ldr	r3, [pc, #72]	; (8006f98 <prvHeapInit+0xb4>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	2200      	movs	r2, #0
 8006f54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	68fa      	ldr	r2, [r7, #12]
 8006f5e:	1ad2      	subs	r2, r2, r3
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006f64:	4b0c      	ldr	r3, [pc, #48]	; (8006f98 <prvHeapInit+0xb4>)
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	4a0a      	ldr	r2, [pc, #40]	; (8006f9c <prvHeapInit+0xb8>)
 8006f72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	4a09      	ldr	r2, [pc, #36]	; (8006fa0 <prvHeapInit+0xbc>)
 8006f7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006f7c:	4b09      	ldr	r3, [pc, #36]	; (8006fa4 <prvHeapInit+0xc0>)
 8006f7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006f82:	601a      	str	r2, [r3, #0]
}
 8006f84:	bf00      	nop
 8006f86:	3714      	adds	r7, #20
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr
 8006f90:	20001078 	.word	0x20001078
 8006f94:	20004c78 	.word	0x20004c78
 8006f98:	20004c80 	.word	0x20004c80
 8006f9c:	20004c88 	.word	0x20004c88
 8006fa0:	20004c84 	.word	0x20004c84
 8006fa4:	20004c8c 	.word	0x20004c8c

08006fa8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b085      	sub	sp, #20
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006fb0:	4b28      	ldr	r3, [pc, #160]	; (8007054 <prvInsertBlockIntoFreeList+0xac>)
 8006fb2:	60fb      	str	r3, [r7, #12]
 8006fb4:	e002      	b.n	8006fbc <prvInsertBlockIntoFreeList+0x14>
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	60fb      	str	r3, [r7, #12]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d8f7      	bhi.n	8006fb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	68ba      	ldr	r2, [r7, #8]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d108      	bne.n	8006fea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	685a      	ldr	r2, [r3, #4]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	441a      	add	r2, r3
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	68ba      	ldr	r2, [r7, #8]
 8006ff4:	441a      	add	r2, r3
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d118      	bne.n	8007030 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	4b15      	ldr	r3, [pc, #84]	; (8007058 <prvInsertBlockIntoFreeList+0xb0>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	429a      	cmp	r2, r3
 8007008:	d00d      	beq.n	8007026 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	685a      	ldr	r2, [r3, #4]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	441a      	add	r2, r3
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	601a      	str	r2, [r3, #0]
 8007024:	e008      	b.n	8007038 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007026:	4b0c      	ldr	r3, [pc, #48]	; (8007058 <prvInsertBlockIntoFreeList+0xb0>)
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	601a      	str	r2, [r3, #0]
 800702e:	e003      	b.n	8007038 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	429a      	cmp	r2, r3
 800703e:	d002      	beq.n	8007046 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007046:	bf00      	nop
 8007048:	3714      	adds	r7, #20
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop
 8007054:	20004c78 	.word	0x20004c78
 8007058:	20004c80 	.word	0x20004c80

0800705c <__libc_init_array>:
 800705c:	b570      	push	{r4, r5, r6, lr}
 800705e:	4d0d      	ldr	r5, [pc, #52]	; (8007094 <__libc_init_array+0x38>)
 8007060:	4c0d      	ldr	r4, [pc, #52]	; (8007098 <__libc_init_array+0x3c>)
 8007062:	1b64      	subs	r4, r4, r5
 8007064:	10a4      	asrs	r4, r4, #2
 8007066:	2600      	movs	r6, #0
 8007068:	42a6      	cmp	r6, r4
 800706a:	d109      	bne.n	8007080 <__libc_init_array+0x24>
 800706c:	4d0b      	ldr	r5, [pc, #44]	; (800709c <__libc_init_array+0x40>)
 800706e:	4c0c      	ldr	r4, [pc, #48]	; (80070a0 <__libc_init_array+0x44>)
 8007070:	f000 f8f2 	bl	8007258 <_init>
 8007074:	1b64      	subs	r4, r4, r5
 8007076:	10a4      	asrs	r4, r4, #2
 8007078:	2600      	movs	r6, #0
 800707a:	42a6      	cmp	r6, r4
 800707c:	d105      	bne.n	800708a <__libc_init_array+0x2e>
 800707e:	bd70      	pop	{r4, r5, r6, pc}
 8007080:	f855 3b04 	ldr.w	r3, [r5], #4
 8007084:	4798      	blx	r3
 8007086:	3601      	adds	r6, #1
 8007088:	e7ee      	b.n	8007068 <__libc_init_array+0xc>
 800708a:	f855 3b04 	ldr.w	r3, [r5], #4
 800708e:	4798      	blx	r3
 8007090:	3601      	adds	r6, #1
 8007092:	e7f2      	b.n	800707a <__libc_init_array+0x1e>
 8007094:	08007370 	.word	0x08007370
 8007098:	08007370 	.word	0x08007370
 800709c:	08007370 	.word	0x08007370
 80070a0:	08007374 	.word	0x08007374

080070a4 <__retarget_lock_acquire_recursive>:
 80070a4:	4770      	bx	lr

080070a6 <__retarget_lock_release_recursive>:
 80070a6:	4770      	bx	lr

080070a8 <memcpy>:
 80070a8:	440a      	add	r2, r1
 80070aa:	4291      	cmp	r1, r2
 80070ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80070b0:	d100      	bne.n	80070b4 <memcpy+0xc>
 80070b2:	4770      	bx	lr
 80070b4:	b510      	push	{r4, lr}
 80070b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070be:	4291      	cmp	r1, r2
 80070c0:	d1f9      	bne.n	80070b6 <memcpy+0xe>
 80070c2:	bd10      	pop	{r4, pc}

080070c4 <memset>:
 80070c4:	4402      	add	r2, r0
 80070c6:	4603      	mov	r3, r0
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d100      	bne.n	80070ce <memset+0xa>
 80070cc:	4770      	bx	lr
 80070ce:	f803 1b01 	strb.w	r1, [r3], #1
 80070d2:	e7f9      	b.n	80070c8 <memset+0x4>

080070d4 <cleanup_glue>:
 80070d4:	b538      	push	{r3, r4, r5, lr}
 80070d6:	460c      	mov	r4, r1
 80070d8:	6809      	ldr	r1, [r1, #0]
 80070da:	4605      	mov	r5, r0
 80070dc:	b109      	cbz	r1, 80070e2 <cleanup_glue+0xe>
 80070de:	f7ff fff9 	bl	80070d4 <cleanup_glue>
 80070e2:	4621      	mov	r1, r4
 80070e4:	4628      	mov	r0, r5
 80070e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070ea:	f000 b869 	b.w	80071c0 <_free_r>
	...

080070f0 <_reclaim_reent>:
 80070f0:	4b2c      	ldr	r3, [pc, #176]	; (80071a4 <_reclaim_reent+0xb4>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4283      	cmp	r3, r0
 80070f6:	b570      	push	{r4, r5, r6, lr}
 80070f8:	4604      	mov	r4, r0
 80070fa:	d051      	beq.n	80071a0 <_reclaim_reent+0xb0>
 80070fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80070fe:	b143      	cbz	r3, 8007112 <_reclaim_reent+0x22>
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d14a      	bne.n	800719c <_reclaim_reent+0xac>
 8007106:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007108:	6819      	ldr	r1, [r3, #0]
 800710a:	b111      	cbz	r1, 8007112 <_reclaim_reent+0x22>
 800710c:	4620      	mov	r0, r4
 800710e:	f000 f857 	bl	80071c0 <_free_r>
 8007112:	6961      	ldr	r1, [r4, #20]
 8007114:	b111      	cbz	r1, 800711c <_reclaim_reent+0x2c>
 8007116:	4620      	mov	r0, r4
 8007118:	f000 f852 	bl	80071c0 <_free_r>
 800711c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800711e:	b111      	cbz	r1, 8007126 <_reclaim_reent+0x36>
 8007120:	4620      	mov	r0, r4
 8007122:	f000 f84d 	bl	80071c0 <_free_r>
 8007126:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007128:	b111      	cbz	r1, 8007130 <_reclaim_reent+0x40>
 800712a:	4620      	mov	r0, r4
 800712c:	f000 f848 	bl	80071c0 <_free_r>
 8007130:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007132:	b111      	cbz	r1, 800713a <_reclaim_reent+0x4a>
 8007134:	4620      	mov	r0, r4
 8007136:	f000 f843 	bl	80071c0 <_free_r>
 800713a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800713c:	b111      	cbz	r1, 8007144 <_reclaim_reent+0x54>
 800713e:	4620      	mov	r0, r4
 8007140:	f000 f83e 	bl	80071c0 <_free_r>
 8007144:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007146:	b111      	cbz	r1, 800714e <_reclaim_reent+0x5e>
 8007148:	4620      	mov	r0, r4
 800714a:	f000 f839 	bl	80071c0 <_free_r>
 800714e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007150:	b111      	cbz	r1, 8007158 <_reclaim_reent+0x68>
 8007152:	4620      	mov	r0, r4
 8007154:	f000 f834 	bl	80071c0 <_free_r>
 8007158:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800715a:	b111      	cbz	r1, 8007162 <_reclaim_reent+0x72>
 800715c:	4620      	mov	r0, r4
 800715e:	f000 f82f 	bl	80071c0 <_free_r>
 8007162:	69a3      	ldr	r3, [r4, #24]
 8007164:	b1e3      	cbz	r3, 80071a0 <_reclaim_reent+0xb0>
 8007166:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007168:	4620      	mov	r0, r4
 800716a:	4798      	blx	r3
 800716c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800716e:	b1b9      	cbz	r1, 80071a0 <_reclaim_reent+0xb0>
 8007170:	4620      	mov	r0, r4
 8007172:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007176:	f7ff bfad 	b.w	80070d4 <cleanup_glue>
 800717a:	5949      	ldr	r1, [r1, r5]
 800717c:	b941      	cbnz	r1, 8007190 <_reclaim_reent+0xa0>
 800717e:	3504      	adds	r5, #4
 8007180:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007182:	2d80      	cmp	r5, #128	; 0x80
 8007184:	68d9      	ldr	r1, [r3, #12]
 8007186:	d1f8      	bne.n	800717a <_reclaim_reent+0x8a>
 8007188:	4620      	mov	r0, r4
 800718a:	f000 f819 	bl	80071c0 <_free_r>
 800718e:	e7ba      	b.n	8007106 <_reclaim_reent+0x16>
 8007190:	680e      	ldr	r6, [r1, #0]
 8007192:	4620      	mov	r0, r4
 8007194:	f000 f814 	bl	80071c0 <_free_r>
 8007198:	4631      	mov	r1, r6
 800719a:	e7ef      	b.n	800717c <_reclaim_reent+0x8c>
 800719c:	2500      	movs	r5, #0
 800719e:	e7ef      	b.n	8007180 <_reclaim_reent+0x90>
 80071a0:	bd70      	pop	{r4, r5, r6, pc}
 80071a2:	bf00      	nop
 80071a4:	20000010 	.word	0x20000010

080071a8 <__malloc_lock>:
 80071a8:	4801      	ldr	r0, [pc, #4]	; (80071b0 <__malloc_lock+0x8>)
 80071aa:	f7ff bf7b 	b.w	80070a4 <__retarget_lock_acquire_recursive>
 80071ae:	bf00      	nop
 80071b0:	20004c90 	.word	0x20004c90

080071b4 <__malloc_unlock>:
 80071b4:	4801      	ldr	r0, [pc, #4]	; (80071bc <__malloc_unlock+0x8>)
 80071b6:	f7ff bf76 	b.w	80070a6 <__retarget_lock_release_recursive>
 80071ba:	bf00      	nop
 80071bc:	20004c90 	.word	0x20004c90

080071c0 <_free_r>:
 80071c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071c2:	2900      	cmp	r1, #0
 80071c4:	d044      	beq.n	8007250 <_free_r+0x90>
 80071c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071ca:	9001      	str	r0, [sp, #4]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	f1a1 0404 	sub.w	r4, r1, #4
 80071d2:	bfb8      	it	lt
 80071d4:	18e4      	addlt	r4, r4, r3
 80071d6:	f7ff ffe7 	bl	80071a8 <__malloc_lock>
 80071da:	4a1e      	ldr	r2, [pc, #120]	; (8007254 <_free_r+0x94>)
 80071dc:	9801      	ldr	r0, [sp, #4]
 80071de:	6813      	ldr	r3, [r2, #0]
 80071e0:	b933      	cbnz	r3, 80071f0 <_free_r+0x30>
 80071e2:	6063      	str	r3, [r4, #4]
 80071e4:	6014      	str	r4, [r2, #0]
 80071e6:	b003      	add	sp, #12
 80071e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80071ec:	f7ff bfe2 	b.w	80071b4 <__malloc_unlock>
 80071f0:	42a3      	cmp	r3, r4
 80071f2:	d908      	bls.n	8007206 <_free_r+0x46>
 80071f4:	6825      	ldr	r5, [r4, #0]
 80071f6:	1961      	adds	r1, r4, r5
 80071f8:	428b      	cmp	r3, r1
 80071fa:	bf01      	itttt	eq
 80071fc:	6819      	ldreq	r1, [r3, #0]
 80071fe:	685b      	ldreq	r3, [r3, #4]
 8007200:	1949      	addeq	r1, r1, r5
 8007202:	6021      	streq	r1, [r4, #0]
 8007204:	e7ed      	b.n	80071e2 <_free_r+0x22>
 8007206:	461a      	mov	r2, r3
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	b10b      	cbz	r3, 8007210 <_free_r+0x50>
 800720c:	42a3      	cmp	r3, r4
 800720e:	d9fa      	bls.n	8007206 <_free_r+0x46>
 8007210:	6811      	ldr	r1, [r2, #0]
 8007212:	1855      	adds	r5, r2, r1
 8007214:	42a5      	cmp	r5, r4
 8007216:	d10b      	bne.n	8007230 <_free_r+0x70>
 8007218:	6824      	ldr	r4, [r4, #0]
 800721a:	4421      	add	r1, r4
 800721c:	1854      	adds	r4, r2, r1
 800721e:	42a3      	cmp	r3, r4
 8007220:	6011      	str	r1, [r2, #0]
 8007222:	d1e0      	bne.n	80071e6 <_free_r+0x26>
 8007224:	681c      	ldr	r4, [r3, #0]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	6053      	str	r3, [r2, #4]
 800722a:	4421      	add	r1, r4
 800722c:	6011      	str	r1, [r2, #0]
 800722e:	e7da      	b.n	80071e6 <_free_r+0x26>
 8007230:	d902      	bls.n	8007238 <_free_r+0x78>
 8007232:	230c      	movs	r3, #12
 8007234:	6003      	str	r3, [r0, #0]
 8007236:	e7d6      	b.n	80071e6 <_free_r+0x26>
 8007238:	6825      	ldr	r5, [r4, #0]
 800723a:	1961      	adds	r1, r4, r5
 800723c:	428b      	cmp	r3, r1
 800723e:	bf04      	itt	eq
 8007240:	6819      	ldreq	r1, [r3, #0]
 8007242:	685b      	ldreq	r3, [r3, #4]
 8007244:	6063      	str	r3, [r4, #4]
 8007246:	bf04      	itt	eq
 8007248:	1949      	addeq	r1, r1, r5
 800724a:	6021      	streq	r1, [r4, #0]
 800724c:	6054      	str	r4, [r2, #4]
 800724e:	e7ca      	b.n	80071e6 <_free_r+0x26>
 8007250:	b003      	add	sp, #12
 8007252:	bd30      	pop	{r4, r5, pc}
 8007254:	20004c94 	.word	0x20004c94

08007258 <_init>:
 8007258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800725a:	bf00      	nop
 800725c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800725e:	bc08      	pop	{r3}
 8007260:	469e      	mov	lr, r3
 8007262:	4770      	bx	lr

08007264 <_fini>:
 8007264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007266:	bf00      	nop
 8007268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800726a:	bc08      	pop	{r3}
 800726c:	469e      	mov	lr, r3
 800726e:	4770      	bx	lr
