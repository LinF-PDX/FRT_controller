
FRT_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f78  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08007178  08007178  00017178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007210  08007210  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08007210  08007210  00017210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007218  08007218  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007218  08007218  00017218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800721c  0800721c  0001721c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08007220  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d34  20000060  08007280  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d94  08007280  00024d94  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017f57  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032ec  00000000  00000000  00038028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013b0  00000000  00000000  0003b318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f41  00000000  00000000  0003c6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003529  00000000  00000000  0003d609  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001663a  00000000  00000000  00040b32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010777c  00000000  00000000  0005716c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005614  00000000  00000000  0015e8e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00163efc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000060 	.word	0x20000060
 800021c:	00000000 	.word	0x00000000
 8000220:	08007160 	.word	0x08007160

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000064 	.word	0x20000064
 800023c:	08007160 	.word	0x08007160

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b970 	b.w	8000538 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	460d      	mov	r5, r1
 8000278:	4604      	mov	r4, r0
 800027a:	460f      	mov	r7, r1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d14a      	bne.n	8000316 <__udivmoddi4+0xa6>
 8000280:	428a      	cmp	r2, r1
 8000282:	4694      	mov	ip, r2
 8000284:	d965      	bls.n	8000352 <__udivmoddi4+0xe2>
 8000286:	fab2 f382 	clz	r3, r2
 800028a:	b143      	cbz	r3, 800029e <__udivmoddi4+0x2e>
 800028c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000290:	f1c3 0220 	rsb	r2, r3, #32
 8000294:	409f      	lsls	r7, r3
 8000296:	fa20 f202 	lsr.w	r2, r0, r2
 800029a:	4317      	orrs	r7, r2
 800029c:	409c      	lsls	r4, r3
 800029e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002a2:	fa1f f58c 	uxth.w	r5, ip
 80002a6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002aa:	0c22      	lsrs	r2, r4, #16
 80002ac:	fb0e 7711 	mls	r7, lr, r1, r7
 80002b0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002b4:	fb01 f005 	mul.w	r0, r1, r5
 80002b8:	4290      	cmp	r0, r2
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x62>
 80002bc:	eb1c 0202 	adds.w	r2, ip, r2
 80002c0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002c4:	f080 811c 	bcs.w	8000500 <__udivmoddi4+0x290>
 80002c8:	4290      	cmp	r0, r2
 80002ca:	f240 8119 	bls.w	8000500 <__udivmoddi4+0x290>
 80002ce:	3902      	subs	r1, #2
 80002d0:	4462      	add	r2, ip
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	b2a4      	uxth	r4, r4
 80002d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002da:	fb0e 2210 	mls	r2, lr, r0, r2
 80002de:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e2:	fb00 f505 	mul.w	r5, r0, r5
 80002e6:	42a5      	cmp	r5, r4
 80002e8:	d90a      	bls.n	8000300 <__udivmoddi4+0x90>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f2:	f080 8107 	bcs.w	8000504 <__udivmoddi4+0x294>
 80002f6:	42a5      	cmp	r5, r4
 80002f8:	f240 8104 	bls.w	8000504 <__udivmoddi4+0x294>
 80002fc:	4464      	add	r4, ip
 80002fe:	3802      	subs	r0, #2
 8000300:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000304:	1b64      	subs	r4, r4, r5
 8000306:	2100      	movs	r1, #0
 8000308:	b11e      	cbz	r6, 8000312 <__udivmoddi4+0xa2>
 800030a:	40dc      	lsrs	r4, r3
 800030c:	2300      	movs	r3, #0
 800030e:	e9c6 4300 	strd	r4, r3, [r6]
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0xbc>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80ed 	beq.w	80004fa <__udivmoddi4+0x28a>
 8000320:	2100      	movs	r1, #0
 8000322:	e9c6 0500 	strd	r0, r5, [r6]
 8000326:	4608      	mov	r0, r1
 8000328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032c:	fab3 f183 	clz	r1, r3
 8000330:	2900      	cmp	r1, #0
 8000332:	d149      	bne.n	80003c8 <__udivmoddi4+0x158>
 8000334:	42ab      	cmp	r3, r5
 8000336:	d302      	bcc.n	800033e <__udivmoddi4+0xce>
 8000338:	4282      	cmp	r2, r0
 800033a:	f200 80f8 	bhi.w	800052e <__udivmoddi4+0x2be>
 800033e:	1a84      	subs	r4, r0, r2
 8000340:	eb65 0203 	sbc.w	r2, r5, r3
 8000344:	2001      	movs	r0, #1
 8000346:	4617      	mov	r7, r2
 8000348:	2e00      	cmp	r6, #0
 800034a:	d0e2      	beq.n	8000312 <__udivmoddi4+0xa2>
 800034c:	e9c6 4700 	strd	r4, r7, [r6]
 8000350:	e7df      	b.n	8000312 <__udivmoddi4+0xa2>
 8000352:	b902      	cbnz	r2, 8000356 <__udivmoddi4+0xe6>
 8000354:	deff      	udf	#255	; 0xff
 8000356:	fab2 f382 	clz	r3, r2
 800035a:	2b00      	cmp	r3, #0
 800035c:	f040 8090 	bne.w	8000480 <__udivmoddi4+0x210>
 8000360:	1a8a      	subs	r2, r1, r2
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2101      	movs	r1, #1
 800036c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000370:	fb07 2015 	mls	r0, r7, r5, r2
 8000374:	0c22      	lsrs	r2, r4, #16
 8000376:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800037a:	fb0e f005 	mul.w	r0, lr, r5
 800037e:	4290      	cmp	r0, r2
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x124>
 8000382:	eb1c 0202 	adds.w	r2, ip, r2
 8000386:	f105 38ff 	add.w	r8, r5, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x122>
 800038c:	4290      	cmp	r0, r2
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2b8>
 8000392:	4645      	mov	r5, r8
 8000394:	1a12      	subs	r2, r2, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb2 f0f7 	udiv	r0, r2, r7
 800039c:	fb07 2210 	mls	r2, r7, r0, r2
 80003a0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x14e>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x14c>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2c2>
 80003bc:	4610      	mov	r0, r2
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003c6:	e79f      	b.n	8000308 <__udivmoddi4+0x98>
 80003c8:	f1c1 0720 	rsb	r7, r1, #32
 80003cc:	408b      	lsls	r3, r1
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa05 f401 	lsl.w	r4, r5, r1
 80003da:	fa20 f307 	lsr.w	r3, r0, r7
 80003de:	40fd      	lsrs	r5, r7
 80003e0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e4:	4323      	orrs	r3, r4
 80003e6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ea:	fa1f fe8c 	uxth.w	lr, ip
 80003ee:	fb09 5518 	mls	r5, r9, r8, r5
 80003f2:	0c1c      	lsrs	r4, r3, #16
 80003f4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f8:	fb08 f50e 	mul.w	r5, r8, lr
 80003fc:	42a5      	cmp	r5, r4
 80003fe:	fa02 f201 	lsl.w	r2, r2, r1
 8000402:	fa00 f001 	lsl.w	r0, r0, r1
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2b4>
 8000414:	42a5      	cmp	r5, r4
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2b4>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4464      	add	r4, ip
 8000420:	1b64      	subs	r4, r4, r5
 8000422:	b29d      	uxth	r5, r3
 8000424:	fbb4 f3f9 	udiv	r3, r4, r9
 8000428:	fb09 4413 	mls	r4, r9, r3, r4
 800042c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000430:	fb03 fe0e 	mul.w	lr, r3, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1da>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2ac>
 8000442:	45a6      	cmp	lr, r4
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2ac>
 8000446:	3b02      	subs	r3, #2
 8000448:	4464      	add	r4, ip
 800044a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800044e:	fba3 9502 	umull	r9, r5, r3, r2
 8000452:	eba4 040e 	sub.w	r4, r4, lr
 8000456:	42ac      	cmp	r4, r5
 8000458:	46c8      	mov	r8, r9
 800045a:	46ae      	mov	lr, r5
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x29c>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x298>
 8000460:	b156      	cbz	r6, 8000478 <__udivmoddi4+0x208>
 8000462:	ebb0 0208 	subs.w	r2, r0, r8
 8000466:	eb64 040e 	sbc.w	r4, r4, lr
 800046a:	fa04 f707 	lsl.w	r7, r4, r7
 800046e:	40ca      	lsrs	r2, r1
 8000470:	40cc      	lsrs	r4, r1
 8000472:	4317      	orrs	r7, r2
 8000474:	e9c6 7400 	strd	r7, r4, [r6]
 8000478:	4618      	mov	r0, r3
 800047a:	2100      	movs	r1, #0
 800047c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000480:	f1c3 0120 	rsb	r1, r3, #32
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	fa20 f201 	lsr.w	r2, r0, r1
 800048c:	fa25 f101 	lsr.w	r1, r5, r1
 8000490:	409d      	lsls	r5, r3
 8000492:	432a      	orrs	r2, r5
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb1 f0f7 	udiv	r0, r1, r7
 80004a0:	fb07 1510 	mls	r5, r7, r0, r1
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004aa:	fb00 f50e 	mul.w	r5, r0, lr
 80004ae:	428d      	cmp	r5, r1
 80004b0:	fa04 f403 	lsl.w	r4, r4, r3
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x258>
 80004b6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004c0:	428d      	cmp	r5, r1
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1b49      	subs	r1, r1, r5
 80004ca:	b292      	uxth	r2, r2
 80004cc:	fbb1 f5f7 	udiv	r5, r1, r7
 80004d0:	fb07 1115 	mls	r1, r7, r5, r1
 80004d4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d8:	fb05 f10e 	mul.w	r1, r5, lr
 80004dc:	4291      	cmp	r1, r2
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x282>
 80004e0:	eb1c 0202 	adds.w	r2, ip, r2
 80004e4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2a8>
 80004ea:	4291      	cmp	r1, r2
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2a8>
 80004ee:	3d02      	subs	r5, #2
 80004f0:	4462      	add	r2, ip
 80004f2:	1a52      	subs	r2, r2, r1
 80004f4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0xfc>
 80004fa:	4631      	mov	r1, r6
 80004fc:	4630      	mov	r0, r6
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xa2>
 8000500:	4639      	mov	r1, r7
 8000502:	e6e6      	b.n	80002d2 <__udivmoddi4+0x62>
 8000504:	4610      	mov	r0, r2
 8000506:	e6fb      	b.n	8000300 <__udivmoddi4+0x90>
 8000508:	4548      	cmp	r0, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f0>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000514:	3b01      	subs	r3, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f0>
 8000518:	4645      	mov	r5, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x282>
 800051c:	462b      	mov	r3, r5
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1da>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x258>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000528:	3d02      	subs	r5, #2
 800052a:	4462      	add	r2, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x124>
 800052e:	4608      	mov	r0, r1
 8000530:	e70a      	b.n	8000348 <__udivmoddi4+0xd8>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x14e>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <APPS1_ADC_Percent>:
static void CAN_Config(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t APPS1_ADC_Percent(void) {
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
	uint16_t ADC_VAL;

	HAL_ADC_Start(&hadc1);
 8000542:	480a      	ldr	r0, [pc, #40]	; (800056c <APPS1_ADC_Percent+0x30>)
 8000544:	f001 f8b6 	bl	80016b4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 10);
 8000548:	210a      	movs	r1, #10
 800054a:	4808      	ldr	r0, [pc, #32]	; (800056c <APPS1_ADC_Percent+0x30>)
 800054c:	f001 f9b4 	bl	80018b8 <HAL_ADC_PollForConversion>
	ADC_VAL = HAL_ADC_GetValue(&hadc1);
 8000550:	4806      	ldr	r0, [pc, #24]	; (800056c <APPS1_ADC_Percent+0x30>)
 8000552:	f001 fa3c 	bl	80019ce <HAL_ADC_GetValue>
 8000556:	4603      	mov	r3, r0
 8000558:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc1);
 800055a:	4804      	ldr	r0, [pc, #16]	; (800056c <APPS1_ADC_Percent+0x30>)
 800055c:	f001 f978 	bl	8001850 <HAL_ADC_Stop>
	return ADC_VAL;
 8000560:	88fb      	ldrh	r3, [r7, #6]
}
 8000562:	4618      	mov	r0, r3
 8000564:	3708      	adds	r7, #8
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	2000007c 	.word	0x2000007c

08000570 <APPS2_ADC_Percent>:

uint16_t APPS2_ADC_Percent(void) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
	uint16_t ADC_VAL;

	HAL_ADC_Start(&hadc1);
 8000576:	480a      	ldr	r0, [pc, #40]	; (80005a0 <APPS2_ADC_Percent+0x30>)
 8000578:	f001 f89c 	bl	80016b4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 10);
 800057c:	210a      	movs	r1, #10
 800057e:	4808      	ldr	r0, [pc, #32]	; (80005a0 <APPS2_ADC_Percent+0x30>)
 8000580:	f001 f99a 	bl	80018b8 <HAL_ADC_PollForConversion>
	ADC_VAL = HAL_ADC_GetValue(&hadc1);
 8000584:	4806      	ldr	r0, [pc, #24]	; (80005a0 <APPS2_ADC_Percent+0x30>)
 8000586:	f001 fa22 	bl	80019ce <HAL_ADC_GetValue>
 800058a:	4603      	mov	r3, r0
 800058c:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc1);
 800058e:	4804      	ldr	r0, [pc, #16]	; (80005a0 <APPS2_ADC_Percent+0x30>)
 8000590:	f001 f95e 	bl	8001850 <HAL_ADC_Stop>
	return ADC_VAL;
 8000594:	88fb      	ldrh	r3, [r7, #6]
}
 8000596:	4618      	mov	r0, r3
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	2000007c 	.word	0x2000007c

080005a4 <BPPS_ADC_Percent>:

uint16_t BPPS_ADC_Percent(void) {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
	uint16_t ADC_VAL;

	HAL_ADC_Start(&hadc1);
 80005aa:	480a      	ldr	r0, [pc, #40]	; (80005d4 <BPPS_ADC_Percent+0x30>)
 80005ac:	f001 f882 	bl	80016b4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 10);
 80005b0:	210a      	movs	r1, #10
 80005b2:	4808      	ldr	r0, [pc, #32]	; (80005d4 <BPPS_ADC_Percent+0x30>)
 80005b4:	f001 f980 	bl	80018b8 <HAL_ADC_PollForConversion>
	ADC_VAL = HAL_ADC_GetValue(&hadc1);
 80005b8:	4806      	ldr	r0, [pc, #24]	; (80005d4 <BPPS_ADC_Percent+0x30>)
 80005ba:	f001 fa08 	bl	80019ce <HAL_ADC_GetValue>
 80005be:	4603      	mov	r3, r0
 80005c0:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc1);
 80005c2:	4804      	ldr	r0, [pc, #16]	; (80005d4 <BPPS_ADC_Percent+0x30>)
 80005c4:	f001 f944 	bl	8001850 <HAL_ADC_Stop>
	return ADC_VAL;
 80005c8:	88fb      	ldrh	r3, [r7, #6]
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	2000007c 	.word	0x2000007c

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f000 fff9 	bl	80015d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f892 	bl	8000708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e4:	f000 fa5a 	bl	8000a9c <MX_GPIO_Init>
  MX_CAN1_Init();
 80005e8:	f000 f9ec 	bl	80009c4 <MX_CAN1_Init>
  MX_ADC1_Init();
 80005ec:	f000 f8f4 	bl	80007d8 <MX_ADC1_Init>
  MX_ADC2_Init();
 80005f0:	f000 f944 	bl	800087c <MX_ADC2_Init>
  MX_ADC3_Init();
 80005f4:	f000 f994 	bl	8000920 <MX_ADC3_Init>
  MX_CAN3_Init();
 80005f8:	f000 fa1a 	bl	8000a30 <MX_CAN3_Init>
  /* USER CODE BEGIN 2 */
  	CAN_Config();
 80005fc:	f000 faba 	bl	8000b74 <CAN_Config>

	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000600:	2102      	movs	r1, #2
 8000602:	4836      	ldr	r0, [pc, #216]	; (80006dc <main+0x104>)
 8000604:	f002 f84e 	bl	80026a4 <HAL_CAN_ActivateNotification>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <main+0x3a>
	{
	  Error_Handler();
 800060e:	f000 fdb7 	bl	8001180 <Error_Handler>
	}
	// Initialize TxHeader and TxData
	AMK_TxHeader_R.DLC = 8;
 8000612:	4b33      	ldr	r3, [pc, #204]	; (80006e0 <main+0x108>)
 8000614:	2208      	movs	r2, #8
 8000616:	611a      	str	r2, [r3, #16]
	AMK_TxHeader_R.IDE = CAN_ID_STD;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <main+0x108>)
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
	AMK_TxHeader_R.RTR = CAN_RTR_DATA;
 800061e:	4b30      	ldr	r3, [pc, #192]	; (80006e0 <main+0x108>)
 8000620:	2200      	movs	r2, #0
 8000622:	60da      	str	r2, [r3, #12]
	AMK_TxHeader_R.StdId = 0x186;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <main+0x108>)
 8000626:	f44f 72c3 	mov.w	r2, #390	; 0x186
 800062a:	601a      	str	r2, [r3, #0]
	AMK_TxHeader_R.TransmitGlobalTime = DISABLE;
 800062c:	4b2c      	ldr	r3, [pc, #176]	; (80006e0 <main+0x108>)
 800062e:	2200      	movs	r2, #0
 8000630:	751a      	strb	r2, [r3, #20]

	AMK_TxData_R[0] = 0x00;
 8000632:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <main+0x10c>)
 8000634:	2200      	movs	r2, #0
 8000636:	701a      	strb	r2, [r3, #0]
	AMK_TxData_R[1] = 0x00;
 8000638:	4b2a      	ldr	r3, [pc, #168]	; (80006e4 <main+0x10c>)
 800063a:	2200      	movs	r2, #0
 800063c:	705a      	strb	r2, [r3, #1]
	AMK_TxData_R[2] = 0x00;
 800063e:	4b29      	ldr	r3, [pc, #164]	; (80006e4 <main+0x10c>)
 8000640:	2200      	movs	r2, #0
 8000642:	709a      	strb	r2, [r3, #2]
	AMK_TxData_R[3] = 0x00;
 8000644:	4b27      	ldr	r3, [pc, #156]	; (80006e4 <main+0x10c>)
 8000646:	2200      	movs	r2, #0
 8000648:	70da      	strb	r2, [r3, #3]
	AMK_TxData_R[4] = 0x00;
 800064a:	4b26      	ldr	r3, [pc, #152]	; (80006e4 <main+0x10c>)
 800064c:	2200      	movs	r2, #0
 800064e:	711a      	strb	r2, [r3, #4]
	AMK_TxData_R[5] = 0x00;
 8000650:	4b24      	ldr	r3, [pc, #144]	; (80006e4 <main+0x10c>)
 8000652:	2200      	movs	r2, #0
 8000654:	715a      	strb	r2, [r3, #5]
	AMK_TxData_R[6] = 0x00;
 8000656:	4b23      	ldr	r3, [pc, #140]	; (80006e4 <main+0x10c>)
 8000658:	2200      	movs	r2, #0
 800065a:	719a      	strb	r2, [r3, #6]
	AMK_TxData_R[7] = 0x00;
 800065c:	4b21      	ldr	r3, [pc, #132]	; (80006e4 <main+0x10c>)
 800065e:	2200      	movs	r2, #0
 8000660:	71da      	strb	r2, [r3, #7]

	AMK_TxHeader_L.DLC = 8;
 8000662:	4b21      	ldr	r3, [pc, #132]	; (80006e8 <main+0x110>)
 8000664:	2208      	movs	r2, #8
 8000666:	611a      	str	r2, [r3, #16]
	AMK_TxHeader_L.IDE = CAN_ID_STD;
 8000668:	4b1f      	ldr	r3, [pc, #124]	; (80006e8 <main+0x110>)
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]
	AMK_TxHeader_L.RTR = CAN_RTR_DATA;
 800066e:	4b1e      	ldr	r3, [pc, #120]	; (80006e8 <main+0x110>)
 8000670:	2200      	movs	r2, #0
 8000672:	60da      	str	r2, [r3, #12]
	AMK_TxHeader_L.StdId = 0x185;
 8000674:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <main+0x110>)
 8000676:	f240 1285 	movw	r2, #389	; 0x185
 800067a:	601a      	str	r2, [r3, #0]
	AMK_TxHeader_L.TransmitGlobalTime = DISABLE;
 800067c:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <main+0x110>)
 800067e:	2200      	movs	r2, #0
 8000680:	751a      	strb	r2, [r3, #20]

	AMK_TxData_L[0] = 0x00;
 8000682:	4b1a      	ldr	r3, [pc, #104]	; (80006ec <main+0x114>)
 8000684:	2200      	movs	r2, #0
 8000686:	701a      	strb	r2, [r3, #0]
	AMK_TxData_L[1] = 0x00;
 8000688:	4b18      	ldr	r3, [pc, #96]	; (80006ec <main+0x114>)
 800068a:	2200      	movs	r2, #0
 800068c:	705a      	strb	r2, [r3, #1]
	AMK_TxData_L[2] = 0x00;
 800068e:	4b17      	ldr	r3, [pc, #92]	; (80006ec <main+0x114>)
 8000690:	2200      	movs	r2, #0
 8000692:	709a      	strb	r2, [r3, #2]
	AMK_TxData_L[3] = 0x00;
 8000694:	4b15      	ldr	r3, [pc, #84]	; (80006ec <main+0x114>)
 8000696:	2200      	movs	r2, #0
 8000698:	70da      	strb	r2, [r3, #3]
	AMK_TxData_L[4] = 0x00;
 800069a:	4b14      	ldr	r3, [pc, #80]	; (80006ec <main+0x114>)
 800069c:	2200      	movs	r2, #0
 800069e:	711a      	strb	r2, [r3, #4]
	AMK_TxData_L[5] = 0x00;
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <main+0x114>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	715a      	strb	r2, [r3, #5]
	AMK_TxData_L[6] = 0x00;
 80006a6:	4b11      	ldr	r3, [pc, #68]	; (80006ec <main+0x114>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	719a      	strb	r2, [r3, #6]
	AMK_TxData_L[7] = 0x00;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <main+0x114>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	71da      	strb	r2, [r3, #7]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006b2:	f003 fd01 	bl	80040b8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of controllerStart */
  controllerStartHandle = osThreadNew(Start_FRT_controller, NULL, &controllerStart_attributes);
 80006b6:	4a0e      	ldr	r2, [pc, #56]	; (80006f0 <main+0x118>)
 80006b8:	2100      	movs	r1, #0
 80006ba:	480e      	ldr	r0, [pc, #56]	; (80006f4 <main+0x11c>)
 80006bc:	f003 fd66 	bl	800418c <osThreadNew>
 80006c0:	4603      	mov	r3, r0
 80006c2:	4a0d      	ldr	r2, [pc, #52]	; (80006f8 <main+0x120>)
 80006c4:	6013      	str	r3, [r2, #0]

  /* creation of motorControl */
  motorControlHandle = osThreadNew(Start_AMK, NULL, &motorControl_attributes);
 80006c6:	4a0d      	ldr	r2, [pc, #52]	; (80006fc <main+0x124>)
 80006c8:	2100      	movs	r1, #0
 80006ca:	480d      	ldr	r0, [pc, #52]	; (8000700 <main+0x128>)
 80006cc:	f003 fd5e 	bl	800418c <osThreadNew>
 80006d0:	4603      	mov	r3, r0
 80006d2:	4a0c      	ldr	r2, [pc, #48]	; (8000704 <main+0x12c>)
 80006d4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006d6:	f003 fd23 	bl	8004120 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006da:	e7fe      	b.n	80006da <main+0x102>
 80006dc:	20000154 	.word	0x20000154
 80006e0:	200001ac 	.word	0x200001ac
 80006e4:	200001f8 	.word	0x200001f8
 80006e8:	200001c4 	.word	0x200001c4
 80006ec:	20000200 	.word	0x20000200
 80006f0:	080071b0 	.word	0x080071b0
 80006f4:	08000d45 	.word	0x08000d45
 80006f8:	200001a4 	.word	0x200001a4
 80006fc:	080071d4 	.word	0x080071d4
 8000700:	08000e41 	.word	0x08000e41
 8000704:	200001a8 	.word	0x200001a8

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b094      	sub	sp, #80	; 0x50
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 031c 	add.w	r3, r7, #28
 8000712:	2234      	movs	r2, #52	; 0x34
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f006 fc38 	bl	8006f8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	f107 0308 	add.w	r3, r7, #8
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800072c:	4b28      	ldr	r3, [pc, #160]	; (80007d0 <SystemClock_Config+0xc8>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000730:	4a27      	ldr	r2, [pc, #156]	; (80007d0 <SystemClock_Config+0xc8>)
 8000732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000736:	6413      	str	r3, [r2, #64]	; 0x40
 8000738:	4b25      	ldr	r3, [pc, #148]	; (80007d0 <SystemClock_Config+0xc8>)
 800073a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000744:	4b23      	ldr	r3, [pc, #140]	; (80007d4 <SystemClock_Config+0xcc>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800074c:	4a21      	ldr	r2, [pc, #132]	; (80007d4 <SystemClock_Config+0xcc>)
 800074e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000752:	6013      	str	r3, [r2, #0]
 8000754:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <SystemClock_Config+0xcc>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000760:	2302      	movs	r3, #2
 8000762:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000764:	2301      	movs	r3, #1
 8000766:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000768:	2310      	movs	r3, #16
 800076a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076c:	2302      	movs	r3, #2
 800076e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000770:	2300      	movs	r3, #0
 8000772:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000774:	2308      	movs	r3, #8
 8000776:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000778:	2360      	movs	r3, #96	; 0x60
 800077a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 800077c:	2306      	movs	r3, #6
 800077e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000780:	2302      	movs	r3, #2
 8000782:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000784:	2302      	movs	r3, #2
 8000786:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000788:	f107 031c 	add.w	r3, r7, #28
 800078c:	4618      	mov	r0, r3
 800078e:	f002 fcb9 	bl	8003104 <HAL_RCC_OscConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000798:	f000 fcf2 	bl	8001180 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079c:	230f      	movs	r3, #15
 800079e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a0:	2302      	movs	r3, #2
 80007a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80007a4:	2380      	movs	r3, #128	; 0x80
 80007a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007b2:	f107 0308 	add.w	r3, r7, #8
 80007b6:	2100      	movs	r1, #0
 80007b8:	4618      	mov	r0, r3
 80007ba:	f002 ff51 	bl	8003660 <HAL_RCC_ClockConfig>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007c4:	f000 fcdc 	bl	8001180 <Error_Handler>
  }
}
 80007c8:	bf00      	nop
 80007ca:	3750      	adds	r7, #80	; 0x50
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40007000 	.word	0x40007000

080007d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007de:	463b      	mov	r3, r7
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007ea:	4b21      	ldr	r3, [pc, #132]	; (8000870 <MX_ADC1_Init+0x98>)
 80007ec:	4a21      	ldr	r2, [pc, #132]	; (8000874 <MX_ADC1_Init+0x9c>)
 80007ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007f0:	4b1f      	ldr	r3, [pc, #124]	; (8000870 <MX_ADC1_Init+0x98>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007f6:	4b1e      	ldr	r3, [pc, #120]	; (8000870 <MX_ADC1_Init+0x98>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007fc:	4b1c      	ldr	r3, [pc, #112]	; (8000870 <MX_ADC1_Init+0x98>)
 80007fe:	2200      	movs	r2, #0
 8000800:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000802:	4b1b      	ldr	r3, [pc, #108]	; (8000870 <MX_ADC1_Init+0x98>)
 8000804:	2201      	movs	r2, #1
 8000806:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000808:	4b19      	ldr	r3, [pc, #100]	; (8000870 <MX_ADC1_Init+0x98>)
 800080a:	2200      	movs	r2, #0
 800080c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000810:	4b17      	ldr	r3, [pc, #92]	; (8000870 <MX_ADC1_Init+0x98>)
 8000812:	2200      	movs	r2, #0
 8000814:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000816:	4b16      	ldr	r3, [pc, #88]	; (8000870 <MX_ADC1_Init+0x98>)
 8000818:	4a17      	ldr	r2, [pc, #92]	; (8000878 <MX_ADC1_Init+0xa0>)
 800081a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800081c:	4b14      	ldr	r3, [pc, #80]	; (8000870 <MX_ADC1_Init+0x98>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000822:	4b13      	ldr	r3, [pc, #76]	; (8000870 <MX_ADC1_Init+0x98>)
 8000824:	2201      	movs	r2, #1
 8000826:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000828:	4b11      	ldr	r3, [pc, #68]	; (8000870 <MX_ADC1_Init+0x98>)
 800082a:	2200      	movs	r2, #0
 800082c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000830:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <MX_ADC1_Init+0x98>)
 8000832:	2201      	movs	r2, #1
 8000834:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000836:	480e      	ldr	r0, [pc, #56]	; (8000870 <MX_ADC1_Init+0x98>)
 8000838:	f000 fef8 	bl	800162c <HAL_ADC_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000842:	f000 fc9d 	bl	8001180 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000846:	230a      	movs	r3, #10
 8000848:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800084a:	2301      	movs	r3, #1
 800084c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800084e:	2300      	movs	r3, #0
 8000850:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000852:	463b      	mov	r3, r7
 8000854:	4619      	mov	r1, r3
 8000856:	4806      	ldr	r0, [pc, #24]	; (8000870 <MX_ADC1_Init+0x98>)
 8000858:	f001 f8c6 	bl	80019e8 <HAL_ADC_ConfigChannel>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000862:	f000 fc8d 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	3710      	adds	r7, #16
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	2000007c 	.word	0x2000007c
 8000874:	40012000 	.word	0x40012000
 8000878:	0f000001 	.word	0x0f000001

0800087c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000882:	463b      	mov	r3, r7
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]
 800088c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800088e:	4b21      	ldr	r3, [pc, #132]	; (8000914 <MX_ADC2_Init+0x98>)
 8000890:	4a21      	ldr	r2, [pc, #132]	; (8000918 <MX_ADC2_Init+0x9c>)
 8000892:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000894:	4b1f      	ldr	r3, [pc, #124]	; (8000914 <MX_ADC2_Init+0x98>)
 8000896:	2200      	movs	r2, #0
 8000898:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800089a:	4b1e      	ldr	r3, [pc, #120]	; (8000914 <MX_ADC2_Init+0x98>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008a0:	4b1c      	ldr	r3, [pc, #112]	; (8000914 <MX_ADC2_Init+0x98>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80008a6:	4b1b      	ldr	r3, [pc, #108]	; (8000914 <MX_ADC2_Init+0x98>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008ac:	4b19      	ldr	r3, [pc, #100]	; (8000914 <MX_ADC2_Init+0x98>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008b4:	4b17      	ldr	r3, [pc, #92]	; (8000914 <MX_ADC2_Init+0x98>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008ba:	4b16      	ldr	r3, [pc, #88]	; (8000914 <MX_ADC2_Init+0x98>)
 80008bc:	4a17      	ldr	r2, [pc, #92]	; (800091c <MX_ADC2_Init+0xa0>)
 80008be:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008c0:	4b14      	ldr	r3, [pc, #80]	; (8000914 <MX_ADC2_Init+0x98>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80008c6:	4b13      	ldr	r3, [pc, #76]	; (8000914 <MX_ADC2_Init+0x98>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80008cc:	4b11      	ldr	r3, [pc, #68]	; (8000914 <MX_ADC2_Init+0x98>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <MX_ADC2_Init+0x98>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80008da:	480e      	ldr	r0, [pc, #56]	; (8000914 <MX_ADC2_Init+0x98>)
 80008dc:	f000 fea6 	bl	800162c <HAL_ADC_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 80008e6:	f000 fc4b 	bl	8001180 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80008ea:	230b      	movs	r3, #11
 80008ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ee:	2301      	movs	r3, #1
 80008f0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008f2:	2300      	movs	r3, #0
 80008f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008f6:	463b      	mov	r3, r7
 80008f8:	4619      	mov	r1, r3
 80008fa:	4806      	ldr	r0, [pc, #24]	; (8000914 <MX_ADC2_Init+0x98>)
 80008fc:	f001 f874 	bl	80019e8 <HAL_ADC_ConfigChannel>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8000906:	f000 fc3b 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	3710      	adds	r7, #16
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	200000c4 	.word	0x200000c4
 8000918:	40012100 	.word	0x40012100
 800091c:	0f000001 	.word	0x0f000001

08000920 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000926:	463b      	mov	r3, r7
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000932:	4b21      	ldr	r3, [pc, #132]	; (80009b8 <MX_ADC3_Init+0x98>)
 8000934:	4a21      	ldr	r2, [pc, #132]	; (80009bc <MX_ADC3_Init+0x9c>)
 8000936:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000938:	4b1f      	ldr	r3, [pc, #124]	; (80009b8 <MX_ADC3_Init+0x98>)
 800093a:	2200      	movs	r2, #0
 800093c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800093e:	4b1e      	ldr	r3, [pc, #120]	; (80009b8 <MX_ADC3_Init+0x98>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000944:	4b1c      	ldr	r3, [pc, #112]	; (80009b8 <MX_ADC3_Init+0x98>)
 8000946:	2200      	movs	r2, #0
 8000948:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800094a:	4b1b      	ldr	r3, [pc, #108]	; (80009b8 <MX_ADC3_Init+0x98>)
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000950:	4b19      	ldr	r3, [pc, #100]	; (80009b8 <MX_ADC3_Init+0x98>)
 8000952:	2200      	movs	r2, #0
 8000954:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000958:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <MX_ADC3_Init+0x98>)
 800095a:	2200      	movs	r2, #0
 800095c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800095e:	4b16      	ldr	r3, [pc, #88]	; (80009b8 <MX_ADC3_Init+0x98>)
 8000960:	4a17      	ldr	r2, [pc, #92]	; (80009c0 <MX_ADC3_Init+0xa0>)
 8000962:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000964:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <MX_ADC3_Init+0x98>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800096a:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <MX_ADC3_Init+0x98>)
 800096c:	2201      	movs	r2, #1
 800096e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000970:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <MX_ADC3_Init+0x98>)
 8000972:	2200      	movs	r2, #0
 8000974:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000978:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <MX_ADC3_Init+0x98>)
 800097a:	2201      	movs	r2, #1
 800097c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800097e:	480e      	ldr	r0, [pc, #56]	; (80009b8 <MX_ADC3_Init+0x98>)
 8000980:	f000 fe54 	bl	800162c <HAL_ADC_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 800098a:	f000 fbf9 	bl	8001180 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800098e:	230c      	movs	r3, #12
 8000990:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000992:	2301      	movs	r3, #1
 8000994:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000996:	2300      	movs	r3, #0
 8000998:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800099a:	463b      	mov	r3, r7
 800099c:	4619      	mov	r1, r3
 800099e:	4806      	ldr	r0, [pc, #24]	; (80009b8 <MX_ADC3_Init+0x98>)
 80009a0:	f001 f822 	bl	80019e8 <HAL_ADC_ConfigChannel>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 80009aa:	f000 fbe9 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	2000010c 	.word	0x2000010c
 80009bc:	40012200 	.word	0x40012200
 80009c0:	0f000001 	.word	0x0f000001

080009c4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80009c8:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <MX_CAN1_Init+0x64>)
 80009ca:	4a18      	ldr	r2, [pc, #96]	; (8000a2c <MX_CAN1_Init+0x68>)
 80009cc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1;
 80009ce:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <MX_CAN1_Init+0x64>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80009d4:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <MX_CAN1_Init+0x64>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80009da:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <MX_CAN1_Init+0x64>)
 80009dc:	2200      	movs	r2, #0
 80009de:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80009e0:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <MX_CAN1_Init+0x64>)
 80009e2:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80009e6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80009e8:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <MX_CAN1_Init+0x64>)
 80009ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80009ee:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80009f0:	4b0d      	ldr	r3, [pc, #52]	; (8000a28 <MX_CAN1_Init+0x64>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 80009f6:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <MX_CAN1_Init+0x64>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80009fc:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <MX_CAN1_Init+0x64>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <MX_CAN1_Init+0x64>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a08:	4b07      	ldr	r3, [pc, #28]	; (8000a28 <MX_CAN1_Init+0x64>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <MX_CAN1_Init+0x64>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a14:	4804      	ldr	r0, [pc, #16]	; (8000a28 <MX_CAN1_Init+0x64>)
 8000a16:	f001 fa37 	bl	8001e88 <HAL_CAN_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000a20:	f000 fbae 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000154 	.word	0x20000154
 8000a2c:	40006400 	.word	0x40006400

08000a30 <MX_CAN3_Init>:
  * @brief CAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN3_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 8000a34:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <MX_CAN3_Init+0x64>)
 8000a36:	4a18      	ldr	r2, [pc, #96]	; (8000a98 <MX_CAN3_Init+0x68>)
 8000a38:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 1;
 8000a3a:	4b16      	ldr	r3, [pc, #88]	; (8000a94 <MX_CAN3_Init+0x64>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8000a40:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <MX_CAN3_Init+0x64>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a46:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <MX_CAN3_Init+0x64>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000a4c:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <MX_CAN3_Init+0x64>)
 8000a4e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000a52:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000a54:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <MX_CAN3_Init+0x64>)
 8000a56:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000a5a:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8000a5c:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <MX_CAN3_Init+0x64>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = ENABLE;
 8000a62:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <MX_CAN3_Init+0x64>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8000a68:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <MX_CAN3_Init+0x64>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <MX_CAN3_Init+0x64>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8000a74:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <MX_CAN3_Init+0x64>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <MX_CAN3_Init+0x64>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8000a80:	4804      	ldr	r0, [pc, #16]	; (8000a94 <MX_CAN3_Init+0x64>)
 8000a82:	f001 fa01 	bl	8001e88 <HAL_CAN_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 8000a8c:	f000 fb78 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	2000017c 	.word	0x2000017c
 8000a98:	40003400 	.word	0x40003400

08000a9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b088      	sub	sp, #32
 8000aa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa2:	f107 030c 	add.w	r3, r7, #12
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
 8000ab0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab2:	4b2d      	ldr	r3, [pc, #180]	; (8000b68 <MX_GPIO_Init+0xcc>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a2c      	ldr	r2, [pc, #176]	; (8000b68 <MX_GPIO_Init+0xcc>)
 8000ab8:	f043 0304 	orr.w	r3, r3, #4
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b2a      	ldr	r3, [pc, #168]	; (8000b68 <MX_GPIO_Init+0xcc>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0304 	and.w	r3, r3, #4
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	4b27      	ldr	r3, [pc, #156]	; (8000b68 <MX_GPIO_Init+0xcc>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a26      	ldr	r2, [pc, #152]	; (8000b68 <MX_GPIO_Init+0xcc>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b24      	ldr	r3, [pc, #144]	; (8000b68 <MX_GPIO_Init+0xcc>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ae2:	4b21      	ldr	r3, [pc, #132]	; (8000b68 <MX_GPIO_Init+0xcc>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a20      	ldr	r2, [pc, #128]	; (8000b68 <MX_GPIO_Init+0xcc>)
 8000ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b1e      	ldr	r3, [pc, #120]	; (8000b68 <MX_GPIO_Init+0xcc>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED_Pin|START_BTN_LED_EN_Pin, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2128      	movs	r1, #40	; 0x28
 8000afe:	481b      	ldr	r0, [pc, #108]	; (8000b6c <MX_GPIO_Init+0xd0>)
 8000b00:	f002 facc 	bl	800309c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BRAKE_LIGHT_EN_Pin|RTDS_EN_Pin, GPIO_PIN_RESET);
 8000b04:	2200      	movs	r2, #0
 8000b06:	2109      	movs	r1, #9
 8000b08:	4819      	ldr	r0, [pc, #100]	; (8000b70 <MX_GPIO_Init+0xd4>)
 8000b0a:	f002 fac7 	bl	800309c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_LED_Pin START_BTN_LED_EN_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|START_BTN_LED_EN_Pin;
 8000b0e:	2328      	movs	r3, #40	; 0x28
 8000b10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b12:	2301      	movs	r3, #1
 8000b14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1e:	f107 030c 	add.w	r3, r7, #12
 8000b22:	4619      	mov	r1, r3
 8000b24:	4811      	ldr	r0, [pc, #68]	; (8000b6c <MX_GPIO_Init+0xd0>)
 8000b26:	f002 f8f5 	bl	8002d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : BRAKE_LIGHT_EN_Pin RTDS_EN_Pin */
  GPIO_InitStruct.Pin = BRAKE_LIGHT_EN_Pin|RTDS_EN_Pin;
 8000b2a:	2309      	movs	r3, #9
 8000b2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b3a:	f107 030c 	add.w	r3, r7, #12
 8000b3e:	4619      	mov	r1, r3
 8000b40:	480b      	ldr	r0, [pc, #44]	; (8000b70 <MX_GPIO_Init+0xd4>)
 8000b42:	f002 f8e7 	bl	8002d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BTN_n_Pin */
  GPIO_InitStruct.Pin = START_BTN_n_Pin;
 8000b46:	2340      	movs	r3, #64	; 0x40
 8000b48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(START_BTN_n_GPIO_Port, &GPIO_InitStruct);
 8000b52:	f107 030c 	add.w	r3, r7, #12
 8000b56:	4619      	mov	r1, r3
 8000b58:	4805      	ldr	r0, [pc, #20]	; (8000b70 <MX_GPIO_Init+0xd4>)
 8000b5a:	f002 f8db 	bl	8002d14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b5e:	bf00      	nop
 8000b60:	3720      	adds	r7, #32
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020000 	.word	0x40020000
 8000b70:	40021800 	.word	0x40021800

08000b74 <CAN_Config>:

/* USER CODE BEGIN 4 */
static void CAN_Config(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	; 0x28
 8000b78:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 13;
 8000b7a:	230d      	movs	r3, #13
 8000b7c:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000b82:	2301      	movs	r3, #1
 8000b84:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x284<<5;
 8000b86:	f44f 43a1 	mov.w	r3, #20608	; 0x5080
 8000b8a:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0xFFE<<5; //Only ID 0x284 and 0x285 can pass through
 8000b90:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <CAN_Config+0x6c>)
 8000b92:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8000b94:	2300      	movs	r3, #0
 8000b96:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8000ba4:	463b      	mov	r3, r7
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	480e      	ldr	r0, [pc, #56]	; (8000be4 <CAN_Config+0x70>)
 8000baa:	f001 fa69 	bl	8002080 <HAL_CAN_ConfigFilter>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <CAN_Config+0x44>
	{
		/* Filter configuration Error */
		Error_Handler();
 8000bb4:	f000 fae4 	bl	8001180 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8000bb8:	480a      	ldr	r0, [pc, #40]	; (8000be4 <CAN_Config+0x70>)
 8000bba:	f001 fb4d 	bl	8002258 <HAL_CAN_Start>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <CAN_Config+0x54>
	{
		/* Start Error */
		Error_Handler();
 8000bc4:	f000 fadc 	bl	8001180 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan3) != HAL_OK)
 8000bc8:	4807      	ldr	r0, [pc, #28]	; (8000be8 <CAN_Config+0x74>)
 8000bca:	f001 fb45 	bl	8002258 <HAL_CAN_Start>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <CAN_Config+0x64>
	{
		/* Start Error */
		Error_Handler();
 8000bd4:	f000 fad4 	bl	8001180 <Error_Handler>
	}
}
 8000bd8:	bf00      	nop
 8000bda:	3728      	adds	r7, #40	; 0x28
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	0001ffc0 	.word	0x0001ffc0
 8000be4:	20000154 	.word	0x20000154
 8000be8:	2000017c 	.word	0x2000017c

08000bec <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
	//Get Rx message
	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8000bf4:	4b4e      	ldr	r3, [pc, #312]	; (8000d30 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000bf6:	4a4f      	ldr	r2, [pc, #316]	; (8000d34 <HAL_CAN_RxFifo0MsgPendingCallback+0x148>)
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	484f      	ldr	r0, [pc, #316]	; (8000d38 <HAL_CAN_RxFifo0MsgPendingCallback+0x14c>)
 8000bfc:	f001 fc40 	bl	8002480 <HAL_CAN_GetRxMessage>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
		Error_Handler();
 8000c06:	f000 fabb 	bl	8001180 <Error_Handler>
	}

	if (RxHeader.StdId == 0x285) {
 8000c0a:	4b4a      	ldr	r3, [pc, #296]	; (8000d34 <HAL_CAN_RxFifo0MsgPendingCallback+0x148>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f240 2285 	movw	r2, #645	; 0x285
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d142      	bne.n	8000c9c <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>
		if ((RxData[1] >> 1) & 1) {
 8000c16:	4b46      	ldr	r3, [pc, #280]	; (8000d30 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000c18:	785b      	ldrb	r3, [r3, #1]
 8000c1a:	085b      	lsrs	r3, r3, #1
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d003      	beq.n	8000c2e <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
			MotorStatus_R = STATUS_ERROR;
 8000c26:	4b45      	ldr	r3, [pc, #276]	; (8000d3c <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000c28:	2207      	movs	r2, #7
 8000c2a:	701a      	strb	r2, [r3, #0]
			return;
 8000c2c:	e07d      	b.n	8000d2a <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
		} else if (RxData[1] >> 7 & 1){
 8000c2e:	4b40      	ldr	r3, [pc, #256]	; (8000d30 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000c30:	785b      	ldrb	r3, [r3, #1]
 8000c32:	09db      	lsrs	r3, r3, #7
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d003      	beq.n	8000c46 <HAL_CAN_RxFifo0MsgPendingCallback+0x5a>
			MotorStatus_R = STATUS_DERATING;
 8000c3e:	4b3f      	ldr	r3, [pc, #252]	; (8000d3c <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000c40:	2206      	movs	r2, #6
 8000c42:	701a      	strb	r2, [r3, #0]
			return;
 8000c44:	e071      	b.n	8000d2a <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
		} else {
			switch(RxData[1]) {
 8000c46:	4b3a      	ldr	r3, [pc, #232]	; (8000d30 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000c48:	785b      	ldrb	r3, [r3, #1]
 8000c4a:	2b79      	cmp	r3, #121	; 0x79
 8000c4c:	d01e      	beq.n	8000c8c <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>
 8000c4e:	2b79      	cmp	r3, #121	; 0x79
 8000c50:	dc20      	bgt.n	8000c94 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
 8000c52:	2b59      	cmp	r3, #89	; 0x59
 8000c54:	d016      	beq.n	8000c84 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>
 8000c56:	2b59      	cmp	r3, #89	; 0x59
 8000c58:	dc1c      	bgt.n	8000c94 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
 8000c5a:	2b19      	cmp	r3, #25
 8000c5c:	d00e      	beq.n	8000c7c <HAL_CAN_RxFifo0MsgPendingCallback+0x90>
 8000c5e:	2b19      	cmp	r3, #25
 8000c60:	dc18      	bgt.n	8000c94 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d002      	beq.n	8000c6c <HAL_CAN_RxFifo0MsgPendingCallback+0x80>
 8000c66:	2b11      	cmp	r3, #17
 8000c68:	d004      	beq.n	8000c74 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>
 8000c6a:	e013      	b.n	8000c94 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
				case 0x01:
					MotorStatus_R = STATUS_SYSTEM_READY;
 8000c6c:	4b33      	ldr	r3, [pc, #204]	; (8000d3c <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	701a      	strb	r2, [r3, #0]
					break;
 8000c72:	e05a      	b.n	8000d2a <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x11:
					MotorStatus_R = STATUS_DC_ON;
 8000c74:	4b31      	ldr	r3, [pc, #196]	; (8000d3c <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000c76:	2202      	movs	r2, #2
 8000c78:	701a      	strb	r2, [r3, #0]
					break;
 8000c7a:	e056      	b.n	8000d2a <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x19:
					MotorStatus_R = STATUS_QUIT_DC_ON;
 8000c7c:	4b2f      	ldr	r3, [pc, #188]	; (8000d3c <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000c7e:	2203      	movs	r2, #3
 8000c80:	701a      	strb	r2, [r3, #0]
					break;
 8000c82:	e052      	b.n	8000d2a <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x59:
					MotorStatus_R = STATUS_INVERTER_ON;
 8000c84:	4b2d      	ldr	r3, [pc, #180]	; (8000d3c <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000c86:	2204      	movs	r2, #4
 8000c88:	701a      	strb	r2, [r3, #0]
					break;
 8000c8a:	e04e      	b.n	8000d2a <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x79:
					MotorStatus_R = STATUS_QUIT_INVERTER_ON;
 8000c8c:	4b2b      	ldr	r3, [pc, #172]	; (8000d3c <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000c8e:	2205      	movs	r2, #5
 8000c90:	701a      	strb	r2, [r3, #0]
					break;
 8000c92:	e04a      	b.n	8000d2a <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				default:
					MotorStatus_R = STATUS_UNKNOWN;
 8000c94:	4b29      	ldr	r3, [pc, #164]	; (8000d3c <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	701a      	strb	r2, [r3, #0]
 8000c9a:	e046      	b.n	8000d2a <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
			}
		}
	}
	else if (RxHeader.StdId == 0x284) {
 8000c9c:	4b25      	ldr	r3, [pc, #148]	; (8000d34 <HAL_CAN_RxFifo0MsgPendingCallback+0x148>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f5b3 7f21 	cmp.w	r3, #644	; 0x284
 8000ca4:	d141      	bne.n	8000d2a <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
		if ((RxData[1] >> 1) & 1) {
 8000ca6:	4b22      	ldr	r3, [pc, #136]	; (8000d30 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000ca8:	785b      	ldrb	r3, [r3, #1]
 8000caa:	085b      	lsrs	r3, r3, #1
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d003      	beq.n	8000cbe <HAL_CAN_RxFifo0MsgPendingCallback+0xd2>
			MotorStatus_L = STATUS_ERROR;
 8000cb6:	4b22      	ldr	r3, [pc, #136]	; (8000d40 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000cb8:	2207      	movs	r2, #7
 8000cba:	701a      	strb	r2, [r3, #0]
			return;
 8000cbc:	e035      	b.n	8000d2a <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
		} else if (RxData[1] >> 7 & 1){
 8000cbe:	4b1c      	ldr	r3, [pc, #112]	; (8000d30 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000cc0:	785b      	ldrb	r3, [r3, #1]
 8000cc2:	09db      	lsrs	r3, r3, #7
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d003      	beq.n	8000cd6 <HAL_CAN_RxFifo0MsgPendingCallback+0xea>
			MotorStatus_L = STATUS_DERATING;
 8000cce:	4b1c      	ldr	r3, [pc, #112]	; (8000d40 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000cd0:	2206      	movs	r2, #6
 8000cd2:	701a      	strb	r2, [r3, #0]
			return;
 8000cd4:	e029      	b.n	8000d2a <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
		} else {
			switch(RxData[1]) {
 8000cd6:	4b16      	ldr	r3, [pc, #88]	; (8000d30 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000cd8:	785b      	ldrb	r3, [r3, #1]
 8000cda:	2b79      	cmp	r3, #121	; 0x79
 8000cdc:	d01e      	beq.n	8000d1c <HAL_CAN_RxFifo0MsgPendingCallback+0x130>
 8000cde:	2b79      	cmp	r3, #121	; 0x79
 8000ce0:	dc20      	bgt.n	8000d24 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>
 8000ce2:	2b59      	cmp	r3, #89	; 0x59
 8000ce4:	d016      	beq.n	8000d14 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>
 8000ce6:	2b59      	cmp	r3, #89	; 0x59
 8000ce8:	dc1c      	bgt.n	8000d24 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>
 8000cea:	2b19      	cmp	r3, #25
 8000cec:	d00e      	beq.n	8000d0c <HAL_CAN_RxFifo0MsgPendingCallback+0x120>
 8000cee:	2b19      	cmp	r3, #25
 8000cf0:	dc18      	bgt.n	8000d24 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d002      	beq.n	8000cfc <HAL_CAN_RxFifo0MsgPendingCallback+0x110>
 8000cf6:	2b11      	cmp	r3, #17
 8000cf8:	d004      	beq.n	8000d04 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>
 8000cfa:	e013      	b.n	8000d24 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>
				case 0x01:
					MotorStatus_L = STATUS_SYSTEM_READY;
 8000cfc:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000cfe:	2201      	movs	r2, #1
 8000d00:	701a      	strb	r2, [r3, #0]
					break;
 8000d02:	e012      	b.n	8000d2a <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x11:
					MotorStatus_L = STATUS_DC_ON;
 8000d04:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000d06:	2202      	movs	r2, #2
 8000d08:	701a      	strb	r2, [r3, #0]
					break;
 8000d0a:	e00e      	b.n	8000d2a <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x19:
					MotorStatus_L = STATUS_QUIT_DC_ON;
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000d0e:	2203      	movs	r2, #3
 8000d10:	701a      	strb	r2, [r3, #0]
					break;
 8000d12:	e00a      	b.n	8000d2a <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x59:
					MotorStatus_L = STATUS_INVERTER_ON;
 8000d14:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000d16:	2204      	movs	r2, #4
 8000d18:	701a      	strb	r2, [r3, #0]
					break;
 8000d1a:	e006      	b.n	8000d2a <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x79:
					MotorStatus_L = STATUS_QUIT_INVERTER_ON;
 8000d1c:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000d1e:	2205      	movs	r2, #5
 8000d20:	701a      	strb	r2, [r3, #0]
					break;
 8000d22:	e002      	b.n	8000d2a <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				default:
					MotorStatus_L = STATUS_UNKNOWN;
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000208 	.word	0x20000208
 8000d34:	200001dc 	.word	0x200001dc
 8000d38:	20000154 	.word	0x20000154
 8000d3c:	20000214 	.word	0x20000214
 8000d40:	20000215 	.word	0x20000215

08000d44 <Start_FRT_controller>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_FRT_controller */
void Start_FRT_controller(void *argument)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(50);
 8000d4c:	2032      	movs	r0, #50	; 0x32
 8000d4e:	f003 fb2b 	bl	80043a8 <osDelay>
    if (HAL_GPIO_ReadPin(START_BTN_n_GPIO_Port, START_BTN_n_Pin) == 0) {
 8000d52:	2140      	movs	r1, #64	; 0x40
 8000d54:	4832      	ldr	r0, [pc, #200]	; (8000e20 <Start_FRT_controller+0xdc>)
 8000d56:	f002 f989 	bl	800306c <HAL_GPIO_ReadPin>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d102      	bne.n	8000d66 <Start_FRT_controller+0x22>
    	//Read Ready to Drive button
    	TsOn_n = 1;
 8000d60:	4b30      	ldr	r3, [pc, #192]	; (8000e24 <Start_FRT_controller+0xe0>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	701a      	strb	r2, [r3, #0]
    }
    if (RxData[1] == 0x79 && TsOn_n && BrakeOn) {
 8000d66:	4b30      	ldr	r3, [pc, #192]	; (8000e28 <Start_FRT_controller+0xe4>)
 8000d68:	785b      	ldrb	r3, [r3, #1]
 8000d6a:	2b79      	cmp	r3, #121	; 0x79
 8000d6c:	d11e      	bne.n	8000dac <Start_FRT_controller+0x68>
 8000d6e:	4b2d      	ldr	r3, [pc, #180]	; (8000e24 <Start_FRT_controller+0xe0>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d01a      	beq.n	8000dac <Start_FRT_controller+0x68>
 8000d76:	4b2d      	ldr	r3, [pc, #180]	; (8000e2c <Start_FRT_controller+0xe8>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d016      	beq.n	8000dac <Start_FRT_controller+0x68>
    	//Set ready to drive flag when all procedures are met
    	ReadyToDrive = 1;
 8000d7e:	4b2c      	ldr	r3, [pc, #176]	; (8000e30 <Start_FRT_controller+0xec>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	701a      	strb	r2, [r3, #0]
    	//Sound read to drive speaker for 2s

    	//HAL_GPIO_WritePin(RTDS_EN_GPIO_Port, RTDS_EN_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(RTDS_EN_GPIO_Port, RTDS_EN_Pin, GPIO_PIN_SET);
 8000d84:	2201      	movs	r2, #1
 8000d86:	2108      	movs	r1, #8
 8000d88:	4825      	ldr	r0, [pc, #148]	; (8000e20 <Start_FRT_controller+0xdc>)
 8000d8a:	f002 f987 	bl	800309c <HAL_GPIO_WritePin>
    	osDelay(2000);
 8000d8e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d92:	f003 fb09 	bl	80043a8 <osDelay>
    	//HAL_GPIO_WritePin(RTDS_EN_GPIO_Port, RTDS_EN_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RTDS_EN_GPIO_Port, RTDS_EN_Pin, GPIO_PIN_RESET);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2108      	movs	r1, #8
 8000d9a:	4821      	ldr	r0, [pc, #132]	; (8000e20 <Start_FRT_controller+0xdc>)
 8000d9c:	f002 f97e 	bl	800309c <HAL_GPIO_WritePin>

		//Terminate thread when vehicle is ready to drive
    	osThreadSuspend(controllerStartHandle);
 8000da0:	4b24      	ldr	r3, [pc, #144]	; (8000e34 <Start_FRT_controller+0xf0>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f003 fa97 	bl	80042d8 <osThreadSuspend>
 8000daa:	e038      	b.n	8000e1e <Start_FRT_controller+0xda>
    } else if ((RxData[1] & 1) && !TsOn_n) {
 8000dac:	4b1e      	ldr	r3, [pc, #120]	; (8000e28 <Start_FRT_controller+0xe4>)
 8000dae:	785b      	ldrb	r3, [r3, #1]
 8000db0:	f003 0301 	and.w	r3, r3, #1
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d019      	beq.n	8000dec <Start_FRT_controller+0xa8>
 8000db8:	4b1a      	ldr	r3, [pc, #104]	; (8000e24 <Start_FRT_controller+0xe0>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	f083 0301 	eor.w	r3, r3, #1
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d012      	beq.n	8000dec <Start_FRT_controller+0xa8>
    	//Blink the status LED when AMK is ready
		HAL_GPIO_WritePin(START_BTN_LED_EN_GPIO_Port, START_BTN_LED_EN_Pin, GPIO_PIN_SET);
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	2120      	movs	r1, #32
 8000dca:	481b      	ldr	r0, [pc, #108]	; (8000e38 <Start_FRT_controller+0xf4>)
 8000dcc:	f002 f966 	bl	800309c <HAL_GPIO_WritePin>
		osDelay(500);
 8000dd0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dd4:	f003 fae8 	bl	80043a8 <osDelay>
		HAL_GPIO_WritePin(START_BTN_LED_EN_GPIO_Port, START_BTN_LED_EN_Pin, GPIO_PIN_RESET);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2120      	movs	r1, #32
 8000ddc:	4816      	ldr	r0, [pc, #88]	; (8000e38 <Start_FRT_controller+0xf4>)
 8000dde:	f002 f95d 	bl	800309c <HAL_GPIO_WritePin>
		osDelay(450);
 8000de2:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8000de6:	f003 fadf 	bl	80043a8 <osDelay>
 8000dea:	e018      	b.n	8000e1e <Start_FRT_controller+0xda>
    } else if (TsOn_n) {
 8000dec:	4b0d      	ldr	r3, [pc, #52]	; (8000e24 <Start_FRT_controller+0xe0>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d0ab      	beq.n	8000d4c <Start_FRT_controller+0x8>
    	//Send CAN messages to close AIRs
    	while ((MotorStatus_R == STATUS_DERATING) && (MotorStatus_R == STATUS_DERATING)) {
 8000df4:	e006      	b.n	8000e04 <Start_FRT_controller+0xc0>
    		osDelay(50);
 8000df6:	2032      	movs	r0, #50	; 0x32
 8000df8:	f003 fad6 	bl	80043a8 <osDelay>
    		HAL_GPIO_TogglePin(START_BTN_LED_EN_GPIO_Port, START_BTN_LED_EN_Pin);
 8000dfc:	2120      	movs	r1, #32
 8000dfe:	480e      	ldr	r0, [pc, #56]	; (8000e38 <Start_FRT_controller+0xf4>)
 8000e00:	f002 f965 	bl	80030ce <HAL_GPIO_TogglePin>
    	while ((MotorStatus_R == STATUS_DERATING) && (MotorStatus_R == STATUS_DERATING)) {
 8000e04:	4b0d      	ldr	r3, [pc, #52]	; (8000e3c <Start_FRT_controller+0xf8>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2b06      	cmp	r3, #6
 8000e0a:	d103      	bne.n	8000e14 <Start_FRT_controller+0xd0>
 8000e0c:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <Start_FRT_controller+0xf8>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b06      	cmp	r3, #6
 8000e12:	d0f0      	beq.n	8000df6 <Start_FRT_controller+0xb2>
    	}
		HAL_GPIO_WritePin(START_BTN_LED_EN_GPIO_Port, START_BTN_LED_EN_Pin, GPIO_PIN_SET);
 8000e14:	2201      	movs	r2, #1
 8000e16:	2120      	movs	r1, #32
 8000e18:	4807      	ldr	r0, [pc, #28]	; (8000e38 <Start_FRT_controller+0xf4>)
 8000e1a:	f002 f93f 	bl	800309c <HAL_GPIO_WritePin>
    osDelay(50);
 8000e1e:	e795      	b.n	8000d4c <Start_FRT_controller+0x8>
 8000e20:	40021800 	.word	0x40021800
 8000e24:	20000217 	.word	0x20000217
 8000e28:	20000208 	.word	0x20000208
 8000e2c:	20000218 	.word	0x20000218
 8000e30:	20000219 	.word	0x20000219
 8000e34:	200001a4 	.word	0x200001a4
 8000e38:	40020000 	.word	0x40020000
 8000e3c:	20000214 	.word	0x20000214

08000e40 <Start_AMK>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_AMK */
void Start_AMK(void *argument)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_AMK */
  /* Infinite loop */
  for(;;)
  {

    osDelay(5);
 8000e48:	2005      	movs	r0, #5
 8000e4a:	f003 faad 	bl	80043a8 <osDelay>
    //Read accelerator position
    APPS1_VAL = APPS1_ADC_Percent();
 8000e4e:	f7ff fb75 	bl	800053c <APPS1_ADC_Percent>
 8000e52:	4603      	mov	r3, r0
 8000e54:	461a      	mov	r2, r3
 8000e56:	4b8a      	ldr	r3, [pc, #552]	; (8001080 <Start_AMK+0x240>)
 8000e58:	801a      	strh	r2, [r3, #0]
    APPS2_VAL = APPS2_ADC_Percent();
 8000e5a:	f7ff fb89 	bl	8000570 <APPS2_ADC_Percent>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	461a      	mov	r2, r3
 8000e62:	4b88      	ldr	r3, [pc, #544]	; (8001084 <Start_AMK+0x244>)
 8000e64:	801a      	strh	r2, [r3, #0]
    BPPS_VAL = BPPS_ADC_Percent();
 8000e66:	f7ff fb9d 	bl	80005a4 <BPPS_ADC_Percent>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4b86      	ldr	r3, [pc, #536]	; (8001088 <Start_AMK+0x248>)
 8000e70:	801a      	strh	r2, [r3, #0]

    APPS1_VAL = APPS1_VAL*500;
 8000e72:	4b83      	ldr	r3, [pc, #524]	; (8001080 <Start_AMK+0x240>)
 8000e74:	881b      	ldrh	r3, [r3, #0]
 8000e76:	461a      	mov	r2, r3
 8000e78:	0152      	lsls	r2, r2, #5
 8000e7a:	1ad2      	subs	r2, r2, r3
 8000e7c:	0092      	lsls	r2, r2, #2
 8000e7e:	4413      	add	r3, r2
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	b29a      	uxth	r2, r3
 8000e84:	4b7e      	ldr	r3, [pc, #504]	; (8001080 <Start_AMK+0x240>)
 8000e86:	801a      	strh	r2, [r3, #0]
    //Read brake pressure
    if (BPPS_VAL > 0) {
 8000e88:	4b7f      	ldr	r3, [pc, #508]	; (8001088 <Start_AMK+0x248>)
 8000e8a:	881b      	ldrh	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d008      	beq.n	8000ea2 <Start_AMK+0x62>
    	BrakeOn = 1;
 8000e90:	4b7e      	ldr	r3, [pc, #504]	; (800108c <Start_AMK+0x24c>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	701a      	strb	r2, [r3, #0]
    	HAL_GPIO_WritePin(BRAKE_LIGHT_EN_GPIO_Port, BRAKE_LIGHT_EN_Pin, GPIO_PIN_SET);
 8000e96:	2201      	movs	r2, #1
 8000e98:	2101      	movs	r1, #1
 8000e9a:	487d      	ldr	r0, [pc, #500]	; (8001090 <Start_AMK+0x250>)
 8000e9c:	f002 f8fe 	bl	800309c <HAL_GPIO_WritePin>
 8000ea0:	e007      	b.n	8000eb2 <Start_AMK+0x72>
    } else {
    	BrakeOn = 0;
 8000ea2:	4b7a      	ldr	r3, [pc, #488]	; (800108c <Start_AMK+0x24c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	701a      	strb	r2, [r3, #0]
    	HAL_GPIO_WritePin(BRAKE_LIGHT_EN_GPIO_Port, BRAKE_LIGHT_EN_Pin, GPIO_PIN_RESET);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2101      	movs	r1, #1
 8000eac:	4878      	ldr	r0, [pc, #480]	; (8001090 <Start_AMK+0x250>)
 8000eae:	f002 f8f5 	bl	800309c <HAL_GPIO_WritePin>
    }
    //Check if APPS and brake are both on
    if (BrakeOn && (APPS1_VAL > 25)) {
 8000eb2:	4b76      	ldr	r3, [pc, #472]	; (800108c <Start_AMK+0x24c>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d007      	beq.n	8000eca <Start_AMK+0x8a>
 8000eba:	4b71      	ldr	r3, [pc, #452]	; (8001080 <Start_AMK+0x240>)
 8000ebc:	881b      	ldrh	r3, [r3, #0]
 8000ebe:	2b19      	cmp	r3, #25
 8000ec0:	d903      	bls.n	8000eca <Start_AMK+0x8a>
    	PedalConflict = 1;
 8000ec2:	4b74      	ldr	r3, [pc, #464]	; (8001094 <Start_AMK+0x254>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	701a      	strb	r2, [r3, #0]
 8000ec8:	e00d      	b.n	8000ee6 <Start_AMK+0xa6>
    } else if ((BrakeOn == 0) && (APPS1_VAL < 5)) {
 8000eca:	4b70      	ldr	r3, [pc, #448]	; (800108c <Start_AMK+0x24c>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	f083 0301 	eor.w	r3, r3, #1
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d006      	beq.n	8000ee6 <Start_AMK+0xa6>
 8000ed8:	4b69      	ldr	r3, [pc, #420]	; (8001080 <Start_AMK+0x240>)
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	2b04      	cmp	r3, #4
 8000ede:	d802      	bhi.n	8000ee6 <Start_AMK+0xa6>
    	PedalConflict = 0;
 8000ee0:	4b6c      	ldr	r3, [pc, #432]	; (8001094 <Start_AMK+0x254>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	701a      	strb	r2, [r3, #0]
    }
    //Check for accelerator plausibility
    if (abs(APPS1_VAL - APPS2_VAL) >= 10){
 8000ee6:	4b66      	ldr	r3, [pc, #408]	; (8001080 <Start_AMK+0x240>)
 8000ee8:	881b      	ldrh	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	4b65      	ldr	r3, [pc, #404]	; (8001084 <Start_AMK+0x244>)
 8000eee:	881b      	ldrh	r3, [r3, #0]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	bfb8      	it	lt
 8000ef6:	425b      	neglt	r3, r3
 8000ef8:	2b09      	cmp	r3, #9
 8000efa:	dd02      	ble.n	8000f02 <Start_AMK+0xc2>
    	ReadyToDrive = 0;
 8000efc:	4b66      	ldr	r3, [pc, #408]	; (8001098 <Start_AMK+0x258>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	701a      	strb	r2, [r3, #0]
    }

	//HAL_GPIO_WritePin(BRAKE_LIGHT_EN_GPIO_Port, BRAKE_LIGHT_EN_Pin, GPIO_PIN_SET);
	//HAL_GPIO_WritePin(RTDS_EN_GPIO_Port, RTDS_EN_Pin, GPIO_PIN_SET);

    if ((MotorStatus_R == STATUS_SYSTEM_READY) && (MotorStatus_L == STATUS_SYSTEM_READY)) {
 8000f02:	4b66      	ldr	r3, [pc, #408]	; (800109c <Start_AMK+0x25c>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d10d      	bne.n	8000f26 <Start_AMK+0xe6>
 8000f0a:	4b65      	ldr	r3, [pc, #404]	; (80010a0 <Start_AMK+0x260>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d109      	bne.n	8000f26 <Start_AMK+0xe6>
    	//Perform AMK start-up sequence
    	AMK_TxData_R[1] = 0x02;
 8000f12:	4b64      	ldr	r3, [pc, #400]	; (80010a4 <Start_AMK+0x264>)
 8000f14:	2202      	movs	r2, #2
 8000f16:	705a      	strb	r2, [r3, #1]
    	AMK_TxData_L[1] = 0x02;
 8000f18:	4b63      	ldr	r3, [pc, #396]	; (80010a8 <Start_AMK+0x268>)
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	705a      	strb	r2, [r3, #1]
		ControlStatus = CONTROL_DC_ON;
 8000f1e:	4b63      	ldr	r3, [pc, #396]	; (80010ac <Start_AMK+0x26c>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	701a      	strb	r2, [r3, #0]
 8000f24:	e0ea      	b.n	80010fc <Start_AMK+0x2bc>
    } else if ((MotorStatus_R == STATUS_QUIT_DC_ON) && (MotorStatus_L == STATUS_QUIT_DC_ON)) {
 8000f26:	4b5d      	ldr	r3, [pc, #372]	; (800109c <Start_AMK+0x25c>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b03      	cmp	r3, #3
 8000f2c:	d117      	bne.n	8000f5e <Start_AMK+0x11e>
 8000f2e:	4b5c      	ldr	r3, [pc, #368]	; (80010a0 <Start_AMK+0x260>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	2b03      	cmp	r3, #3
 8000f34:	d113      	bne.n	8000f5e <Start_AMK+0x11e>
		AMK_TxData_L[1] = 0x07;
 8000f36:	4b5c      	ldr	r3, [pc, #368]	; (80010a8 <Start_AMK+0x268>)
 8000f38:	2207      	movs	r2, #7
 8000f3a:	705a      	strb	r2, [r3, #1]
		AMK_TxData_R[1] = 0x07;
 8000f3c:	4b59      	ldr	r3, [pc, #356]	; (80010a4 <Start_AMK+0x264>)
 8000f3e:	2207      	movs	r2, #7
 8000f40:	705a      	strb	r2, [r3, #1]
		memset(&AMK_TxData_R[2],0x00, 4*sizeof(uint8_t));
 8000f42:	2204      	movs	r2, #4
 8000f44:	2100      	movs	r1, #0
 8000f46:	485a      	ldr	r0, [pc, #360]	; (80010b0 <Start_AMK+0x270>)
 8000f48:	f006 f820 	bl	8006f8c <memset>
		memset(&AMK_TxData_L[2],0x00, 4*sizeof(uint8_t));
 8000f4c:	2204      	movs	r2, #4
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4858      	ldr	r0, [pc, #352]	; (80010b4 <Start_AMK+0x274>)
 8000f52:	f006 f81b 	bl	8006f8c <memset>
		ControlStatus = CONTROL_ENABLE;
 8000f56:	4b55      	ldr	r3, [pc, #340]	; (80010ac <Start_AMK+0x26c>)
 8000f58:	2202      	movs	r2, #2
 8000f5a:	701a      	strb	r2, [r3, #0]
 8000f5c:	e0ce      	b.n	80010fc <Start_AMK+0x2bc>
    } else if ((MotorStatus_R == STATUS_INVERTER_ON) && (MotorStatus_L == STATUS_INVERTER_ON)) {
 8000f5e:	4b4f      	ldr	r3, [pc, #316]	; (800109c <Start_AMK+0x25c>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b04      	cmp	r3, #4
 8000f64:	d11c      	bne.n	8000fa0 <Start_AMK+0x160>
 8000f66:	4b4e      	ldr	r3, [pc, #312]	; (80010a0 <Start_AMK+0x260>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b04      	cmp	r3, #4
 8000f6c:	d118      	bne.n	8000fa0 <Start_AMK+0x160>
    	osThreadResume(controllerStartHandle);
 8000f6e:	4b52      	ldr	r3, [pc, #328]	; (80010b8 <Start_AMK+0x278>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f003 f9e4 	bl	8004340 <osThreadResume>
    	AMK_TxData_L[1] = 0x07;
 8000f78:	4b4b      	ldr	r3, [pc, #300]	; (80010a8 <Start_AMK+0x268>)
 8000f7a:	2207      	movs	r2, #7
 8000f7c:	705a      	strb	r2, [r3, #1]
    	AMK_TxData_R[1] = 0x07;
 8000f7e:	4b49      	ldr	r3, [pc, #292]	; (80010a4 <Start_AMK+0x264>)
 8000f80:	2207      	movs	r2, #7
 8000f82:	705a      	strb	r2, [r3, #1]
    	memset(&AMK_TxData_R[2],0x00, 4*sizeof(uint8_t));
 8000f84:	2204      	movs	r2, #4
 8000f86:	2100      	movs	r1, #0
 8000f88:	4849      	ldr	r0, [pc, #292]	; (80010b0 <Start_AMK+0x270>)
 8000f8a:	f005 ffff 	bl	8006f8c <memset>
    	memset(&AMK_TxData_L[2],0x00, 4*sizeof(uint8_t));
 8000f8e:	2204      	movs	r2, #4
 8000f90:	2100      	movs	r1, #0
 8000f92:	4848      	ldr	r0, [pc, #288]	; (80010b4 <Start_AMK+0x274>)
 8000f94:	f005 fffa 	bl	8006f8c <memset>
    	ControlStatus = CONTROL_INVERTER_ON;
 8000f98:	4b44      	ldr	r3, [pc, #272]	; (80010ac <Start_AMK+0x26c>)
 8000f9a:	2203      	movs	r2, #3
 8000f9c:	701a      	strb	r2, [r3, #0]
 8000f9e:	e0ad      	b.n	80010fc <Start_AMK+0x2bc>
    } else if ((MotorStatus_R == STATUS_QUIT_INVERTER_ON) && (MotorStatus_L == STATUS_QUIT_INVERTER_ON) && TsOn_n) {
 8000fa0:	4b3e      	ldr	r3, [pc, #248]	; (800109c <Start_AMK+0x25c>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b05      	cmp	r3, #5
 8000fa6:	d14e      	bne.n	8001046 <Start_AMK+0x206>
 8000fa8:	4b3d      	ldr	r3, [pc, #244]	; (80010a0 <Start_AMK+0x260>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b05      	cmp	r3, #5
 8000fae:	d14a      	bne.n	8001046 <Start_AMK+0x206>
 8000fb0:	4b42      	ldr	r3, [pc, #264]	; (80010bc <Start_AMK+0x27c>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d046      	beq.n	8001046 <Start_AMK+0x206>
    	if (ReadyToDrive && (PedalConflict == 0)) {
 8000fb8:	4b37      	ldr	r3, [pc, #220]	; (8001098 <Start_AMK+0x258>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d02e      	beq.n	800101e <Start_AMK+0x1de>
 8000fc0:	4b34      	ldr	r3, [pc, #208]	; (8001094 <Start_AMK+0x254>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	f083 0301 	eor.w	r3, r3, #1
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d027      	beq.n	800101e <Start_AMK+0x1de>
    		AMK_TxData_R[1] = 0x07;
 8000fce:	4b35      	ldr	r3, [pc, #212]	; (80010a4 <Start_AMK+0x264>)
 8000fd0:	2207      	movs	r2, #7
 8000fd2:	705a      	strb	r2, [r3, #1]
			AMK_TxData_L[1] = 0x07;
 8000fd4:	4b34      	ldr	r3, [pc, #208]	; (80010a8 <Start_AMK+0x268>)
 8000fd6:	2207      	movs	r2, #7
 8000fd8:	705a      	strb	r2, [r3, #1]

			AMK_TxData_R[2] = APPS1_VAL & 0xFF;
 8000fda:	4b29      	ldr	r3, [pc, #164]	; (8001080 <Start_AMK+0x240>)
 8000fdc:	881b      	ldrh	r3, [r3, #0]
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	4b30      	ldr	r3, [pc, #192]	; (80010a4 <Start_AMK+0x264>)
 8000fe2:	709a      	strb	r2, [r3, #2]
			AMK_TxData_R[3] = (APPS1_VAL >> 8) & 0xFF;
 8000fe4:	4b26      	ldr	r3, [pc, #152]	; (8001080 <Start_AMK+0x240>)
 8000fe6:	881b      	ldrh	r3, [r3, #0]
 8000fe8:	0a1b      	lsrs	r3, r3, #8
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	4b2d      	ldr	r3, [pc, #180]	; (80010a4 <Start_AMK+0x264>)
 8000ff0:	70da      	strb	r2, [r3, #3]
//			AMK_TxData_R[2] = 0xFF;
//			AMK_TxData_R[3] = 0x01;
			AMK_TxData_R[4] = 0x32; //set positive torque request to 50
 8000ff2:	4b2c      	ldr	r3, [pc, #176]	; (80010a4 <Start_AMK+0x264>)
 8000ff4:	2232      	movs	r2, #50	; 0x32
 8000ff6:	711a      	strb	r2, [r3, #4]

			AMK_TxData_L[2] = APPS1_VAL & 0xFF;
 8000ff8:	4b21      	ldr	r3, [pc, #132]	; (8001080 <Start_AMK+0x240>)
 8000ffa:	881b      	ldrh	r3, [r3, #0]
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	4b2a      	ldr	r3, [pc, #168]	; (80010a8 <Start_AMK+0x268>)
 8001000:	709a      	strb	r2, [r3, #2]
			AMK_TxData_L[3] = (APPS1_VAL >> 8) & 0xFF;
 8001002:	4b1f      	ldr	r3, [pc, #124]	; (8001080 <Start_AMK+0x240>)
 8001004:	881b      	ldrh	r3, [r3, #0]
 8001006:	0a1b      	lsrs	r3, r3, #8
 8001008:	b29b      	uxth	r3, r3
 800100a:	b2da      	uxtb	r2, r3
 800100c:	4b26      	ldr	r3, [pc, #152]	; (80010a8 <Start_AMK+0x268>)
 800100e:	70da      	strb	r2, [r3, #3]
//			AMK_TxData_L[2] = 0xFF;
//			AMK_TxData_L[3] = 0x01;
			AMK_TxData_L[4] = 0x32;
 8001010:	4b25      	ldr	r3, [pc, #148]	; (80010a8 <Start_AMK+0x268>)
 8001012:	2232      	movs	r2, #50	; 0x32
 8001014:	711a      	strb	r2, [r3, #4]
			ControlStatus = CONTROL_RUNNING;
 8001016:	4b25      	ldr	r3, [pc, #148]	; (80010ac <Start_AMK+0x26c>)
 8001018:	2207      	movs	r2, #7
 800101a:	701a      	strb	r2, [r3, #0]
    	if (ReadyToDrive && (PedalConflict == 0)) {
 800101c:	e06e      	b.n	80010fc <Start_AMK+0x2bc>
    	} else {
    		AMK_TxData_R[1] = 0x07;
 800101e:	4b21      	ldr	r3, [pc, #132]	; (80010a4 <Start_AMK+0x264>)
 8001020:	2207      	movs	r2, #7
 8001022:	705a      	strb	r2, [r3, #1]
    		AMK_TxData_L[1] = 0x07;
 8001024:	4b20      	ldr	r3, [pc, #128]	; (80010a8 <Start_AMK+0x268>)
 8001026:	2207      	movs	r2, #7
 8001028:	705a      	strb	r2, [r3, #1]
    		memset(&AMK_TxData_R[2],0x00, 4*sizeof(uint8_t));
 800102a:	2204      	movs	r2, #4
 800102c:	2100      	movs	r1, #0
 800102e:	4820      	ldr	r0, [pc, #128]	; (80010b0 <Start_AMK+0x270>)
 8001030:	f005 ffac 	bl	8006f8c <memset>
    		memset(&AMK_TxData_L[2],0x00, 4*sizeof(uint8_t));
 8001034:	2204      	movs	r2, #4
 8001036:	2100      	movs	r1, #0
 8001038:	481e      	ldr	r0, [pc, #120]	; (80010b4 <Start_AMK+0x274>)
 800103a:	f005 ffa7 	bl	8006f8c <memset>
    		ControlStatus = CONTROL_TS_READY;
 800103e:	4b1b      	ldr	r3, [pc, #108]	; (80010ac <Start_AMK+0x26c>)
 8001040:	2204      	movs	r2, #4
 8001042:	701a      	strb	r2, [r3, #0]
    	if (ReadyToDrive && (PedalConflict == 0)) {
 8001044:	e05a      	b.n	80010fc <Start_AMK+0x2bc>
    	}
    } else if (MotorStatus_R == STATUS_ERROR) {
 8001046:	4b15      	ldr	r3, [pc, #84]	; (800109c <Start_AMK+0x25c>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b07      	cmp	r3, #7
 800104c:	d109      	bne.n	8001062 <Start_AMK+0x222>
    	ReadyToDrive = 0;
 800104e:	4b12      	ldr	r3, [pc, #72]	; (8001098 <Start_AMK+0x258>)
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
    	AMK_TxData_R[1] = 0x08;
 8001054:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <Start_AMK+0x264>)
 8001056:	2208      	movs	r2, #8
 8001058:	705a      	strb	r2, [r3, #1]
		ControlStatus = CONTROL_ERROR_RESET_RIGHT;
 800105a:	4b14      	ldr	r3, [pc, #80]	; (80010ac <Start_AMK+0x26c>)
 800105c:	2205      	movs	r2, #5
 800105e:	701a      	strb	r2, [r3, #0]
 8001060:	e04c      	b.n	80010fc <Start_AMK+0x2bc>
    } else if (MotorStatus_L == STATUS_ERROR) {
 8001062:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <Start_AMK+0x260>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b07      	cmp	r3, #7
 8001068:	d12a      	bne.n	80010c0 <Start_AMK+0x280>
    	ReadyToDrive = 0;
 800106a:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <Start_AMK+0x258>)
 800106c:	2200      	movs	r2, #0
 800106e:	701a      	strb	r2, [r3, #0]
    	AMK_TxData_L[1] = 0x08;
 8001070:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <Start_AMK+0x268>)
 8001072:	2208      	movs	r2, #8
 8001074:	705a      	strb	r2, [r3, #1]
		ControlStatus = CONTROL_ERROR_RESET_LEFT;
 8001076:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <Start_AMK+0x26c>)
 8001078:	2206      	movs	r2, #6
 800107a:	701a      	strb	r2, [r3, #0]
 800107c:	e03e      	b.n	80010fc <Start_AMK+0x2bc>
 800107e:	bf00      	nop
 8001080:	2000021c 	.word	0x2000021c
 8001084:	2000021e 	.word	0x2000021e
 8001088:	20000220 	.word	0x20000220
 800108c:	20000218 	.word	0x20000218
 8001090:	40021800 	.word	0x40021800
 8001094:	2000021a 	.word	0x2000021a
 8001098:	20000219 	.word	0x20000219
 800109c:	20000214 	.word	0x20000214
 80010a0:	20000215 	.word	0x20000215
 80010a4:	200001f8 	.word	0x200001f8
 80010a8:	20000200 	.word	0x20000200
 80010ac:	20000216 	.word	0x20000216
 80010b0:	200001fa 	.word	0x200001fa
 80010b4:	20000202 	.word	0x20000202
 80010b8:	200001a4 	.word	0x200001a4
 80010bc:	20000217 	.word	0x20000217
    } else if ((MotorStatus_R == STATUS_DERATING) && (MotorStatus_L == STATUS_DERATING)) {
 80010c0:	4b1a      	ldr	r3, [pc, #104]	; (800112c <Start_AMK+0x2ec>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b06      	cmp	r3, #6
 80010c6:	d103      	bne.n	80010d0 <Start_AMK+0x290>
 80010c8:	4b19      	ldr	r3, [pc, #100]	; (8001130 <Start_AMK+0x2f0>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b06      	cmp	r3, #6
 80010ce:	d015      	beq.n	80010fc <Start_AMK+0x2bc>
    	//TsOn_n = 0;
    } else {
    	ReadyToDrive = 0;
 80010d0:	4b18      	ldr	r3, [pc, #96]	; (8001134 <Start_AMK+0x2f4>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	701a      	strb	r2, [r3, #0]
    	AMK_TxData_L[1] = 0x07;
 80010d6:	4b18      	ldr	r3, [pc, #96]	; (8001138 <Start_AMK+0x2f8>)
 80010d8:	2207      	movs	r2, #7
 80010da:	705a      	strb	r2, [r3, #1]
		AMK_TxData_R[1] = 0x07;
 80010dc:	4b17      	ldr	r3, [pc, #92]	; (800113c <Start_AMK+0x2fc>)
 80010de:	2207      	movs	r2, #7
 80010e0:	705a      	strb	r2, [r3, #1]
		memset(&AMK_TxData_R[2],0x00, 4*sizeof(uint8_t));
 80010e2:	2204      	movs	r2, #4
 80010e4:	2100      	movs	r1, #0
 80010e6:	4816      	ldr	r0, [pc, #88]	; (8001140 <Start_AMK+0x300>)
 80010e8:	f005 ff50 	bl	8006f8c <memset>
		memset(&AMK_TxData_L[2],0x00, 4*sizeof(uint8_t));
 80010ec:	2204      	movs	r2, #4
 80010ee:	2100      	movs	r1, #0
 80010f0:	4814      	ldr	r0, [pc, #80]	; (8001144 <Start_AMK+0x304>)
 80010f2:	f005 ff4b 	bl	8006f8c <memset>
    	ControlStatus = CONTROL_UNKNOWN;
 80010f6:	4b14      	ldr	r3, [pc, #80]	; (8001148 <Start_AMK+0x308>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	701a      	strb	r2, [r3, #0]
    }

	HAL_CAN_AddTxMessage(&hcan1, &AMK_TxHeader_R, AMK_TxData_R, &TxMailbox);
 80010fc:	4b13      	ldr	r3, [pc, #76]	; (800114c <Start_AMK+0x30c>)
 80010fe:	4a0f      	ldr	r2, [pc, #60]	; (800113c <Start_AMK+0x2fc>)
 8001100:	4913      	ldr	r1, [pc, #76]	; (8001150 <Start_AMK+0x310>)
 8001102:	4814      	ldr	r0, [pc, #80]	; (8001154 <Start_AMK+0x314>)
 8001104:	f001 f8ec 	bl	80022e0 <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&hcan1, &AMK_TxHeader_L, AMK_TxData_L, &TxMailbox);
 8001108:	4b10      	ldr	r3, [pc, #64]	; (800114c <Start_AMK+0x30c>)
 800110a:	4a0b      	ldr	r2, [pc, #44]	; (8001138 <Start_AMK+0x2f8>)
 800110c:	4912      	ldr	r1, [pc, #72]	; (8001158 <Start_AMK+0x318>)
 800110e:	4811      	ldr	r0, [pc, #68]	; (8001154 <Start_AMK+0x314>)
 8001110:	f001 f8e6 	bl	80022e0 <HAL_CAN_AddTxMessage>
	memset(&AMK_TxData_R[0],0x00, 8*sizeof(uint8_t));
 8001114:	2208      	movs	r2, #8
 8001116:	2100      	movs	r1, #0
 8001118:	4808      	ldr	r0, [pc, #32]	; (800113c <Start_AMK+0x2fc>)
 800111a:	f005 ff37 	bl	8006f8c <memset>
	memset(&AMK_TxData_L[0],0x00, 8*sizeof(uint8_t));
 800111e:	2208      	movs	r2, #8
 8001120:	2100      	movs	r1, #0
 8001122:	4805      	ldr	r0, [pc, #20]	; (8001138 <Start_AMK+0x2f8>)
 8001124:	f005 ff32 	bl	8006f8c <memset>
    osDelay(5);
 8001128:	e68e      	b.n	8000e48 <Start_AMK+0x8>
 800112a:	bf00      	nop
 800112c:	20000214 	.word	0x20000214
 8001130:	20000215 	.word	0x20000215
 8001134:	20000219 	.word	0x20000219
 8001138:	20000200 	.word	0x20000200
 800113c:	200001f8 	.word	0x200001f8
 8001140:	200001fa 	.word	0x200001fa
 8001144:	20000202 	.word	0x20000202
 8001148:	20000216 	.word	0x20000216
 800114c:	20000210 	.word	0x20000210
 8001150:	200001ac 	.word	0x200001ac
 8001154:	20000154 	.word	0x20000154
 8001158:	200001c4 	.word	0x200001c4

0800115c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a04      	ldr	r2, [pc, #16]	; (800117c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d101      	bne.n	8001172 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800116e:	f000 fa3d 	bl	80015ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40001000 	.word	0x40001000

08001180 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001184:	b672      	cpsid	i
}
 8001186:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 1);
 8001188:	2201      	movs	r2, #1
 800118a:	2108      	movs	r1, #8
 800118c:	4801      	ldr	r0, [pc, #4]	; (8001194 <Error_Handler+0x14>)
 800118e:	f001 ff85 	bl	800309c <HAL_GPIO_WritePin>
  while (1)
 8001192:	e7fe      	b.n	8001192 <Error_Handler+0x12>
 8001194:	40020000 	.word	0x40020000

08001198 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800119e:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <HAL_MspInit+0x4c>)
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	4a10      	ldr	r2, [pc, #64]	; (80011e4 <HAL_MspInit+0x4c>)
 80011a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a8:	6413      	str	r3, [r2, #64]	; 0x40
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <HAL_MspInit+0x4c>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b2:	607b      	str	r3, [r7, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b6:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <HAL_MspInit+0x4c>)
 80011b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ba:	4a0a      	ldr	r2, [pc, #40]	; (80011e4 <HAL_MspInit+0x4c>)
 80011bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c0:	6453      	str	r3, [r2, #68]	; 0x44
 80011c2:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <HAL_MspInit+0x4c>)
 80011c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011ce:	2200      	movs	r2, #0
 80011d0:	210f      	movs	r1, #15
 80011d2:	f06f 0001 	mvn.w	r0, #1
 80011d6:	f001 fd73 	bl	8002cc0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40023800 	.word	0x40023800

080011e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08e      	sub	sp, #56	; 0x38
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a3f      	ldr	r2, [pc, #252]	; (8001304 <HAL_ADC_MspInit+0x11c>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d124      	bne.n	8001254 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800120a:	4b3f      	ldr	r3, [pc, #252]	; (8001308 <HAL_ADC_MspInit+0x120>)
 800120c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120e:	4a3e      	ldr	r2, [pc, #248]	; (8001308 <HAL_ADC_MspInit+0x120>)
 8001210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001214:	6453      	str	r3, [r2, #68]	; 0x44
 8001216:	4b3c      	ldr	r3, [pc, #240]	; (8001308 <HAL_ADC_MspInit+0x120>)
 8001218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800121e:	623b      	str	r3, [r7, #32]
 8001220:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001222:	4b39      	ldr	r3, [pc, #228]	; (8001308 <HAL_ADC_MspInit+0x120>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a38      	ldr	r2, [pc, #224]	; (8001308 <HAL_ADC_MspInit+0x120>)
 8001228:	f043 0304 	orr.w	r3, r3, #4
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b36      	ldr	r3, [pc, #216]	; (8001308 <HAL_ADC_MspInit+0x120>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0304 	and.w	r3, r3, #4
 8001236:	61fb      	str	r3, [r7, #28]
 8001238:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = APPS1_Pin;
 800123a:	2301      	movs	r3, #1
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800123e:	2303      	movs	r3, #3
 8001240:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(APPS1_GPIO_Port, &GPIO_InitStruct);
 8001246:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124a:	4619      	mov	r1, r3
 800124c:	482f      	ldr	r0, [pc, #188]	; (800130c <HAL_ADC_MspInit+0x124>)
 800124e:	f001 fd61 	bl	8002d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001252:	e052      	b.n	80012fa <HAL_ADC_MspInit+0x112>
  else if(hadc->Instance==ADC2)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a2d      	ldr	r2, [pc, #180]	; (8001310 <HAL_ADC_MspInit+0x128>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d124      	bne.n	80012a8 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800125e:	4b2a      	ldr	r3, [pc, #168]	; (8001308 <HAL_ADC_MspInit+0x120>)
 8001260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001262:	4a29      	ldr	r2, [pc, #164]	; (8001308 <HAL_ADC_MspInit+0x120>)
 8001264:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001268:	6453      	str	r3, [r2, #68]	; 0x44
 800126a:	4b27      	ldr	r3, [pc, #156]	; (8001308 <HAL_ADC_MspInit+0x120>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001272:	61bb      	str	r3, [r7, #24]
 8001274:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001276:	4b24      	ldr	r3, [pc, #144]	; (8001308 <HAL_ADC_MspInit+0x120>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a23      	ldr	r2, [pc, #140]	; (8001308 <HAL_ADC_MspInit+0x120>)
 800127c:	f043 0304 	orr.w	r3, r3, #4
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b21      	ldr	r3, [pc, #132]	; (8001308 <HAL_ADC_MspInit+0x120>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0304 	and.w	r3, r3, #4
 800128a:	617b      	str	r3, [r7, #20]
 800128c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = APPS2_Pin;
 800128e:	2302      	movs	r3, #2
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001292:	2303      	movs	r3, #3
 8001294:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(APPS2_GPIO_Port, &GPIO_InitStruct);
 800129a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129e:	4619      	mov	r1, r3
 80012a0:	481a      	ldr	r0, [pc, #104]	; (800130c <HAL_ADC_MspInit+0x124>)
 80012a2:	f001 fd37 	bl	8002d14 <HAL_GPIO_Init>
}
 80012a6:	e028      	b.n	80012fa <HAL_ADC_MspInit+0x112>
  else if(hadc->Instance==ADC3)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a19      	ldr	r2, [pc, #100]	; (8001314 <HAL_ADC_MspInit+0x12c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d123      	bne.n	80012fa <HAL_ADC_MspInit+0x112>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80012b2:	4b15      	ldr	r3, [pc, #84]	; (8001308 <HAL_ADC_MspInit+0x120>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b6:	4a14      	ldr	r2, [pc, #80]	; (8001308 <HAL_ADC_MspInit+0x120>)
 80012b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012bc:	6453      	str	r3, [r2, #68]	; 0x44
 80012be:	4b12      	ldr	r3, [pc, #72]	; (8001308 <HAL_ADC_MspInit+0x120>)
 80012c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ca:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <HAL_ADC_MspInit+0x120>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a0e      	ldr	r2, [pc, #56]	; (8001308 <HAL_ADC_MspInit+0x120>)
 80012d0:	f043 0304 	orr.w	r3, r3, #4
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <HAL_ADC_MspInit+0x120>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f003 0304 	and.w	r3, r3, #4
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEERING_ANGLE_SENSOR_Pin|BPPS_BUFFERED_Pin;
 80012e2:	230c      	movs	r3, #12
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012e6:	2303      	movs	r3, #3
 80012e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f2:	4619      	mov	r1, r3
 80012f4:	4805      	ldr	r0, [pc, #20]	; (800130c <HAL_ADC_MspInit+0x124>)
 80012f6:	f001 fd0d 	bl	8002d14 <HAL_GPIO_Init>
}
 80012fa:	bf00      	nop
 80012fc:	3738      	adds	r7, #56	; 0x38
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40012000 	.word	0x40012000
 8001308:	40023800 	.word	0x40023800
 800130c:	40020800 	.word	0x40020800
 8001310:	40012100 	.word	0x40012100
 8001314:	40012200 	.word	0x40012200

08001318 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08c      	sub	sp, #48	; 0x30
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f107 031c 	add.w	r3, r7, #28
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a33      	ldr	r2, [pc, #204]	; (8001404 <HAL_CAN_MspInit+0xec>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d131      	bne.n	800139e <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800133a:	4b33      	ldr	r3, [pc, #204]	; (8001408 <HAL_CAN_MspInit+0xf0>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	4a32      	ldr	r2, [pc, #200]	; (8001408 <HAL_CAN_MspInit+0xf0>)
 8001340:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001344:	6413      	str	r3, [r2, #64]	; 0x40
 8001346:	4b30      	ldr	r3, [pc, #192]	; (8001408 <HAL_CAN_MspInit+0xf0>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800134e:	61bb      	str	r3, [r7, #24]
 8001350:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001352:	4b2d      	ldr	r3, [pc, #180]	; (8001408 <HAL_CAN_MspInit+0xf0>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	4a2c      	ldr	r2, [pc, #176]	; (8001408 <HAL_CAN_MspInit+0xf0>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	6313      	str	r3, [r2, #48]	; 0x30
 800135e:	4b2a      	ldr	r3, [pc, #168]	; (8001408 <HAL_CAN_MspInit+0xf0>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	617b      	str	r3, [r7, #20]
 8001368:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800136a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800136e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001370:	2302      	movs	r3, #2
 8001372:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001378:	2303      	movs	r3, #3
 800137a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800137c:	2309      	movs	r3, #9
 800137e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001380:	f107 031c 	add.w	r3, r7, #28
 8001384:	4619      	mov	r1, r3
 8001386:	4821      	ldr	r0, [pc, #132]	; (800140c <HAL_CAN_MspInit+0xf4>)
 8001388:	f001 fcc4 	bl	8002d14 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800138c:	2200      	movs	r2, #0
 800138e:	2105      	movs	r1, #5
 8001390:	2014      	movs	r0, #20
 8001392:	f001 fc95 	bl	8002cc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001396:	2014      	movs	r0, #20
 8001398:	f001 fcae 	bl	8002cf8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }

}
 800139c:	e02d      	b.n	80013fa <HAL_CAN_MspInit+0xe2>
  else if(hcan->Instance==CAN3)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a1b      	ldr	r2, [pc, #108]	; (8001410 <HAL_CAN_MspInit+0xf8>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d128      	bne.n	80013fa <HAL_CAN_MspInit+0xe2>
    __HAL_RCC_CAN3_CLK_ENABLE();
 80013a8:	4b17      	ldr	r3, [pc, #92]	; (8001408 <HAL_CAN_MspInit+0xf0>)
 80013aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ac:	4a16      	ldr	r2, [pc, #88]	; (8001408 <HAL_CAN_MspInit+0xf0>)
 80013ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013b2:	6413      	str	r3, [r2, #64]	; 0x40
 80013b4:	4b14      	ldr	r3, [pc, #80]	; (8001408 <HAL_CAN_MspInit+0xf0>)
 80013b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013bc:	613b      	str	r3, [r7, #16]
 80013be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c0:	4b11      	ldr	r3, [pc, #68]	; (8001408 <HAL_CAN_MspInit+0xf0>)
 80013c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c4:	4a10      	ldr	r2, [pc, #64]	; (8001408 <HAL_CAN_MspInit+0xf0>)
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	6313      	str	r3, [r2, #48]	; 0x30
 80013cc:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <HAL_CAN_MspInit+0xf0>)
 80013ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 80013d8:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80013dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	2302      	movs	r3, #2
 80013e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e6:	2303      	movs	r3, #3
 80013e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 80013ea:	230b      	movs	r3, #11
 80013ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ee:	f107 031c 	add.w	r3, r7, #28
 80013f2:	4619      	mov	r1, r3
 80013f4:	4805      	ldr	r0, [pc, #20]	; (800140c <HAL_CAN_MspInit+0xf4>)
 80013f6:	f001 fc8d 	bl	8002d14 <HAL_GPIO_Init>
}
 80013fa:	bf00      	nop
 80013fc:	3730      	adds	r7, #48	; 0x30
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40006400 	.word	0x40006400
 8001408:	40023800 	.word	0x40023800
 800140c:	40020000 	.word	0x40020000
 8001410:	40003400 	.word	0x40003400

08001414 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08e      	sub	sp, #56	; 0x38
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800141c:	2300      	movs	r3, #0
 800141e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001420:	2300      	movs	r3, #0
 8001422:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001424:	4b33      	ldr	r3, [pc, #204]	; (80014f4 <HAL_InitTick+0xe0>)
 8001426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001428:	4a32      	ldr	r2, [pc, #200]	; (80014f4 <HAL_InitTick+0xe0>)
 800142a:	f043 0310 	orr.w	r3, r3, #16
 800142e:	6413      	str	r3, [r2, #64]	; 0x40
 8001430:	4b30      	ldr	r3, [pc, #192]	; (80014f4 <HAL_InitTick+0xe0>)
 8001432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001434:	f003 0310 	and.w	r3, r3, #16
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800143c:	f107 0210 	add.w	r2, r7, #16
 8001440:	f107 0314 	add.w	r3, r7, #20
 8001444:	4611      	mov	r1, r2
 8001446:	4618      	mov	r0, r3
 8001448:	f002 fb1c 	bl	8003a84 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800144c:	6a3b      	ldr	r3, [r7, #32]
 800144e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001452:	2b00      	cmp	r3, #0
 8001454:	d103      	bne.n	800145e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001456:	f002 fb01 	bl	8003a5c <HAL_RCC_GetPCLK1Freq>
 800145a:	6378      	str	r0, [r7, #52]	; 0x34
 800145c:	e004      	b.n	8001468 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800145e:	f002 fafd 	bl	8003a5c <HAL_RCC_GetPCLK1Freq>
 8001462:	4603      	mov	r3, r0
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800146a:	4a23      	ldr	r2, [pc, #140]	; (80014f8 <HAL_InitTick+0xe4>)
 800146c:	fba2 2303 	umull	r2, r3, r2, r3
 8001470:	0c9b      	lsrs	r3, r3, #18
 8001472:	3b01      	subs	r3, #1
 8001474:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001476:	4b21      	ldr	r3, [pc, #132]	; (80014fc <HAL_InitTick+0xe8>)
 8001478:	4a21      	ldr	r2, [pc, #132]	; (8001500 <HAL_InitTick+0xec>)
 800147a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800147c:	4b1f      	ldr	r3, [pc, #124]	; (80014fc <HAL_InitTick+0xe8>)
 800147e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001482:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001484:	4a1d      	ldr	r2, [pc, #116]	; (80014fc <HAL_InitTick+0xe8>)
 8001486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001488:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800148a:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <HAL_InitTick+0xe8>)
 800148c:	2200      	movs	r2, #0
 800148e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001490:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <HAL_InitTick+0xe8>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001496:	4b19      	ldr	r3, [pc, #100]	; (80014fc <HAL_InitTick+0xe8>)
 8001498:	2200      	movs	r2, #0
 800149a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800149c:	4817      	ldr	r0, [pc, #92]	; (80014fc <HAL_InitTick+0xe8>)
 800149e:	f002 fb23 	bl	8003ae8 <HAL_TIM_Base_Init>
 80014a2:	4603      	mov	r3, r0
 80014a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80014a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d11b      	bne.n	80014e8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80014b0:	4812      	ldr	r0, [pc, #72]	; (80014fc <HAL_InitTick+0xe8>)
 80014b2:	f002 fb7b 	bl	8003bac <HAL_TIM_Base_Start_IT>
 80014b6:	4603      	mov	r3, r0
 80014b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80014bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d111      	bne.n	80014e8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80014c4:	2036      	movs	r0, #54	; 0x36
 80014c6:	f001 fc17 	bl	8002cf8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2b0f      	cmp	r3, #15
 80014ce:	d808      	bhi.n	80014e2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80014d0:	2200      	movs	r2, #0
 80014d2:	6879      	ldr	r1, [r7, #4]
 80014d4:	2036      	movs	r0, #54	; 0x36
 80014d6:	f001 fbf3 	bl	8002cc0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014da:	4a0a      	ldr	r2, [pc, #40]	; (8001504 <HAL_InitTick+0xf0>)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6013      	str	r3, [r2, #0]
 80014e0:	e002      	b.n	80014e8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80014e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3738      	adds	r7, #56	; 0x38
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40023800 	.word	0x40023800
 80014f8:	431bde83 	.word	0x431bde83
 80014fc:	20000224 	.word	0x20000224
 8001500:	40001000 	.word	0x40001000
 8001504:	20000004 	.word	0x20000004

08001508 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800150c:	e7fe      	b.n	800150c <NMI_Handler+0x4>

0800150e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001512:	e7fe      	b.n	8001512 <HardFault_Handler+0x4>

08001514 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001518:	e7fe      	b.n	8001518 <MemManage_Handler+0x4>

0800151a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800151e:	e7fe      	b.n	800151e <BusFault_Handler+0x4>

08001520 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001524:	e7fe      	b.n	8001524 <UsageFault_Handler+0x4>

08001526 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001526:	b480      	push	{r7}
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001538:	4802      	ldr	r0, [pc, #8]	; (8001544 <CAN1_RX0_IRQHandler+0x10>)
 800153a:	f001 f8d9 	bl	80026f0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000154 	.word	0x20000154

08001548 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800154c:	4802      	ldr	r0, [pc, #8]	; (8001558 <TIM6_DAC_IRQHandler+0x10>)
 800154e:	f002 fba5 	bl	8003c9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000224 	.word	0x20000224

0800155c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <SystemInit+0x20>)
 8001562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001566:	4a05      	ldr	r2, [pc, #20]	; (800157c <SystemInit+0x20>)
 8001568:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800156c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001580:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001584:	480d      	ldr	r0, [pc, #52]	; (80015bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001586:	490e      	ldr	r1, [pc, #56]	; (80015c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001588:	4a0e      	ldr	r2, [pc, #56]	; (80015c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800158a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800158c:	e002      	b.n	8001594 <LoopCopyDataInit>

0800158e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800158e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001590:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001592:	3304      	adds	r3, #4

08001594 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001594:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001596:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001598:	d3f9      	bcc.n	800158e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800159a:	4a0b      	ldr	r2, [pc, #44]	; (80015c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800159c:	4c0b      	ldr	r4, [pc, #44]	; (80015cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800159e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a0:	e001      	b.n	80015a6 <LoopFillZerobss>

080015a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a4:	3204      	adds	r2, #4

080015a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015a8:	d3fb      	bcc.n	80015a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015aa:	f7ff ffd7 	bl	800155c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015ae:	f005 fd4b 	bl	8007048 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015b2:	f7ff f811 	bl	80005d8 <main>
  bx  lr    
 80015b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015b8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80015bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015c0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80015c4:	08007220 	.word	0x08007220
  ldr r2, =_sbss
 80015c8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80015cc:	20004d94 	.word	0x20004d94

080015d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015d0:	e7fe      	b.n	80015d0 <ADC_IRQHandler>

080015d2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d6:	2003      	movs	r0, #3
 80015d8:	f001 fb67 	bl	8002caa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015dc:	200f      	movs	r0, #15
 80015de:	f7ff ff19 	bl	8001414 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015e2:	f7ff fdd9 	bl	8001198 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015e6:	2300      	movs	r3, #0
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	bd80      	pop	{r7, pc}

080015ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <HAL_IncTick+0x20>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	461a      	mov	r2, r3
 80015f6:	4b06      	ldr	r3, [pc, #24]	; (8001610 <HAL_IncTick+0x24>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4413      	add	r3, r2
 80015fc:	4a04      	ldr	r2, [pc, #16]	; (8001610 <HAL_IncTick+0x24>)
 80015fe:	6013      	str	r3, [r2, #0]
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	20000008 	.word	0x20000008
 8001610:	20000270 	.word	0x20000270

08001614 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  return uwTick;
 8001618:	4b03      	ldr	r3, [pc, #12]	; (8001628 <HAL_GetTick+0x14>)
 800161a:	681b      	ldr	r3, [r3, #0]
}
 800161c:	4618      	mov	r0, r3
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	20000270 	.word	0x20000270

0800162c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001634:	2300      	movs	r3, #0
 8001636:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d101      	bne.n	8001642 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e031      	b.n	80016a6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	2b00      	cmp	r3, #0
 8001648:	d109      	bne.n	800165e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff fdcc 	bl	80011e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	f003 0310 	and.w	r3, r3, #16
 8001666:	2b00      	cmp	r3, #0
 8001668:	d116      	bne.n	8001698 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800166e:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <HAL_ADC_Init+0x84>)
 8001670:	4013      	ands	r3, r2
 8001672:	f043 0202 	orr.w	r2, r3, #2
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 fb0a 	bl	8001c94 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	f023 0303 	bic.w	r3, r3, #3
 800168e:	f043 0201 	orr.w	r2, r3, #1
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	641a      	str	r2, [r3, #64]	; 0x40
 8001696:	e001      	b.n	800169c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80016a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	ffffeefd 	.word	0xffffeefd

080016b4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d101      	bne.n	80016ce <HAL_ADC_Start+0x1a>
 80016ca:	2302      	movs	r3, #2
 80016cc:	e0ad      	b.n	800182a <HAL_ADC_Start+0x176>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2201      	movs	r2, #1
 80016d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d018      	beq.n	8001716 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	689a      	ldr	r2, [r3, #8]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f042 0201 	orr.w	r2, r2, #1
 80016f2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80016f4:	4b50      	ldr	r3, [pc, #320]	; (8001838 <HAL_ADC_Start+0x184>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a50      	ldr	r2, [pc, #320]	; (800183c <HAL_ADC_Start+0x188>)
 80016fa:	fba2 2303 	umull	r2, r3, r2, r3
 80016fe:	0c9a      	lsrs	r2, r3, #18
 8001700:	4613      	mov	r3, r2
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	4413      	add	r3, r2
 8001706:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001708:	e002      	b.n	8001710 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	3b01      	subs	r3, #1
 800170e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1f9      	bne.n	800170a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	2b01      	cmp	r3, #1
 8001722:	d175      	bne.n	8001810 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001728:	4b45      	ldr	r3, [pc, #276]	; (8001840 <HAL_ADC_Start+0x18c>)
 800172a:	4013      	ands	r3, r2
 800172c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800173e:	2b00      	cmp	r3, #0
 8001740:	d007      	beq.n	8001752 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800174a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800175a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800175e:	d106      	bne.n	800176e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001764:	f023 0206 	bic.w	r2, r3, #6
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	645a      	str	r2, [r3, #68]	; 0x44
 800176c:	e002      	b.n	8001774 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001784:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001786:	4b2f      	ldr	r3, [pc, #188]	; (8001844 <HAL_ADC_Start+0x190>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f003 031f 	and.w	r3, r3, #31
 800178e:	2b00      	cmp	r3, #0
 8001790:	d10f      	bne.n	80017b2 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d143      	bne.n	8001828 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	689a      	ldr	r2, [r3, #8]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	e03a      	b.n	8001828 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a24      	ldr	r2, [pc, #144]	; (8001848 <HAL_ADC_Start+0x194>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d10e      	bne.n	80017da <HAL_ADC_Start+0x126>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d107      	bne.n	80017da <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	689a      	ldr	r2, [r3, #8]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80017d8:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80017da:	4b1a      	ldr	r3, [pc, #104]	; (8001844 <HAL_ADC_Start+0x190>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f003 0310 	and.w	r3, r3, #16
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d120      	bne.n	8001828 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a18      	ldr	r2, [pc, #96]	; (800184c <HAL_ADC_Start+0x198>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d11b      	bne.n	8001828 <HAL_ADC_Start+0x174>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d114      	bne.n	8001828 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800180c:	609a      	str	r2, [r3, #8]
 800180e:	e00b      	b.n	8001828 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001814:	f043 0210 	orr.w	r2, r3, #16
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001820:	f043 0201 	orr.w	r2, r3, #1
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3714      	adds	r7, #20
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	20000000 	.word	0x20000000
 800183c:	431bde83 	.word	0x431bde83
 8001840:	fffff8fe 	.word	0xfffff8fe
 8001844:	40012300 	.word	0x40012300
 8001848:	40012000 	.word	0x40012000
 800184c:	40012200 	.word	0x40012200

08001850 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800185e:	2b01      	cmp	r3, #1
 8001860:	d101      	bne.n	8001866 <HAL_ADC_Stop+0x16>
 8001862:	2302      	movs	r3, #2
 8001864:	e01f      	b.n	80018a6 <HAL_ADC_Stop+0x56>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2201      	movs	r2, #1
 800186a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	689a      	ldr	r2, [r3, #8]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f022 0201 	bic.w	r2, r2, #1
 800187c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	2b00      	cmp	r3, #0
 800188a:	d107      	bne.n	800189c <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001890:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <HAL_ADC_Stop+0x64>)
 8001892:	4013      	ands	r3, r2
 8001894:	f043 0201 	orr.w	r2, r3, #1
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	ffffeefe 	.word	0xffffeefe

080018b8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018d4:	d113      	bne.n	80018fe <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80018e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018e4:	d10b      	bne.n	80018fe <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	f043 0220 	orr.w	r2, r3, #32
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e063      	b.n	80019c6 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80018fe:	f7ff fe89 	bl	8001614 <HAL_GetTick>
 8001902:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001904:	e021      	b.n	800194a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800190c:	d01d      	beq.n	800194a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d007      	beq.n	8001924 <HAL_ADC_PollForConversion+0x6c>
 8001914:	f7ff fe7e 	bl	8001614 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	429a      	cmp	r2, r3
 8001922:	d212      	bcs.n	800194a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b02      	cmp	r3, #2
 8001930:	d00b      	beq.n	800194a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	f043 0204 	orr.w	r2, r3, #4
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e03d      	b.n	80019c6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	2b02      	cmp	r3, #2
 8001956:	d1d6      	bne.n	8001906 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f06f 0212 	mvn.w	r2, #18
 8001960:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d123      	bne.n	80019c4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001980:	2b00      	cmp	r3, #0
 8001982:	d11f      	bne.n	80019c4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800198e:	2b00      	cmp	r3, #0
 8001990:	d006      	beq.n	80019a0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800199c:	2b00      	cmp	r3, #0
 800199e:	d111      	bne.n	80019c4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d105      	bne.n	80019c4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019bc:	f043 0201 	orr.w	r2, r3, #1
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80019ce:	b480      	push	{r7}
 80019d0:	b083      	sub	sp, #12
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80019dc:	4618      	mov	r0, r3
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d101      	bne.n	8001a04 <HAL_ADC_ConfigChannel+0x1c>
 8001a00:	2302      	movs	r3, #2
 8001a02:	e136      	b.n	8001c72 <HAL_ADC_ConfigChannel+0x28a>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2b09      	cmp	r3, #9
 8001a12:	d93a      	bls.n	8001a8a <HAL_ADC_ConfigChannel+0xa2>
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a1c:	d035      	beq.n	8001a8a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68d9      	ldr	r1, [r3, #12]
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	4413      	add	r3, r2
 8001a32:	3b1e      	subs	r3, #30
 8001a34:	2207      	movs	r2, #7
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43da      	mvns	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	400a      	ands	r2, r1
 8001a42:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a8d      	ldr	r2, [pc, #564]	; (8001c80 <HAL_ADC_ConfigChannel+0x298>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d10a      	bne.n	8001a64 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	68d9      	ldr	r1, [r3, #12]
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	061a      	lsls	r2, r3, #24
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a62:	e035      	b.n	8001ad0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	68d9      	ldr	r1, [r3, #12]
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	689a      	ldr	r2, [r3, #8]
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	4618      	mov	r0, r3
 8001a76:	4603      	mov	r3, r0
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	4403      	add	r3, r0
 8001a7c:	3b1e      	subs	r3, #30
 8001a7e:	409a      	lsls	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	430a      	orrs	r2, r1
 8001a86:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a88:	e022      	b.n	8001ad0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	6919      	ldr	r1, [r3, #16]
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	461a      	mov	r2, r3
 8001a98:	4613      	mov	r3, r2
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	4413      	add	r3, r2
 8001a9e:	2207      	movs	r2, #7
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43da      	mvns	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	400a      	ands	r2, r1
 8001aac:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	6919      	ldr	r1, [r3, #16]
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	4618      	mov	r0, r3
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	4403      	add	r3, r0
 8001ac6:	409a      	lsls	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	430a      	orrs	r2, r1
 8001ace:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b06      	cmp	r3, #6
 8001ad6:	d824      	bhi.n	8001b22 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685a      	ldr	r2, [r3, #4]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	4413      	add	r3, r2
 8001ae8:	3b05      	subs	r3, #5
 8001aea:	221f      	movs	r2, #31
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43da      	mvns	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	400a      	ands	r2, r1
 8001af8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	4618      	mov	r0, r3
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4413      	add	r3, r2
 8001b12:	3b05      	subs	r3, #5
 8001b14:	fa00 f203 	lsl.w	r2, r0, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	635a      	str	r2, [r3, #52]	; 0x34
 8001b20:	e04c      	b.n	8001bbc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b0c      	cmp	r3, #12
 8001b28:	d824      	bhi.n	8001b74 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	4613      	mov	r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	4413      	add	r3, r2
 8001b3a:	3b23      	subs	r3, #35	; 0x23
 8001b3c:	221f      	movs	r2, #31
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43da      	mvns	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	400a      	ands	r2, r1
 8001b4a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	4618      	mov	r0, r3
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685a      	ldr	r2, [r3, #4]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	4413      	add	r3, r2
 8001b64:	3b23      	subs	r3, #35	; 0x23
 8001b66:	fa00 f203 	lsl.w	r2, r0, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	631a      	str	r2, [r3, #48]	; 0x30
 8001b72:	e023      	b.n	8001bbc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685a      	ldr	r2, [r3, #4]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	4413      	add	r3, r2
 8001b84:	3b41      	subs	r3, #65	; 0x41
 8001b86:	221f      	movs	r2, #31
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	43da      	mvns	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	400a      	ands	r2, r1
 8001b94:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	4413      	add	r3, r2
 8001bae:	3b41      	subs	r3, #65	; 0x41
 8001bb0:	fa00 f203 	lsl.w	r2, r0, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a30      	ldr	r2, [pc, #192]	; (8001c84 <HAL_ADC_ConfigChannel+0x29c>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d10a      	bne.n	8001bdc <HAL_ADC_ConfigChannel+0x1f4>
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001bce:	d105      	bne.n	8001bdc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001bd0:	4b2d      	ldr	r3, [pc, #180]	; (8001c88 <HAL_ADC_ConfigChannel+0x2a0>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	4a2c      	ldr	r2, [pc, #176]	; (8001c88 <HAL_ADC_ConfigChannel+0x2a0>)
 8001bd6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001bda:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a28      	ldr	r2, [pc, #160]	; (8001c84 <HAL_ADC_ConfigChannel+0x29c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d10f      	bne.n	8001c06 <HAL_ADC_ConfigChannel+0x21e>
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2b12      	cmp	r3, #18
 8001bec:	d10b      	bne.n	8001c06 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001bee:	4b26      	ldr	r3, [pc, #152]	; (8001c88 <HAL_ADC_ConfigChannel+0x2a0>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	4a25      	ldr	r2, [pc, #148]	; (8001c88 <HAL_ADC_ConfigChannel+0x2a0>)
 8001bf4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001bf8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001bfa:	4b23      	ldr	r3, [pc, #140]	; (8001c88 <HAL_ADC_ConfigChannel+0x2a0>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	4a22      	ldr	r2, [pc, #136]	; (8001c88 <HAL_ADC_ConfigChannel+0x2a0>)
 8001c00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c04:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a1e      	ldr	r2, [pc, #120]	; (8001c84 <HAL_ADC_ConfigChannel+0x29c>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d12b      	bne.n	8001c68 <HAL_ADC_ConfigChannel+0x280>
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a1a      	ldr	r2, [pc, #104]	; (8001c80 <HAL_ADC_ConfigChannel+0x298>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d003      	beq.n	8001c22 <HAL_ADC_ConfigChannel+0x23a>
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2b11      	cmp	r3, #17
 8001c20:	d122      	bne.n	8001c68 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001c22:	4b19      	ldr	r3, [pc, #100]	; (8001c88 <HAL_ADC_ConfigChannel+0x2a0>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	4a18      	ldr	r2, [pc, #96]	; (8001c88 <HAL_ADC_ConfigChannel+0x2a0>)
 8001c28:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001c2c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001c2e:	4b16      	ldr	r3, [pc, #88]	; (8001c88 <HAL_ADC_ConfigChannel+0x2a0>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	4a15      	ldr	r2, [pc, #84]	; (8001c88 <HAL_ADC_ConfigChannel+0x2a0>)
 8001c34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c38:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a10      	ldr	r2, [pc, #64]	; (8001c80 <HAL_ADC_ConfigChannel+0x298>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d111      	bne.n	8001c68 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001c44:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <HAL_ADC_ConfigChannel+0x2a4>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a11      	ldr	r2, [pc, #68]	; (8001c90 <HAL_ADC_ConfigChannel+0x2a8>)
 8001c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4e:	0c9a      	lsrs	r2, r3, #18
 8001c50:	4613      	mov	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4413      	add	r3, r2
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001c5a:	e002      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1f9      	bne.n	8001c5c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3714      	adds	r7, #20
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	10000012 	.word	0x10000012
 8001c84:	40012000 	.word	0x40012000
 8001c88:	40012300 	.word	0x40012300
 8001c8c:	20000000 	.word	0x20000000
 8001c90:	431bde83 	.word	0x431bde83

08001c94 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001c9c:	4b78      	ldr	r3, [pc, #480]	; (8001e80 <ADC_Init+0x1ec>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	4a77      	ldr	r2, [pc, #476]	; (8001e80 <ADC_Init+0x1ec>)
 8001ca2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001ca6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001ca8:	4b75      	ldr	r3, [pc, #468]	; (8001e80 <ADC_Init+0x1ec>)
 8001caa:	685a      	ldr	r2, [r3, #4]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	4973      	ldr	r1, [pc, #460]	; (8001e80 <ADC_Init+0x1ec>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cc4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6859      	ldr	r1, [r3, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	021a      	lsls	r2, r3, #8
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ce8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6859      	ldr	r1, [r3, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	689a      	ldr	r2, [r3, #8]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6899      	ldr	r1, [r3, #8]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68da      	ldr	r2, [r3, #12]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d22:	4a58      	ldr	r2, [pc, #352]	; (8001e84 <ADC_Init+0x1f0>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d022      	beq.n	8001d6e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	689a      	ldr	r2, [r3, #8]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d36:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	6899      	ldr	r1, [r3, #8]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	430a      	orrs	r2, r1
 8001d48:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6899      	ldr	r1, [r3, #8]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	e00f      	b.n	8001d8e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d8c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 0202 	bic.w	r2, r2, #2
 8001d9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6899      	ldr	r1, [r3, #8]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	005a      	lsls	r2, r3, #1
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	430a      	orrs	r2, r1
 8001db0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d01b      	beq.n	8001df4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	685a      	ldr	r2, [r3, #4]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001dda:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6859      	ldr	r1, [r3, #4]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de6:	3b01      	subs	r3, #1
 8001de8:	035a      	lsls	r2, r3, #13
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	430a      	orrs	r2, r1
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	e007      	b.n	8001e04 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	685a      	ldr	r2, [r3, #4]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e02:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e12:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	051a      	lsls	r2, r3, #20
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	430a      	orrs	r2, r1
 8001e28:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6899      	ldr	r1, [r3, #8]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e46:	025a      	lsls	r2, r3, #9
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	689a      	ldr	r2, [r3, #8]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6899      	ldr	r1, [r3, #8]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	029a      	lsls	r2, r3, #10
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	430a      	orrs	r2, r1
 8001e72:	609a      	str	r2, [r3, #8]
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	40012300 	.word	0x40012300
 8001e84:	0f000001 	.word	0x0f000001

08001e88 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e0ed      	b.n	8002076 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d102      	bne.n	8001eac <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff fa36 	bl	8001318 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f042 0201 	orr.w	r2, r2, #1
 8001eba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ebc:	f7ff fbaa 	bl	8001614 <HAL_GetTick>
 8001ec0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ec2:	e012      	b.n	8001eea <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ec4:	f7ff fba6 	bl	8001614 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b0a      	cmp	r3, #10
 8001ed0:	d90b      	bls.n	8001eea <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2205      	movs	r2, #5
 8001ee2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e0c5      	b.n	8002076 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0e5      	beq.n	8001ec4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 0202 	bic.w	r2, r2, #2
 8001f06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f08:	f7ff fb84 	bl	8001614 <HAL_GetTick>
 8001f0c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f0e:	e012      	b.n	8001f36 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f10:	f7ff fb80 	bl	8001614 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b0a      	cmp	r3, #10
 8001f1c:	d90b      	bls.n	8001f36 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f22:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2205      	movs	r2, #5
 8001f2e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e09f      	b.n	8002076 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1e5      	bne.n	8001f10 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	7e1b      	ldrb	r3, [r3, #24]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d108      	bne.n	8001f5e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	e007      	b.n	8001f6e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	7e5b      	ldrb	r3, [r3, #25]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d108      	bne.n	8001f88 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	e007      	b.n	8001f98 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f96:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	7e9b      	ldrb	r3, [r3, #26]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d108      	bne.n	8001fb2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f042 0220 	orr.w	r2, r2, #32
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	e007      	b.n	8001fc2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 0220 	bic.w	r2, r2, #32
 8001fc0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	7edb      	ldrb	r3, [r3, #27]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d108      	bne.n	8001fdc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 0210 	bic.w	r2, r2, #16
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	e007      	b.n	8001fec <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f042 0210 	orr.w	r2, r2, #16
 8001fea:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	7f1b      	ldrb	r3, [r3, #28]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d108      	bne.n	8002006 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f042 0208 	orr.w	r2, r2, #8
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	e007      	b.n	8002016 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 0208 	bic.w	r2, r2, #8
 8002014:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	7f5b      	ldrb	r3, [r3, #29]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d108      	bne.n	8002030 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f042 0204 	orr.w	r2, r2, #4
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	e007      	b.n	8002040 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 0204 	bic.w	r2, r2, #4
 800203e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	431a      	orrs	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	431a      	orrs	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	695b      	ldr	r3, [r3, #20]
 8002054:	ea42 0103 	orr.w	r1, r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	1e5a      	subs	r2, r3, #1
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	430a      	orrs	r2, r1
 8002064:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
	...

08002080 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002080:	b480      	push	{r7}
 8002082:	b087      	sub	sp, #28
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002096:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002098:	7cfb      	ldrb	r3, [r7, #19]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d003      	beq.n	80020a6 <HAL_CAN_ConfigFilter+0x26>
 800209e:	7cfb      	ldrb	r3, [r7, #19]
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	f040 80c7 	bne.w	8002234 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a69      	ldr	r2, [pc, #420]	; (8002250 <HAL_CAN_ConfigFilter+0x1d0>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d001      	beq.n	80020b4 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 80020b0:	4b68      	ldr	r3, [pc, #416]	; (8002254 <HAL_CAN_ConfigFilter+0x1d4>)
 80020b2:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80020ba:	f043 0201 	orr.w	r2, r3, #1
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	4a63      	ldr	r2, [pc, #396]	; (8002254 <HAL_CAN_ConfigFilter+0x1d4>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d111      	bne.n	80020f0 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80020d2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e6:	021b      	lsls	r3, r3, #8
 80020e8:	431a      	orrs	r2, r3
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	f003 031f 	and.w	r3, r3, #31
 80020f8:	2201      	movs	r2, #1
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	43db      	mvns	r3, r3
 800210a:	401a      	ands	r2, r3
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d123      	bne.n	8002162 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	43db      	mvns	r3, r3
 8002124:	401a      	ands	r2, r3
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800213c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	3248      	adds	r2, #72	; 0x48
 8002142:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002156:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002158:	6979      	ldr	r1, [r7, #20]
 800215a:	3348      	adds	r3, #72	; 0x48
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	440b      	add	r3, r1
 8002160:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d122      	bne.n	80021b0 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	431a      	orrs	r2, r3
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800218a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	3248      	adds	r2, #72	; 0x48
 8002190:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80021a4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80021a6:	6979      	ldr	r1, [r7, #20]
 80021a8:	3348      	adds	r3, #72	; 0x48
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	440b      	add	r3, r1
 80021ae:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d109      	bne.n	80021cc <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	43db      	mvns	r3, r3
 80021c2:	401a      	ands	r2, r3
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80021ca:	e007      	b.n	80021dc <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	431a      	orrs	r2, r3
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d109      	bne.n	80021f8 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	43db      	mvns	r3, r3
 80021ee:	401a      	ands	r2, r3
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80021f6:	e007      	b.n	8002208 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	431a      	orrs	r2, r3
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d107      	bne.n	8002220 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	431a      	orrs	r2, r3
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002226:	f023 0201 	bic.w	r2, r3, #1
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002230:	2300      	movs	r3, #0
 8002232:	e006      	b.n	8002242 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002238:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
  }
}
 8002242:	4618      	mov	r0, r3
 8002244:	371c      	adds	r7, #28
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	40003400 	.word	0x40003400
 8002254:	40006400 	.word	0x40006400

08002258 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002266:	b2db      	uxtb	r3, r3
 8002268:	2b01      	cmp	r3, #1
 800226a:	d12e      	bne.n	80022ca <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2202      	movs	r2, #2
 8002270:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f022 0201 	bic.w	r2, r2, #1
 8002282:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002284:	f7ff f9c6 	bl	8001614 <HAL_GetTick>
 8002288:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800228a:	e012      	b.n	80022b2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800228c:	f7ff f9c2 	bl	8001614 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b0a      	cmp	r3, #10
 8002298:	d90b      	bls.n	80022b2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2205      	movs	r2, #5
 80022aa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e012      	b.n	80022d8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1e5      	bne.n	800228c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80022c6:	2300      	movs	r3, #0
 80022c8:	e006      	b.n	80022d8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ce:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
  }
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3710      	adds	r7, #16
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b089      	sub	sp, #36	; 0x24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
 80022ec:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022f4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80022fe:	7ffb      	ldrb	r3, [r7, #31]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d003      	beq.n	800230c <HAL_CAN_AddTxMessage+0x2c>
 8002304:	7ffb      	ldrb	r3, [r7, #31]
 8002306:	2b02      	cmp	r3, #2
 8002308:	f040 80ad 	bne.w	8002466 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10a      	bne.n	800232c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800231c:	2b00      	cmp	r3, #0
 800231e:	d105      	bne.n	800232c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002326:	2b00      	cmp	r3, #0
 8002328:	f000 8095 	beq.w	8002456 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	0e1b      	lsrs	r3, r3, #24
 8002330:	f003 0303 	and.w	r3, r3, #3
 8002334:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002336:	2201      	movs	r2, #1
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	409a      	lsls	r2, r3
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d10d      	bne.n	8002364 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002352:	68f9      	ldr	r1, [r7, #12]
 8002354:	6809      	ldr	r1, [r1, #0]
 8002356:	431a      	orrs	r2, r3
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	3318      	adds	r3, #24
 800235c:	011b      	lsls	r3, r3, #4
 800235e:	440b      	add	r3, r1
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	e00f      	b.n	8002384 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800236e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002374:	68f9      	ldr	r1, [r7, #12]
 8002376:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002378:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	3318      	adds	r3, #24
 800237e:	011b      	lsls	r3, r3, #4
 8002380:	440b      	add	r3, r1
 8002382:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6819      	ldr	r1, [r3, #0]
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	691a      	ldr	r2, [r3, #16]
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	3318      	adds	r3, #24
 8002390:	011b      	lsls	r3, r3, #4
 8002392:	440b      	add	r3, r1
 8002394:	3304      	adds	r3, #4
 8002396:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	7d1b      	ldrb	r3, [r3, #20]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d111      	bne.n	80023c4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	3318      	adds	r3, #24
 80023a8:	011b      	lsls	r3, r3, #4
 80023aa:	4413      	add	r3, r2
 80023ac:	3304      	adds	r3, #4
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	6811      	ldr	r1, [r2, #0]
 80023b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	3318      	adds	r3, #24
 80023bc:	011b      	lsls	r3, r3, #4
 80023be:	440b      	add	r3, r1
 80023c0:	3304      	adds	r3, #4
 80023c2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3307      	adds	r3, #7
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	061a      	lsls	r2, r3, #24
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	3306      	adds	r3, #6
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	041b      	lsls	r3, r3, #16
 80023d4:	431a      	orrs	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3305      	adds	r3, #5
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	021b      	lsls	r3, r3, #8
 80023de:	4313      	orrs	r3, r2
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	3204      	adds	r2, #4
 80023e4:	7812      	ldrb	r2, [r2, #0]
 80023e6:	4610      	mov	r0, r2
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	6811      	ldr	r1, [r2, #0]
 80023ec:	ea43 0200 	orr.w	r2, r3, r0
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	011b      	lsls	r3, r3, #4
 80023f4:	440b      	add	r3, r1
 80023f6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80023fa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	3303      	adds	r3, #3
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	061a      	lsls	r2, r3, #24
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3302      	adds	r3, #2
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	041b      	lsls	r3, r3, #16
 800240c:	431a      	orrs	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	3301      	adds	r3, #1
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	021b      	lsls	r3, r3, #8
 8002416:	4313      	orrs	r3, r2
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	7812      	ldrb	r2, [r2, #0]
 800241c:	4610      	mov	r0, r2
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	6811      	ldr	r1, [r2, #0]
 8002422:	ea43 0200 	orr.w	r2, r3, r0
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	011b      	lsls	r3, r3, #4
 800242a:	440b      	add	r3, r1
 800242c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002430:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	3318      	adds	r3, #24
 800243a:	011b      	lsls	r3, r3, #4
 800243c:	4413      	add	r3, r2
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	6811      	ldr	r1, [r2, #0]
 8002444:	f043 0201 	orr.w	r2, r3, #1
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	3318      	adds	r3, #24
 800244c:	011b      	lsls	r3, r3, #4
 800244e:	440b      	add	r3, r1
 8002450:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002452:	2300      	movs	r3, #0
 8002454:	e00e      	b.n	8002474 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e006      	b.n	8002474 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
  }
}
 8002474:	4618      	mov	r0, r3
 8002476:	3724      	adds	r7, #36	; 0x24
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002480:	b480      	push	{r7}
 8002482:	b087      	sub	sp, #28
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
 800248c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002494:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002496:	7dfb      	ldrb	r3, [r7, #23]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d003      	beq.n	80024a4 <HAL_CAN_GetRxMessage+0x24>
 800249c:	7dfb      	ldrb	r3, [r7, #23]
 800249e:	2b02      	cmp	r3, #2
 80024a0:	f040 80f3 	bne.w	800268a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10e      	bne.n	80024c8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	f003 0303 	and.w	r3, r3, #3
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d116      	bne.n	80024e6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e0e7      	b.n	8002698 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	f003 0303 	and.w	r3, r3, #3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d107      	bne.n	80024e6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e0d8      	b.n	8002698 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	331b      	adds	r3, #27
 80024ee:	011b      	lsls	r3, r3, #4
 80024f0:	4413      	add	r3, r2
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0204 	and.w	r2, r3, #4
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10c      	bne.n	800251e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	331b      	adds	r3, #27
 800250c:	011b      	lsls	r3, r3, #4
 800250e:	4413      	add	r3, r2
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	0d5b      	lsrs	r3, r3, #21
 8002514:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	e00b      	b.n	8002536 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	331b      	adds	r3, #27
 8002526:	011b      	lsls	r3, r3, #4
 8002528:	4413      	add	r3, r2
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	08db      	lsrs	r3, r3, #3
 800252e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	331b      	adds	r3, #27
 800253e:	011b      	lsls	r3, r3, #4
 8002540:	4413      	add	r3, r2
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0202 	and.w	r2, r3, #2
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	331b      	adds	r3, #27
 8002554:	011b      	lsls	r3, r3, #4
 8002556:	4413      	add	r3, r2
 8002558:	3304      	adds	r3, #4
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 020f 	and.w	r2, r3, #15
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	331b      	adds	r3, #27
 800256c:	011b      	lsls	r3, r3, #4
 800256e:	4413      	add	r3, r2
 8002570:	3304      	adds	r3, #4
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	0a1b      	lsrs	r3, r3, #8
 8002576:	b2da      	uxtb	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	331b      	adds	r3, #27
 8002584:	011b      	lsls	r3, r3, #4
 8002586:	4413      	add	r3, r2
 8002588:	3304      	adds	r3, #4
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	0c1b      	lsrs	r3, r3, #16
 800258e:	b29a      	uxth	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	011b      	lsls	r3, r3, #4
 800259c:	4413      	add	r3, r2
 800259e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	011b      	lsls	r3, r3, #4
 80025b2:	4413      	add	r3, r2
 80025b4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	0a1a      	lsrs	r2, r3, #8
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	3301      	adds	r3, #1
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	011b      	lsls	r3, r3, #4
 80025cc:	4413      	add	r3, r2
 80025ce:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	0c1a      	lsrs	r2, r3, #16
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	3302      	adds	r3, #2
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	011b      	lsls	r3, r3, #4
 80025e6:	4413      	add	r3, r2
 80025e8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	0e1a      	lsrs	r2, r3, #24
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	3303      	adds	r3, #3
 80025f4:	b2d2      	uxtb	r2, r2
 80025f6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	011b      	lsls	r3, r3, #4
 8002600:	4413      	add	r3, r2
 8002602:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	3304      	adds	r3, #4
 800260c:	b2d2      	uxtb	r2, r2
 800260e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	011b      	lsls	r3, r3, #4
 8002618:	4413      	add	r3, r2
 800261a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	0a1a      	lsrs	r2, r3, #8
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	3305      	adds	r3, #5
 8002626:	b2d2      	uxtb	r2, r2
 8002628:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	011b      	lsls	r3, r3, #4
 8002632:	4413      	add	r3, r2
 8002634:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	0c1a      	lsrs	r2, r3, #16
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	3306      	adds	r3, #6
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	011b      	lsls	r3, r3, #4
 800264c:	4413      	add	r3, r2
 800264e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	0e1a      	lsrs	r2, r3, #24
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	3307      	adds	r3, #7
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d108      	bne.n	8002676 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68da      	ldr	r2, [r3, #12]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f042 0220 	orr.w	r2, r2, #32
 8002672:	60da      	str	r2, [r3, #12]
 8002674:	e007      	b.n	8002686 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	691a      	ldr	r2, [r3, #16]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f042 0220 	orr.w	r2, r2, #32
 8002684:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002686:	2300      	movs	r3, #0
 8002688:	e006      	b.n	8002698 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
  }
}
 8002698:	4618      	mov	r0, r3
 800269a:	371c      	adds	r7, #28
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026b4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80026b6:	7bfb      	ldrb	r3, [r7, #15]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d002      	beq.n	80026c2 <HAL_CAN_ActivateNotification+0x1e>
 80026bc:	7bfb      	ldrb	r3, [r7, #15]
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d109      	bne.n	80026d6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6959      	ldr	r1, [r3, #20]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	430a      	orrs	r2, r1
 80026d0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80026d2:	2300      	movs	r3, #0
 80026d4:	e006      	b.n	80026e4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
  }
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3714      	adds	r7, #20
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b08a      	sub	sp, #40	; 0x28
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80026f8:	2300      	movs	r3, #0
 80026fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800272c:	6a3b      	ldr	r3, [r7, #32]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d07c      	beq.n	8002830 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	2b00      	cmp	r3, #0
 800273e:	d023      	beq.n	8002788 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2201      	movs	r2, #1
 8002746:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 f983 	bl	8002a5e <HAL_CAN_TxMailbox0CompleteCallback>
 8002758:	e016      	b.n	8002788 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b00      	cmp	r3, #0
 8002762:	d004      	beq.n	800276e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800276a:	627b      	str	r3, [r7, #36]	; 0x24
 800276c:	e00c      	b.n	8002788 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	f003 0308 	and.w	r3, r3, #8
 8002774:	2b00      	cmp	r3, #0
 8002776:	d004      	beq.n	8002782 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800277e:	627b      	str	r3, [r7, #36]	; 0x24
 8002780:	e002      	b.n	8002788 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 f989 	bl	8002a9a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278e:	2b00      	cmp	r3, #0
 8002790:	d024      	beq.n	80027dc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f44f 7280 	mov.w	r2, #256	; 0x100
 800279a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d003      	beq.n	80027ae <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 f963 	bl	8002a72 <HAL_CAN_TxMailbox1CompleteCallback>
 80027ac:	e016      	b.n	80027dc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d004      	beq.n	80027c2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80027be:	627b      	str	r3, [r7, #36]	; 0x24
 80027c0:	e00c      	b.n	80027dc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d004      	beq.n	80027d6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80027cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027d2:	627b      	str	r3, [r7, #36]	; 0x24
 80027d4:	e002      	b.n	80027dc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 f969 	bl	8002aae <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d024      	beq.n	8002830 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80027ee:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f943 	bl	8002a86 <HAL_CAN_TxMailbox2CompleteCallback>
 8002800:	e016      	b.n	8002830 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d004      	beq.n	8002816 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002812:	627b      	str	r3, [r7, #36]	; 0x24
 8002814:	e00c      	b.n	8002830 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d004      	beq.n	800282a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002826:	627b      	str	r3, [r7, #36]	; 0x24
 8002828:	e002      	b.n	8002830 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 f949 	bl	8002ac2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002830:	6a3b      	ldr	r3, [r7, #32]
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00c      	beq.n	8002854 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f003 0310 	and.w	r3, r3, #16
 8002840:	2b00      	cmp	r3, #0
 8002842:	d007      	beq.n	8002854 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800284a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2210      	movs	r2, #16
 8002852:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002854:	6a3b      	ldr	r3, [r7, #32]
 8002856:	f003 0304 	and.w	r3, r3, #4
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00b      	beq.n	8002876 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f003 0308 	and.w	r3, r3, #8
 8002864:	2b00      	cmp	r3, #0
 8002866:	d006      	beq.n	8002876 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2208      	movs	r2, #8
 800286e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 f930 	bl	8002ad6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002876:	6a3b      	ldr	r3, [r7, #32]
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d009      	beq.n	8002894 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	f003 0303 	and.w	r3, r3, #3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d002      	beq.n	8002894 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7fe f9ac 	bl	8000bec <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002894:	6a3b      	ldr	r3, [r7, #32]
 8002896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00c      	beq.n	80028b8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	f003 0310 	and.w	r3, r3, #16
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d007      	beq.n	80028b8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80028a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028ae:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2210      	movs	r2, #16
 80028b6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80028b8:	6a3b      	ldr	r3, [r7, #32]
 80028ba:	f003 0320 	and.w	r3, r3, #32
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00b      	beq.n	80028da <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	f003 0308 	and.w	r3, r3, #8
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d006      	beq.n	80028da <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2208      	movs	r2, #8
 80028d2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 f912 	bl	8002afe <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80028da:	6a3b      	ldr	r3, [r7, #32]
 80028dc:	f003 0310 	and.w	r3, r3, #16
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d009      	beq.n	80028f8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	f003 0303 	and.w	r3, r3, #3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d002      	beq.n	80028f8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 f8f9 	bl	8002aea <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80028f8:	6a3b      	ldr	r3, [r7, #32]
 80028fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00b      	beq.n	800291a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	f003 0310 	and.w	r3, r3, #16
 8002908:	2b00      	cmp	r3, #0
 800290a:	d006      	beq.n	800291a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2210      	movs	r2, #16
 8002912:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f000 f8fc 	bl	8002b12 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800291a:	6a3b      	ldr	r3, [r7, #32]
 800291c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00b      	beq.n	800293c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	f003 0308 	and.w	r3, r3, #8
 800292a:	2b00      	cmp	r3, #0
 800292c:	d006      	beq.n	800293c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2208      	movs	r2, #8
 8002934:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 f8f5 	bl	8002b26 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800293c:	6a3b      	ldr	r3, [r7, #32]
 800293e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d07b      	beq.n	8002a3e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	f003 0304 	and.w	r3, r3, #4
 800294c:	2b00      	cmp	r3, #0
 800294e:	d072      	beq.n	8002a36 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002950:	6a3b      	ldr	r3, [r7, #32]
 8002952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002956:	2b00      	cmp	r3, #0
 8002958:	d008      	beq.n	800296c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002960:	2b00      	cmp	r3, #0
 8002962:	d003      	beq.n	800296c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800296c:	6a3b      	ldr	r3, [r7, #32]
 800296e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002972:	2b00      	cmp	r3, #0
 8002974:	d008      	beq.n	8002988 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800297c:	2b00      	cmp	r3, #0
 800297e:	d003      	beq.n	8002988 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002982:	f043 0302 	orr.w	r3, r3, #2
 8002986:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002988:	6a3b      	ldr	r3, [r7, #32]
 800298a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800298e:	2b00      	cmp	r3, #0
 8002990:	d008      	beq.n	80029a4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002998:	2b00      	cmp	r3, #0
 800299a:	d003      	beq.n	80029a4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299e:	f043 0304 	orr.w	r3, r3, #4
 80029a2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80029a4:	6a3b      	ldr	r3, [r7, #32]
 80029a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d043      	beq.n	8002a36 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d03e      	beq.n	8002a36 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029be:	2b60      	cmp	r3, #96	; 0x60
 80029c0:	d02b      	beq.n	8002a1a <HAL_CAN_IRQHandler+0x32a>
 80029c2:	2b60      	cmp	r3, #96	; 0x60
 80029c4:	d82e      	bhi.n	8002a24 <HAL_CAN_IRQHandler+0x334>
 80029c6:	2b50      	cmp	r3, #80	; 0x50
 80029c8:	d022      	beq.n	8002a10 <HAL_CAN_IRQHandler+0x320>
 80029ca:	2b50      	cmp	r3, #80	; 0x50
 80029cc:	d82a      	bhi.n	8002a24 <HAL_CAN_IRQHandler+0x334>
 80029ce:	2b40      	cmp	r3, #64	; 0x40
 80029d0:	d019      	beq.n	8002a06 <HAL_CAN_IRQHandler+0x316>
 80029d2:	2b40      	cmp	r3, #64	; 0x40
 80029d4:	d826      	bhi.n	8002a24 <HAL_CAN_IRQHandler+0x334>
 80029d6:	2b30      	cmp	r3, #48	; 0x30
 80029d8:	d010      	beq.n	80029fc <HAL_CAN_IRQHandler+0x30c>
 80029da:	2b30      	cmp	r3, #48	; 0x30
 80029dc:	d822      	bhi.n	8002a24 <HAL_CAN_IRQHandler+0x334>
 80029de:	2b10      	cmp	r3, #16
 80029e0:	d002      	beq.n	80029e8 <HAL_CAN_IRQHandler+0x2f8>
 80029e2:	2b20      	cmp	r3, #32
 80029e4:	d005      	beq.n	80029f2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80029e6:	e01d      	b.n	8002a24 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80029e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ea:	f043 0308 	orr.w	r3, r3, #8
 80029ee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80029f0:	e019      	b.n	8002a26 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	f043 0310 	orr.w	r3, r3, #16
 80029f8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80029fa:	e014      	b.n	8002a26 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80029fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fe:	f043 0320 	orr.w	r3, r3, #32
 8002a02:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a04:	e00f      	b.n	8002a26 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a0c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a0e:	e00a      	b.n	8002a26 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a16:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a18:	e005      	b.n	8002a26 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a20:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a22:	e000      	b.n	8002a26 <HAL_CAN_IRQHandler+0x336>
            break;
 8002a24:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	699a      	ldr	r2, [r3, #24]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002a34:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2204      	movs	r2, #4
 8002a3c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d008      	beq.n	8002a56 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 f872 	bl	8002b3a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002a56:	bf00      	nop
 8002a58:	3728      	adds	r7, #40	; 0x28
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b083      	sub	sp, #12
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b083      	sub	sp, #12
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b083      	sub	sp, #12
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b083      	sub	sp, #12
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b083      	sub	sp, #12
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002af2:	bf00      	nop
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b083      	sub	sp, #12
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002b06:	bf00      	nop
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b083      	sub	sp, #12
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b083      	sub	sp, #12
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
	...

08002b50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b60:	4b0b      	ldr	r3, [pc, #44]	; (8002b90 <__NVIC_SetPriorityGrouping+0x40>)
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b66:	68ba      	ldr	r2, [r7, #8]
 8002b68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b78:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <__NVIC_SetPriorityGrouping+0x44>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b7e:	4a04      	ldr	r2, [pc, #16]	; (8002b90 <__NVIC_SetPriorityGrouping+0x40>)
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	60d3      	str	r3, [r2, #12]
}
 8002b84:	bf00      	nop
 8002b86:	3714      	adds	r7, #20
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	e000ed00 	.word	0xe000ed00
 8002b94:	05fa0000 	.word	0x05fa0000

08002b98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b9c:	4b04      	ldr	r3, [pc, #16]	; (8002bb0 <__NVIC_GetPriorityGrouping+0x18>)
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	0a1b      	lsrs	r3, r3, #8
 8002ba2:	f003 0307 	and.w	r3, r3, #7
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	e000ed00 	.word	0xe000ed00

08002bb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	4603      	mov	r3, r0
 8002bbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	db0b      	blt.n	8002bde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bc6:	79fb      	ldrb	r3, [r7, #7]
 8002bc8:	f003 021f 	and.w	r2, r3, #31
 8002bcc:	4907      	ldr	r1, [pc, #28]	; (8002bec <__NVIC_EnableIRQ+0x38>)
 8002bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd2:	095b      	lsrs	r3, r3, #5
 8002bd4:	2001      	movs	r0, #1
 8002bd6:	fa00 f202 	lsl.w	r2, r0, r2
 8002bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bde:	bf00      	nop
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	e000e100 	.word	0xe000e100

08002bf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	6039      	str	r1, [r7, #0]
 8002bfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	db0a      	blt.n	8002c1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	b2da      	uxtb	r2, r3
 8002c08:	490c      	ldr	r1, [pc, #48]	; (8002c3c <__NVIC_SetPriority+0x4c>)
 8002c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0e:	0112      	lsls	r2, r2, #4
 8002c10:	b2d2      	uxtb	r2, r2
 8002c12:	440b      	add	r3, r1
 8002c14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c18:	e00a      	b.n	8002c30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	4908      	ldr	r1, [pc, #32]	; (8002c40 <__NVIC_SetPriority+0x50>)
 8002c20:	79fb      	ldrb	r3, [r7, #7]
 8002c22:	f003 030f 	and.w	r3, r3, #15
 8002c26:	3b04      	subs	r3, #4
 8002c28:	0112      	lsls	r2, r2, #4
 8002c2a:	b2d2      	uxtb	r2, r2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	761a      	strb	r2, [r3, #24]
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr
 8002c3c:	e000e100 	.word	0xe000e100
 8002c40:	e000ed00 	.word	0xe000ed00

08002c44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b089      	sub	sp, #36	; 0x24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	f1c3 0307 	rsb	r3, r3, #7
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	bf28      	it	cs
 8002c62:	2304      	movcs	r3, #4
 8002c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	3304      	adds	r3, #4
 8002c6a:	2b06      	cmp	r3, #6
 8002c6c:	d902      	bls.n	8002c74 <NVIC_EncodePriority+0x30>
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	3b03      	subs	r3, #3
 8002c72:	e000      	b.n	8002c76 <NVIC_EncodePriority+0x32>
 8002c74:	2300      	movs	r3, #0
 8002c76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c78:	f04f 32ff 	mov.w	r2, #4294967295
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c82:	43da      	mvns	r2, r3
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	401a      	ands	r2, r3
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	fa01 f303 	lsl.w	r3, r1, r3
 8002c96:	43d9      	mvns	r1, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c9c:	4313      	orrs	r3, r2
         );
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3724      	adds	r7, #36	; 0x24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b082      	sub	sp, #8
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7ff ff4c 	bl	8002b50 <__NVIC_SetPriorityGrouping>
}
 8002cb8:	bf00      	nop
 8002cba:	3708      	adds	r7, #8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
 8002ccc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cd2:	f7ff ff61 	bl	8002b98 <__NVIC_GetPriorityGrouping>
 8002cd6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	68b9      	ldr	r1, [r7, #8]
 8002cdc:	6978      	ldr	r0, [r7, #20]
 8002cde:	f7ff ffb1 	bl	8002c44 <NVIC_EncodePriority>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ce8:	4611      	mov	r1, r2
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7ff ff80 	bl	8002bf0 <__NVIC_SetPriority>
}
 8002cf0:	bf00      	nop
 8002cf2:	3718      	adds	r7, #24
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	4603      	mov	r3, r0
 8002d00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7ff ff54 	bl	8002bb4 <__NVIC_EnableIRQ>
}
 8002d0c:	bf00      	nop
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b089      	sub	sp, #36	; 0x24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002d22:	2300      	movs	r3, #0
 8002d24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002d26:	2300      	movs	r3, #0
 8002d28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d2e:	2300      	movs	r3, #0
 8002d30:	61fb      	str	r3, [r7, #28]
 8002d32:	e175      	b.n	8003020 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002d34:	2201      	movs	r2, #1
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	4013      	ands	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	f040 8164 	bne.w	800301a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f003 0303 	and.w	r3, r3, #3
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d005      	beq.n	8002d6a <HAL_GPIO_Init+0x56>
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f003 0303 	and.w	r3, r3, #3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d130      	bne.n	8002dcc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	2203      	movs	r2, #3
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	68da      	ldr	r2, [r3, #12]
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002da0:	2201      	movs	r2, #1
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	43db      	mvns	r3, r3
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	4013      	ands	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	091b      	lsrs	r3, r3, #4
 8002db6:	f003 0201 	and.w	r2, r3, #1
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f003 0303 	and.w	r3, r3, #3
 8002dd4:	2b03      	cmp	r3, #3
 8002dd6:	d017      	beq.n	8002e08 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	2203      	movs	r2, #3
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	43db      	mvns	r3, r3
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	4013      	ands	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f003 0303 	and.w	r3, r3, #3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d123      	bne.n	8002e5c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	08da      	lsrs	r2, r3, #3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	3208      	adds	r2, #8
 8002e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	f003 0307 	and.w	r3, r3, #7
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	220f      	movs	r2, #15
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	43db      	mvns	r3, r3
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4013      	ands	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	691a      	ldr	r2, [r3, #16]
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	f003 0307 	and.w	r3, r3, #7
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	08da      	lsrs	r2, r3, #3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	3208      	adds	r2, #8
 8002e56:	69b9      	ldr	r1, [r7, #24]
 8002e58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	2203      	movs	r2, #3
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4013      	ands	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f003 0203 	and.w	r2, r3, #3
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f000 80be 	beq.w	800301a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e9e:	4b66      	ldr	r3, [pc, #408]	; (8003038 <HAL_GPIO_Init+0x324>)
 8002ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea2:	4a65      	ldr	r2, [pc, #404]	; (8003038 <HAL_GPIO_Init+0x324>)
 8002ea4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ea8:	6453      	str	r3, [r2, #68]	; 0x44
 8002eaa:	4b63      	ldr	r3, [pc, #396]	; (8003038 <HAL_GPIO_Init+0x324>)
 8002eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002eb6:	4a61      	ldr	r2, [pc, #388]	; (800303c <HAL_GPIO_Init+0x328>)
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	089b      	lsrs	r3, r3, #2
 8002ebc:	3302      	adds	r3, #2
 8002ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	f003 0303 	and.w	r3, r3, #3
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	220f      	movs	r2, #15
 8002ece:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed2:	43db      	mvns	r3, r3
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a58      	ldr	r2, [pc, #352]	; (8003040 <HAL_GPIO_Init+0x32c>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d037      	beq.n	8002f52 <HAL_GPIO_Init+0x23e>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a57      	ldr	r2, [pc, #348]	; (8003044 <HAL_GPIO_Init+0x330>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d031      	beq.n	8002f4e <HAL_GPIO_Init+0x23a>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a56      	ldr	r2, [pc, #344]	; (8003048 <HAL_GPIO_Init+0x334>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d02b      	beq.n	8002f4a <HAL_GPIO_Init+0x236>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a55      	ldr	r2, [pc, #340]	; (800304c <HAL_GPIO_Init+0x338>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d025      	beq.n	8002f46 <HAL_GPIO_Init+0x232>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a54      	ldr	r2, [pc, #336]	; (8003050 <HAL_GPIO_Init+0x33c>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d01f      	beq.n	8002f42 <HAL_GPIO_Init+0x22e>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a53      	ldr	r2, [pc, #332]	; (8003054 <HAL_GPIO_Init+0x340>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d019      	beq.n	8002f3e <HAL_GPIO_Init+0x22a>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a52      	ldr	r2, [pc, #328]	; (8003058 <HAL_GPIO_Init+0x344>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d013      	beq.n	8002f3a <HAL_GPIO_Init+0x226>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a51      	ldr	r2, [pc, #324]	; (800305c <HAL_GPIO_Init+0x348>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d00d      	beq.n	8002f36 <HAL_GPIO_Init+0x222>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a50      	ldr	r2, [pc, #320]	; (8003060 <HAL_GPIO_Init+0x34c>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d007      	beq.n	8002f32 <HAL_GPIO_Init+0x21e>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a4f      	ldr	r2, [pc, #316]	; (8003064 <HAL_GPIO_Init+0x350>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d101      	bne.n	8002f2e <HAL_GPIO_Init+0x21a>
 8002f2a:	2309      	movs	r3, #9
 8002f2c:	e012      	b.n	8002f54 <HAL_GPIO_Init+0x240>
 8002f2e:	230a      	movs	r3, #10
 8002f30:	e010      	b.n	8002f54 <HAL_GPIO_Init+0x240>
 8002f32:	2308      	movs	r3, #8
 8002f34:	e00e      	b.n	8002f54 <HAL_GPIO_Init+0x240>
 8002f36:	2307      	movs	r3, #7
 8002f38:	e00c      	b.n	8002f54 <HAL_GPIO_Init+0x240>
 8002f3a:	2306      	movs	r3, #6
 8002f3c:	e00a      	b.n	8002f54 <HAL_GPIO_Init+0x240>
 8002f3e:	2305      	movs	r3, #5
 8002f40:	e008      	b.n	8002f54 <HAL_GPIO_Init+0x240>
 8002f42:	2304      	movs	r3, #4
 8002f44:	e006      	b.n	8002f54 <HAL_GPIO_Init+0x240>
 8002f46:	2303      	movs	r3, #3
 8002f48:	e004      	b.n	8002f54 <HAL_GPIO_Init+0x240>
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	e002      	b.n	8002f54 <HAL_GPIO_Init+0x240>
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e000      	b.n	8002f54 <HAL_GPIO_Init+0x240>
 8002f52:	2300      	movs	r3, #0
 8002f54:	69fa      	ldr	r2, [r7, #28]
 8002f56:	f002 0203 	and.w	r2, r2, #3
 8002f5a:	0092      	lsls	r2, r2, #2
 8002f5c:	4093      	lsls	r3, r2
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002f64:	4935      	ldr	r1, [pc, #212]	; (800303c <HAL_GPIO_Init+0x328>)
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	089b      	lsrs	r3, r3, #2
 8002f6a:	3302      	adds	r3, #2
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f72:	4b3d      	ldr	r3, [pc, #244]	; (8003068 <HAL_GPIO_Init+0x354>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	43db      	mvns	r3, r3
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d003      	beq.n	8002f96 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f96:	4a34      	ldr	r2, [pc, #208]	; (8003068 <HAL_GPIO_Init+0x354>)
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f9c:	4b32      	ldr	r3, [pc, #200]	; (8003068 <HAL_GPIO_Init+0x354>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d003      	beq.n	8002fc0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fc0:	4a29      	ldr	r2, [pc, #164]	; (8003068 <HAL_GPIO_Init+0x354>)
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fc6:	4b28      	ldr	r3, [pc, #160]	; (8003068 <HAL_GPIO_Init+0x354>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	43db      	mvns	r3, r3
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fea:	4a1f      	ldr	r2, [pc, #124]	; (8003068 <HAL_GPIO_Init+0x354>)
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ff0:	4b1d      	ldr	r3, [pc, #116]	; (8003068 <HAL_GPIO_Init+0x354>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d003      	beq.n	8003014 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	4313      	orrs	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003014:	4a14      	ldr	r2, [pc, #80]	; (8003068 <HAL_GPIO_Init+0x354>)
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	3301      	adds	r3, #1
 800301e:	61fb      	str	r3, [r7, #28]
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	2b0f      	cmp	r3, #15
 8003024:	f67f ae86 	bls.w	8002d34 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003028:	bf00      	nop
 800302a:	bf00      	nop
 800302c:	3724      	adds	r7, #36	; 0x24
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	40023800 	.word	0x40023800
 800303c:	40013800 	.word	0x40013800
 8003040:	40020000 	.word	0x40020000
 8003044:	40020400 	.word	0x40020400
 8003048:	40020800 	.word	0x40020800
 800304c:	40020c00 	.word	0x40020c00
 8003050:	40021000 	.word	0x40021000
 8003054:	40021400 	.word	0x40021400
 8003058:	40021800 	.word	0x40021800
 800305c:	40021c00 	.word	0x40021c00
 8003060:	40022000 	.word	0x40022000
 8003064:	40022400 	.word	0x40022400
 8003068:	40013c00 	.word	0x40013c00

0800306c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	460b      	mov	r3, r1
 8003076:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	691a      	ldr	r2, [r3, #16]
 800307c:	887b      	ldrh	r3, [r7, #2]
 800307e:	4013      	ands	r3, r2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d002      	beq.n	800308a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003084:	2301      	movs	r3, #1
 8003086:	73fb      	strb	r3, [r7, #15]
 8003088:	e001      	b.n	800308e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800308a:	2300      	movs	r3, #0
 800308c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800308e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003090:	4618      	mov	r0, r3
 8003092:	3714      	adds	r7, #20
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	460b      	mov	r3, r1
 80030a6:	807b      	strh	r3, [r7, #2]
 80030a8:	4613      	mov	r3, r2
 80030aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030ac:	787b      	ldrb	r3, [r7, #1]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030b2:	887a      	ldrh	r2, [r7, #2]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80030b8:	e003      	b.n	80030c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80030ba:	887b      	ldrh	r3, [r7, #2]
 80030bc:	041a      	lsls	r2, r3, #16
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	619a      	str	r2, [r3, #24]
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b085      	sub	sp, #20
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
 80030d6:	460b      	mov	r3, r1
 80030d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80030e0:	887a      	ldrh	r2, [r7, #2]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	4013      	ands	r3, r2
 80030e6:	041a      	lsls	r2, r3, #16
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	43d9      	mvns	r1, r3
 80030ec:	887b      	ldrh	r3, [r7, #2]
 80030ee:	400b      	ands	r3, r1
 80030f0:	431a      	orrs	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	619a      	str	r2, [r3, #24]
}
 80030f6:	bf00      	nop
 80030f8:	3714      	adds	r7, #20
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
	...

08003104 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800310c:	2300      	movs	r3, #0
 800310e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e29b      	b.n	8003652 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b00      	cmp	r3, #0
 8003124:	f000 8087 	beq.w	8003236 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003128:	4b96      	ldr	r3, [pc, #600]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f003 030c 	and.w	r3, r3, #12
 8003130:	2b04      	cmp	r3, #4
 8003132:	d00c      	beq.n	800314e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003134:	4b93      	ldr	r3, [pc, #588]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f003 030c 	and.w	r3, r3, #12
 800313c:	2b08      	cmp	r3, #8
 800313e:	d112      	bne.n	8003166 <HAL_RCC_OscConfig+0x62>
 8003140:	4b90      	ldr	r3, [pc, #576]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003148:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800314c:	d10b      	bne.n	8003166 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800314e:	4b8d      	ldr	r3, [pc, #564]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d06c      	beq.n	8003234 <HAL_RCC_OscConfig+0x130>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d168      	bne.n	8003234 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e275      	b.n	8003652 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800316e:	d106      	bne.n	800317e <HAL_RCC_OscConfig+0x7a>
 8003170:	4b84      	ldr	r3, [pc, #528]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a83      	ldr	r2, [pc, #524]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 8003176:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800317a:	6013      	str	r3, [r2, #0]
 800317c:	e02e      	b.n	80031dc <HAL_RCC_OscConfig+0xd8>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10c      	bne.n	80031a0 <HAL_RCC_OscConfig+0x9c>
 8003186:	4b7f      	ldr	r3, [pc, #508]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a7e      	ldr	r2, [pc, #504]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 800318c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003190:	6013      	str	r3, [r2, #0]
 8003192:	4b7c      	ldr	r3, [pc, #496]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a7b      	ldr	r2, [pc, #492]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 8003198:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800319c:	6013      	str	r3, [r2, #0]
 800319e:	e01d      	b.n	80031dc <HAL_RCC_OscConfig+0xd8>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031a8:	d10c      	bne.n	80031c4 <HAL_RCC_OscConfig+0xc0>
 80031aa:	4b76      	ldr	r3, [pc, #472]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a75      	ldr	r2, [pc, #468]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 80031b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031b4:	6013      	str	r3, [r2, #0]
 80031b6:	4b73      	ldr	r3, [pc, #460]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a72      	ldr	r2, [pc, #456]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 80031bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c0:	6013      	str	r3, [r2, #0]
 80031c2:	e00b      	b.n	80031dc <HAL_RCC_OscConfig+0xd8>
 80031c4:	4b6f      	ldr	r3, [pc, #444]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a6e      	ldr	r2, [pc, #440]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 80031ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ce:	6013      	str	r3, [r2, #0]
 80031d0:	4b6c      	ldr	r3, [pc, #432]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a6b      	ldr	r2, [pc, #428]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 80031d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d013      	beq.n	800320c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e4:	f7fe fa16 	bl	8001614 <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031ec:	f7fe fa12 	bl	8001614 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b64      	cmp	r3, #100	; 0x64
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e229      	b.n	8003652 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031fe:	4b61      	ldr	r3, [pc, #388]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d0f0      	beq.n	80031ec <HAL_RCC_OscConfig+0xe8>
 800320a:	e014      	b.n	8003236 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320c:	f7fe fa02 	bl	8001614 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003214:	f7fe f9fe 	bl	8001614 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b64      	cmp	r3, #100	; 0x64
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e215      	b.n	8003652 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003226:	4b57      	ldr	r3, [pc, #348]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1f0      	bne.n	8003214 <HAL_RCC_OscConfig+0x110>
 8003232:	e000      	b.n	8003236 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003234:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d069      	beq.n	8003316 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003242:	4b50      	ldr	r3, [pc, #320]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f003 030c 	and.w	r3, r3, #12
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00b      	beq.n	8003266 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800324e:	4b4d      	ldr	r3, [pc, #308]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 030c 	and.w	r3, r3, #12
 8003256:	2b08      	cmp	r3, #8
 8003258:	d11c      	bne.n	8003294 <HAL_RCC_OscConfig+0x190>
 800325a:	4b4a      	ldr	r3, [pc, #296]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d116      	bne.n	8003294 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003266:	4b47      	ldr	r3, [pc, #284]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d005      	beq.n	800327e <HAL_RCC_OscConfig+0x17a>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d001      	beq.n	800327e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e1e9      	b.n	8003652 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800327e:	4b41      	ldr	r3, [pc, #260]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	493d      	ldr	r1, [pc, #244]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 800328e:	4313      	orrs	r3, r2
 8003290:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003292:	e040      	b.n	8003316 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d023      	beq.n	80032e4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800329c:	4b39      	ldr	r3, [pc, #228]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a38      	ldr	r2, [pc, #224]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 80032a2:	f043 0301 	orr.w	r3, r3, #1
 80032a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a8:	f7fe f9b4 	bl	8001614 <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032b0:	f7fe f9b0 	bl	8001614 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e1c7      	b.n	8003652 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c2:	4b30      	ldr	r3, [pc, #192]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d0f0      	beq.n	80032b0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ce:	4b2d      	ldr	r3, [pc, #180]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	4929      	ldr	r1, [pc, #164]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	600b      	str	r3, [r1, #0]
 80032e2:	e018      	b.n	8003316 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032e4:	4b27      	ldr	r3, [pc, #156]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a26      	ldr	r2, [pc, #152]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 80032ea:	f023 0301 	bic.w	r3, r3, #1
 80032ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f0:	f7fe f990 	bl	8001614 <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032f8:	f7fe f98c 	bl	8001614 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e1a3      	b.n	8003652 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800330a:	4b1e      	ldr	r3, [pc, #120]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1f0      	bne.n	80032f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0308 	and.w	r3, r3, #8
 800331e:	2b00      	cmp	r3, #0
 8003320:	d038      	beq.n	8003394 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d019      	beq.n	800335e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800332a:	4b16      	ldr	r3, [pc, #88]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 800332c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800332e:	4a15      	ldr	r2, [pc, #84]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 8003330:	f043 0301 	orr.w	r3, r3, #1
 8003334:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003336:	f7fe f96d 	bl	8001614 <HAL_GetTick>
 800333a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800333c:	e008      	b.n	8003350 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800333e:	f7fe f969 	bl	8001614 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e180      	b.n	8003652 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003350:	4b0c      	ldr	r3, [pc, #48]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 8003352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0f0      	beq.n	800333e <HAL_RCC_OscConfig+0x23a>
 800335c:	e01a      	b.n	8003394 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800335e:	4b09      	ldr	r3, [pc, #36]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 8003360:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003362:	4a08      	ldr	r2, [pc, #32]	; (8003384 <HAL_RCC_OscConfig+0x280>)
 8003364:	f023 0301 	bic.w	r3, r3, #1
 8003368:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336a:	f7fe f953 	bl	8001614 <HAL_GetTick>
 800336e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003370:	e00a      	b.n	8003388 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003372:	f7fe f94f 	bl	8001614 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d903      	bls.n	8003388 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e166      	b.n	8003652 <HAL_RCC_OscConfig+0x54e>
 8003384:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003388:	4b92      	ldr	r3, [pc, #584]	; (80035d4 <HAL_RCC_OscConfig+0x4d0>)
 800338a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1ee      	bne.n	8003372 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 80a4 	beq.w	80034ea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033a2:	4b8c      	ldr	r3, [pc, #560]	; (80035d4 <HAL_RCC_OscConfig+0x4d0>)
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10d      	bne.n	80033ca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ae:	4b89      	ldr	r3, [pc, #548]	; (80035d4 <HAL_RCC_OscConfig+0x4d0>)
 80033b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b2:	4a88      	ldr	r2, [pc, #544]	; (80035d4 <HAL_RCC_OscConfig+0x4d0>)
 80033b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033b8:	6413      	str	r3, [r2, #64]	; 0x40
 80033ba:	4b86      	ldr	r3, [pc, #536]	; (80035d4 <HAL_RCC_OscConfig+0x4d0>)
 80033bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c2:	60bb      	str	r3, [r7, #8]
 80033c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033c6:	2301      	movs	r3, #1
 80033c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033ca:	4b83      	ldr	r3, [pc, #524]	; (80035d8 <HAL_RCC_OscConfig+0x4d4>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d118      	bne.n	8003408 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80033d6:	4b80      	ldr	r3, [pc, #512]	; (80035d8 <HAL_RCC_OscConfig+0x4d4>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a7f      	ldr	r2, [pc, #508]	; (80035d8 <HAL_RCC_OscConfig+0x4d4>)
 80033dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033e2:	f7fe f917 	bl	8001614 <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033e8:	e008      	b.n	80033fc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ea:	f7fe f913 	bl	8001614 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b64      	cmp	r3, #100	; 0x64
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e12a      	b.n	8003652 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033fc:	4b76      	ldr	r3, [pc, #472]	; (80035d8 <HAL_RCC_OscConfig+0x4d4>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003404:	2b00      	cmp	r3, #0
 8003406:	d0f0      	beq.n	80033ea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d106      	bne.n	800341e <HAL_RCC_OscConfig+0x31a>
 8003410:	4b70      	ldr	r3, [pc, #448]	; (80035d4 <HAL_RCC_OscConfig+0x4d0>)
 8003412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003414:	4a6f      	ldr	r2, [pc, #444]	; (80035d4 <HAL_RCC_OscConfig+0x4d0>)
 8003416:	f043 0301 	orr.w	r3, r3, #1
 800341a:	6713      	str	r3, [r2, #112]	; 0x70
 800341c:	e02d      	b.n	800347a <HAL_RCC_OscConfig+0x376>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10c      	bne.n	8003440 <HAL_RCC_OscConfig+0x33c>
 8003426:	4b6b      	ldr	r3, [pc, #428]	; (80035d4 <HAL_RCC_OscConfig+0x4d0>)
 8003428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342a:	4a6a      	ldr	r2, [pc, #424]	; (80035d4 <HAL_RCC_OscConfig+0x4d0>)
 800342c:	f023 0301 	bic.w	r3, r3, #1
 8003430:	6713      	str	r3, [r2, #112]	; 0x70
 8003432:	4b68      	ldr	r3, [pc, #416]	; (80035d4 <HAL_RCC_OscConfig+0x4d0>)
 8003434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003436:	4a67      	ldr	r2, [pc, #412]	; (80035d4 <HAL_RCC_OscConfig+0x4d0>)
 8003438:	f023 0304 	bic.w	r3, r3, #4
 800343c:	6713      	str	r3, [r2, #112]	; 0x70
 800343e:	e01c      	b.n	800347a <HAL_RCC_OscConfig+0x376>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	2b05      	cmp	r3, #5
 8003446:	d10c      	bne.n	8003462 <HAL_RCC_OscConfig+0x35e>
 8003448:	4b62      	ldr	r3, [pc, #392]	; (80035d4 <HAL_RCC_OscConfig+0x4d0>)
 800344a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344c:	4a61      	ldr	r2, [pc, #388]	; (80035d4 <HAL_RCC_OscConfig+0x4d0>)
 800344e:	f043 0304 	orr.w	r3, r3, #4
 8003452:	6713      	str	r3, [r2, #112]	; 0x70
 8003454:	4b5f      	ldr	r3, [pc, #380]	; (80035d4 <HAL_RCC_OscConfig+0x4d0>)
 8003456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003458:	4a5e      	ldr	r2, [pc, #376]	; (80035d4 <HAL_RCC_OscConfig+0x4d0>)
 800345a:	f043 0301 	orr.w	r3, r3, #1
 800345e:	6713      	str	r3, [r2, #112]	; 0x70
 8003460:	e00b      	b.n	800347a <HAL_RCC_OscConfig+0x376>
 8003462:	4b5c      	ldr	r3, [pc, #368]	; (80035d4 <HAL_RCC_OscConfig+0x4d0>)
 8003464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003466:	4a5b      	ldr	r2, [pc, #364]	; (80035d4 <HAL_RCC_OscConfig+0x4d0>)
 8003468:	f023 0301 	bic.w	r3, r3, #1
 800346c:	6713      	str	r3, [r2, #112]	; 0x70
 800346e:	4b59      	ldr	r3, [pc, #356]	; (80035d4 <HAL_RCC_OscConfig+0x4d0>)
 8003470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003472:	4a58      	ldr	r2, [pc, #352]	; (80035d4 <HAL_RCC_OscConfig+0x4d0>)
 8003474:	f023 0304 	bic.w	r3, r3, #4
 8003478:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d015      	beq.n	80034ae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003482:	f7fe f8c7 	bl	8001614 <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003488:	e00a      	b.n	80034a0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800348a:	f7fe f8c3 	bl	8001614 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	f241 3288 	movw	r2, #5000	; 0x1388
 8003498:	4293      	cmp	r3, r2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e0d8      	b.n	8003652 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a0:	4b4c      	ldr	r3, [pc, #304]	; (80035d4 <HAL_RCC_OscConfig+0x4d0>)
 80034a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0ee      	beq.n	800348a <HAL_RCC_OscConfig+0x386>
 80034ac:	e014      	b.n	80034d8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ae:	f7fe f8b1 	bl	8001614 <HAL_GetTick>
 80034b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034b4:	e00a      	b.n	80034cc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034b6:	f7fe f8ad 	bl	8001614 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d901      	bls.n	80034cc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e0c2      	b.n	8003652 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034cc:	4b41      	ldr	r3, [pc, #260]	; (80035d4 <HAL_RCC_OscConfig+0x4d0>)
 80034ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1ee      	bne.n	80034b6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034d8:	7dfb      	ldrb	r3, [r7, #23]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d105      	bne.n	80034ea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034de:	4b3d      	ldr	r3, [pc, #244]	; (80035d4 <HAL_RCC_OscConfig+0x4d0>)
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	4a3c      	ldr	r2, [pc, #240]	; (80035d4 <HAL_RCC_OscConfig+0x4d0>)
 80034e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 80ae 	beq.w	8003650 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034f4:	4b37      	ldr	r3, [pc, #220]	; (80035d4 <HAL_RCC_OscConfig+0x4d0>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f003 030c 	and.w	r3, r3, #12
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	d06d      	beq.n	80035dc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	2b02      	cmp	r3, #2
 8003506:	d14b      	bne.n	80035a0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003508:	4b32      	ldr	r3, [pc, #200]	; (80035d4 <HAL_RCC_OscConfig+0x4d0>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a31      	ldr	r2, [pc, #196]	; (80035d4 <HAL_RCC_OscConfig+0x4d0>)
 800350e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003512:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003514:	f7fe f87e 	bl	8001614 <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800351c:	f7fe f87a 	bl	8001614 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e091      	b.n	8003652 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800352e:	4b29      	ldr	r3, [pc, #164]	; (80035d4 <HAL_RCC_OscConfig+0x4d0>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1f0      	bne.n	800351c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	69da      	ldr	r2, [r3, #28]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	431a      	orrs	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003548:	019b      	lsls	r3, r3, #6
 800354a:	431a      	orrs	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003550:	085b      	lsrs	r3, r3, #1
 8003552:	3b01      	subs	r3, #1
 8003554:	041b      	lsls	r3, r3, #16
 8003556:	431a      	orrs	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355c:	061b      	lsls	r3, r3, #24
 800355e:	431a      	orrs	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003564:	071b      	lsls	r3, r3, #28
 8003566:	491b      	ldr	r1, [pc, #108]	; (80035d4 <HAL_RCC_OscConfig+0x4d0>)
 8003568:	4313      	orrs	r3, r2
 800356a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800356c:	4b19      	ldr	r3, [pc, #100]	; (80035d4 <HAL_RCC_OscConfig+0x4d0>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a18      	ldr	r2, [pc, #96]	; (80035d4 <HAL_RCC_OscConfig+0x4d0>)
 8003572:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003576:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003578:	f7fe f84c 	bl	8001614 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003580:	f7fe f848 	bl	8001614 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e05f      	b.n	8003652 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003592:	4b10      	ldr	r3, [pc, #64]	; (80035d4 <HAL_RCC_OscConfig+0x4d0>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d0f0      	beq.n	8003580 <HAL_RCC_OscConfig+0x47c>
 800359e:	e057      	b.n	8003650 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035a0:	4b0c      	ldr	r3, [pc, #48]	; (80035d4 <HAL_RCC_OscConfig+0x4d0>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a0b      	ldr	r2, [pc, #44]	; (80035d4 <HAL_RCC_OscConfig+0x4d0>)
 80035a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ac:	f7fe f832 	bl	8001614 <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b4:	f7fe f82e 	bl	8001614 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e045      	b.n	8003652 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035c6:	4b03      	ldr	r3, [pc, #12]	; (80035d4 <HAL_RCC_OscConfig+0x4d0>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1f0      	bne.n	80035b4 <HAL_RCC_OscConfig+0x4b0>
 80035d2:	e03d      	b.n	8003650 <HAL_RCC_OscConfig+0x54c>
 80035d4:	40023800 	.word	0x40023800
 80035d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80035dc:	4b1f      	ldr	r3, [pc, #124]	; (800365c <HAL_RCC_OscConfig+0x558>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d030      	beq.n	800364c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d129      	bne.n	800364c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003602:	429a      	cmp	r2, r3
 8003604:	d122      	bne.n	800364c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800360c:	4013      	ands	r3, r2
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003612:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003614:	4293      	cmp	r3, r2
 8003616:	d119      	bne.n	800364c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003622:	085b      	lsrs	r3, r3, #1
 8003624:	3b01      	subs	r3, #1
 8003626:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003628:	429a      	cmp	r2, r3
 800362a:	d10f      	bne.n	800364c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003636:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003638:	429a      	cmp	r2, r3
 800363a:	d107      	bne.n	800364c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003646:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003648:	429a      	cmp	r2, r3
 800364a:	d001      	beq.n	8003650 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e000      	b.n	8003652 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3718      	adds	r7, #24
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	40023800 	.word	0x40023800

08003660 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800366a:	2300      	movs	r3, #0
 800366c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d101      	bne.n	8003678 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e0d0      	b.n	800381a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003678:	4b6a      	ldr	r3, [pc, #424]	; (8003824 <HAL_RCC_ClockConfig+0x1c4>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 030f 	and.w	r3, r3, #15
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	429a      	cmp	r2, r3
 8003684:	d910      	bls.n	80036a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003686:	4b67      	ldr	r3, [pc, #412]	; (8003824 <HAL_RCC_ClockConfig+0x1c4>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f023 020f 	bic.w	r2, r3, #15
 800368e:	4965      	ldr	r1, [pc, #404]	; (8003824 <HAL_RCC_ClockConfig+0x1c4>)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	4313      	orrs	r3, r2
 8003694:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003696:	4b63      	ldr	r3, [pc, #396]	; (8003824 <HAL_RCC_ClockConfig+0x1c4>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 030f 	and.w	r3, r3, #15
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d001      	beq.n	80036a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e0b8      	b.n	800381a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d020      	beq.n	80036f6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0304 	and.w	r3, r3, #4
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d005      	beq.n	80036cc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036c0:	4b59      	ldr	r3, [pc, #356]	; (8003828 <HAL_RCC_ClockConfig+0x1c8>)
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	4a58      	ldr	r2, [pc, #352]	; (8003828 <HAL_RCC_ClockConfig+0x1c8>)
 80036c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0308 	and.w	r3, r3, #8
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d005      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036d8:	4b53      	ldr	r3, [pc, #332]	; (8003828 <HAL_RCC_ClockConfig+0x1c8>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	4a52      	ldr	r2, [pc, #328]	; (8003828 <HAL_RCC_ClockConfig+0x1c8>)
 80036de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036e4:	4b50      	ldr	r3, [pc, #320]	; (8003828 <HAL_RCC_ClockConfig+0x1c8>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	494d      	ldr	r1, [pc, #308]	; (8003828 <HAL_RCC_ClockConfig+0x1c8>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d040      	beq.n	8003784 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d107      	bne.n	800371a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800370a:	4b47      	ldr	r3, [pc, #284]	; (8003828 <HAL_RCC_ClockConfig+0x1c8>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d115      	bne.n	8003742 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e07f      	b.n	800381a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	2b02      	cmp	r3, #2
 8003720:	d107      	bne.n	8003732 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003722:	4b41      	ldr	r3, [pc, #260]	; (8003828 <HAL_RCC_ClockConfig+0x1c8>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d109      	bne.n	8003742 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e073      	b.n	800381a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003732:	4b3d      	ldr	r3, [pc, #244]	; (8003828 <HAL_RCC_ClockConfig+0x1c8>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e06b      	b.n	800381a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003742:	4b39      	ldr	r3, [pc, #228]	; (8003828 <HAL_RCC_ClockConfig+0x1c8>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f023 0203 	bic.w	r2, r3, #3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	4936      	ldr	r1, [pc, #216]	; (8003828 <HAL_RCC_ClockConfig+0x1c8>)
 8003750:	4313      	orrs	r3, r2
 8003752:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003754:	f7fd ff5e 	bl	8001614 <HAL_GetTick>
 8003758:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800375a:	e00a      	b.n	8003772 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800375c:	f7fd ff5a 	bl	8001614 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	f241 3288 	movw	r2, #5000	; 0x1388
 800376a:	4293      	cmp	r3, r2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e053      	b.n	800381a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003772:	4b2d      	ldr	r3, [pc, #180]	; (8003828 <HAL_RCC_ClockConfig+0x1c8>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f003 020c 	and.w	r2, r3, #12
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	429a      	cmp	r2, r3
 8003782:	d1eb      	bne.n	800375c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003784:	4b27      	ldr	r3, [pc, #156]	; (8003824 <HAL_RCC_ClockConfig+0x1c4>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 030f 	and.w	r3, r3, #15
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	429a      	cmp	r2, r3
 8003790:	d210      	bcs.n	80037b4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003792:	4b24      	ldr	r3, [pc, #144]	; (8003824 <HAL_RCC_ClockConfig+0x1c4>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f023 020f 	bic.w	r2, r3, #15
 800379a:	4922      	ldr	r1, [pc, #136]	; (8003824 <HAL_RCC_ClockConfig+0x1c4>)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	4313      	orrs	r3, r2
 80037a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037a2:	4b20      	ldr	r3, [pc, #128]	; (8003824 <HAL_RCC_ClockConfig+0x1c4>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 030f 	and.w	r3, r3, #15
 80037aa:	683a      	ldr	r2, [r7, #0]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d001      	beq.n	80037b4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e032      	b.n	800381a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d008      	beq.n	80037d2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037c0:	4b19      	ldr	r3, [pc, #100]	; (8003828 <HAL_RCC_ClockConfig+0x1c8>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	4916      	ldr	r1, [pc, #88]	; (8003828 <HAL_RCC_ClockConfig+0x1c8>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0308 	and.w	r3, r3, #8
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d009      	beq.n	80037f2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037de:	4b12      	ldr	r3, [pc, #72]	; (8003828 <HAL_RCC_ClockConfig+0x1c8>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	490e      	ldr	r1, [pc, #56]	; (8003828 <HAL_RCC_ClockConfig+0x1c8>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037f2:	f000 f821 	bl	8003838 <HAL_RCC_GetSysClockFreq>
 80037f6:	4602      	mov	r2, r0
 80037f8:	4b0b      	ldr	r3, [pc, #44]	; (8003828 <HAL_RCC_ClockConfig+0x1c8>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	091b      	lsrs	r3, r3, #4
 80037fe:	f003 030f 	and.w	r3, r3, #15
 8003802:	490a      	ldr	r1, [pc, #40]	; (800382c <HAL_RCC_ClockConfig+0x1cc>)
 8003804:	5ccb      	ldrb	r3, [r1, r3]
 8003806:	fa22 f303 	lsr.w	r3, r2, r3
 800380a:	4a09      	ldr	r2, [pc, #36]	; (8003830 <HAL_RCC_ClockConfig+0x1d0>)
 800380c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800380e:	4b09      	ldr	r3, [pc, #36]	; (8003834 <HAL_RCC_ClockConfig+0x1d4>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4618      	mov	r0, r3
 8003814:	f7fd fdfe 	bl	8001414 <HAL_InitTick>

  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3710      	adds	r7, #16
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	40023c00 	.word	0x40023c00
 8003828:	40023800 	.word	0x40023800
 800382c:	080071f8 	.word	0x080071f8
 8003830:	20000000 	.word	0x20000000
 8003834:	20000004 	.word	0x20000004

08003838 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003838:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800383c:	b094      	sub	sp, #80	; 0x50
 800383e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003840:	2300      	movs	r3, #0
 8003842:	647b      	str	r3, [r7, #68]	; 0x44
 8003844:	2300      	movs	r3, #0
 8003846:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003848:	2300      	movs	r3, #0
 800384a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800384c:	2300      	movs	r3, #0
 800384e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003850:	4b79      	ldr	r3, [pc, #484]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f003 030c 	and.w	r3, r3, #12
 8003858:	2b08      	cmp	r3, #8
 800385a:	d00d      	beq.n	8003878 <HAL_RCC_GetSysClockFreq+0x40>
 800385c:	2b08      	cmp	r3, #8
 800385e:	f200 80e1 	bhi.w	8003a24 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <HAL_RCC_GetSysClockFreq+0x34>
 8003866:	2b04      	cmp	r3, #4
 8003868:	d003      	beq.n	8003872 <HAL_RCC_GetSysClockFreq+0x3a>
 800386a:	e0db      	b.n	8003a24 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800386c:	4b73      	ldr	r3, [pc, #460]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x204>)
 800386e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003870:	e0db      	b.n	8003a2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003872:	4b73      	ldr	r3, [pc, #460]	; (8003a40 <HAL_RCC_GetSysClockFreq+0x208>)
 8003874:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003876:	e0d8      	b.n	8003a2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003878:	4b6f      	ldr	r3, [pc, #444]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x200>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003880:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003882:	4b6d      	ldr	r3, [pc, #436]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d063      	beq.n	8003956 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800388e:	4b6a      	ldr	r3, [pc, #424]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	099b      	lsrs	r3, r3, #6
 8003894:	2200      	movs	r2, #0
 8003896:	63bb      	str	r3, [r7, #56]	; 0x38
 8003898:	63fa      	str	r2, [r7, #60]	; 0x3c
 800389a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800389c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038a0:	633b      	str	r3, [r7, #48]	; 0x30
 80038a2:	2300      	movs	r3, #0
 80038a4:	637b      	str	r3, [r7, #52]	; 0x34
 80038a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80038aa:	4622      	mov	r2, r4
 80038ac:	462b      	mov	r3, r5
 80038ae:	f04f 0000 	mov.w	r0, #0
 80038b2:	f04f 0100 	mov.w	r1, #0
 80038b6:	0159      	lsls	r1, r3, #5
 80038b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038bc:	0150      	lsls	r0, r2, #5
 80038be:	4602      	mov	r2, r0
 80038c0:	460b      	mov	r3, r1
 80038c2:	4621      	mov	r1, r4
 80038c4:	1a51      	subs	r1, r2, r1
 80038c6:	6139      	str	r1, [r7, #16]
 80038c8:	4629      	mov	r1, r5
 80038ca:	eb63 0301 	sbc.w	r3, r3, r1
 80038ce:	617b      	str	r3, [r7, #20]
 80038d0:	f04f 0200 	mov.w	r2, #0
 80038d4:	f04f 0300 	mov.w	r3, #0
 80038d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038dc:	4659      	mov	r1, fp
 80038de:	018b      	lsls	r3, r1, #6
 80038e0:	4651      	mov	r1, sl
 80038e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038e6:	4651      	mov	r1, sl
 80038e8:	018a      	lsls	r2, r1, #6
 80038ea:	4651      	mov	r1, sl
 80038ec:	ebb2 0801 	subs.w	r8, r2, r1
 80038f0:	4659      	mov	r1, fp
 80038f2:	eb63 0901 	sbc.w	r9, r3, r1
 80038f6:	f04f 0200 	mov.w	r2, #0
 80038fa:	f04f 0300 	mov.w	r3, #0
 80038fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003902:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003906:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800390a:	4690      	mov	r8, r2
 800390c:	4699      	mov	r9, r3
 800390e:	4623      	mov	r3, r4
 8003910:	eb18 0303 	adds.w	r3, r8, r3
 8003914:	60bb      	str	r3, [r7, #8]
 8003916:	462b      	mov	r3, r5
 8003918:	eb49 0303 	adc.w	r3, r9, r3
 800391c:	60fb      	str	r3, [r7, #12]
 800391e:	f04f 0200 	mov.w	r2, #0
 8003922:	f04f 0300 	mov.w	r3, #0
 8003926:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800392a:	4629      	mov	r1, r5
 800392c:	024b      	lsls	r3, r1, #9
 800392e:	4621      	mov	r1, r4
 8003930:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003934:	4621      	mov	r1, r4
 8003936:	024a      	lsls	r2, r1, #9
 8003938:	4610      	mov	r0, r2
 800393a:	4619      	mov	r1, r3
 800393c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800393e:	2200      	movs	r2, #0
 8003940:	62bb      	str	r3, [r7, #40]	; 0x28
 8003942:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003944:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003948:	f7fc fc7a 	bl	8000240 <__aeabi_uldivmod>
 800394c:	4602      	mov	r2, r0
 800394e:	460b      	mov	r3, r1
 8003950:	4613      	mov	r3, r2
 8003952:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003954:	e058      	b.n	8003a08 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003956:	4b38      	ldr	r3, [pc, #224]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	099b      	lsrs	r3, r3, #6
 800395c:	2200      	movs	r2, #0
 800395e:	4618      	mov	r0, r3
 8003960:	4611      	mov	r1, r2
 8003962:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003966:	623b      	str	r3, [r7, #32]
 8003968:	2300      	movs	r3, #0
 800396a:	627b      	str	r3, [r7, #36]	; 0x24
 800396c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003970:	4642      	mov	r2, r8
 8003972:	464b      	mov	r3, r9
 8003974:	f04f 0000 	mov.w	r0, #0
 8003978:	f04f 0100 	mov.w	r1, #0
 800397c:	0159      	lsls	r1, r3, #5
 800397e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003982:	0150      	lsls	r0, r2, #5
 8003984:	4602      	mov	r2, r0
 8003986:	460b      	mov	r3, r1
 8003988:	4641      	mov	r1, r8
 800398a:	ebb2 0a01 	subs.w	sl, r2, r1
 800398e:	4649      	mov	r1, r9
 8003990:	eb63 0b01 	sbc.w	fp, r3, r1
 8003994:	f04f 0200 	mov.w	r2, #0
 8003998:	f04f 0300 	mov.w	r3, #0
 800399c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80039a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80039a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80039a8:	ebb2 040a 	subs.w	r4, r2, sl
 80039ac:	eb63 050b 	sbc.w	r5, r3, fp
 80039b0:	f04f 0200 	mov.w	r2, #0
 80039b4:	f04f 0300 	mov.w	r3, #0
 80039b8:	00eb      	lsls	r3, r5, #3
 80039ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039be:	00e2      	lsls	r2, r4, #3
 80039c0:	4614      	mov	r4, r2
 80039c2:	461d      	mov	r5, r3
 80039c4:	4643      	mov	r3, r8
 80039c6:	18e3      	adds	r3, r4, r3
 80039c8:	603b      	str	r3, [r7, #0]
 80039ca:	464b      	mov	r3, r9
 80039cc:	eb45 0303 	adc.w	r3, r5, r3
 80039d0:	607b      	str	r3, [r7, #4]
 80039d2:	f04f 0200 	mov.w	r2, #0
 80039d6:	f04f 0300 	mov.w	r3, #0
 80039da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039de:	4629      	mov	r1, r5
 80039e0:	028b      	lsls	r3, r1, #10
 80039e2:	4621      	mov	r1, r4
 80039e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039e8:	4621      	mov	r1, r4
 80039ea:	028a      	lsls	r2, r1, #10
 80039ec:	4610      	mov	r0, r2
 80039ee:	4619      	mov	r1, r3
 80039f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039f2:	2200      	movs	r2, #0
 80039f4:	61bb      	str	r3, [r7, #24]
 80039f6:	61fa      	str	r2, [r7, #28]
 80039f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039fc:	f7fc fc20 	bl	8000240 <__aeabi_uldivmod>
 8003a00:	4602      	mov	r2, r0
 8003a02:	460b      	mov	r3, r1
 8003a04:	4613      	mov	r3, r2
 8003a06:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003a08:	4b0b      	ldr	r3, [pc, #44]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	0c1b      	lsrs	r3, r3, #16
 8003a0e:	f003 0303 	and.w	r3, r3, #3
 8003a12:	3301      	adds	r3, #1
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003a18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a22:	e002      	b.n	8003a2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a24:	4b05      	ldr	r3, [pc, #20]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x204>)
 8003a26:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3750      	adds	r7, #80	; 0x50
 8003a30:	46bd      	mov	sp, r7
 8003a32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a36:	bf00      	nop
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	00f42400 	.word	0x00f42400
 8003a40:	007a1200 	.word	0x007a1200

08003a44 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a48:	4b03      	ldr	r3, [pc, #12]	; (8003a58 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	20000000 	.word	0x20000000

08003a5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a60:	f7ff fff0 	bl	8003a44 <HAL_RCC_GetHCLKFreq>
 8003a64:	4602      	mov	r2, r0
 8003a66:	4b05      	ldr	r3, [pc, #20]	; (8003a7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	0a9b      	lsrs	r3, r3, #10
 8003a6c:	f003 0307 	and.w	r3, r3, #7
 8003a70:	4903      	ldr	r1, [pc, #12]	; (8003a80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a72:	5ccb      	ldrb	r3, [r1, r3]
 8003a74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	40023800 	.word	0x40023800
 8003a80:	08007208 	.word	0x08007208

08003a84 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	220f      	movs	r2, #15
 8003a92:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003a94:	4b12      	ldr	r3, [pc, #72]	; (8003ae0 <HAL_RCC_GetClockConfig+0x5c>)
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f003 0203 	and.w	r2, r3, #3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003aa0:	4b0f      	ldr	r3, [pc, #60]	; (8003ae0 <HAL_RCC_GetClockConfig+0x5c>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003aac:	4b0c      	ldr	r3, [pc, #48]	; (8003ae0 <HAL_RCC_GetClockConfig+0x5c>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003ab8:	4b09      	ldr	r3, [pc, #36]	; (8003ae0 <HAL_RCC_GetClockConfig+0x5c>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	08db      	lsrs	r3, r3, #3
 8003abe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ac6:	4b07      	ldr	r3, [pc, #28]	; (8003ae4 <HAL_RCC_GetClockConfig+0x60>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 020f 	and.w	r2, r3, #15
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	601a      	str	r2, [r3, #0]
}
 8003ad2:	bf00      	nop
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	40023800 	.word	0x40023800
 8003ae4:	40023c00 	.word	0x40023c00

08003ae8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e049      	b.n	8003b8e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d106      	bne.n	8003b14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f841 	bl	8003b96 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2202      	movs	r2, #2
 8003b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	3304      	adds	r3, #4
 8003b24:	4619      	mov	r1, r3
 8003b26:	4610      	mov	r0, r2
 8003b28:	f000 fa00 	bl	8003f2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3708      	adds	r7, #8
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003b96:	b480      	push	{r7}
 8003b98:	b083      	sub	sp, #12
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003b9e:	bf00      	nop
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
	...

08003bac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d001      	beq.n	8003bc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e054      	b.n	8003c6e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68da      	ldr	r2, [r3, #12]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f042 0201 	orr.w	r2, r2, #1
 8003bda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a26      	ldr	r2, [pc, #152]	; (8003c7c <HAL_TIM_Base_Start_IT+0xd0>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d022      	beq.n	8003c2c <HAL_TIM_Base_Start_IT+0x80>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bee:	d01d      	beq.n	8003c2c <HAL_TIM_Base_Start_IT+0x80>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a22      	ldr	r2, [pc, #136]	; (8003c80 <HAL_TIM_Base_Start_IT+0xd4>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d018      	beq.n	8003c2c <HAL_TIM_Base_Start_IT+0x80>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a21      	ldr	r2, [pc, #132]	; (8003c84 <HAL_TIM_Base_Start_IT+0xd8>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d013      	beq.n	8003c2c <HAL_TIM_Base_Start_IT+0x80>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a1f      	ldr	r2, [pc, #124]	; (8003c88 <HAL_TIM_Base_Start_IT+0xdc>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d00e      	beq.n	8003c2c <HAL_TIM_Base_Start_IT+0x80>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a1e      	ldr	r2, [pc, #120]	; (8003c8c <HAL_TIM_Base_Start_IT+0xe0>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d009      	beq.n	8003c2c <HAL_TIM_Base_Start_IT+0x80>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a1c      	ldr	r2, [pc, #112]	; (8003c90 <HAL_TIM_Base_Start_IT+0xe4>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d004      	beq.n	8003c2c <HAL_TIM_Base_Start_IT+0x80>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a1b      	ldr	r2, [pc, #108]	; (8003c94 <HAL_TIM_Base_Start_IT+0xe8>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d115      	bne.n	8003c58 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689a      	ldr	r2, [r3, #8]
 8003c32:	4b19      	ldr	r3, [pc, #100]	; (8003c98 <HAL_TIM_Base_Start_IT+0xec>)
 8003c34:	4013      	ands	r3, r2
 8003c36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2b06      	cmp	r3, #6
 8003c3c:	d015      	beq.n	8003c6a <HAL_TIM_Base_Start_IT+0xbe>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c44:	d011      	beq.n	8003c6a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f042 0201 	orr.w	r2, r2, #1
 8003c54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c56:	e008      	b.n	8003c6a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 0201 	orr.w	r2, r2, #1
 8003c66:	601a      	str	r2, [r3, #0]
 8003c68:	e000      	b.n	8003c6c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3714      	adds	r7, #20
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	40010000 	.word	0x40010000
 8003c80:	40000400 	.word	0x40000400
 8003c84:	40000800 	.word	0x40000800
 8003c88:	40000c00 	.word	0x40000c00
 8003c8c:	40010400 	.word	0x40010400
 8003c90:	40014000 	.word	0x40014000
 8003c94:	40001800 	.word	0x40001800
 8003c98:	00010007 	.word	0x00010007

08003c9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d122      	bne.n	8003cf8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d11b      	bne.n	8003cf8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f06f 0202 	mvn.w	r2, #2
 8003cc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	f003 0303 	and.w	r3, r3, #3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f905 	bl	8003eee <HAL_TIM_IC_CaptureCallback>
 8003ce4:	e005      	b.n	8003cf2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 f8f7 	bl	8003eda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 f908 	bl	8003f02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	f003 0304 	and.w	r3, r3, #4
 8003d02:	2b04      	cmp	r3, #4
 8003d04:	d122      	bne.n	8003d4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	f003 0304 	and.w	r3, r3, #4
 8003d10:	2b04      	cmp	r3, #4
 8003d12:	d11b      	bne.n	8003d4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f06f 0204 	mvn.w	r2, #4
 8003d1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2202      	movs	r2, #2
 8003d22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d003      	beq.n	8003d3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f8db 	bl	8003eee <HAL_TIM_IC_CaptureCallback>
 8003d38:	e005      	b.n	8003d46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 f8cd 	bl	8003eda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 f8de 	bl	8003f02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	f003 0308 	and.w	r3, r3, #8
 8003d56:	2b08      	cmp	r3, #8
 8003d58:	d122      	bne.n	8003da0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	f003 0308 	and.w	r3, r3, #8
 8003d64:	2b08      	cmp	r3, #8
 8003d66:	d11b      	bne.n	8003da0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f06f 0208 	mvn.w	r2, #8
 8003d70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2204      	movs	r2, #4
 8003d76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	f003 0303 	and.w	r3, r3, #3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d003      	beq.n	8003d8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f8b1 	bl	8003eee <HAL_TIM_IC_CaptureCallback>
 8003d8c:	e005      	b.n	8003d9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 f8a3 	bl	8003eda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 f8b4 	bl	8003f02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	f003 0310 	and.w	r3, r3, #16
 8003daa:	2b10      	cmp	r3, #16
 8003dac:	d122      	bne.n	8003df4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	f003 0310 	and.w	r3, r3, #16
 8003db8:	2b10      	cmp	r3, #16
 8003dba:	d11b      	bne.n	8003df4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f06f 0210 	mvn.w	r2, #16
 8003dc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2208      	movs	r2, #8
 8003dca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	69db      	ldr	r3, [r3, #28]
 8003dd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d003      	beq.n	8003de2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 f887 	bl	8003eee <HAL_TIM_IC_CaptureCallback>
 8003de0:	e005      	b.n	8003dee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 f879 	bl	8003eda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 f88a 	bl	8003f02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d10e      	bne.n	8003e20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	f003 0301 	and.w	r3, r3, #1
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d107      	bne.n	8003e20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f06f 0201 	mvn.w	r2, #1
 8003e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f7fd f99e 	bl	800115c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e2a:	2b80      	cmp	r3, #128	; 0x80
 8003e2c:	d10e      	bne.n	8003e4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e38:	2b80      	cmp	r3, #128	; 0x80
 8003e3a:	d107      	bne.n	8003e4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 f91a 	bl	8004080 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e5a:	d10e      	bne.n	8003e7a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e66:	2b80      	cmp	r3, #128	; 0x80
 8003e68:	d107      	bne.n	8003e7a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003e72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 f90d 	bl	8004094 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e84:	2b40      	cmp	r3, #64	; 0x40
 8003e86:	d10e      	bne.n	8003ea6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e92:	2b40      	cmp	r3, #64	; 0x40
 8003e94:	d107      	bne.n	8003ea6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 f838 	bl	8003f16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	f003 0320 	and.w	r3, r3, #32
 8003eb0:	2b20      	cmp	r3, #32
 8003eb2:	d10e      	bne.n	8003ed2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	f003 0320 	and.w	r3, r3, #32
 8003ebe:	2b20      	cmp	r3, #32
 8003ec0:	d107      	bne.n	8003ed2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f06f 0220 	mvn.w	r2, #32
 8003eca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 f8cd 	bl	800406c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ed2:	bf00      	nop
 8003ed4:	3708      	adds	r7, #8
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ee2:	bf00      	nop
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f16:	b480      	push	{r7}
 8003f18:	b083      	sub	sp, #12
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
	...

08003f2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a40      	ldr	r2, [pc, #256]	; (8004040 <TIM_Base_SetConfig+0x114>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d013      	beq.n	8003f6c <TIM_Base_SetConfig+0x40>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f4a:	d00f      	beq.n	8003f6c <TIM_Base_SetConfig+0x40>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a3d      	ldr	r2, [pc, #244]	; (8004044 <TIM_Base_SetConfig+0x118>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d00b      	beq.n	8003f6c <TIM_Base_SetConfig+0x40>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a3c      	ldr	r2, [pc, #240]	; (8004048 <TIM_Base_SetConfig+0x11c>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d007      	beq.n	8003f6c <TIM_Base_SetConfig+0x40>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a3b      	ldr	r2, [pc, #236]	; (800404c <TIM_Base_SetConfig+0x120>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d003      	beq.n	8003f6c <TIM_Base_SetConfig+0x40>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a3a      	ldr	r2, [pc, #232]	; (8004050 <TIM_Base_SetConfig+0x124>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d108      	bne.n	8003f7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a2f      	ldr	r2, [pc, #188]	; (8004040 <TIM_Base_SetConfig+0x114>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d02b      	beq.n	8003fde <TIM_Base_SetConfig+0xb2>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f8c:	d027      	beq.n	8003fde <TIM_Base_SetConfig+0xb2>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a2c      	ldr	r2, [pc, #176]	; (8004044 <TIM_Base_SetConfig+0x118>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d023      	beq.n	8003fde <TIM_Base_SetConfig+0xb2>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a2b      	ldr	r2, [pc, #172]	; (8004048 <TIM_Base_SetConfig+0x11c>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d01f      	beq.n	8003fde <TIM_Base_SetConfig+0xb2>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a2a      	ldr	r2, [pc, #168]	; (800404c <TIM_Base_SetConfig+0x120>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d01b      	beq.n	8003fde <TIM_Base_SetConfig+0xb2>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a29      	ldr	r2, [pc, #164]	; (8004050 <TIM_Base_SetConfig+0x124>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d017      	beq.n	8003fde <TIM_Base_SetConfig+0xb2>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a28      	ldr	r2, [pc, #160]	; (8004054 <TIM_Base_SetConfig+0x128>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d013      	beq.n	8003fde <TIM_Base_SetConfig+0xb2>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a27      	ldr	r2, [pc, #156]	; (8004058 <TIM_Base_SetConfig+0x12c>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d00f      	beq.n	8003fde <TIM_Base_SetConfig+0xb2>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a26      	ldr	r2, [pc, #152]	; (800405c <TIM_Base_SetConfig+0x130>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d00b      	beq.n	8003fde <TIM_Base_SetConfig+0xb2>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a25      	ldr	r2, [pc, #148]	; (8004060 <TIM_Base_SetConfig+0x134>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d007      	beq.n	8003fde <TIM_Base_SetConfig+0xb2>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a24      	ldr	r2, [pc, #144]	; (8004064 <TIM_Base_SetConfig+0x138>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d003      	beq.n	8003fde <TIM_Base_SetConfig+0xb2>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a23      	ldr	r2, [pc, #140]	; (8004068 <TIM_Base_SetConfig+0x13c>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d108      	bne.n	8003ff0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fe4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a0a      	ldr	r2, [pc, #40]	; (8004040 <TIM_Base_SetConfig+0x114>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d003      	beq.n	8004024 <TIM_Base_SetConfig+0xf8>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a0c      	ldr	r2, [pc, #48]	; (8004050 <TIM_Base_SetConfig+0x124>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d103      	bne.n	800402c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	691a      	ldr	r2, [r3, #16]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	615a      	str	r2, [r3, #20]
}
 8004032:	bf00      	nop
 8004034:	3714      	adds	r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	40010000 	.word	0x40010000
 8004044:	40000400 	.word	0x40000400
 8004048:	40000800 	.word	0x40000800
 800404c:	40000c00 	.word	0x40000c00
 8004050:	40010400 	.word	0x40010400
 8004054:	40014000 	.word	0x40014000
 8004058:	40014400 	.word	0x40014400
 800405c:	40014800 	.word	0x40014800
 8004060:	40001800 	.word	0x40001800
 8004064:	40001c00 	.word	0x40001c00
 8004068:	40002000 	.word	0x40002000

0800406c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80040a8:	b480      	push	{r7}
 80040aa:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80040ac:	bf00      	nop
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
	...

080040b8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040be:	f3ef 8305 	mrs	r3, IPSR
 80040c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80040c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10f      	bne.n	80040ea <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040ca:	f3ef 8310 	mrs	r3, PRIMASK
 80040ce:	607b      	str	r3, [r7, #4]
  return(result);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d105      	bne.n	80040e2 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80040d6:	f3ef 8311 	mrs	r3, BASEPRI
 80040da:	603b      	str	r3, [r7, #0]
  return(result);
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d007      	beq.n	80040f2 <osKernelInitialize+0x3a>
 80040e2:	4b0e      	ldr	r3, [pc, #56]	; (800411c <osKernelInitialize+0x64>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d103      	bne.n	80040f2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80040ea:	f06f 0305 	mvn.w	r3, #5
 80040ee:	60fb      	str	r3, [r7, #12]
 80040f0:	e00c      	b.n	800410c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80040f2:	4b0a      	ldr	r3, [pc, #40]	; (800411c <osKernelInitialize+0x64>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d105      	bne.n	8004106 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80040fa:	4b08      	ldr	r3, [pc, #32]	; (800411c <osKernelInitialize+0x64>)
 80040fc:	2201      	movs	r2, #1
 80040fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004100:	2300      	movs	r3, #0
 8004102:	60fb      	str	r3, [r7, #12]
 8004104:	e002      	b.n	800410c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004106:	f04f 33ff 	mov.w	r3, #4294967295
 800410a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800410c:	68fb      	ldr	r3, [r7, #12]
}
 800410e:	4618      	mov	r0, r3
 8004110:	3714      	adds	r7, #20
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	20000274 	.word	0x20000274

08004120 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004126:	f3ef 8305 	mrs	r3, IPSR
 800412a:	60bb      	str	r3, [r7, #8]
  return(result);
 800412c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10f      	bne.n	8004152 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004132:	f3ef 8310 	mrs	r3, PRIMASK
 8004136:	607b      	str	r3, [r7, #4]
  return(result);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d105      	bne.n	800414a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800413e:	f3ef 8311 	mrs	r3, BASEPRI
 8004142:	603b      	str	r3, [r7, #0]
  return(result);
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d007      	beq.n	800415a <osKernelStart+0x3a>
 800414a:	4b0f      	ldr	r3, [pc, #60]	; (8004188 <osKernelStart+0x68>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2b02      	cmp	r3, #2
 8004150:	d103      	bne.n	800415a <osKernelStart+0x3a>
    stat = osErrorISR;
 8004152:	f06f 0305 	mvn.w	r3, #5
 8004156:	60fb      	str	r3, [r7, #12]
 8004158:	e010      	b.n	800417c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800415a:	4b0b      	ldr	r3, [pc, #44]	; (8004188 <osKernelStart+0x68>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d109      	bne.n	8004176 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004162:	f7ff ffa1 	bl	80040a8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004166:	4b08      	ldr	r3, [pc, #32]	; (8004188 <osKernelStart+0x68>)
 8004168:	2202      	movs	r2, #2
 800416a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800416c:	f001 fa3e 	bl	80055ec <vTaskStartScheduler>
      stat = osOK;
 8004170:	2300      	movs	r3, #0
 8004172:	60fb      	str	r3, [r7, #12]
 8004174:	e002      	b.n	800417c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004176:	f04f 33ff 	mov.w	r3, #4294967295
 800417a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800417c:	68fb      	ldr	r3, [r7, #12]
}
 800417e:	4618      	mov	r0, r3
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	20000274 	.word	0x20000274

0800418c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800418c:	b580      	push	{r7, lr}
 800418e:	b090      	sub	sp, #64	; 0x40
 8004190:	af04      	add	r7, sp, #16
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004198:	2300      	movs	r3, #0
 800419a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800419c:	f3ef 8305 	mrs	r3, IPSR
 80041a0:	61fb      	str	r3, [r7, #28]
  return(result);
 80041a2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f040 808f 	bne.w	80042c8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041aa:	f3ef 8310 	mrs	r3, PRIMASK
 80041ae:	61bb      	str	r3, [r7, #24]
  return(result);
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d105      	bne.n	80041c2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80041b6:	f3ef 8311 	mrs	r3, BASEPRI
 80041ba:	617b      	str	r3, [r7, #20]
  return(result);
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d003      	beq.n	80041ca <osThreadNew+0x3e>
 80041c2:	4b44      	ldr	r3, [pc, #272]	; (80042d4 <osThreadNew+0x148>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d07e      	beq.n	80042c8 <osThreadNew+0x13c>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d07b      	beq.n	80042c8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80041d0:	2380      	movs	r3, #128	; 0x80
 80041d2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80041d4:	2318      	movs	r3, #24
 80041d6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80041d8:	2300      	movs	r3, #0
 80041da:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80041dc:	f04f 33ff 	mov.w	r3, #4294967295
 80041e0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d045      	beq.n	8004274 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d002      	beq.n	80041f6 <osThreadNew+0x6a>
        name = attr->name;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d002      	beq.n	8004204 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004206:	2b00      	cmp	r3, #0
 8004208:	d008      	beq.n	800421c <osThreadNew+0x90>
 800420a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420c:	2b38      	cmp	r3, #56	; 0x38
 800420e:	d805      	bhi.n	800421c <osThreadNew+0x90>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	2b00      	cmp	r3, #0
 800421a:	d001      	beq.n	8004220 <osThreadNew+0x94>
        return (NULL);
 800421c:	2300      	movs	r3, #0
 800421e:	e054      	b.n	80042ca <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d003      	beq.n	8004230 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	695b      	ldr	r3, [r3, #20]
 800422c:	089b      	lsrs	r3, r3, #2
 800422e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00e      	beq.n	8004256 <osThreadNew+0xca>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	2ba7      	cmp	r3, #167	; 0xa7
 800423e:	d90a      	bls.n	8004256 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004244:	2b00      	cmp	r3, #0
 8004246:	d006      	beq.n	8004256 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d002      	beq.n	8004256 <osThreadNew+0xca>
        mem = 1;
 8004250:	2301      	movs	r3, #1
 8004252:	623b      	str	r3, [r7, #32]
 8004254:	e010      	b.n	8004278 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10c      	bne.n	8004278 <osThreadNew+0xec>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d108      	bne.n	8004278 <osThreadNew+0xec>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d104      	bne.n	8004278 <osThreadNew+0xec>
          mem = 0;
 800426e:	2300      	movs	r3, #0
 8004270:	623b      	str	r3, [r7, #32]
 8004272:	e001      	b.n	8004278 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004274:	2300      	movs	r3, #0
 8004276:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004278:	6a3b      	ldr	r3, [r7, #32]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d110      	bne.n	80042a0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004286:	9202      	str	r2, [sp, #8]
 8004288:	9301      	str	r3, [sp, #4]
 800428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004292:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f000 fea7 	bl	8004fe8 <xTaskCreateStatic>
 800429a:	4603      	mov	r3, r0
 800429c:	613b      	str	r3, [r7, #16]
 800429e:	e013      	b.n	80042c8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80042a0:	6a3b      	ldr	r3, [r7, #32]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d110      	bne.n	80042c8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80042a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	f107 0310 	add.w	r3, r7, #16
 80042ae:	9301      	str	r3, [sp, #4]
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	9300      	str	r3, [sp, #0]
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f000 fef8 	bl	80050ae <xTaskCreate>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d001      	beq.n	80042c8 <osThreadNew+0x13c>
          hTask = NULL;
 80042c4:	2300      	movs	r3, #0
 80042c6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80042c8:	693b      	ldr	r3, [r7, #16]
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3730      	adds	r7, #48	; 0x30
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	20000274 	.word	0x20000274

080042d8 <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 80042d8:	b580      	push	{r7, lr}
 80042da:	b088      	sub	sp, #32
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042e4:	f3ef 8305 	mrs	r3, IPSR
 80042e8:	617b      	str	r3, [r7, #20]
  return(result);
 80042ea:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d10f      	bne.n	8004310 <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042f0:	f3ef 8310 	mrs	r3, PRIMASK
 80042f4:	613b      	str	r3, [r7, #16]
  return(result);
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d105      	bne.n	8004308 <osThreadSuspend+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80042fc:	f3ef 8311 	mrs	r3, BASEPRI
 8004300:	60fb      	str	r3, [r7, #12]
  return(result);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d007      	beq.n	8004318 <osThreadSuspend+0x40>
 8004308:	4b0c      	ldr	r3, [pc, #48]	; (800433c <osThreadSuspend+0x64>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2b02      	cmp	r3, #2
 800430e:	d103      	bne.n	8004318 <osThreadSuspend+0x40>
    stat = osErrorISR;
 8004310:	f06f 0305 	mvn.w	r3, #5
 8004314:	61fb      	str	r3, [r7, #28]
 8004316:	e00b      	b.n	8004330 <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d103      	bne.n	8004326 <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 800431e:	f06f 0303 	mvn.w	r3, #3
 8004322:	61fb      	str	r3, [r7, #28]
 8004324:	e004      	b.n	8004330 <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 8004326:	2300      	movs	r3, #0
 8004328:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 800432a:	69b8      	ldr	r0, [r7, #24]
 800432c:	f001 f852 	bl	80053d4 <vTaskSuspend>
  }

  return (stat);
 8004330:	69fb      	ldr	r3, [r7, #28]
}
 8004332:	4618      	mov	r0, r3
 8004334:	3720      	adds	r7, #32
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	20000274 	.word	0x20000274

08004340 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8004340:	b580      	push	{r7, lr}
 8004342:	b088      	sub	sp, #32
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800434c:	f3ef 8305 	mrs	r3, IPSR
 8004350:	617b      	str	r3, [r7, #20]
  return(result);
 8004352:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004354:	2b00      	cmp	r3, #0
 8004356:	d10f      	bne.n	8004378 <osThreadResume+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004358:	f3ef 8310 	mrs	r3, PRIMASK
 800435c:	613b      	str	r3, [r7, #16]
  return(result);
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d105      	bne.n	8004370 <osThreadResume+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004364:	f3ef 8311 	mrs	r3, BASEPRI
 8004368:	60fb      	str	r3, [r7, #12]
  return(result);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d007      	beq.n	8004380 <osThreadResume+0x40>
 8004370:	4b0c      	ldr	r3, [pc, #48]	; (80043a4 <osThreadResume+0x64>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2b02      	cmp	r3, #2
 8004376:	d103      	bne.n	8004380 <osThreadResume+0x40>
    stat = osErrorISR;
 8004378:	f06f 0305 	mvn.w	r3, #5
 800437c:	61fb      	str	r3, [r7, #28]
 800437e:	e00b      	b.n	8004398 <osThreadResume+0x58>
  }
  else if (hTask == NULL) {
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d103      	bne.n	800438e <osThreadResume+0x4e>
    stat = osErrorParameter;
 8004386:	f06f 0303 	mvn.w	r3, #3
 800438a:	61fb      	str	r3, [r7, #28]
 800438c:	e004      	b.n	8004398 <osThreadResume+0x58>
  }
  else {
    stat = osOK;
 800438e:	2300      	movs	r3, #0
 8004390:	61fb      	str	r3, [r7, #28]
    vTaskResume (hTask);
 8004392:	69b8      	ldr	r0, [r7, #24]
 8004394:	f001 f8ca 	bl	800552c <vTaskResume>
  }

  return (stat);
 8004398:	69fb      	ldr	r3, [r7, #28]
}
 800439a:	4618      	mov	r0, r3
 800439c:	3720      	adds	r7, #32
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	20000274 	.word	0x20000274

080043a8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043b0:	f3ef 8305 	mrs	r3, IPSR
 80043b4:	613b      	str	r3, [r7, #16]
  return(result);
 80043b6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10f      	bne.n	80043dc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043bc:	f3ef 8310 	mrs	r3, PRIMASK
 80043c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d105      	bne.n	80043d4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80043c8:	f3ef 8311 	mrs	r3, BASEPRI
 80043cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d007      	beq.n	80043e4 <osDelay+0x3c>
 80043d4:	4b0a      	ldr	r3, [pc, #40]	; (8004400 <osDelay+0x58>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d103      	bne.n	80043e4 <osDelay+0x3c>
    stat = osErrorISR;
 80043dc:	f06f 0305 	mvn.w	r3, #5
 80043e0:	617b      	str	r3, [r7, #20]
 80043e2:	e007      	b.n	80043f4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80043e4:	2300      	movs	r3, #0
 80043e6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d002      	beq.n	80043f4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 ffba 	bl	8005368 <vTaskDelay>
    }
  }

  return (stat);
 80043f4:	697b      	ldr	r3, [r7, #20]
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3718      	adds	r7, #24
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	20000274 	.word	0x20000274

08004404 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	4a07      	ldr	r2, [pc, #28]	; (8004430 <vApplicationGetIdleTaskMemory+0x2c>)
 8004414:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	4a06      	ldr	r2, [pc, #24]	; (8004434 <vApplicationGetIdleTaskMemory+0x30>)
 800441a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2280      	movs	r2, #128	; 0x80
 8004420:	601a      	str	r2, [r3, #0]
}
 8004422:	bf00      	nop
 8004424:	3714      	adds	r7, #20
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	20000278 	.word	0x20000278
 8004434:	20000320 	.word	0x20000320

08004438 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	4a07      	ldr	r2, [pc, #28]	; (8004464 <vApplicationGetTimerTaskMemory+0x2c>)
 8004448:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	4a06      	ldr	r2, [pc, #24]	; (8004468 <vApplicationGetTimerTaskMemory+0x30>)
 800444e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004456:	601a      	str	r2, [r3, #0]
}
 8004458:	bf00      	nop
 800445a:	3714      	adds	r7, #20
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr
 8004464:	20000520 	.word	0x20000520
 8004468:	200005c8 	.word	0x200005c8

0800446c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f103 0208 	add.w	r2, r3, #8
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f04f 32ff 	mov.w	r2, #4294967295
 8004484:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f103 0208 	add.w	r2, r3, #8
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f103 0208 	add.w	r2, r3, #8
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80044ba:	bf00      	nop
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr

080044c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80044c6:	b480      	push	{r7}
 80044c8:	b085      	sub	sp, #20
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
 80044ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	683a      	ldr	r2, [r7, #0]
 80044ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	1c5a      	adds	r2, r3, #1
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	601a      	str	r2, [r3, #0]
}
 8004502:	bf00      	nop
 8004504:	3714      	adds	r7, #20
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800450e:	b480      	push	{r7}
 8004510:	b085      	sub	sp, #20
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
 8004516:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004524:	d103      	bne.n	800452e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	60fb      	str	r3, [r7, #12]
 800452c:	e00c      	b.n	8004548 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	3308      	adds	r3, #8
 8004532:	60fb      	str	r3, [r7, #12]
 8004534:	e002      	b.n	800453c <vListInsert+0x2e>
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	60fb      	str	r3, [r7, #12]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68ba      	ldr	r2, [r7, #8]
 8004544:	429a      	cmp	r2, r3
 8004546:	d2f6      	bcs.n	8004536 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	683a      	ldr	r2, [r7, #0]
 8004556:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	683a      	ldr	r2, [r7, #0]
 8004562:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	1c5a      	adds	r2, r3, #1
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	601a      	str	r2, [r3, #0]
}
 8004574:	bf00      	nop
 8004576:	3714      	adds	r7, #20
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	6892      	ldr	r2, [r2, #8]
 8004596:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	6852      	ldr	r2, [r2, #4]
 80045a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d103      	bne.n	80045b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689a      	ldr	r2, [r3, #8]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	1e5a      	subs	r2, r3, #1
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3714      	adds	r7, #20
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d10c      	bne.n	8004602 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80045e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ec:	b672      	cpsid	i
 80045ee:	f383 8811 	msr	BASEPRI, r3
 80045f2:	f3bf 8f6f 	isb	sy
 80045f6:	f3bf 8f4f 	dsb	sy
 80045fa:	b662      	cpsie	i
 80045fc:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80045fe:	bf00      	nop
 8004600:	e7fe      	b.n	8004600 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004602:	f002 f9b3 	bl	800696c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800460e:	68f9      	ldr	r1, [r7, #12]
 8004610:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004612:	fb01 f303 	mul.w	r3, r1, r3
 8004616:	441a      	add	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004632:	3b01      	subs	r3, #1
 8004634:	68f9      	ldr	r1, [r7, #12]
 8004636:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004638:	fb01 f303 	mul.w	r3, r1, r3
 800463c:	441a      	add	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	22ff      	movs	r2, #255	; 0xff
 8004646:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	22ff      	movs	r2, #255	; 0xff
 800464e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d114      	bne.n	8004682 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d01a      	beq.n	8004696 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	3310      	adds	r3, #16
 8004664:	4618      	mov	r0, r3
 8004666:	f001 fa69 	bl	8005b3c <xTaskRemoveFromEventList>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d012      	beq.n	8004696 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004670:	4b0c      	ldr	r3, [pc, #48]	; (80046a4 <xQueueGenericReset+0xd0>)
 8004672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004676:	601a      	str	r2, [r3, #0]
 8004678:	f3bf 8f4f 	dsb	sy
 800467c:	f3bf 8f6f 	isb	sy
 8004680:	e009      	b.n	8004696 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	3310      	adds	r3, #16
 8004686:	4618      	mov	r0, r3
 8004688:	f7ff fef0 	bl	800446c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	3324      	adds	r3, #36	; 0x24
 8004690:	4618      	mov	r0, r3
 8004692:	f7ff feeb 	bl	800446c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004696:	f002 f99d 	bl	80069d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800469a:	2301      	movs	r3, #1
}
 800469c:	4618      	mov	r0, r3
 800469e:	3710      	adds	r7, #16
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	e000ed04 	.word	0xe000ed04

080046a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b08e      	sub	sp, #56	; 0x38
 80046ac:	af02      	add	r7, sp, #8
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
 80046b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10c      	bne.n	80046d6 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80046bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c0:	b672      	cpsid	i
 80046c2:	f383 8811 	msr	BASEPRI, r3
 80046c6:	f3bf 8f6f 	isb	sy
 80046ca:	f3bf 8f4f 	dsb	sy
 80046ce:	b662      	cpsie	i
 80046d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80046d2:	bf00      	nop
 80046d4:	e7fe      	b.n	80046d4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d10c      	bne.n	80046f6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80046dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e0:	b672      	cpsid	i
 80046e2:	f383 8811 	msr	BASEPRI, r3
 80046e6:	f3bf 8f6f 	isb	sy
 80046ea:	f3bf 8f4f 	dsb	sy
 80046ee:	b662      	cpsie	i
 80046f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80046f2:	bf00      	nop
 80046f4:	e7fe      	b.n	80046f4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d002      	beq.n	8004702 <xQueueGenericCreateStatic+0x5a>
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <xQueueGenericCreateStatic+0x5e>
 8004702:	2301      	movs	r3, #1
 8004704:	e000      	b.n	8004708 <xQueueGenericCreateStatic+0x60>
 8004706:	2300      	movs	r3, #0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d10c      	bne.n	8004726 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800470c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004710:	b672      	cpsid	i
 8004712:	f383 8811 	msr	BASEPRI, r3
 8004716:	f3bf 8f6f 	isb	sy
 800471a:	f3bf 8f4f 	dsb	sy
 800471e:	b662      	cpsie	i
 8004720:	623b      	str	r3, [r7, #32]
}
 8004722:	bf00      	nop
 8004724:	e7fe      	b.n	8004724 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d102      	bne.n	8004732 <xQueueGenericCreateStatic+0x8a>
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <xQueueGenericCreateStatic+0x8e>
 8004732:	2301      	movs	r3, #1
 8004734:	e000      	b.n	8004738 <xQueueGenericCreateStatic+0x90>
 8004736:	2300      	movs	r3, #0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10c      	bne.n	8004756 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800473c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004740:	b672      	cpsid	i
 8004742:	f383 8811 	msr	BASEPRI, r3
 8004746:	f3bf 8f6f 	isb	sy
 800474a:	f3bf 8f4f 	dsb	sy
 800474e:	b662      	cpsie	i
 8004750:	61fb      	str	r3, [r7, #28]
}
 8004752:	bf00      	nop
 8004754:	e7fe      	b.n	8004754 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004756:	2350      	movs	r3, #80	; 0x50
 8004758:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	2b50      	cmp	r3, #80	; 0x50
 800475e:	d00c      	beq.n	800477a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8004760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004764:	b672      	cpsid	i
 8004766:	f383 8811 	msr	BASEPRI, r3
 800476a:	f3bf 8f6f 	isb	sy
 800476e:	f3bf 8f4f 	dsb	sy
 8004772:	b662      	cpsie	i
 8004774:	61bb      	str	r3, [r7, #24]
}
 8004776:	bf00      	nop
 8004778:	e7fe      	b.n	8004778 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800477a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00d      	beq.n	80047a2 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004788:	2201      	movs	r2, #1
 800478a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800478e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004794:	9300      	str	r3, [sp, #0]
 8004796:	4613      	mov	r3, r2
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	68b9      	ldr	r1, [r7, #8]
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f000 f805 	bl	80047ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80047a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3730      	adds	r7, #48	; 0x30
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
 80047b8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d103      	bne.n	80047c8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	69ba      	ldr	r2, [r7, #24]
 80047c4:	601a      	str	r2, [r3, #0]
 80047c6:	e002      	b.n	80047ce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	68ba      	ldr	r2, [r7, #8]
 80047d8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80047da:	2101      	movs	r1, #1
 80047dc:	69b8      	ldr	r0, [r7, #24]
 80047de:	f7ff fef9 	bl	80045d4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	78fa      	ldrb	r2, [r7, #3]
 80047e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80047ea:	bf00      	nop
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
	...

080047f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b08e      	sub	sp, #56	; 0x38
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	607a      	str	r2, [r7, #4]
 8004800:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004802:	2300      	movs	r3, #0
 8004804:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800480a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480c:	2b00      	cmp	r3, #0
 800480e:	d10c      	bne.n	800482a <xQueueGenericSend+0x36>
	__asm volatile
 8004810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004814:	b672      	cpsid	i
 8004816:	f383 8811 	msr	BASEPRI, r3
 800481a:	f3bf 8f6f 	isb	sy
 800481e:	f3bf 8f4f 	dsb	sy
 8004822:	b662      	cpsie	i
 8004824:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004826:	bf00      	nop
 8004828:	e7fe      	b.n	8004828 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d103      	bne.n	8004838 <xQueueGenericSend+0x44>
 8004830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004834:	2b00      	cmp	r3, #0
 8004836:	d101      	bne.n	800483c <xQueueGenericSend+0x48>
 8004838:	2301      	movs	r3, #1
 800483a:	e000      	b.n	800483e <xQueueGenericSend+0x4a>
 800483c:	2300      	movs	r3, #0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d10c      	bne.n	800485c <xQueueGenericSend+0x68>
	__asm volatile
 8004842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004846:	b672      	cpsid	i
 8004848:	f383 8811 	msr	BASEPRI, r3
 800484c:	f3bf 8f6f 	isb	sy
 8004850:	f3bf 8f4f 	dsb	sy
 8004854:	b662      	cpsie	i
 8004856:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004858:	bf00      	nop
 800485a:	e7fe      	b.n	800485a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	2b02      	cmp	r3, #2
 8004860:	d103      	bne.n	800486a <xQueueGenericSend+0x76>
 8004862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004866:	2b01      	cmp	r3, #1
 8004868:	d101      	bne.n	800486e <xQueueGenericSend+0x7a>
 800486a:	2301      	movs	r3, #1
 800486c:	e000      	b.n	8004870 <xQueueGenericSend+0x7c>
 800486e:	2300      	movs	r3, #0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10c      	bne.n	800488e <xQueueGenericSend+0x9a>
	__asm volatile
 8004874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004878:	b672      	cpsid	i
 800487a:	f383 8811 	msr	BASEPRI, r3
 800487e:	f3bf 8f6f 	isb	sy
 8004882:	f3bf 8f4f 	dsb	sy
 8004886:	b662      	cpsie	i
 8004888:	623b      	str	r3, [r7, #32]
}
 800488a:	bf00      	nop
 800488c:	e7fe      	b.n	800488c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800488e:	f001 fb1f 	bl	8005ed0 <xTaskGetSchedulerState>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d102      	bne.n	800489e <xQueueGenericSend+0xaa>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <xQueueGenericSend+0xae>
 800489e:	2301      	movs	r3, #1
 80048a0:	e000      	b.n	80048a4 <xQueueGenericSend+0xb0>
 80048a2:	2300      	movs	r3, #0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d10c      	bne.n	80048c2 <xQueueGenericSend+0xce>
	__asm volatile
 80048a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ac:	b672      	cpsid	i
 80048ae:	f383 8811 	msr	BASEPRI, r3
 80048b2:	f3bf 8f6f 	isb	sy
 80048b6:	f3bf 8f4f 	dsb	sy
 80048ba:	b662      	cpsie	i
 80048bc:	61fb      	str	r3, [r7, #28]
}
 80048be:	bf00      	nop
 80048c0:	e7fe      	b.n	80048c0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80048c2:	f002 f853 	bl	800696c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80048c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d302      	bcc.n	80048d8 <xQueueGenericSend+0xe4>
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d129      	bne.n	800492c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	68b9      	ldr	r1, [r7, #8]
 80048dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048de:	f000 fa15 	bl	8004d0c <prvCopyDataToQueue>
 80048e2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d010      	beq.n	800490e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ee:	3324      	adds	r3, #36	; 0x24
 80048f0:	4618      	mov	r0, r3
 80048f2:	f001 f923 	bl	8005b3c <xTaskRemoveFromEventList>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d013      	beq.n	8004924 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80048fc:	4b3f      	ldr	r3, [pc, #252]	; (80049fc <xQueueGenericSend+0x208>)
 80048fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	f3bf 8f4f 	dsb	sy
 8004908:	f3bf 8f6f 	isb	sy
 800490c:	e00a      	b.n	8004924 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800490e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004910:	2b00      	cmp	r3, #0
 8004912:	d007      	beq.n	8004924 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004914:	4b39      	ldr	r3, [pc, #228]	; (80049fc <xQueueGenericSend+0x208>)
 8004916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800491a:	601a      	str	r2, [r3, #0]
 800491c:	f3bf 8f4f 	dsb	sy
 8004920:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004924:	f002 f856 	bl	80069d4 <vPortExitCritical>
				return pdPASS;
 8004928:	2301      	movs	r3, #1
 800492a:	e063      	b.n	80049f4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d103      	bne.n	800493a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004932:	f002 f84f 	bl	80069d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004936:	2300      	movs	r3, #0
 8004938:	e05c      	b.n	80049f4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800493a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800493c:	2b00      	cmp	r3, #0
 800493e:	d106      	bne.n	800494e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004940:	f107 0314 	add.w	r3, r7, #20
 8004944:	4618      	mov	r0, r3
 8004946:	f001 f95f 	bl	8005c08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800494a:	2301      	movs	r3, #1
 800494c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800494e:	f002 f841 	bl	80069d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004952:	f000 febf 	bl	80056d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004956:	f002 f809 	bl	800696c <vPortEnterCritical>
 800495a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004960:	b25b      	sxtb	r3, r3
 8004962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004966:	d103      	bne.n	8004970 <xQueueGenericSend+0x17c>
 8004968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800496a:	2200      	movs	r2, #0
 800496c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004972:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004976:	b25b      	sxtb	r3, r3
 8004978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497c:	d103      	bne.n	8004986 <xQueueGenericSend+0x192>
 800497e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004980:	2200      	movs	r2, #0
 8004982:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004986:	f002 f825 	bl	80069d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800498a:	1d3a      	adds	r2, r7, #4
 800498c:	f107 0314 	add.w	r3, r7, #20
 8004990:	4611      	mov	r1, r2
 8004992:	4618      	mov	r0, r3
 8004994:	f001 f94e 	bl	8005c34 <xTaskCheckForTimeOut>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d124      	bne.n	80049e8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800499e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049a0:	f000 faac 	bl	8004efc <prvIsQueueFull>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d018      	beq.n	80049dc <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80049aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ac:	3310      	adds	r3, #16
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	4611      	mov	r1, r2
 80049b2:	4618      	mov	r0, r3
 80049b4:	f001 f86e 	bl	8005a94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80049b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049ba:	f000 fa37 	bl	8004e2c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80049be:	f000 fe97 	bl	80056f0 <xTaskResumeAll>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f47f af7c 	bne.w	80048c2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80049ca:	4b0c      	ldr	r3, [pc, #48]	; (80049fc <xQueueGenericSend+0x208>)
 80049cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049d0:	601a      	str	r2, [r3, #0]
 80049d2:	f3bf 8f4f 	dsb	sy
 80049d6:	f3bf 8f6f 	isb	sy
 80049da:	e772      	b.n	80048c2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80049dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049de:	f000 fa25 	bl	8004e2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049e2:	f000 fe85 	bl	80056f0 <xTaskResumeAll>
 80049e6:	e76c      	b.n	80048c2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80049e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049ea:	f000 fa1f 	bl	8004e2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049ee:	f000 fe7f 	bl	80056f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80049f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3738      	adds	r7, #56	; 0x38
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	e000ed04 	.word	0xe000ed04

08004a00 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b08e      	sub	sp, #56	; 0x38
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
 8004a0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d10c      	bne.n	8004a32 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8004a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1c:	b672      	cpsid	i
 8004a1e:	f383 8811 	msr	BASEPRI, r3
 8004a22:	f3bf 8f6f 	isb	sy
 8004a26:	f3bf 8f4f 	dsb	sy
 8004a2a:	b662      	cpsie	i
 8004a2c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a2e:	bf00      	nop
 8004a30:	e7fe      	b.n	8004a30 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d103      	bne.n	8004a40 <xQueueGenericSendFromISR+0x40>
 8004a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d101      	bne.n	8004a44 <xQueueGenericSendFromISR+0x44>
 8004a40:	2301      	movs	r3, #1
 8004a42:	e000      	b.n	8004a46 <xQueueGenericSendFromISR+0x46>
 8004a44:	2300      	movs	r3, #0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10c      	bne.n	8004a64 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8004a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4e:	b672      	cpsid	i
 8004a50:	f383 8811 	msr	BASEPRI, r3
 8004a54:	f3bf 8f6f 	isb	sy
 8004a58:	f3bf 8f4f 	dsb	sy
 8004a5c:	b662      	cpsie	i
 8004a5e:	623b      	str	r3, [r7, #32]
}
 8004a60:	bf00      	nop
 8004a62:	e7fe      	b.n	8004a62 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d103      	bne.n	8004a72 <xQueueGenericSendFromISR+0x72>
 8004a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d101      	bne.n	8004a76 <xQueueGenericSendFromISR+0x76>
 8004a72:	2301      	movs	r3, #1
 8004a74:	e000      	b.n	8004a78 <xQueueGenericSendFromISR+0x78>
 8004a76:	2300      	movs	r3, #0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10c      	bne.n	8004a96 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8004a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a80:	b672      	cpsid	i
 8004a82:	f383 8811 	msr	BASEPRI, r3
 8004a86:	f3bf 8f6f 	isb	sy
 8004a8a:	f3bf 8f4f 	dsb	sy
 8004a8e:	b662      	cpsie	i
 8004a90:	61fb      	str	r3, [r7, #28]
}
 8004a92:	bf00      	nop
 8004a94:	e7fe      	b.n	8004a94 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a96:	f002 f851 	bl	8006b3c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004a9a:	f3ef 8211 	mrs	r2, BASEPRI
 8004a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa2:	b672      	cpsid	i
 8004aa4:	f383 8811 	msr	BASEPRI, r3
 8004aa8:	f3bf 8f6f 	isb	sy
 8004aac:	f3bf 8f4f 	dsb	sy
 8004ab0:	b662      	cpsie	i
 8004ab2:	61ba      	str	r2, [r7, #24]
 8004ab4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004ab6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004abc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d302      	bcc.n	8004acc <xQueueGenericSendFromISR+0xcc>
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d12c      	bne.n	8004b26 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ace:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ad6:	683a      	ldr	r2, [r7, #0]
 8004ad8:	68b9      	ldr	r1, [r7, #8]
 8004ada:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004adc:	f000 f916 	bl	8004d0c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004ae0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae8:	d112      	bne.n	8004b10 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d016      	beq.n	8004b20 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af4:	3324      	adds	r3, #36	; 0x24
 8004af6:	4618      	mov	r0, r3
 8004af8:	f001 f820 	bl	8005b3c <xTaskRemoveFromEventList>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00e      	beq.n	8004b20 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00b      	beq.n	8004b20 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	601a      	str	r2, [r3, #0]
 8004b0e:	e007      	b.n	8004b20 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004b10:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004b14:	3301      	adds	r3, #1
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	b25a      	sxtb	r2, r3
 8004b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004b20:	2301      	movs	r3, #1
 8004b22:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004b24:	e001      	b.n	8004b2a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004b26:	2300      	movs	r3, #0
 8004b28:	637b      	str	r3, [r7, #52]	; 0x34
 8004b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b2c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004b34:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3738      	adds	r7, #56	; 0x38
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b08c      	sub	sp, #48	; 0x30
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10c      	bne.n	8004b74 <xQueueReceive+0x34>
	__asm volatile
 8004b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5e:	b672      	cpsid	i
 8004b60:	f383 8811 	msr	BASEPRI, r3
 8004b64:	f3bf 8f6f 	isb	sy
 8004b68:	f3bf 8f4f 	dsb	sy
 8004b6c:	b662      	cpsie	i
 8004b6e:	623b      	str	r3, [r7, #32]
}
 8004b70:	bf00      	nop
 8004b72:	e7fe      	b.n	8004b72 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d103      	bne.n	8004b82 <xQueueReceive+0x42>
 8004b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d101      	bne.n	8004b86 <xQueueReceive+0x46>
 8004b82:	2301      	movs	r3, #1
 8004b84:	e000      	b.n	8004b88 <xQueueReceive+0x48>
 8004b86:	2300      	movs	r3, #0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d10c      	bne.n	8004ba6 <xQueueReceive+0x66>
	__asm volatile
 8004b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b90:	b672      	cpsid	i
 8004b92:	f383 8811 	msr	BASEPRI, r3
 8004b96:	f3bf 8f6f 	isb	sy
 8004b9a:	f3bf 8f4f 	dsb	sy
 8004b9e:	b662      	cpsie	i
 8004ba0:	61fb      	str	r3, [r7, #28]
}
 8004ba2:	bf00      	nop
 8004ba4:	e7fe      	b.n	8004ba4 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ba6:	f001 f993 	bl	8005ed0 <xTaskGetSchedulerState>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d102      	bne.n	8004bb6 <xQueueReceive+0x76>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <xQueueReceive+0x7a>
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e000      	b.n	8004bbc <xQueueReceive+0x7c>
 8004bba:	2300      	movs	r3, #0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d10c      	bne.n	8004bda <xQueueReceive+0x9a>
	__asm volatile
 8004bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc4:	b672      	cpsid	i
 8004bc6:	f383 8811 	msr	BASEPRI, r3
 8004bca:	f3bf 8f6f 	isb	sy
 8004bce:	f3bf 8f4f 	dsb	sy
 8004bd2:	b662      	cpsie	i
 8004bd4:	61bb      	str	r3, [r7, #24]
}
 8004bd6:	bf00      	nop
 8004bd8:	e7fe      	b.n	8004bd8 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004bda:	f001 fec7 	bl	800696c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d01f      	beq.n	8004c2a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004bea:	68b9      	ldr	r1, [r7, #8]
 8004bec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bee:	f000 f8f7 	bl	8004de0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf4:	1e5a      	subs	r2, r3, #1
 8004bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00f      	beq.n	8004c22 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c04:	3310      	adds	r3, #16
 8004c06:	4618      	mov	r0, r3
 8004c08:	f000 ff98 	bl	8005b3c <xTaskRemoveFromEventList>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d007      	beq.n	8004c22 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004c12:	4b3d      	ldr	r3, [pc, #244]	; (8004d08 <xQueueReceive+0x1c8>)
 8004c14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c18:	601a      	str	r2, [r3, #0]
 8004c1a:	f3bf 8f4f 	dsb	sy
 8004c1e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004c22:	f001 fed7 	bl	80069d4 <vPortExitCritical>
				return pdPASS;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e069      	b.n	8004cfe <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d103      	bne.n	8004c38 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c30:	f001 fed0 	bl	80069d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004c34:	2300      	movs	r3, #0
 8004c36:	e062      	b.n	8004cfe <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d106      	bne.n	8004c4c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c3e:	f107 0310 	add.w	r3, r7, #16
 8004c42:	4618      	mov	r0, r3
 8004c44:	f000 ffe0 	bl	8005c08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c4c:	f001 fec2 	bl	80069d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c50:	f000 fd40 	bl	80056d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c54:	f001 fe8a 	bl	800696c <vPortEnterCritical>
 8004c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c5e:	b25b      	sxtb	r3, r3
 8004c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c64:	d103      	bne.n	8004c6e <xQueueReceive+0x12e>
 8004c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c74:	b25b      	sxtb	r3, r3
 8004c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c7a:	d103      	bne.n	8004c84 <xQueueReceive+0x144>
 8004c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c84:	f001 fea6 	bl	80069d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c88:	1d3a      	adds	r2, r7, #4
 8004c8a:	f107 0310 	add.w	r3, r7, #16
 8004c8e:	4611      	mov	r1, r2
 8004c90:	4618      	mov	r0, r3
 8004c92:	f000 ffcf 	bl	8005c34 <xTaskCheckForTimeOut>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d123      	bne.n	8004ce4 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c9e:	f000 f917 	bl	8004ed0 <prvIsQueueEmpty>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d017      	beq.n	8004cd8 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004caa:	3324      	adds	r3, #36	; 0x24
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	4611      	mov	r1, r2
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f000 feef 	bl	8005a94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004cb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cb8:	f000 f8b8 	bl	8004e2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004cbc:	f000 fd18 	bl	80056f0 <xTaskResumeAll>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d189      	bne.n	8004bda <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8004cc6:	4b10      	ldr	r3, [pc, #64]	; (8004d08 <xQueueReceive+0x1c8>)
 8004cc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ccc:	601a      	str	r2, [r3, #0]
 8004cce:	f3bf 8f4f 	dsb	sy
 8004cd2:	f3bf 8f6f 	isb	sy
 8004cd6:	e780      	b.n	8004bda <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004cd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cda:	f000 f8a7 	bl	8004e2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004cde:	f000 fd07 	bl	80056f0 <xTaskResumeAll>
 8004ce2:	e77a      	b.n	8004bda <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004ce4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ce6:	f000 f8a1 	bl	8004e2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004cea:	f000 fd01 	bl	80056f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004cee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cf0:	f000 f8ee 	bl	8004ed0 <prvIsQueueEmpty>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	f43f af6f 	beq.w	8004bda <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004cfc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3730      	adds	r7, #48	; 0x30
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	e000ed04 	.word	0xe000ed04

08004d0c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d20:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d10d      	bne.n	8004d46 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d14d      	bne.n	8004dce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f001 f8e8 	bl	8005f0c <xTaskPriorityDisinherit>
 8004d3c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	609a      	str	r2, [r3, #8]
 8004d44:	e043      	b.n	8004dce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d119      	bne.n	8004d80 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6858      	ldr	r0, [r3, #4]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d54:	461a      	mov	r2, r3
 8004d56:	68b9      	ldr	r1, [r7, #8]
 8004d58:	f002 f99c 	bl	8007094 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	685a      	ldr	r2, [r3, #4]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d64:	441a      	add	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	685a      	ldr	r2, [r3, #4]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d32b      	bcc.n	8004dce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	605a      	str	r2, [r3, #4]
 8004d7e:	e026      	b.n	8004dce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	68d8      	ldr	r0, [r3, #12]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d88:	461a      	mov	r2, r3
 8004d8a:	68b9      	ldr	r1, [r7, #8]
 8004d8c:	f002 f982 	bl	8007094 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	68da      	ldr	r2, [r3, #12]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d98:	425b      	negs	r3, r3
 8004d9a:	441a      	add	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	68da      	ldr	r2, [r3, #12]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d207      	bcs.n	8004dbc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	689a      	ldr	r2, [r3, #8]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db4:	425b      	negs	r3, r3
 8004db6:	441a      	add	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d105      	bne.n	8004dce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d002      	beq.n	8004dce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	1c5a      	adds	r2, r3, #1
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004dd6:	697b      	ldr	r3, [r7, #20]
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3718      	adds	r7, #24
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d018      	beq.n	8004e24 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68da      	ldr	r2, [r3, #12]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfa:	441a      	add	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	68da      	ldr	r2, [r3, #12]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d303      	bcc.n	8004e14 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	68d9      	ldr	r1, [r3, #12]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	6838      	ldr	r0, [r7, #0]
 8004e20:	f002 f938 	bl	8007094 <memcpy>
	}
}
 8004e24:	bf00      	nop
 8004e26:	3708      	adds	r7, #8
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004e34:	f001 fd9a 	bl	800696c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e3e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e40:	e011      	b.n	8004e66 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d012      	beq.n	8004e70 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	3324      	adds	r3, #36	; 0x24
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f000 fe74 	bl	8005b3c <xTaskRemoveFromEventList>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d001      	beq.n	8004e5e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004e5a:	f000 ff51 	bl	8005d00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004e5e:	7bfb      	ldrb	r3, [r7, #15]
 8004e60:	3b01      	subs	r3, #1
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	dce9      	bgt.n	8004e42 <prvUnlockQueue+0x16>
 8004e6e:	e000      	b.n	8004e72 <prvUnlockQueue+0x46>
					break;
 8004e70:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	22ff      	movs	r2, #255	; 0xff
 8004e76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004e7a:	f001 fdab 	bl	80069d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004e7e:	f001 fd75 	bl	800696c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e88:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e8a:	e011      	b.n	8004eb0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d012      	beq.n	8004eba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	3310      	adds	r3, #16
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f000 fe4f 	bl	8005b3c <xTaskRemoveFromEventList>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d001      	beq.n	8004ea8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004ea4:	f000 ff2c 	bl	8005d00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004ea8:	7bbb      	ldrb	r3, [r7, #14]
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004eb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	dce9      	bgt.n	8004e8c <prvUnlockQueue+0x60>
 8004eb8:	e000      	b.n	8004ebc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004eba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	22ff      	movs	r2, #255	; 0xff
 8004ec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004ec4:	f001 fd86 	bl	80069d4 <vPortExitCritical>
}
 8004ec8:	bf00      	nop
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ed8:	f001 fd48 	bl	800696c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d102      	bne.n	8004eea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	60fb      	str	r3, [r7, #12]
 8004ee8:	e001      	b.n	8004eee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004eea:	2300      	movs	r3, #0
 8004eec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004eee:	f001 fd71 	bl	80069d4 <vPortExitCritical>

	return xReturn;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3710      	adds	r7, #16
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f04:	f001 fd32 	bl	800696c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d102      	bne.n	8004f1a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004f14:	2301      	movs	r3, #1
 8004f16:	60fb      	str	r3, [r7, #12]
 8004f18:	e001      	b.n	8004f1e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f1e:	f001 fd59 	bl	80069d4 <vPortExitCritical>

	return xReturn;
 8004f22:	68fb      	ldr	r3, [r7, #12]
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f36:	2300      	movs	r3, #0
 8004f38:	60fb      	str	r3, [r7, #12]
 8004f3a:	e014      	b.n	8004f66 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004f3c:	4a0f      	ldr	r2, [pc, #60]	; (8004f7c <vQueueAddToRegistry+0x50>)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10b      	bne.n	8004f60 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004f48:	490c      	ldr	r1, [pc, #48]	; (8004f7c <vQueueAddToRegistry+0x50>)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	683a      	ldr	r2, [r7, #0]
 8004f4e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004f52:	4a0a      	ldr	r2, [pc, #40]	; (8004f7c <vQueueAddToRegistry+0x50>)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	00db      	lsls	r3, r3, #3
 8004f58:	4413      	add	r3, r2
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004f5e:	e006      	b.n	8004f6e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	3301      	adds	r3, #1
 8004f64:	60fb      	str	r3, [r7, #12]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2b07      	cmp	r3, #7
 8004f6a:	d9e7      	bls.n	8004f3c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004f6c:	bf00      	nop
 8004f6e:	bf00      	nop
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	200009c8 	.word	0x200009c8

08004f80 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b086      	sub	sp, #24
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004f90:	f001 fcec 	bl	800696c <vPortEnterCritical>
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f9a:	b25b      	sxtb	r3, r3
 8004f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa0:	d103      	bne.n	8004faa <vQueueWaitForMessageRestricted+0x2a>
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fb0:	b25b      	sxtb	r3, r3
 8004fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb6:	d103      	bne.n	8004fc0 <vQueueWaitForMessageRestricted+0x40>
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fc0:	f001 fd08 	bl	80069d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d106      	bne.n	8004fda <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	3324      	adds	r3, #36	; 0x24
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	68b9      	ldr	r1, [r7, #8]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f000 fd83 	bl	8005ae0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004fda:	6978      	ldr	r0, [r7, #20]
 8004fdc:	f7ff ff26 	bl	8004e2c <prvUnlockQueue>
	}
 8004fe0:	bf00      	nop
 8004fe2:	3718      	adds	r7, #24
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b08e      	sub	sp, #56	; 0x38
 8004fec:	af04      	add	r7, sp, #16
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
 8004ff4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d10c      	bne.n	8005016 <xTaskCreateStatic+0x2e>
	__asm volatile
 8004ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005000:	b672      	cpsid	i
 8005002:	f383 8811 	msr	BASEPRI, r3
 8005006:	f3bf 8f6f 	isb	sy
 800500a:	f3bf 8f4f 	dsb	sy
 800500e:	b662      	cpsie	i
 8005010:	623b      	str	r3, [r7, #32]
}
 8005012:	bf00      	nop
 8005014:	e7fe      	b.n	8005014 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8005016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005018:	2b00      	cmp	r3, #0
 800501a:	d10c      	bne.n	8005036 <xTaskCreateStatic+0x4e>
	__asm volatile
 800501c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005020:	b672      	cpsid	i
 8005022:	f383 8811 	msr	BASEPRI, r3
 8005026:	f3bf 8f6f 	isb	sy
 800502a:	f3bf 8f4f 	dsb	sy
 800502e:	b662      	cpsie	i
 8005030:	61fb      	str	r3, [r7, #28]
}
 8005032:	bf00      	nop
 8005034:	e7fe      	b.n	8005034 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005036:	23a8      	movs	r3, #168	; 0xa8
 8005038:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	2ba8      	cmp	r3, #168	; 0xa8
 800503e:	d00c      	beq.n	800505a <xTaskCreateStatic+0x72>
	__asm volatile
 8005040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005044:	b672      	cpsid	i
 8005046:	f383 8811 	msr	BASEPRI, r3
 800504a:	f3bf 8f6f 	isb	sy
 800504e:	f3bf 8f4f 	dsb	sy
 8005052:	b662      	cpsie	i
 8005054:	61bb      	str	r3, [r7, #24]
}
 8005056:	bf00      	nop
 8005058:	e7fe      	b.n	8005058 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800505a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800505c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800505e:	2b00      	cmp	r3, #0
 8005060:	d01e      	beq.n	80050a0 <xTaskCreateStatic+0xb8>
 8005062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005064:	2b00      	cmp	r3, #0
 8005066:	d01b      	beq.n	80050a0 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800506a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800506c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005070:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005074:	2202      	movs	r2, #2
 8005076:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800507a:	2300      	movs	r3, #0
 800507c:	9303      	str	r3, [sp, #12]
 800507e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005080:	9302      	str	r3, [sp, #8]
 8005082:	f107 0314 	add.w	r3, r7, #20
 8005086:	9301      	str	r3, [sp, #4]
 8005088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508a:	9300      	str	r3, [sp, #0]
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	68b9      	ldr	r1, [r7, #8]
 8005092:	68f8      	ldr	r0, [r7, #12]
 8005094:	f000 f850 	bl	8005138 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005098:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800509a:	f000 f8f5 	bl	8005288 <prvAddNewTaskToReadyList>
 800509e:	e001      	b.n	80050a4 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80050a0:	2300      	movs	r3, #0
 80050a2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80050a4:	697b      	ldr	r3, [r7, #20]
	}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3728      	adds	r7, #40	; 0x28
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b08c      	sub	sp, #48	; 0x30
 80050b2:	af04      	add	r7, sp, #16
 80050b4:	60f8      	str	r0, [r7, #12]
 80050b6:	60b9      	str	r1, [r7, #8]
 80050b8:	603b      	str	r3, [r7, #0]
 80050ba:	4613      	mov	r3, r2
 80050bc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80050be:	88fb      	ldrh	r3, [r7, #6]
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	4618      	mov	r0, r3
 80050c4:	f001 fd7e 	bl	8006bc4 <pvPortMalloc>
 80050c8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00e      	beq.n	80050ee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80050d0:	20a8      	movs	r0, #168	; 0xa8
 80050d2:	f001 fd77 	bl	8006bc4 <pvPortMalloc>
 80050d6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d003      	beq.n	80050e6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	697a      	ldr	r2, [r7, #20]
 80050e2:	631a      	str	r2, [r3, #48]	; 0x30
 80050e4:	e005      	b.n	80050f2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80050e6:	6978      	ldr	r0, [r7, #20]
 80050e8:	f001 fe36 	bl	8006d58 <vPortFree>
 80050ec:	e001      	b.n	80050f2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80050ee:	2300      	movs	r3, #0
 80050f0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d017      	beq.n	8005128 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005100:	88fa      	ldrh	r2, [r7, #6]
 8005102:	2300      	movs	r3, #0
 8005104:	9303      	str	r3, [sp, #12]
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	9302      	str	r3, [sp, #8]
 800510a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800510c:	9301      	str	r3, [sp, #4]
 800510e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005110:	9300      	str	r3, [sp, #0]
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	68b9      	ldr	r1, [r7, #8]
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	f000 f80e 	bl	8005138 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800511c:	69f8      	ldr	r0, [r7, #28]
 800511e:	f000 f8b3 	bl	8005288 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005122:	2301      	movs	r3, #1
 8005124:	61bb      	str	r3, [r7, #24]
 8005126:	e002      	b.n	800512e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005128:	f04f 33ff 	mov.w	r3, #4294967295
 800512c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800512e:	69bb      	ldr	r3, [r7, #24]
	}
 8005130:	4618      	mov	r0, r3
 8005132:	3720      	adds	r7, #32
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b088      	sub	sp, #32
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	607a      	str	r2, [r7, #4]
 8005144:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005148:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	461a      	mov	r2, r3
 8005150:	21a5      	movs	r1, #165	; 0xa5
 8005152:	f001 ff1b 	bl	8006f8c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005158:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800515a:	6879      	ldr	r1, [r7, #4]
 800515c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005160:	440b      	add	r3, r1
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	4413      	add	r3, r2
 8005166:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	f023 0307 	bic.w	r3, r3, #7
 800516e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	f003 0307 	and.w	r3, r3, #7
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00c      	beq.n	8005194 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800517a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517e:	b672      	cpsid	i
 8005180:	f383 8811 	msr	BASEPRI, r3
 8005184:	f3bf 8f6f 	isb	sy
 8005188:	f3bf 8f4f 	dsb	sy
 800518c:	b662      	cpsie	i
 800518e:	617b      	str	r3, [r7, #20]
}
 8005190:	bf00      	nop
 8005192:	e7fe      	b.n	8005192 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d01f      	beq.n	80051da <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800519a:	2300      	movs	r3, #0
 800519c:	61fb      	str	r3, [r7, #28]
 800519e:	e012      	b.n	80051c6 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80051a0:	68ba      	ldr	r2, [r7, #8]
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	4413      	add	r3, r2
 80051a6:	7819      	ldrb	r1, [r3, #0]
 80051a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	4413      	add	r3, r2
 80051ae:	3334      	adds	r3, #52	; 0x34
 80051b0:	460a      	mov	r2, r1
 80051b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80051b4:	68ba      	ldr	r2, [r7, #8]
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	4413      	add	r3, r2
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d006      	beq.n	80051ce <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	3301      	adds	r3, #1
 80051c4:	61fb      	str	r3, [r7, #28]
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	2b0f      	cmp	r3, #15
 80051ca:	d9e9      	bls.n	80051a0 <prvInitialiseNewTask+0x68>
 80051cc:	e000      	b.n	80051d0 <prvInitialiseNewTask+0x98>
			{
				break;
 80051ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80051d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051d8:	e003      	b.n	80051e2 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80051da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80051e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e4:	2b37      	cmp	r3, #55	; 0x37
 80051e6:	d901      	bls.n	80051ec <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80051e8:	2337      	movs	r3, #55	; 0x37
 80051ea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80051ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80051f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051f6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80051f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fa:	2200      	movs	r2, #0
 80051fc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80051fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005200:	3304      	adds	r3, #4
 8005202:	4618      	mov	r0, r3
 8005204:	f7ff f952 	bl	80044ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520a:	3318      	adds	r3, #24
 800520c:	4618      	mov	r0, r3
 800520e:	f7ff f94d 	bl	80044ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005214:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005216:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800521e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005220:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005226:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522a:	2200      	movs	r2, #0
 800522c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005232:	2200      	movs	r2, #0
 8005234:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523a:	3354      	adds	r3, #84	; 0x54
 800523c:	224c      	movs	r2, #76	; 0x4c
 800523e:	2100      	movs	r1, #0
 8005240:	4618      	mov	r0, r3
 8005242:	f001 fea3 	bl	8006f8c <memset>
 8005246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005248:	4a0c      	ldr	r2, [pc, #48]	; (800527c <prvInitialiseNewTask+0x144>)
 800524a:	659a      	str	r2, [r3, #88]	; 0x58
 800524c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524e:	4a0c      	ldr	r2, [pc, #48]	; (8005280 <prvInitialiseNewTask+0x148>)
 8005250:	65da      	str	r2, [r3, #92]	; 0x5c
 8005252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005254:	4a0b      	ldr	r2, [pc, #44]	; (8005284 <prvInitialiseNewTask+0x14c>)
 8005256:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005258:	683a      	ldr	r2, [r7, #0]
 800525a:	68f9      	ldr	r1, [r7, #12]
 800525c:	69b8      	ldr	r0, [r7, #24]
 800525e:	f001 fa77 	bl	8006750 <pxPortInitialiseStack>
 8005262:	4602      	mov	r2, r0
 8005264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005266:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800526a:	2b00      	cmp	r3, #0
 800526c:	d002      	beq.n	8005274 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800526e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005270:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005272:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005274:	bf00      	nop
 8005276:	3720      	adds	r7, #32
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}
 800527c:	20004c54 	.word	0x20004c54
 8005280:	20004cbc 	.word	0x20004cbc
 8005284:	20004d24 	.word	0x20004d24

08005288 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005290:	f001 fb6c 	bl	800696c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005294:	4b2d      	ldr	r3, [pc, #180]	; (800534c <prvAddNewTaskToReadyList+0xc4>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	3301      	adds	r3, #1
 800529a:	4a2c      	ldr	r2, [pc, #176]	; (800534c <prvAddNewTaskToReadyList+0xc4>)
 800529c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800529e:	4b2c      	ldr	r3, [pc, #176]	; (8005350 <prvAddNewTaskToReadyList+0xc8>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d109      	bne.n	80052ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80052a6:	4a2a      	ldr	r2, [pc, #168]	; (8005350 <prvAddNewTaskToReadyList+0xc8>)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80052ac:	4b27      	ldr	r3, [pc, #156]	; (800534c <prvAddNewTaskToReadyList+0xc4>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d110      	bne.n	80052d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80052b4:	f000 fd48 	bl	8005d48 <prvInitialiseTaskLists>
 80052b8:	e00d      	b.n	80052d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80052ba:	4b26      	ldr	r3, [pc, #152]	; (8005354 <prvAddNewTaskToReadyList+0xcc>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d109      	bne.n	80052d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80052c2:	4b23      	ldr	r3, [pc, #140]	; (8005350 <prvAddNewTaskToReadyList+0xc8>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d802      	bhi.n	80052d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80052d0:	4a1f      	ldr	r2, [pc, #124]	; (8005350 <prvAddNewTaskToReadyList+0xc8>)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80052d6:	4b20      	ldr	r3, [pc, #128]	; (8005358 <prvAddNewTaskToReadyList+0xd0>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	3301      	adds	r3, #1
 80052dc:	4a1e      	ldr	r2, [pc, #120]	; (8005358 <prvAddNewTaskToReadyList+0xd0>)
 80052de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80052e0:	4b1d      	ldr	r3, [pc, #116]	; (8005358 <prvAddNewTaskToReadyList+0xd0>)
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ec:	4b1b      	ldr	r3, [pc, #108]	; (800535c <prvAddNewTaskToReadyList+0xd4>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d903      	bls.n	80052fc <prvAddNewTaskToReadyList+0x74>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f8:	4a18      	ldr	r2, [pc, #96]	; (800535c <prvAddNewTaskToReadyList+0xd4>)
 80052fa:	6013      	str	r3, [r2, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005300:	4613      	mov	r3, r2
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4413      	add	r3, r2
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	4a15      	ldr	r2, [pc, #84]	; (8005360 <prvAddNewTaskToReadyList+0xd8>)
 800530a:	441a      	add	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	3304      	adds	r3, #4
 8005310:	4619      	mov	r1, r3
 8005312:	4610      	mov	r0, r2
 8005314:	f7ff f8d7 	bl	80044c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005318:	f001 fb5c 	bl	80069d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800531c:	4b0d      	ldr	r3, [pc, #52]	; (8005354 <prvAddNewTaskToReadyList+0xcc>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00e      	beq.n	8005342 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005324:	4b0a      	ldr	r3, [pc, #40]	; (8005350 <prvAddNewTaskToReadyList+0xc8>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532e:	429a      	cmp	r2, r3
 8005330:	d207      	bcs.n	8005342 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005332:	4b0c      	ldr	r3, [pc, #48]	; (8005364 <prvAddNewTaskToReadyList+0xdc>)
 8005334:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005338:	601a      	str	r2, [r3, #0]
 800533a:	f3bf 8f4f 	dsb	sy
 800533e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005342:	bf00      	nop
 8005344:	3708      	adds	r7, #8
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	20000edc 	.word	0x20000edc
 8005350:	20000a08 	.word	0x20000a08
 8005354:	20000ee8 	.word	0x20000ee8
 8005358:	20000ef8 	.word	0x20000ef8
 800535c:	20000ee4 	.word	0x20000ee4
 8005360:	20000a0c 	.word	0x20000a0c
 8005364:	e000ed04 	.word	0xe000ed04

08005368 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005370:	2300      	movs	r3, #0
 8005372:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d019      	beq.n	80053ae <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800537a:	4b14      	ldr	r3, [pc, #80]	; (80053cc <vTaskDelay+0x64>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00c      	beq.n	800539c <vTaskDelay+0x34>
	__asm volatile
 8005382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005386:	b672      	cpsid	i
 8005388:	f383 8811 	msr	BASEPRI, r3
 800538c:	f3bf 8f6f 	isb	sy
 8005390:	f3bf 8f4f 	dsb	sy
 8005394:	b662      	cpsie	i
 8005396:	60bb      	str	r3, [r7, #8]
}
 8005398:	bf00      	nop
 800539a:	e7fe      	b.n	800539a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800539c:	f000 f99a 	bl	80056d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80053a0:	2100      	movs	r1, #0
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 fe24 	bl	8005ff0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80053a8:	f000 f9a2 	bl	80056f0 <xTaskResumeAll>
 80053ac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d107      	bne.n	80053c4 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80053b4:	4b06      	ldr	r3, [pc, #24]	; (80053d0 <vTaskDelay+0x68>)
 80053b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053ba:	601a      	str	r2, [r3, #0]
 80053bc:	f3bf 8f4f 	dsb	sy
 80053c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80053c4:	bf00      	nop
 80053c6:	3710      	adds	r7, #16
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	20000f04 	.word	0x20000f04
 80053d0:	e000ed04 	.word	0xe000ed04

080053d4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80053dc:	f001 fac6 	bl	800696c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d102      	bne.n	80053ec <vTaskSuspend+0x18>
 80053e6:	4b31      	ldr	r3, [pc, #196]	; (80054ac <vTaskSuspend+0xd8>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	e000      	b.n	80053ee <vTaskSuspend+0x1a>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	3304      	adds	r3, #4
 80053f4:	4618      	mov	r0, r3
 80053f6:	f7ff f8c3 	bl	8004580 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d004      	beq.n	800540c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	3318      	adds	r3, #24
 8005406:	4618      	mov	r0, r3
 8005408:	f7ff f8ba 	bl	8004580 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	3304      	adds	r3, #4
 8005410:	4619      	mov	r1, r3
 8005412:	4827      	ldr	r0, [pc, #156]	; (80054b0 <vTaskSuspend+0xdc>)
 8005414:	f7ff f857 	bl	80044c6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800541e:	b2db      	uxtb	r3, r3
 8005420:	2b01      	cmp	r3, #1
 8005422:	d103      	bne.n	800542c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800542c:	f001 fad2 	bl	80069d4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8005430:	4b20      	ldr	r3, [pc, #128]	; (80054b4 <vTaskSuspend+0xe0>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d005      	beq.n	8005444 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8005438:	f001 fa98 	bl	800696c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800543c:	f000 fd28 	bl	8005e90 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8005440:	f001 fac8 	bl	80069d4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8005444:	4b19      	ldr	r3, [pc, #100]	; (80054ac <vTaskSuspend+0xd8>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	429a      	cmp	r2, r3
 800544c:	d129      	bne.n	80054a2 <vTaskSuspend+0xce>
		{
			if( xSchedulerRunning != pdFALSE )
 800544e:	4b19      	ldr	r3, [pc, #100]	; (80054b4 <vTaskSuspend+0xe0>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d019      	beq.n	800548a <vTaskSuspend+0xb6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8005456:	4b18      	ldr	r3, [pc, #96]	; (80054b8 <vTaskSuspend+0xe4>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00c      	beq.n	8005478 <vTaskSuspend+0xa4>
	__asm volatile
 800545e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005462:	b672      	cpsid	i
 8005464:	f383 8811 	msr	BASEPRI, r3
 8005468:	f3bf 8f6f 	isb	sy
 800546c:	f3bf 8f4f 	dsb	sy
 8005470:	b662      	cpsie	i
 8005472:	60bb      	str	r3, [r7, #8]
}
 8005474:	bf00      	nop
 8005476:	e7fe      	b.n	8005476 <vTaskSuspend+0xa2>
				portYIELD_WITHIN_API();
 8005478:	4b10      	ldr	r3, [pc, #64]	; (80054bc <vTaskSuspend+0xe8>)
 800547a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800547e:	601a      	str	r2, [r3, #0]
 8005480:	f3bf 8f4f 	dsb	sy
 8005484:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005488:	e00b      	b.n	80054a2 <vTaskSuspend+0xce>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800548a:	4b09      	ldr	r3, [pc, #36]	; (80054b0 <vTaskSuspend+0xdc>)
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	4b0c      	ldr	r3, [pc, #48]	; (80054c0 <vTaskSuspend+0xec>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	429a      	cmp	r2, r3
 8005494:	d103      	bne.n	800549e <vTaskSuspend+0xca>
					pxCurrentTCB = NULL;
 8005496:	4b05      	ldr	r3, [pc, #20]	; (80054ac <vTaskSuspend+0xd8>)
 8005498:	2200      	movs	r2, #0
 800549a:	601a      	str	r2, [r3, #0]
	}
 800549c:	e001      	b.n	80054a2 <vTaskSuspend+0xce>
					vTaskSwitchContext();
 800549e:	f000 fa93 	bl	80059c8 <vTaskSwitchContext>
	}
 80054a2:	bf00      	nop
 80054a4:	3710      	adds	r7, #16
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	20000a08 	.word	0x20000a08
 80054b0:	20000ec8 	.word	0x20000ec8
 80054b4:	20000ee8 	.word	0x20000ee8
 80054b8:	20000f04 	.word	0x20000f04
 80054bc:	e000ed04 	.word	0xe000ed04
 80054c0:	20000edc 	.word	0x20000edc

080054c4 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80054c4:	b480      	push	{r7}
 80054c6:	b087      	sub	sp, #28
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80054cc:	2300      	movs	r3, #0
 80054ce:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d10c      	bne.n	80054f4 <prvTaskIsTaskSuspended+0x30>
	__asm volatile
 80054da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054de:	b672      	cpsid	i
 80054e0:	f383 8811 	msr	BASEPRI, r3
 80054e4:	f3bf 8f6f 	isb	sy
 80054e8:	f3bf 8f4f 	dsb	sy
 80054ec:	b662      	cpsie	i
 80054ee:	60fb      	str	r3, [r7, #12]
}
 80054f0:	bf00      	nop
 80054f2:	e7fe      	b.n	80054f2 <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	695b      	ldr	r3, [r3, #20]
 80054f8:	4a0a      	ldr	r2, [pc, #40]	; (8005524 <prvTaskIsTaskSuspended+0x60>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d10a      	bne.n	8005514 <prvTaskIsTaskSuspended+0x50>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005502:	4a09      	ldr	r2, [pc, #36]	; (8005528 <prvTaskIsTaskSuspended+0x64>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d005      	beq.n	8005514 <prvTaskIsTaskSuspended+0x50>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800550c:	2b00      	cmp	r3, #0
 800550e:	d101      	bne.n	8005514 <prvTaskIsTaskSuspended+0x50>
				{
					xReturn = pdTRUE;
 8005510:	2301      	movs	r3, #1
 8005512:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005514:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8005516:	4618      	mov	r0, r3
 8005518:	371c      	adds	r7, #28
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	20000ec8 	.word	0x20000ec8
 8005528:	20000e9c 	.word	0x20000e9c

0800552c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10c      	bne.n	8005558 <vTaskResume+0x2c>
	__asm volatile
 800553e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005542:	b672      	cpsid	i
 8005544:	f383 8811 	msr	BASEPRI, r3
 8005548:	f3bf 8f6f 	isb	sy
 800554c:	f3bf 8f4f 	dsb	sy
 8005550:	b662      	cpsie	i
 8005552:	60bb      	str	r3, [r7, #8]
}
 8005554:	bf00      	nop
 8005556:	e7fe      	b.n	8005556 <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8005558:	4b20      	ldr	r3, [pc, #128]	; (80055dc <vTaskResume+0xb0>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	429a      	cmp	r2, r3
 8005560:	d038      	beq.n	80055d4 <vTaskResume+0xa8>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d035      	beq.n	80055d4 <vTaskResume+0xa8>
		{
			taskENTER_CRITICAL();
 8005568:	f001 fa00 	bl	800696c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800556c:	68f8      	ldr	r0, [r7, #12]
 800556e:	f7ff ffa9 	bl	80054c4 <prvTaskIsTaskSuspended>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d02b      	beq.n	80055d0 <vTaskResume+0xa4>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	3304      	adds	r3, #4
 800557c:	4618      	mov	r0, r3
 800557e:	f7fe ffff 	bl	8004580 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005586:	4b16      	ldr	r3, [pc, #88]	; (80055e0 <vTaskResume+0xb4>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	429a      	cmp	r2, r3
 800558c:	d903      	bls.n	8005596 <vTaskResume+0x6a>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005592:	4a13      	ldr	r2, [pc, #76]	; (80055e0 <vTaskResume+0xb4>)
 8005594:	6013      	str	r3, [r2, #0]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800559a:	4613      	mov	r3, r2
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	4413      	add	r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4a10      	ldr	r2, [pc, #64]	; (80055e4 <vTaskResume+0xb8>)
 80055a4:	441a      	add	r2, r3
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	3304      	adds	r3, #4
 80055aa:	4619      	mov	r1, r3
 80055ac:	4610      	mov	r0, r2
 80055ae:	f7fe ff8a 	bl	80044c6 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055b6:	4b09      	ldr	r3, [pc, #36]	; (80055dc <vTaskResume+0xb0>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055bc:	429a      	cmp	r2, r3
 80055be:	d307      	bcc.n	80055d0 <vTaskResume+0xa4>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80055c0:	4b09      	ldr	r3, [pc, #36]	; (80055e8 <vTaskResume+0xbc>)
 80055c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055c6:	601a      	str	r2, [r3, #0]
 80055c8:	f3bf 8f4f 	dsb	sy
 80055cc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80055d0:	f001 fa00 	bl	80069d4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80055d4:	bf00      	nop
 80055d6:	3710      	adds	r7, #16
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	20000a08 	.word	0x20000a08
 80055e0:	20000ee4 	.word	0x20000ee4
 80055e4:	20000a0c 	.word	0x20000a0c
 80055e8:	e000ed04 	.word	0xe000ed04

080055ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b08a      	sub	sp, #40	; 0x28
 80055f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80055f2:	2300      	movs	r3, #0
 80055f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80055f6:	2300      	movs	r3, #0
 80055f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80055fa:	463a      	mov	r2, r7
 80055fc:	1d39      	adds	r1, r7, #4
 80055fe:	f107 0308 	add.w	r3, r7, #8
 8005602:	4618      	mov	r0, r3
 8005604:	f7fe fefe 	bl	8004404 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005608:	6839      	ldr	r1, [r7, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	68ba      	ldr	r2, [r7, #8]
 800560e:	9202      	str	r2, [sp, #8]
 8005610:	9301      	str	r3, [sp, #4]
 8005612:	2300      	movs	r3, #0
 8005614:	9300      	str	r3, [sp, #0]
 8005616:	2300      	movs	r3, #0
 8005618:	460a      	mov	r2, r1
 800561a:	4926      	ldr	r1, [pc, #152]	; (80056b4 <vTaskStartScheduler+0xc8>)
 800561c:	4826      	ldr	r0, [pc, #152]	; (80056b8 <vTaskStartScheduler+0xcc>)
 800561e:	f7ff fce3 	bl	8004fe8 <xTaskCreateStatic>
 8005622:	4603      	mov	r3, r0
 8005624:	4a25      	ldr	r2, [pc, #148]	; (80056bc <vTaskStartScheduler+0xd0>)
 8005626:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005628:	4b24      	ldr	r3, [pc, #144]	; (80056bc <vTaskStartScheduler+0xd0>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d002      	beq.n	8005636 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005630:	2301      	movs	r3, #1
 8005632:	617b      	str	r3, [r7, #20]
 8005634:	e001      	b.n	800563a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005636:	2300      	movs	r3, #0
 8005638:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	2b01      	cmp	r3, #1
 800563e:	d102      	bne.n	8005646 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005640:	f000 fd2a 	bl	8006098 <xTimerCreateTimerTask>
 8005644:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d11d      	bne.n	8005688 <vTaskStartScheduler+0x9c>
	__asm volatile
 800564c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005650:	b672      	cpsid	i
 8005652:	f383 8811 	msr	BASEPRI, r3
 8005656:	f3bf 8f6f 	isb	sy
 800565a:	f3bf 8f4f 	dsb	sy
 800565e:	b662      	cpsie	i
 8005660:	613b      	str	r3, [r7, #16]
}
 8005662:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005664:	4b16      	ldr	r3, [pc, #88]	; (80056c0 <vTaskStartScheduler+0xd4>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	3354      	adds	r3, #84	; 0x54
 800566a:	4a16      	ldr	r2, [pc, #88]	; (80056c4 <vTaskStartScheduler+0xd8>)
 800566c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800566e:	4b16      	ldr	r3, [pc, #88]	; (80056c8 <vTaskStartScheduler+0xdc>)
 8005670:	f04f 32ff 	mov.w	r2, #4294967295
 8005674:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005676:	4b15      	ldr	r3, [pc, #84]	; (80056cc <vTaskStartScheduler+0xe0>)
 8005678:	2201      	movs	r2, #1
 800567a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800567c:	4b14      	ldr	r3, [pc, #80]	; (80056d0 <vTaskStartScheduler+0xe4>)
 800567e:	2200      	movs	r2, #0
 8005680:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005682:	f001 f8f5 	bl	8006870 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005686:	e010      	b.n	80056aa <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800568e:	d10c      	bne.n	80056aa <vTaskStartScheduler+0xbe>
	__asm volatile
 8005690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005694:	b672      	cpsid	i
 8005696:	f383 8811 	msr	BASEPRI, r3
 800569a:	f3bf 8f6f 	isb	sy
 800569e:	f3bf 8f4f 	dsb	sy
 80056a2:	b662      	cpsie	i
 80056a4:	60fb      	str	r3, [r7, #12]
}
 80056a6:	bf00      	nop
 80056a8:	e7fe      	b.n	80056a8 <vTaskStartScheduler+0xbc>
}
 80056aa:	bf00      	nop
 80056ac:	3718      	adds	r7, #24
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	08007198 	.word	0x08007198
 80056b8:	08005d19 	.word	0x08005d19
 80056bc:	20000f00 	.word	0x20000f00
 80056c0:	20000a08 	.word	0x20000a08
 80056c4:	2000005c 	.word	0x2000005c
 80056c8:	20000efc 	.word	0x20000efc
 80056cc:	20000ee8 	.word	0x20000ee8
 80056d0:	20000ee0 	.word	0x20000ee0

080056d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80056d4:	b480      	push	{r7}
 80056d6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80056d8:	4b04      	ldr	r3, [pc, #16]	; (80056ec <vTaskSuspendAll+0x18>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	3301      	adds	r3, #1
 80056de:	4a03      	ldr	r2, [pc, #12]	; (80056ec <vTaskSuspendAll+0x18>)
 80056e0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80056e2:	bf00      	nop
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr
 80056ec:	20000f04 	.word	0x20000f04

080056f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80056f6:	2300      	movs	r3, #0
 80056f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80056fa:	2300      	movs	r3, #0
 80056fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80056fe:	4b43      	ldr	r3, [pc, #268]	; (800580c <xTaskResumeAll+0x11c>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10c      	bne.n	8005720 <xTaskResumeAll+0x30>
	__asm volatile
 8005706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570a:	b672      	cpsid	i
 800570c:	f383 8811 	msr	BASEPRI, r3
 8005710:	f3bf 8f6f 	isb	sy
 8005714:	f3bf 8f4f 	dsb	sy
 8005718:	b662      	cpsie	i
 800571a:	603b      	str	r3, [r7, #0]
}
 800571c:	bf00      	nop
 800571e:	e7fe      	b.n	800571e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005720:	f001 f924 	bl	800696c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005724:	4b39      	ldr	r3, [pc, #228]	; (800580c <xTaskResumeAll+0x11c>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	3b01      	subs	r3, #1
 800572a:	4a38      	ldr	r2, [pc, #224]	; (800580c <xTaskResumeAll+0x11c>)
 800572c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800572e:	4b37      	ldr	r3, [pc, #220]	; (800580c <xTaskResumeAll+0x11c>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d162      	bne.n	80057fc <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005736:	4b36      	ldr	r3, [pc, #216]	; (8005810 <xTaskResumeAll+0x120>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d05e      	beq.n	80057fc <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800573e:	e02f      	b.n	80057a0 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005740:	4b34      	ldr	r3, [pc, #208]	; (8005814 <xTaskResumeAll+0x124>)
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	3318      	adds	r3, #24
 800574c:	4618      	mov	r0, r3
 800574e:	f7fe ff17 	bl	8004580 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	3304      	adds	r3, #4
 8005756:	4618      	mov	r0, r3
 8005758:	f7fe ff12 	bl	8004580 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005760:	4b2d      	ldr	r3, [pc, #180]	; (8005818 <xTaskResumeAll+0x128>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	429a      	cmp	r2, r3
 8005766:	d903      	bls.n	8005770 <xTaskResumeAll+0x80>
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576c:	4a2a      	ldr	r2, [pc, #168]	; (8005818 <xTaskResumeAll+0x128>)
 800576e:	6013      	str	r3, [r2, #0]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005774:	4613      	mov	r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4413      	add	r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	4a27      	ldr	r2, [pc, #156]	; (800581c <xTaskResumeAll+0x12c>)
 800577e:	441a      	add	r2, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	3304      	adds	r3, #4
 8005784:	4619      	mov	r1, r3
 8005786:	4610      	mov	r0, r2
 8005788:	f7fe fe9d 	bl	80044c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005790:	4b23      	ldr	r3, [pc, #140]	; (8005820 <xTaskResumeAll+0x130>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005796:	429a      	cmp	r2, r3
 8005798:	d302      	bcc.n	80057a0 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800579a:	4b22      	ldr	r3, [pc, #136]	; (8005824 <xTaskResumeAll+0x134>)
 800579c:	2201      	movs	r2, #1
 800579e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057a0:	4b1c      	ldr	r3, [pc, #112]	; (8005814 <xTaskResumeAll+0x124>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d1cb      	bne.n	8005740 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d001      	beq.n	80057b2 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80057ae:	f000 fb6f 	bl	8005e90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80057b2:	4b1d      	ldr	r3, [pc, #116]	; (8005828 <xTaskResumeAll+0x138>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d010      	beq.n	80057e0 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80057be:	f000 f847 	bl	8005850 <xTaskIncrementTick>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d002      	beq.n	80057ce <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80057c8:	4b16      	ldr	r3, [pc, #88]	; (8005824 <xTaskResumeAll+0x134>)
 80057ca:	2201      	movs	r2, #1
 80057cc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	3b01      	subs	r3, #1
 80057d2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1f1      	bne.n	80057be <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80057da:	4b13      	ldr	r3, [pc, #76]	; (8005828 <xTaskResumeAll+0x138>)
 80057dc:	2200      	movs	r2, #0
 80057de:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80057e0:	4b10      	ldr	r3, [pc, #64]	; (8005824 <xTaskResumeAll+0x134>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d009      	beq.n	80057fc <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80057e8:	2301      	movs	r3, #1
 80057ea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80057ec:	4b0f      	ldr	r3, [pc, #60]	; (800582c <xTaskResumeAll+0x13c>)
 80057ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057f2:	601a      	str	r2, [r3, #0]
 80057f4:	f3bf 8f4f 	dsb	sy
 80057f8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80057fc:	f001 f8ea 	bl	80069d4 <vPortExitCritical>

	return xAlreadyYielded;
 8005800:	68bb      	ldr	r3, [r7, #8]
}
 8005802:	4618      	mov	r0, r3
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	20000f04 	.word	0x20000f04
 8005810:	20000edc 	.word	0x20000edc
 8005814:	20000e9c 	.word	0x20000e9c
 8005818:	20000ee4 	.word	0x20000ee4
 800581c:	20000a0c 	.word	0x20000a0c
 8005820:	20000a08 	.word	0x20000a08
 8005824:	20000ef0 	.word	0x20000ef0
 8005828:	20000eec 	.word	0x20000eec
 800582c:	e000ed04 	.word	0xe000ed04

08005830 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005836:	4b05      	ldr	r3, [pc, #20]	; (800584c <xTaskGetTickCount+0x1c>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800583c:	687b      	ldr	r3, [r7, #4]
}
 800583e:	4618      	mov	r0, r3
 8005840:	370c      	adds	r7, #12
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	20000ee0 	.word	0x20000ee0

08005850 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b086      	sub	sp, #24
 8005854:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005856:	2300      	movs	r3, #0
 8005858:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800585a:	4b50      	ldr	r3, [pc, #320]	; (800599c <xTaskIncrementTick+0x14c>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2b00      	cmp	r3, #0
 8005860:	f040 808b 	bne.w	800597a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005864:	4b4e      	ldr	r3, [pc, #312]	; (80059a0 <xTaskIncrementTick+0x150>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	3301      	adds	r3, #1
 800586a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800586c:	4a4c      	ldr	r2, [pc, #304]	; (80059a0 <xTaskIncrementTick+0x150>)
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d122      	bne.n	80058be <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8005878:	4b4a      	ldr	r3, [pc, #296]	; (80059a4 <xTaskIncrementTick+0x154>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00c      	beq.n	800589c <xTaskIncrementTick+0x4c>
	__asm volatile
 8005882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005886:	b672      	cpsid	i
 8005888:	f383 8811 	msr	BASEPRI, r3
 800588c:	f3bf 8f6f 	isb	sy
 8005890:	f3bf 8f4f 	dsb	sy
 8005894:	b662      	cpsie	i
 8005896:	603b      	str	r3, [r7, #0]
}
 8005898:	bf00      	nop
 800589a:	e7fe      	b.n	800589a <xTaskIncrementTick+0x4a>
 800589c:	4b41      	ldr	r3, [pc, #260]	; (80059a4 <xTaskIncrementTick+0x154>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	60fb      	str	r3, [r7, #12]
 80058a2:	4b41      	ldr	r3, [pc, #260]	; (80059a8 <xTaskIncrementTick+0x158>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a3f      	ldr	r2, [pc, #252]	; (80059a4 <xTaskIncrementTick+0x154>)
 80058a8:	6013      	str	r3, [r2, #0]
 80058aa:	4a3f      	ldr	r2, [pc, #252]	; (80059a8 <xTaskIncrementTick+0x158>)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6013      	str	r3, [r2, #0]
 80058b0:	4b3e      	ldr	r3, [pc, #248]	; (80059ac <xTaskIncrementTick+0x15c>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	3301      	adds	r3, #1
 80058b6:	4a3d      	ldr	r2, [pc, #244]	; (80059ac <xTaskIncrementTick+0x15c>)
 80058b8:	6013      	str	r3, [r2, #0]
 80058ba:	f000 fae9 	bl	8005e90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80058be:	4b3c      	ldr	r3, [pc, #240]	; (80059b0 <xTaskIncrementTick+0x160>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	693a      	ldr	r2, [r7, #16]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d349      	bcc.n	800595c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058c8:	4b36      	ldr	r3, [pc, #216]	; (80059a4 <xTaskIncrementTick+0x154>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d104      	bne.n	80058dc <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058d2:	4b37      	ldr	r3, [pc, #220]	; (80059b0 <xTaskIncrementTick+0x160>)
 80058d4:	f04f 32ff 	mov.w	r2, #4294967295
 80058d8:	601a      	str	r2, [r3, #0]
					break;
 80058da:	e03f      	b.n	800595c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058dc:	4b31      	ldr	r3, [pc, #196]	; (80059a4 <xTaskIncrementTick+0x154>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d203      	bcs.n	80058fc <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80058f4:	4a2e      	ldr	r2, [pc, #184]	; (80059b0 <xTaskIncrementTick+0x160>)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80058fa:	e02f      	b.n	800595c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	3304      	adds	r3, #4
 8005900:	4618      	mov	r0, r3
 8005902:	f7fe fe3d 	bl	8004580 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800590a:	2b00      	cmp	r3, #0
 800590c:	d004      	beq.n	8005918 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	3318      	adds	r3, #24
 8005912:	4618      	mov	r0, r3
 8005914:	f7fe fe34 	bl	8004580 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800591c:	4b25      	ldr	r3, [pc, #148]	; (80059b4 <xTaskIncrementTick+0x164>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	429a      	cmp	r2, r3
 8005922:	d903      	bls.n	800592c <xTaskIncrementTick+0xdc>
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005928:	4a22      	ldr	r2, [pc, #136]	; (80059b4 <xTaskIncrementTick+0x164>)
 800592a:	6013      	str	r3, [r2, #0]
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005930:	4613      	mov	r3, r2
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	4413      	add	r3, r2
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	4a1f      	ldr	r2, [pc, #124]	; (80059b8 <xTaskIncrementTick+0x168>)
 800593a:	441a      	add	r2, r3
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	3304      	adds	r3, #4
 8005940:	4619      	mov	r1, r3
 8005942:	4610      	mov	r0, r2
 8005944:	f7fe fdbf 	bl	80044c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800594c:	4b1b      	ldr	r3, [pc, #108]	; (80059bc <xTaskIncrementTick+0x16c>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005952:	429a      	cmp	r2, r3
 8005954:	d3b8      	bcc.n	80058c8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8005956:	2301      	movs	r3, #1
 8005958:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800595a:	e7b5      	b.n	80058c8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800595c:	4b17      	ldr	r3, [pc, #92]	; (80059bc <xTaskIncrementTick+0x16c>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005962:	4915      	ldr	r1, [pc, #84]	; (80059b8 <xTaskIncrementTick+0x168>)
 8005964:	4613      	mov	r3, r2
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	4413      	add	r3, r2
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	440b      	add	r3, r1
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d907      	bls.n	8005984 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8005974:	2301      	movs	r3, #1
 8005976:	617b      	str	r3, [r7, #20]
 8005978:	e004      	b.n	8005984 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800597a:	4b11      	ldr	r3, [pc, #68]	; (80059c0 <xTaskIncrementTick+0x170>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	3301      	adds	r3, #1
 8005980:	4a0f      	ldr	r2, [pc, #60]	; (80059c0 <xTaskIncrementTick+0x170>)
 8005982:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005984:	4b0f      	ldr	r3, [pc, #60]	; (80059c4 <xTaskIncrementTick+0x174>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d001      	beq.n	8005990 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800598c:	2301      	movs	r3, #1
 800598e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005990:	697b      	ldr	r3, [r7, #20]
}
 8005992:	4618      	mov	r0, r3
 8005994:	3718      	adds	r7, #24
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	20000f04 	.word	0x20000f04
 80059a0:	20000ee0 	.word	0x20000ee0
 80059a4:	20000e94 	.word	0x20000e94
 80059a8:	20000e98 	.word	0x20000e98
 80059ac:	20000ef4 	.word	0x20000ef4
 80059b0:	20000efc 	.word	0x20000efc
 80059b4:	20000ee4 	.word	0x20000ee4
 80059b8:	20000a0c 	.word	0x20000a0c
 80059bc:	20000a08 	.word	0x20000a08
 80059c0:	20000eec 	.word	0x20000eec
 80059c4:	20000ef0 	.word	0x20000ef0

080059c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80059ce:	4b2b      	ldr	r3, [pc, #172]	; (8005a7c <vTaskSwitchContext+0xb4>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d003      	beq.n	80059de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80059d6:	4b2a      	ldr	r3, [pc, #168]	; (8005a80 <vTaskSwitchContext+0xb8>)
 80059d8:	2201      	movs	r2, #1
 80059da:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80059dc:	e048      	b.n	8005a70 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 80059de:	4b28      	ldr	r3, [pc, #160]	; (8005a80 <vTaskSwitchContext+0xb8>)
 80059e0:	2200      	movs	r2, #0
 80059e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059e4:	4b27      	ldr	r3, [pc, #156]	; (8005a84 <vTaskSwitchContext+0xbc>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	60fb      	str	r3, [r7, #12]
 80059ea:	e012      	b.n	8005a12 <vTaskSwitchContext+0x4a>
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d10c      	bne.n	8005a0c <vTaskSwitchContext+0x44>
	__asm volatile
 80059f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f6:	b672      	cpsid	i
 80059f8:	f383 8811 	msr	BASEPRI, r3
 80059fc:	f3bf 8f6f 	isb	sy
 8005a00:	f3bf 8f4f 	dsb	sy
 8005a04:	b662      	cpsie	i
 8005a06:	607b      	str	r3, [r7, #4]
}
 8005a08:	bf00      	nop
 8005a0a:	e7fe      	b.n	8005a0a <vTaskSwitchContext+0x42>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	60fb      	str	r3, [r7, #12]
 8005a12:	491d      	ldr	r1, [pc, #116]	; (8005a88 <vTaskSwitchContext+0xc0>)
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	4613      	mov	r3, r2
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	4413      	add	r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	440b      	add	r3, r1
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d0e2      	beq.n	80059ec <vTaskSwitchContext+0x24>
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	4613      	mov	r3, r2
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	4413      	add	r3, r2
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	4a15      	ldr	r2, [pc, #84]	; (8005a88 <vTaskSwitchContext+0xc0>)
 8005a32:	4413      	add	r3, r2
 8005a34:	60bb      	str	r3, [r7, #8]
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	685a      	ldr	r2, [r3, #4]
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	605a      	str	r2, [r3, #4]
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	685a      	ldr	r2, [r3, #4]
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	3308      	adds	r3, #8
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d104      	bne.n	8005a56 <vTaskSwitchContext+0x8e>
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	685a      	ldr	r2, [r3, #4]
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	605a      	str	r2, [r3, #4]
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	4a0b      	ldr	r2, [pc, #44]	; (8005a8c <vTaskSwitchContext+0xc4>)
 8005a5e:	6013      	str	r3, [r2, #0]
 8005a60:	4a08      	ldr	r2, [pc, #32]	; (8005a84 <vTaskSwitchContext+0xbc>)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005a66:	4b09      	ldr	r3, [pc, #36]	; (8005a8c <vTaskSwitchContext+0xc4>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	3354      	adds	r3, #84	; 0x54
 8005a6c:	4a08      	ldr	r2, [pc, #32]	; (8005a90 <vTaskSwitchContext+0xc8>)
 8005a6e:	6013      	str	r3, [r2, #0]
}
 8005a70:	bf00      	nop
 8005a72:	3714      	adds	r7, #20
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr
 8005a7c:	20000f04 	.word	0x20000f04
 8005a80:	20000ef0 	.word	0x20000ef0
 8005a84:	20000ee4 	.word	0x20000ee4
 8005a88:	20000a0c 	.word	0x20000a0c
 8005a8c:	20000a08 	.word	0x20000a08
 8005a90:	2000005c 	.word	0x2000005c

08005a94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d10c      	bne.n	8005abe <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8005aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa8:	b672      	cpsid	i
 8005aaa:	f383 8811 	msr	BASEPRI, r3
 8005aae:	f3bf 8f6f 	isb	sy
 8005ab2:	f3bf 8f4f 	dsb	sy
 8005ab6:	b662      	cpsie	i
 8005ab8:	60fb      	str	r3, [r7, #12]
}
 8005aba:	bf00      	nop
 8005abc:	e7fe      	b.n	8005abc <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005abe:	4b07      	ldr	r3, [pc, #28]	; (8005adc <vTaskPlaceOnEventList+0x48>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	3318      	adds	r3, #24
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f7fe fd21 	bl	800450e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005acc:	2101      	movs	r1, #1
 8005ace:	6838      	ldr	r0, [r7, #0]
 8005ad0:	f000 fa8e 	bl	8005ff0 <prvAddCurrentTaskToDelayedList>
}
 8005ad4:	bf00      	nop
 8005ad6:	3710      	adds	r7, #16
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	20000a08 	.word	0x20000a08

08005ae0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b086      	sub	sp, #24
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d10c      	bne.n	8005b0c <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8005af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af6:	b672      	cpsid	i
 8005af8:	f383 8811 	msr	BASEPRI, r3
 8005afc:	f3bf 8f6f 	isb	sy
 8005b00:	f3bf 8f4f 	dsb	sy
 8005b04:	b662      	cpsie	i
 8005b06:	617b      	str	r3, [r7, #20]
}
 8005b08:	bf00      	nop
 8005b0a:	e7fe      	b.n	8005b0a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b0c:	4b0a      	ldr	r3, [pc, #40]	; (8005b38 <vTaskPlaceOnEventListRestricted+0x58>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	3318      	adds	r3, #24
 8005b12:	4619      	mov	r1, r3
 8005b14:	68f8      	ldr	r0, [r7, #12]
 8005b16:	f7fe fcd6 	bl	80044c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d002      	beq.n	8005b26 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8005b20:	f04f 33ff 	mov.w	r3, #4294967295
 8005b24:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005b26:	6879      	ldr	r1, [r7, #4]
 8005b28:	68b8      	ldr	r0, [r7, #8]
 8005b2a:	f000 fa61 	bl	8005ff0 <prvAddCurrentTaskToDelayedList>
	}
 8005b2e:	bf00      	nop
 8005b30:	3718      	adds	r7, #24
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	20000a08 	.word	0x20000a08

08005b3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b086      	sub	sp, #24
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d10c      	bne.n	8005b6c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8005b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b56:	b672      	cpsid	i
 8005b58:	f383 8811 	msr	BASEPRI, r3
 8005b5c:	f3bf 8f6f 	isb	sy
 8005b60:	f3bf 8f4f 	dsb	sy
 8005b64:	b662      	cpsie	i
 8005b66:	60fb      	str	r3, [r7, #12]
}
 8005b68:	bf00      	nop
 8005b6a:	e7fe      	b.n	8005b6a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	3318      	adds	r3, #24
 8005b70:	4618      	mov	r0, r3
 8005b72:	f7fe fd05 	bl	8004580 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b76:	4b1e      	ldr	r3, [pc, #120]	; (8005bf0 <xTaskRemoveFromEventList+0xb4>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d11d      	bne.n	8005bba <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	3304      	adds	r3, #4
 8005b82:	4618      	mov	r0, r3
 8005b84:	f7fe fcfc 	bl	8004580 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b8c:	4b19      	ldr	r3, [pc, #100]	; (8005bf4 <xTaskRemoveFromEventList+0xb8>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d903      	bls.n	8005b9c <xTaskRemoveFromEventList+0x60>
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b98:	4a16      	ldr	r2, [pc, #88]	; (8005bf4 <xTaskRemoveFromEventList+0xb8>)
 8005b9a:	6013      	str	r3, [r2, #0]
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	4413      	add	r3, r2
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4a13      	ldr	r2, [pc, #76]	; (8005bf8 <xTaskRemoveFromEventList+0xbc>)
 8005baa:	441a      	add	r2, r3
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	3304      	adds	r3, #4
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	4610      	mov	r0, r2
 8005bb4:	f7fe fc87 	bl	80044c6 <vListInsertEnd>
 8005bb8:	e005      	b.n	8005bc6 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	3318      	adds	r3, #24
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	480e      	ldr	r0, [pc, #56]	; (8005bfc <xTaskRemoveFromEventList+0xc0>)
 8005bc2:	f7fe fc80 	bl	80044c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bca:	4b0d      	ldr	r3, [pc, #52]	; (8005c00 <xTaskRemoveFromEventList+0xc4>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d905      	bls.n	8005be0 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005bd8:	4b0a      	ldr	r3, [pc, #40]	; (8005c04 <xTaskRemoveFromEventList+0xc8>)
 8005bda:	2201      	movs	r2, #1
 8005bdc:	601a      	str	r2, [r3, #0]
 8005bde:	e001      	b.n	8005be4 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8005be0:	2300      	movs	r3, #0
 8005be2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005be4:	697b      	ldr	r3, [r7, #20]
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3718      	adds	r7, #24
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	20000f04 	.word	0x20000f04
 8005bf4:	20000ee4 	.word	0x20000ee4
 8005bf8:	20000a0c 	.word	0x20000a0c
 8005bfc:	20000e9c 	.word	0x20000e9c
 8005c00:	20000a08 	.word	0x20000a08
 8005c04:	20000ef0 	.word	0x20000ef0

08005c08 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005c10:	4b06      	ldr	r3, [pc, #24]	; (8005c2c <vTaskInternalSetTimeOutState+0x24>)
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005c18:	4b05      	ldr	r3, [pc, #20]	; (8005c30 <vTaskInternalSetTimeOutState+0x28>)
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	605a      	str	r2, [r3, #4]
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr
 8005c2c:	20000ef4 	.word	0x20000ef4
 8005c30:	20000ee0 	.word	0x20000ee0

08005c34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b088      	sub	sp, #32
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d10c      	bne.n	8005c5e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8005c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c48:	b672      	cpsid	i
 8005c4a:	f383 8811 	msr	BASEPRI, r3
 8005c4e:	f3bf 8f6f 	isb	sy
 8005c52:	f3bf 8f4f 	dsb	sy
 8005c56:	b662      	cpsie	i
 8005c58:	613b      	str	r3, [r7, #16]
}
 8005c5a:	bf00      	nop
 8005c5c:	e7fe      	b.n	8005c5c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d10c      	bne.n	8005c7e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8005c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c68:	b672      	cpsid	i
 8005c6a:	f383 8811 	msr	BASEPRI, r3
 8005c6e:	f3bf 8f6f 	isb	sy
 8005c72:	f3bf 8f4f 	dsb	sy
 8005c76:	b662      	cpsie	i
 8005c78:	60fb      	str	r3, [r7, #12]
}
 8005c7a:	bf00      	nop
 8005c7c:	e7fe      	b.n	8005c7c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8005c7e:	f000 fe75 	bl	800696c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005c82:	4b1d      	ldr	r3, [pc, #116]	; (8005cf8 <xTaskCheckForTimeOut+0xc4>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	69ba      	ldr	r2, [r7, #24]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c9a:	d102      	bne.n	8005ca2 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	61fb      	str	r3, [r7, #28]
 8005ca0:	e023      	b.n	8005cea <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	4b15      	ldr	r3, [pc, #84]	; (8005cfc <xTaskCheckForTimeOut+0xc8>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d007      	beq.n	8005cbe <xTaskCheckForTimeOut+0x8a>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	69ba      	ldr	r2, [r7, #24]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d302      	bcc.n	8005cbe <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	61fb      	str	r3, [r7, #28]
 8005cbc:	e015      	b.n	8005cea <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	697a      	ldr	r2, [r7, #20]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d20b      	bcs.n	8005ce0 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	1ad2      	subs	r2, r2, r3
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f7ff ff97 	bl	8005c08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	61fb      	str	r3, [r7, #28]
 8005cde:	e004      	b.n	8005cea <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005cea:	f000 fe73 	bl	80069d4 <vPortExitCritical>

	return xReturn;
 8005cee:	69fb      	ldr	r3, [r7, #28]
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3720      	adds	r7, #32
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	20000ee0 	.word	0x20000ee0
 8005cfc:	20000ef4 	.word	0x20000ef4

08005d00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005d00:	b480      	push	{r7}
 8005d02:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005d04:	4b03      	ldr	r3, [pc, #12]	; (8005d14 <vTaskMissedYield+0x14>)
 8005d06:	2201      	movs	r2, #1
 8005d08:	601a      	str	r2, [r3, #0]
}
 8005d0a:	bf00      	nop
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr
 8005d14:	20000ef0 	.word	0x20000ef0

08005d18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b082      	sub	sp, #8
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005d20:	f000 f852 	bl	8005dc8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005d24:	4b06      	ldr	r3, [pc, #24]	; (8005d40 <prvIdleTask+0x28>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d9f9      	bls.n	8005d20 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005d2c:	4b05      	ldr	r3, [pc, #20]	; (8005d44 <prvIdleTask+0x2c>)
 8005d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d32:	601a      	str	r2, [r3, #0]
 8005d34:	f3bf 8f4f 	dsb	sy
 8005d38:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005d3c:	e7f0      	b.n	8005d20 <prvIdleTask+0x8>
 8005d3e:	bf00      	nop
 8005d40:	20000a0c 	.word	0x20000a0c
 8005d44:	e000ed04 	.word	0xe000ed04

08005d48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d4e:	2300      	movs	r3, #0
 8005d50:	607b      	str	r3, [r7, #4]
 8005d52:	e00c      	b.n	8005d6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	4613      	mov	r3, r2
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	4413      	add	r3, r2
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	4a12      	ldr	r2, [pc, #72]	; (8005da8 <prvInitialiseTaskLists+0x60>)
 8005d60:	4413      	add	r3, r2
 8005d62:	4618      	mov	r0, r3
 8005d64:	f7fe fb82 	bl	800446c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	607b      	str	r3, [r7, #4]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2b37      	cmp	r3, #55	; 0x37
 8005d72:	d9ef      	bls.n	8005d54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005d74:	480d      	ldr	r0, [pc, #52]	; (8005dac <prvInitialiseTaskLists+0x64>)
 8005d76:	f7fe fb79 	bl	800446c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005d7a:	480d      	ldr	r0, [pc, #52]	; (8005db0 <prvInitialiseTaskLists+0x68>)
 8005d7c:	f7fe fb76 	bl	800446c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005d80:	480c      	ldr	r0, [pc, #48]	; (8005db4 <prvInitialiseTaskLists+0x6c>)
 8005d82:	f7fe fb73 	bl	800446c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005d86:	480c      	ldr	r0, [pc, #48]	; (8005db8 <prvInitialiseTaskLists+0x70>)
 8005d88:	f7fe fb70 	bl	800446c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005d8c:	480b      	ldr	r0, [pc, #44]	; (8005dbc <prvInitialiseTaskLists+0x74>)
 8005d8e:	f7fe fb6d 	bl	800446c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005d92:	4b0b      	ldr	r3, [pc, #44]	; (8005dc0 <prvInitialiseTaskLists+0x78>)
 8005d94:	4a05      	ldr	r2, [pc, #20]	; (8005dac <prvInitialiseTaskLists+0x64>)
 8005d96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005d98:	4b0a      	ldr	r3, [pc, #40]	; (8005dc4 <prvInitialiseTaskLists+0x7c>)
 8005d9a:	4a05      	ldr	r2, [pc, #20]	; (8005db0 <prvInitialiseTaskLists+0x68>)
 8005d9c:	601a      	str	r2, [r3, #0]
}
 8005d9e:	bf00      	nop
 8005da0:	3708      	adds	r7, #8
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	20000a0c 	.word	0x20000a0c
 8005dac:	20000e6c 	.word	0x20000e6c
 8005db0:	20000e80 	.word	0x20000e80
 8005db4:	20000e9c 	.word	0x20000e9c
 8005db8:	20000eb0 	.word	0x20000eb0
 8005dbc:	20000ec8 	.word	0x20000ec8
 8005dc0:	20000e94 	.word	0x20000e94
 8005dc4:	20000e98 	.word	0x20000e98

08005dc8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005dce:	e019      	b.n	8005e04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005dd0:	f000 fdcc 	bl	800696c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dd4:	4b10      	ldr	r3, [pc, #64]	; (8005e18 <prvCheckTasksWaitingTermination+0x50>)
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	3304      	adds	r3, #4
 8005de0:	4618      	mov	r0, r3
 8005de2:	f7fe fbcd 	bl	8004580 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005de6:	4b0d      	ldr	r3, [pc, #52]	; (8005e1c <prvCheckTasksWaitingTermination+0x54>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	3b01      	subs	r3, #1
 8005dec:	4a0b      	ldr	r2, [pc, #44]	; (8005e1c <prvCheckTasksWaitingTermination+0x54>)
 8005dee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005df0:	4b0b      	ldr	r3, [pc, #44]	; (8005e20 <prvCheckTasksWaitingTermination+0x58>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	3b01      	subs	r3, #1
 8005df6:	4a0a      	ldr	r2, [pc, #40]	; (8005e20 <prvCheckTasksWaitingTermination+0x58>)
 8005df8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005dfa:	f000 fdeb 	bl	80069d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 f810 	bl	8005e24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e04:	4b06      	ldr	r3, [pc, #24]	; (8005e20 <prvCheckTasksWaitingTermination+0x58>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1e1      	bne.n	8005dd0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005e0c:	bf00      	nop
 8005e0e:	bf00      	nop
 8005e10:	3708      	adds	r7, #8
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	20000eb0 	.word	0x20000eb0
 8005e1c:	20000edc 	.word	0x20000edc
 8005e20:	20000ec4 	.word	0x20000ec4

08005e24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	3354      	adds	r3, #84	; 0x54
 8005e30:	4618      	mov	r0, r3
 8005e32:	f001 f8b3 	bl	8006f9c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d108      	bne.n	8005e52 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e44:	4618      	mov	r0, r3
 8005e46:	f000 ff87 	bl	8006d58 <vPortFree>
				vPortFree( pxTCB );
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 ff84 	bl	8006d58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005e50:	e01a      	b.n	8005e88 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d103      	bne.n	8005e64 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 ff7b 	bl	8006d58 <vPortFree>
	}
 8005e62:	e011      	b.n	8005e88 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d00c      	beq.n	8005e88 <prvDeleteTCB+0x64>
	__asm volatile
 8005e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e72:	b672      	cpsid	i
 8005e74:	f383 8811 	msr	BASEPRI, r3
 8005e78:	f3bf 8f6f 	isb	sy
 8005e7c:	f3bf 8f4f 	dsb	sy
 8005e80:	b662      	cpsie	i
 8005e82:	60fb      	str	r3, [r7, #12]
}
 8005e84:	bf00      	nop
 8005e86:	e7fe      	b.n	8005e86 <prvDeleteTCB+0x62>
	}
 8005e88:	bf00      	nop
 8005e8a:	3710      	adds	r7, #16
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e96:	4b0c      	ldr	r3, [pc, #48]	; (8005ec8 <prvResetNextTaskUnblockTime+0x38>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d104      	bne.n	8005eaa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ea0:	4b0a      	ldr	r3, [pc, #40]	; (8005ecc <prvResetNextTaskUnblockTime+0x3c>)
 8005ea2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ea6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ea8:	e008      	b.n	8005ebc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eaa:	4b07      	ldr	r3, [pc, #28]	; (8005ec8 <prvResetNextTaskUnblockTime+0x38>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	4a04      	ldr	r2, [pc, #16]	; (8005ecc <prvResetNextTaskUnblockTime+0x3c>)
 8005eba:	6013      	str	r3, [r2, #0]
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr
 8005ec8:	20000e94 	.word	0x20000e94
 8005ecc:	20000efc 	.word	0x20000efc

08005ed0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005ed6:	4b0b      	ldr	r3, [pc, #44]	; (8005f04 <xTaskGetSchedulerState+0x34>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d102      	bne.n	8005ee4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	607b      	str	r3, [r7, #4]
 8005ee2:	e008      	b.n	8005ef6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ee4:	4b08      	ldr	r3, [pc, #32]	; (8005f08 <xTaskGetSchedulerState+0x38>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d102      	bne.n	8005ef2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005eec:	2302      	movs	r3, #2
 8005eee:	607b      	str	r3, [r7, #4]
 8005ef0:	e001      	b.n	8005ef6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005ef6:	687b      	ldr	r3, [r7, #4]
	}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr
 8005f04:	20000ee8 	.word	0x20000ee8
 8005f08:	20000f04 	.word	0x20000f04

08005f0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b086      	sub	sp, #24
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d05a      	beq.n	8005fd8 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005f22:	4b30      	ldr	r3, [pc, #192]	; (8005fe4 <xTaskPriorityDisinherit+0xd8>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	693a      	ldr	r2, [r7, #16]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d00c      	beq.n	8005f46 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8005f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f30:	b672      	cpsid	i
 8005f32:	f383 8811 	msr	BASEPRI, r3
 8005f36:	f3bf 8f6f 	isb	sy
 8005f3a:	f3bf 8f4f 	dsb	sy
 8005f3e:	b662      	cpsie	i
 8005f40:	60fb      	str	r3, [r7, #12]
}
 8005f42:	bf00      	nop
 8005f44:	e7fe      	b.n	8005f44 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d10c      	bne.n	8005f68 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8005f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f52:	b672      	cpsid	i
 8005f54:	f383 8811 	msr	BASEPRI, r3
 8005f58:	f3bf 8f6f 	isb	sy
 8005f5c:	f3bf 8f4f 	dsb	sy
 8005f60:	b662      	cpsie	i
 8005f62:	60bb      	str	r3, [r7, #8]
}
 8005f64:	bf00      	nop
 8005f66:	e7fe      	b.n	8005f66 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f6c:	1e5a      	subs	r2, r3, #1
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d02c      	beq.n	8005fd8 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d128      	bne.n	8005fd8 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	3304      	adds	r3, #4
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7fe faf8 	bl	8004580 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f9c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fa8:	4b0f      	ldr	r3, [pc, #60]	; (8005fe8 <xTaskPriorityDisinherit+0xdc>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d903      	bls.n	8005fb8 <xTaskPriorityDisinherit+0xac>
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb4:	4a0c      	ldr	r2, [pc, #48]	; (8005fe8 <xTaskPriorityDisinherit+0xdc>)
 8005fb6:	6013      	str	r3, [r2, #0]
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	4413      	add	r3, r2
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	4a09      	ldr	r2, [pc, #36]	; (8005fec <xTaskPriorityDisinherit+0xe0>)
 8005fc6:	441a      	add	r2, r3
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	3304      	adds	r3, #4
 8005fcc:	4619      	mov	r1, r3
 8005fce:	4610      	mov	r0, r2
 8005fd0:	f7fe fa79 	bl	80044c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005fd8:	697b      	ldr	r3, [r7, #20]
	}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3718      	adds	r7, #24
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	20000a08 	.word	0x20000a08
 8005fe8:	20000ee4 	.word	0x20000ee4
 8005fec:	20000a0c 	.word	0x20000a0c

08005ff0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005ffa:	4b21      	ldr	r3, [pc, #132]	; (8006080 <prvAddCurrentTaskToDelayedList+0x90>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006000:	4b20      	ldr	r3, [pc, #128]	; (8006084 <prvAddCurrentTaskToDelayedList+0x94>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	3304      	adds	r3, #4
 8006006:	4618      	mov	r0, r3
 8006008:	f7fe faba 	bl	8004580 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006012:	d10a      	bne.n	800602a <prvAddCurrentTaskToDelayedList+0x3a>
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d007      	beq.n	800602a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800601a:	4b1a      	ldr	r3, [pc, #104]	; (8006084 <prvAddCurrentTaskToDelayedList+0x94>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	3304      	adds	r3, #4
 8006020:	4619      	mov	r1, r3
 8006022:	4819      	ldr	r0, [pc, #100]	; (8006088 <prvAddCurrentTaskToDelayedList+0x98>)
 8006024:	f7fe fa4f 	bl	80044c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006028:	e026      	b.n	8006078 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4413      	add	r3, r2
 8006030:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006032:	4b14      	ldr	r3, [pc, #80]	; (8006084 <prvAddCurrentTaskToDelayedList+0x94>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	68ba      	ldr	r2, [r7, #8]
 8006038:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800603a:	68ba      	ldr	r2, [r7, #8]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	429a      	cmp	r2, r3
 8006040:	d209      	bcs.n	8006056 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006042:	4b12      	ldr	r3, [pc, #72]	; (800608c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	4b0f      	ldr	r3, [pc, #60]	; (8006084 <prvAddCurrentTaskToDelayedList+0x94>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	3304      	adds	r3, #4
 800604c:	4619      	mov	r1, r3
 800604e:	4610      	mov	r0, r2
 8006050:	f7fe fa5d 	bl	800450e <vListInsert>
}
 8006054:	e010      	b.n	8006078 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006056:	4b0e      	ldr	r3, [pc, #56]	; (8006090 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	4b0a      	ldr	r3, [pc, #40]	; (8006084 <prvAddCurrentTaskToDelayedList+0x94>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	3304      	adds	r3, #4
 8006060:	4619      	mov	r1, r3
 8006062:	4610      	mov	r0, r2
 8006064:	f7fe fa53 	bl	800450e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006068:	4b0a      	ldr	r3, [pc, #40]	; (8006094 <prvAddCurrentTaskToDelayedList+0xa4>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68ba      	ldr	r2, [r7, #8]
 800606e:	429a      	cmp	r2, r3
 8006070:	d202      	bcs.n	8006078 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006072:	4a08      	ldr	r2, [pc, #32]	; (8006094 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	6013      	str	r3, [r2, #0]
}
 8006078:	bf00      	nop
 800607a:	3710      	adds	r7, #16
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}
 8006080:	20000ee0 	.word	0x20000ee0
 8006084:	20000a08 	.word	0x20000a08
 8006088:	20000ec8 	.word	0x20000ec8
 800608c:	20000e98 	.word	0x20000e98
 8006090:	20000e94 	.word	0x20000e94
 8006094:	20000efc 	.word	0x20000efc

08006098 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b08a      	sub	sp, #40	; 0x28
 800609c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800609e:	2300      	movs	r3, #0
 80060a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80060a2:	f000 fb15 	bl	80066d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80060a6:	4b1d      	ldr	r3, [pc, #116]	; (800611c <xTimerCreateTimerTask+0x84>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d021      	beq.n	80060f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80060ae:	2300      	movs	r3, #0
 80060b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80060b2:	2300      	movs	r3, #0
 80060b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80060b6:	1d3a      	adds	r2, r7, #4
 80060b8:	f107 0108 	add.w	r1, r7, #8
 80060bc:	f107 030c 	add.w	r3, r7, #12
 80060c0:	4618      	mov	r0, r3
 80060c2:	f7fe f9b9 	bl	8004438 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80060c6:	6879      	ldr	r1, [r7, #4]
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	9202      	str	r2, [sp, #8]
 80060ce:	9301      	str	r3, [sp, #4]
 80060d0:	2302      	movs	r3, #2
 80060d2:	9300      	str	r3, [sp, #0]
 80060d4:	2300      	movs	r3, #0
 80060d6:	460a      	mov	r2, r1
 80060d8:	4911      	ldr	r1, [pc, #68]	; (8006120 <xTimerCreateTimerTask+0x88>)
 80060da:	4812      	ldr	r0, [pc, #72]	; (8006124 <xTimerCreateTimerTask+0x8c>)
 80060dc:	f7fe ff84 	bl	8004fe8 <xTaskCreateStatic>
 80060e0:	4603      	mov	r3, r0
 80060e2:	4a11      	ldr	r2, [pc, #68]	; (8006128 <xTimerCreateTimerTask+0x90>)
 80060e4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80060e6:	4b10      	ldr	r3, [pc, #64]	; (8006128 <xTimerCreateTimerTask+0x90>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d001      	beq.n	80060f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80060ee:	2301      	movs	r3, #1
 80060f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d10c      	bne.n	8006112 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80060f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fc:	b672      	cpsid	i
 80060fe:	f383 8811 	msr	BASEPRI, r3
 8006102:	f3bf 8f6f 	isb	sy
 8006106:	f3bf 8f4f 	dsb	sy
 800610a:	b662      	cpsie	i
 800610c:	613b      	str	r3, [r7, #16]
}
 800610e:	bf00      	nop
 8006110:	e7fe      	b.n	8006110 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8006112:	697b      	ldr	r3, [r7, #20]
}
 8006114:	4618      	mov	r0, r3
 8006116:	3718      	adds	r7, #24
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}
 800611c:	20000f38 	.word	0x20000f38
 8006120:	080071a0 	.word	0x080071a0
 8006124:	08006269 	.word	0x08006269
 8006128:	20000f3c 	.word	0x20000f3c

0800612c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b08a      	sub	sp, #40	; 0x28
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	607a      	str	r2, [r7, #4]
 8006138:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800613a:	2300      	movs	r3, #0
 800613c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d10c      	bne.n	800615e <xTimerGenericCommand+0x32>
	__asm volatile
 8006144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006148:	b672      	cpsid	i
 800614a:	f383 8811 	msr	BASEPRI, r3
 800614e:	f3bf 8f6f 	isb	sy
 8006152:	f3bf 8f4f 	dsb	sy
 8006156:	b662      	cpsie	i
 8006158:	623b      	str	r3, [r7, #32]
}
 800615a:	bf00      	nop
 800615c:	e7fe      	b.n	800615c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800615e:	4b1a      	ldr	r3, [pc, #104]	; (80061c8 <xTimerGenericCommand+0x9c>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d02a      	beq.n	80061bc <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	2b05      	cmp	r3, #5
 8006176:	dc18      	bgt.n	80061aa <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006178:	f7ff feaa 	bl	8005ed0 <xTaskGetSchedulerState>
 800617c:	4603      	mov	r3, r0
 800617e:	2b02      	cmp	r3, #2
 8006180:	d109      	bne.n	8006196 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006182:	4b11      	ldr	r3, [pc, #68]	; (80061c8 <xTimerGenericCommand+0x9c>)
 8006184:	6818      	ldr	r0, [r3, #0]
 8006186:	f107 0110 	add.w	r1, r7, #16
 800618a:	2300      	movs	r3, #0
 800618c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800618e:	f7fe fb31 	bl	80047f4 <xQueueGenericSend>
 8006192:	6278      	str	r0, [r7, #36]	; 0x24
 8006194:	e012      	b.n	80061bc <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006196:	4b0c      	ldr	r3, [pc, #48]	; (80061c8 <xTimerGenericCommand+0x9c>)
 8006198:	6818      	ldr	r0, [r3, #0]
 800619a:	f107 0110 	add.w	r1, r7, #16
 800619e:	2300      	movs	r3, #0
 80061a0:	2200      	movs	r2, #0
 80061a2:	f7fe fb27 	bl	80047f4 <xQueueGenericSend>
 80061a6:	6278      	str	r0, [r7, #36]	; 0x24
 80061a8:	e008      	b.n	80061bc <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80061aa:	4b07      	ldr	r3, [pc, #28]	; (80061c8 <xTimerGenericCommand+0x9c>)
 80061ac:	6818      	ldr	r0, [r3, #0]
 80061ae:	f107 0110 	add.w	r1, r7, #16
 80061b2:	2300      	movs	r3, #0
 80061b4:	683a      	ldr	r2, [r7, #0]
 80061b6:	f7fe fc23 	bl	8004a00 <xQueueGenericSendFromISR>
 80061ba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80061bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3728      	adds	r7, #40	; 0x28
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	20000f38 	.word	0x20000f38

080061cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b088      	sub	sp, #32
 80061d0:	af02      	add	r7, sp, #8
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061d6:	4b23      	ldr	r3, [pc, #140]	; (8006264 <prvProcessExpiredTimer+0x98>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	3304      	adds	r3, #4
 80061e4:	4618      	mov	r0, r3
 80061e6:	f7fe f9cb 	bl	8004580 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061f0:	f003 0304 	and.w	r3, r3, #4
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d024      	beq.n	8006242 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	699a      	ldr	r2, [r3, #24]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	18d1      	adds	r1, r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	683a      	ldr	r2, [r7, #0]
 8006204:	6978      	ldr	r0, [r7, #20]
 8006206:	f000 f8d3 	bl	80063b0 <prvInsertTimerInActiveList>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d021      	beq.n	8006254 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006210:	2300      	movs	r3, #0
 8006212:	9300      	str	r3, [sp, #0]
 8006214:	2300      	movs	r3, #0
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	2100      	movs	r1, #0
 800621a:	6978      	ldr	r0, [r7, #20]
 800621c:	f7ff ff86 	bl	800612c <xTimerGenericCommand>
 8006220:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d115      	bne.n	8006254 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8006228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622c:	b672      	cpsid	i
 800622e:	f383 8811 	msr	BASEPRI, r3
 8006232:	f3bf 8f6f 	isb	sy
 8006236:	f3bf 8f4f 	dsb	sy
 800623a:	b662      	cpsie	i
 800623c:	60fb      	str	r3, [r7, #12]
}
 800623e:	bf00      	nop
 8006240:	e7fe      	b.n	8006240 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006248:	f023 0301 	bic.w	r3, r3, #1
 800624c:	b2da      	uxtb	r2, r3
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	6a1b      	ldr	r3, [r3, #32]
 8006258:	6978      	ldr	r0, [r7, #20]
 800625a:	4798      	blx	r3
}
 800625c:	bf00      	nop
 800625e:	3718      	adds	r7, #24
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}
 8006264:	20000f30 	.word	0x20000f30

08006268 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006270:	f107 0308 	add.w	r3, r7, #8
 8006274:	4618      	mov	r0, r3
 8006276:	f000 f857 	bl	8006328 <prvGetNextExpireTime>
 800627a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	4619      	mov	r1, r3
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f000 f803 	bl	800628c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006286:	f000 f8d5 	bl	8006434 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800628a:	e7f1      	b.n	8006270 <prvTimerTask+0x8>

0800628c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006296:	f7ff fa1d 	bl	80056d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800629a:	f107 0308 	add.w	r3, r7, #8
 800629e:	4618      	mov	r0, r3
 80062a0:	f000 f866 	bl	8006370 <prvSampleTimeNow>
 80062a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d130      	bne.n	800630e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d10a      	bne.n	80062c8 <prvProcessTimerOrBlockTask+0x3c>
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d806      	bhi.n	80062c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80062ba:	f7ff fa19 	bl	80056f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80062be:	68f9      	ldr	r1, [r7, #12]
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f7ff ff83 	bl	80061cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80062c6:	e024      	b.n	8006312 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d008      	beq.n	80062e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80062ce:	4b13      	ldr	r3, [pc, #76]	; (800631c <prvProcessTimerOrBlockTask+0x90>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d101      	bne.n	80062dc <prvProcessTimerOrBlockTask+0x50>
 80062d8:	2301      	movs	r3, #1
 80062da:	e000      	b.n	80062de <prvProcessTimerOrBlockTask+0x52>
 80062dc:	2300      	movs	r3, #0
 80062de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80062e0:	4b0f      	ldr	r3, [pc, #60]	; (8006320 <prvProcessTimerOrBlockTask+0x94>)
 80062e2:	6818      	ldr	r0, [r3, #0]
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	683a      	ldr	r2, [r7, #0]
 80062ec:	4619      	mov	r1, r3
 80062ee:	f7fe fe47 	bl	8004f80 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80062f2:	f7ff f9fd 	bl	80056f0 <xTaskResumeAll>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d10a      	bne.n	8006312 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80062fc:	4b09      	ldr	r3, [pc, #36]	; (8006324 <prvProcessTimerOrBlockTask+0x98>)
 80062fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006302:	601a      	str	r2, [r3, #0]
 8006304:	f3bf 8f4f 	dsb	sy
 8006308:	f3bf 8f6f 	isb	sy
}
 800630c:	e001      	b.n	8006312 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800630e:	f7ff f9ef 	bl	80056f0 <xTaskResumeAll>
}
 8006312:	bf00      	nop
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	20000f34 	.word	0x20000f34
 8006320:	20000f38 	.word	0x20000f38
 8006324:	e000ed04 	.word	0xe000ed04

08006328 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006330:	4b0e      	ldr	r3, [pc, #56]	; (800636c <prvGetNextExpireTime+0x44>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d101      	bne.n	800633e <prvGetNextExpireTime+0x16>
 800633a:	2201      	movs	r2, #1
 800633c:	e000      	b.n	8006340 <prvGetNextExpireTime+0x18>
 800633e:	2200      	movs	r2, #0
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d105      	bne.n	8006358 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800634c:	4b07      	ldr	r3, [pc, #28]	; (800636c <prvGetNextExpireTime+0x44>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	60fb      	str	r3, [r7, #12]
 8006356:	e001      	b.n	800635c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006358:	2300      	movs	r3, #0
 800635a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800635c:	68fb      	ldr	r3, [r7, #12]
}
 800635e:	4618      	mov	r0, r3
 8006360:	3714      	adds	r7, #20
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr
 800636a:	bf00      	nop
 800636c:	20000f30 	.word	0x20000f30

08006370 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006378:	f7ff fa5a 	bl	8005830 <xTaskGetTickCount>
 800637c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800637e:	4b0b      	ldr	r3, [pc, #44]	; (80063ac <prvSampleTimeNow+0x3c>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	429a      	cmp	r2, r3
 8006386:	d205      	bcs.n	8006394 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006388:	f000 f93c 	bl	8006604 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	601a      	str	r2, [r3, #0]
 8006392:	e002      	b.n	800639a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800639a:	4a04      	ldr	r2, [pc, #16]	; (80063ac <prvSampleTimeNow+0x3c>)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80063a0:	68fb      	ldr	r3, [r7, #12]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	20000f40 	.word	0x20000f40

080063b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b086      	sub	sp, #24
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	607a      	str	r2, [r7, #4]
 80063bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80063be:	2300      	movs	r3, #0
 80063c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	68ba      	ldr	r2, [r7, #8]
 80063c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80063ce:	68ba      	ldr	r2, [r7, #8]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d812      	bhi.n	80063fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	1ad2      	subs	r2, r2, r3
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	699b      	ldr	r3, [r3, #24]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d302      	bcc.n	80063ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80063e4:	2301      	movs	r3, #1
 80063e6:	617b      	str	r3, [r7, #20]
 80063e8:	e01b      	b.n	8006422 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80063ea:	4b10      	ldr	r3, [pc, #64]	; (800642c <prvInsertTimerInActiveList+0x7c>)
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	3304      	adds	r3, #4
 80063f2:	4619      	mov	r1, r3
 80063f4:	4610      	mov	r0, r2
 80063f6:	f7fe f88a 	bl	800450e <vListInsert>
 80063fa:	e012      	b.n	8006422 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	429a      	cmp	r2, r3
 8006402:	d206      	bcs.n	8006412 <prvInsertTimerInActiveList+0x62>
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	429a      	cmp	r2, r3
 800640a:	d302      	bcc.n	8006412 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800640c:	2301      	movs	r3, #1
 800640e:	617b      	str	r3, [r7, #20]
 8006410:	e007      	b.n	8006422 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006412:	4b07      	ldr	r3, [pc, #28]	; (8006430 <prvInsertTimerInActiveList+0x80>)
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	3304      	adds	r3, #4
 800641a:	4619      	mov	r1, r3
 800641c:	4610      	mov	r0, r2
 800641e:	f7fe f876 	bl	800450e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006422:	697b      	ldr	r3, [r7, #20]
}
 8006424:	4618      	mov	r0, r3
 8006426:	3718      	adds	r7, #24
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}
 800642c:	20000f34 	.word	0x20000f34
 8006430:	20000f30 	.word	0x20000f30

08006434 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b08e      	sub	sp, #56	; 0x38
 8006438:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800643a:	e0d0      	b.n	80065de <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	da1a      	bge.n	8006478 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006442:	1d3b      	adds	r3, r7, #4
 8006444:	3304      	adds	r3, #4
 8006446:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800644a:	2b00      	cmp	r3, #0
 800644c:	d10c      	bne.n	8006468 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800644e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006452:	b672      	cpsid	i
 8006454:	f383 8811 	msr	BASEPRI, r3
 8006458:	f3bf 8f6f 	isb	sy
 800645c:	f3bf 8f4f 	dsb	sy
 8006460:	b662      	cpsie	i
 8006462:	61fb      	str	r3, [r7, #28]
}
 8006464:	bf00      	nop
 8006466:	e7fe      	b.n	8006466 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800646e:	6850      	ldr	r0, [r2, #4]
 8006470:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006472:	6892      	ldr	r2, [r2, #8]
 8006474:	4611      	mov	r1, r2
 8006476:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2b00      	cmp	r3, #0
 800647c:	f2c0 80af 	blt.w	80065de <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006486:	695b      	ldr	r3, [r3, #20]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d004      	beq.n	8006496 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800648c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648e:	3304      	adds	r3, #4
 8006490:	4618      	mov	r0, r3
 8006492:	f7fe f875 	bl	8004580 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006496:	463b      	mov	r3, r7
 8006498:	4618      	mov	r0, r3
 800649a:	f7ff ff69 	bl	8006370 <prvSampleTimeNow>
 800649e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2b09      	cmp	r3, #9
 80064a4:	f200 809a 	bhi.w	80065dc <prvProcessReceivedCommands+0x1a8>
 80064a8:	a201      	add	r2, pc, #4	; (adr r2, 80064b0 <prvProcessReceivedCommands+0x7c>)
 80064aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ae:	bf00      	nop
 80064b0:	080064d9 	.word	0x080064d9
 80064b4:	080064d9 	.word	0x080064d9
 80064b8:	080064d9 	.word	0x080064d9
 80064bc:	08006551 	.word	0x08006551
 80064c0:	08006565 	.word	0x08006565
 80064c4:	080065b3 	.word	0x080065b3
 80064c8:	080064d9 	.word	0x080064d9
 80064cc:	080064d9 	.word	0x080064d9
 80064d0:	08006551 	.word	0x08006551
 80064d4:	08006565 	.word	0x08006565
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80064d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064de:	f043 0301 	orr.w	r3, r3, #1
 80064e2:	b2da      	uxtb	r2, r3
 80064e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80064ea:	68ba      	ldr	r2, [r7, #8]
 80064ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ee:	699b      	ldr	r3, [r3, #24]
 80064f0:	18d1      	adds	r1, r2, r3
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064f8:	f7ff ff5a 	bl	80063b0 <prvInsertTimerInActiveList>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d06d      	beq.n	80065de <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006508:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800650a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006510:	f003 0304 	and.w	r3, r3, #4
 8006514:	2b00      	cmp	r3, #0
 8006516:	d062      	beq.n	80065de <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006518:	68ba      	ldr	r2, [r7, #8]
 800651a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	441a      	add	r2, r3
 8006520:	2300      	movs	r3, #0
 8006522:	9300      	str	r3, [sp, #0]
 8006524:	2300      	movs	r3, #0
 8006526:	2100      	movs	r1, #0
 8006528:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800652a:	f7ff fdff 	bl	800612c <xTimerGenericCommand>
 800652e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006530:	6a3b      	ldr	r3, [r7, #32]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d153      	bne.n	80065de <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8006536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800653a:	b672      	cpsid	i
 800653c:	f383 8811 	msr	BASEPRI, r3
 8006540:	f3bf 8f6f 	isb	sy
 8006544:	f3bf 8f4f 	dsb	sy
 8006548:	b662      	cpsie	i
 800654a:	61bb      	str	r3, [r7, #24]
}
 800654c:	bf00      	nop
 800654e:	e7fe      	b.n	800654e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006552:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006556:	f023 0301 	bic.w	r3, r3, #1
 800655a:	b2da      	uxtb	r2, r3
 800655c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006562:	e03c      	b.n	80065de <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006566:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800656a:	f043 0301 	orr.w	r3, r3, #1
 800656e:	b2da      	uxtb	r2, r3
 8006570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006572:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006576:	68ba      	ldr	r2, [r7, #8]
 8006578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800657c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657e:	699b      	ldr	r3, [r3, #24]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d10c      	bne.n	800659e <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8006584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006588:	b672      	cpsid	i
 800658a:	f383 8811 	msr	BASEPRI, r3
 800658e:	f3bf 8f6f 	isb	sy
 8006592:	f3bf 8f4f 	dsb	sy
 8006596:	b662      	cpsie	i
 8006598:	617b      	str	r3, [r7, #20]
}
 800659a:	bf00      	nop
 800659c:	e7fe      	b.n	800659c <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800659e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a0:	699a      	ldr	r2, [r3, #24]
 80065a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a4:	18d1      	adds	r1, r2, r3
 80065a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065ac:	f7ff ff00 	bl	80063b0 <prvInsertTimerInActiveList>
					break;
 80065b0:	e015      	b.n	80065de <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80065b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065b8:	f003 0302 	and.w	r3, r3, #2
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d103      	bne.n	80065c8 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 80065c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065c2:	f000 fbc9 	bl	8006d58 <vPortFree>
 80065c6:	e00a      	b.n	80065de <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80065c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065ce:	f023 0301 	bic.w	r3, r3, #1
 80065d2:	b2da      	uxtb	r2, r3
 80065d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80065da:	e000      	b.n	80065de <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 80065dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80065de:	4b08      	ldr	r3, [pc, #32]	; (8006600 <prvProcessReceivedCommands+0x1cc>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	1d39      	adds	r1, r7, #4
 80065e4:	2200      	movs	r2, #0
 80065e6:	4618      	mov	r0, r3
 80065e8:	f7fe faaa 	bl	8004b40 <xQueueReceive>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	f47f af24 	bne.w	800643c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80065f4:	bf00      	nop
 80065f6:	bf00      	nop
 80065f8:	3730      	adds	r7, #48	; 0x30
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	20000f38 	.word	0x20000f38

08006604 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b088      	sub	sp, #32
 8006608:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800660a:	e04a      	b.n	80066a2 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800660c:	4b2e      	ldr	r3, [pc, #184]	; (80066c8 <prvSwitchTimerLists+0xc4>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006616:	4b2c      	ldr	r3, [pc, #176]	; (80066c8 <prvSwitchTimerLists+0xc4>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	3304      	adds	r3, #4
 8006624:	4618      	mov	r0, r3
 8006626:	f7fd ffab 	bl	8004580 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	6a1b      	ldr	r3, [r3, #32]
 800662e:	68f8      	ldr	r0, [r7, #12]
 8006630:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006638:	f003 0304 	and.w	r3, r3, #4
 800663c:	2b00      	cmp	r3, #0
 800663e:	d030      	beq.n	80066a2 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	4413      	add	r3, r2
 8006648:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800664a:	68ba      	ldr	r2, [r7, #8]
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	429a      	cmp	r2, r3
 8006650:	d90e      	bls.n	8006670 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	68ba      	ldr	r2, [r7, #8]
 8006656:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	68fa      	ldr	r2, [r7, #12]
 800665c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800665e:	4b1a      	ldr	r3, [pc, #104]	; (80066c8 <prvSwitchTimerLists+0xc4>)
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	3304      	adds	r3, #4
 8006666:	4619      	mov	r1, r3
 8006668:	4610      	mov	r0, r2
 800666a:	f7fd ff50 	bl	800450e <vListInsert>
 800666e:	e018      	b.n	80066a2 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006670:	2300      	movs	r3, #0
 8006672:	9300      	str	r3, [sp, #0]
 8006674:	2300      	movs	r3, #0
 8006676:	693a      	ldr	r2, [r7, #16]
 8006678:	2100      	movs	r1, #0
 800667a:	68f8      	ldr	r0, [r7, #12]
 800667c:	f7ff fd56 	bl	800612c <xTimerGenericCommand>
 8006680:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d10c      	bne.n	80066a2 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8006688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800668c:	b672      	cpsid	i
 800668e:	f383 8811 	msr	BASEPRI, r3
 8006692:	f3bf 8f6f 	isb	sy
 8006696:	f3bf 8f4f 	dsb	sy
 800669a:	b662      	cpsie	i
 800669c:	603b      	str	r3, [r7, #0]
}
 800669e:	bf00      	nop
 80066a0:	e7fe      	b.n	80066a0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80066a2:	4b09      	ldr	r3, [pc, #36]	; (80066c8 <prvSwitchTimerLists+0xc4>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d1af      	bne.n	800660c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80066ac:	4b06      	ldr	r3, [pc, #24]	; (80066c8 <prvSwitchTimerLists+0xc4>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80066b2:	4b06      	ldr	r3, [pc, #24]	; (80066cc <prvSwitchTimerLists+0xc8>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a04      	ldr	r2, [pc, #16]	; (80066c8 <prvSwitchTimerLists+0xc4>)
 80066b8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80066ba:	4a04      	ldr	r2, [pc, #16]	; (80066cc <prvSwitchTimerLists+0xc8>)
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	6013      	str	r3, [r2, #0]
}
 80066c0:	bf00      	nop
 80066c2:	3718      	adds	r7, #24
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	20000f30 	.word	0x20000f30
 80066cc:	20000f34 	.word	0x20000f34

080066d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80066d6:	f000 f949 	bl	800696c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80066da:	4b15      	ldr	r3, [pc, #84]	; (8006730 <prvCheckForValidListAndQueue+0x60>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d120      	bne.n	8006724 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80066e2:	4814      	ldr	r0, [pc, #80]	; (8006734 <prvCheckForValidListAndQueue+0x64>)
 80066e4:	f7fd fec2 	bl	800446c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80066e8:	4813      	ldr	r0, [pc, #76]	; (8006738 <prvCheckForValidListAndQueue+0x68>)
 80066ea:	f7fd febf 	bl	800446c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80066ee:	4b13      	ldr	r3, [pc, #76]	; (800673c <prvCheckForValidListAndQueue+0x6c>)
 80066f0:	4a10      	ldr	r2, [pc, #64]	; (8006734 <prvCheckForValidListAndQueue+0x64>)
 80066f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80066f4:	4b12      	ldr	r3, [pc, #72]	; (8006740 <prvCheckForValidListAndQueue+0x70>)
 80066f6:	4a10      	ldr	r2, [pc, #64]	; (8006738 <prvCheckForValidListAndQueue+0x68>)
 80066f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80066fa:	2300      	movs	r3, #0
 80066fc:	9300      	str	r3, [sp, #0]
 80066fe:	4b11      	ldr	r3, [pc, #68]	; (8006744 <prvCheckForValidListAndQueue+0x74>)
 8006700:	4a11      	ldr	r2, [pc, #68]	; (8006748 <prvCheckForValidListAndQueue+0x78>)
 8006702:	2110      	movs	r1, #16
 8006704:	200a      	movs	r0, #10
 8006706:	f7fd ffcf 	bl	80046a8 <xQueueGenericCreateStatic>
 800670a:	4603      	mov	r3, r0
 800670c:	4a08      	ldr	r2, [pc, #32]	; (8006730 <prvCheckForValidListAndQueue+0x60>)
 800670e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006710:	4b07      	ldr	r3, [pc, #28]	; (8006730 <prvCheckForValidListAndQueue+0x60>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d005      	beq.n	8006724 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006718:	4b05      	ldr	r3, [pc, #20]	; (8006730 <prvCheckForValidListAndQueue+0x60>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	490b      	ldr	r1, [pc, #44]	; (800674c <prvCheckForValidListAndQueue+0x7c>)
 800671e:	4618      	mov	r0, r3
 8006720:	f7fe fc04 	bl	8004f2c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006724:	f000 f956 	bl	80069d4 <vPortExitCritical>
}
 8006728:	bf00      	nop
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	20000f38 	.word	0x20000f38
 8006734:	20000f08 	.word	0x20000f08
 8006738:	20000f1c 	.word	0x20000f1c
 800673c:	20000f30 	.word	0x20000f30
 8006740:	20000f34 	.word	0x20000f34
 8006744:	20000fe4 	.word	0x20000fe4
 8006748:	20000f44 	.word	0x20000f44
 800674c:	080071a8 	.word	0x080071a8

08006750 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	60b9      	str	r1, [r7, #8]
 800675a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	3b04      	subs	r3, #4
 8006760:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006768:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	3b04      	subs	r3, #4
 800676e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	f023 0201 	bic.w	r2, r3, #1
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	3b04      	subs	r3, #4
 800677e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006780:	4a0c      	ldr	r2, [pc, #48]	; (80067b4 <pxPortInitialiseStack+0x64>)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	3b14      	subs	r3, #20
 800678a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	3b04      	subs	r3, #4
 8006796:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f06f 0202 	mvn.w	r2, #2
 800679e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	3b20      	subs	r3, #32
 80067a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80067a6:	68fb      	ldr	r3, [r7, #12]
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3714      	adds	r7, #20
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr
 80067b4:	080067b9 	.word	0x080067b9

080067b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80067be:	2300      	movs	r3, #0
 80067c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80067c2:	4b14      	ldr	r3, [pc, #80]	; (8006814 <prvTaskExitError+0x5c>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ca:	d00c      	beq.n	80067e6 <prvTaskExitError+0x2e>
	__asm volatile
 80067cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d0:	b672      	cpsid	i
 80067d2:	f383 8811 	msr	BASEPRI, r3
 80067d6:	f3bf 8f6f 	isb	sy
 80067da:	f3bf 8f4f 	dsb	sy
 80067de:	b662      	cpsie	i
 80067e0:	60fb      	str	r3, [r7, #12]
}
 80067e2:	bf00      	nop
 80067e4:	e7fe      	b.n	80067e4 <prvTaskExitError+0x2c>
	__asm volatile
 80067e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ea:	b672      	cpsid	i
 80067ec:	f383 8811 	msr	BASEPRI, r3
 80067f0:	f3bf 8f6f 	isb	sy
 80067f4:	f3bf 8f4f 	dsb	sy
 80067f8:	b662      	cpsie	i
 80067fa:	60bb      	str	r3, [r7, #8]
}
 80067fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80067fe:	bf00      	nop
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d0fc      	beq.n	8006800 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006806:	bf00      	nop
 8006808:	bf00      	nop
 800680a:	3714      	adds	r7, #20
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr
 8006814:	2000000c 	.word	0x2000000c
	...

08006820 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006820:	4b07      	ldr	r3, [pc, #28]	; (8006840 <pxCurrentTCBConst2>)
 8006822:	6819      	ldr	r1, [r3, #0]
 8006824:	6808      	ldr	r0, [r1, #0]
 8006826:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800682a:	f380 8809 	msr	PSP, r0
 800682e:	f3bf 8f6f 	isb	sy
 8006832:	f04f 0000 	mov.w	r0, #0
 8006836:	f380 8811 	msr	BASEPRI, r0
 800683a:	4770      	bx	lr
 800683c:	f3af 8000 	nop.w

08006840 <pxCurrentTCBConst2>:
 8006840:	20000a08 	.word	0x20000a08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006844:	bf00      	nop
 8006846:	bf00      	nop

08006848 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006848:	4808      	ldr	r0, [pc, #32]	; (800686c <prvPortStartFirstTask+0x24>)
 800684a:	6800      	ldr	r0, [r0, #0]
 800684c:	6800      	ldr	r0, [r0, #0]
 800684e:	f380 8808 	msr	MSP, r0
 8006852:	f04f 0000 	mov.w	r0, #0
 8006856:	f380 8814 	msr	CONTROL, r0
 800685a:	b662      	cpsie	i
 800685c:	b661      	cpsie	f
 800685e:	f3bf 8f4f 	dsb	sy
 8006862:	f3bf 8f6f 	isb	sy
 8006866:	df00      	svc	0
 8006868:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800686a:	bf00      	nop
 800686c:	e000ed08 	.word	0xe000ed08

08006870 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006876:	4b37      	ldr	r3, [pc, #220]	; (8006954 <xPortStartScheduler+0xe4>)
 8006878:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	b2db      	uxtb	r3, r3
 8006880:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	22ff      	movs	r2, #255	; 0xff
 8006886:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	b2db      	uxtb	r3, r3
 800688e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006890:	78fb      	ldrb	r3, [r7, #3]
 8006892:	b2db      	uxtb	r3, r3
 8006894:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006898:	b2da      	uxtb	r2, r3
 800689a:	4b2f      	ldr	r3, [pc, #188]	; (8006958 <xPortStartScheduler+0xe8>)
 800689c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800689e:	4b2f      	ldr	r3, [pc, #188]	; (800695c <xPortStartScheduler+0xec>)
 80068a0:	2207      	movs	r2, #7
 80068a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068a4:	e009      	b.n	80068ba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80068a6:	4b2d      	ldr	r3, [pc, #180]	; (800695c <xPortStartScheduler+0xec>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	3b01      	subs	r3, #1
 80068ac:	4a2b      	ldr	r2, [pc, #172]	; (800695c <xPortStartScheduler+0xec>)
 80068ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80068b0:	78fb      	ldrb	r3, [r7, #3]
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	005b      	lsls	r3, r3, #1
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068ba:	78fb      	ldrb	r3, [r7, #3]
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068c2:	2b80      	cmp	r3, #128	; 0x80
 80068c4:	d0ef      	beq.n	80068a6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80068c6:	4b25      	ldr	r3, [pc, #148]	; (800695c <xPortStartScheduler+0xec>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f1c3 0307 	rsb	r3, r3, #7
 80068ce:	2b04      	cmp	r3, #4
 80068d0:	d00c      	beq.n	80068ec <xPortStartScheduler+0x7c>
	__asm volatile
 80068d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d6:	b672      	cpsid	i
 80068d8:	f383 8811 	msr	BASEPRI, r3
 80068dc:	f3bf 8f6f 	isb	sy
 80068e0:	f3bf 8f4f 	dsb	sy
 80068e4:	b662      	cpsie	i
 80068e6:	60bb      	str	r3, [r7, #8]
}
 80068e8:	bf00      	nop
 80068ea:	e7fe      	b.n	80068ea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80068ec:	4b1b      	ldr	r3, [pc, #108]	; (800695c <xPortStartScheduler+0xec>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	021b      	lsls	r3, r3, #8
 80068f2:	4a1a      	ldr	r2, [pc, #104]	; (800695c <xPortStartScheduler+0xec>)
 80068f4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80068f6:	4b19      	ldr	r3, [pc, #100]	; (800695c <xPortStartScheduler+0xec>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80068fe:	4a17      	ldr	r2, [pc, #92]	; (800695c <xPortStartScheduler+0xec>)
 8006900:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	b2da      	uxtb	r2, r3
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800690a:	4b15      	ldr	r3, [pc, #84]	; (8006960 <xPortStartScheduler+0xf0>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a14      	ldr	r2, [pc, #80]	; (8006960 <xPortStartScheduler+0xf0>)
 8006910:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006914:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006916:	4b12      	ldr	r3, [pc, #72]	; (8006960 <xPortStartScheduler+0xf0>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a11      	ldr	r2, [pc, #68]	; (8006960 <xPortStartScheduler+0xf0>)
 800691c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006920:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006922:	f000 f8dd 	bl	8006ae0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006926:	4b0f      	ldr	r3, [pc, #60]	; (8006964 <xPortStartScheduler+0xf4>)
 8006928:	2200      	movs	r2, #0
 800692a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800692c:	f000 f8fc 	bl	8006b28 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006930:	4b0d      	ldr	r3, [pc, #52]	; (8006968 <xPortStartScheduler+0xf8>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a0c      	ldr	r2, [pc, #48]	; (8006968 <xPortStartScheduler+0xf8>)
 8006936:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800693a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800693c:	f7ff ff84 	bl	8006848 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006940:	f7ff f842 	bl	80059c8 <vTaskSwitchContext>
	prvTaskExitError();
 8006944:	f7ff ff38 	bl	80067b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3710      	adds	r7, #16
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	e000e400 	.word	0xe000e400
 8006958:	20001034 	.word	0x20001034
 800695c:	20001038 	.word	0x20001038
 8006960:	e000ed20 	.word	0xe000ed20
 8006964:	2000000c 	.word	0x2000000c
 8006968:	e000ef34 	.word	0xe000ef34

0800696c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
	__asm volatile
 8006972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006976:	b672      	cpsid	i
 8006978:	f383 8811 	msr	BASEPRI, r3
 800697c:	f3bf 8f6f 	isb	sy
 8006980:	f3bf 8f4f 	dsb	sy
 8006984:	b662      	cpsie	i
 8006986:	607b      	str	r3, [r7, #4]
}
 8006988:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800698a:	4b10      	ldr	r3, [pc, #64]	; (80069cc <vPortEnterCritical+0x60>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	3301      	adds	r3, #1
 8006990:	4a0e      	ldr	r2, [pc, #56]	; (80069cc <vPortEnterCritical+0x60>)
 8006992:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006994:	4b0d      	ldr	r3, [pc, #52]	; (80069cc <vPortEnterCritical+0x60>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2b01      	cmp	r3, #1
 800699a:	d111      	bne.n	80069c0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800699c:	4b0c      	ldr	r3, [pc, #48]	; (80069d0 <vPortEnterCritical+0x64>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00c      	beq.n	80069c0 <vPortEnterCritical+0x54>
	__asm volatile
 80069a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069aa:	b672      	cpsid	i
 80069ac:	f383 8811 	msr	BASEPRI, r3
 80069b0:	f3bf 8f6f 	isb	sy
 80069b4:	f3bf 8f4f 	dsb	sy
 80069b8:	b662      	cpsie	i
 80069ba:	603b      	str	r3, [r7, #0]
}
 80069bc:	bf00      	nop
 80069be:	e7fe      	b.n	80069be <vPortEnterCritical+0x52>
	}
}
 80069c0:	bf00      	nop
 80069c2:	370c      	adds	r7, #12
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr
 80069cc:	2000000c 	.word	0x2000000c
 80069d0:	e000ed04 	.word	0xe000ed04

080069d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80069da:	4b13      	ldr	r3, [pc, #76]	; (8006a28 <vPortExitCritical+0x54>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d10c      	bne.n	80069fc <vPortExitCritical+0x28>
	__asm volatile
 80069e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e6:	b672      	cpsid	i
 80069e8:	f383 8811 	msr	BASEPRI, r3
 80069ec:	f3bf 8f6f 	isb	sy
 80069f0:	f3bf 8f4f 	dsb	sy
 80069f4:	b662      	cpsie	i
 80069f6:	607b      	str	r3, [r7, #4]
}
 80069f8:	bf00      	nop
 80069fa:	e7fe      	b.n	80069fa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80069fc:	4b0a      	ldr	r3, [pc, #40]	; (8006a28 <vPortExitCritical+0x54>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	3b01      	subs	r3, #1
 8006a02:	4a09      	ldr	r2, [pc, #36]	; (8006a28 <vPortExitCritical+0x54>)
 8006a04:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a06:	4b08      	ldr	r3, [pc, #32]	; (8006a28 <vPortExitCritical+0x54>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d105      	bne.n	8006a1a <vPortExitCritical+0x46>
 8006a0e:	2300      	movs	r3, #0
 8006a10:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	f383 8811 	msr	BASEPRI, r3
}
 8006a18:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a1a:	bf00      	nop
 8006a1c:	370c      	adds	r7, #12
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr
 8006a26:	bf00      	nop
 8006a28:	2000000c 	.word	0x2000000c
 8006a2c:	00000000 	.word	0x00000000

08006a30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006a30:	f3ef 8009 	mrs	r0, PSP
 8006a34:	f3bf 8f6f 	isb	sy
 8006a38:	4b15      	ldr	r3, [pc, #84]	; (8006a90 <pxCurrentTCBConst>)
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	f01e 0f10 	tst.w	lr, #16
 8006a40:	bf08      	it	eq
 8006a42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006a46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a4a:	6010      	str	r0, [r2, #0]
 8006a4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006a50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006a54:	b672      	cpsid	i
 8006a56:	f380 8811 	msr	BASEPRI, r0
 8006a5a:	f3bf 8f4f 	dsb	sy
 8006a5e:	f3bf 8f6f 	isb	sy
 8006a62:	b662      	cpsie	i
 8006a64:	f7fe ffb0 	bl	80059c8 <vTaskSwitchContext>
 8006a68:	f04f 0000 	mov.w	r0, #0
 8006a6c:	f380 8811 	msr	BASEPRI, r0
 8006a70:	bc09      	pop	{r0, r3}
 8006a72:	6819      	ldr	r1, [r3, #0]
 8006a74:	6808      	ldr	r0, [r1, #0]
 8006a76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a7a:	f01e 0f10 	tst.w	lr, #16
 8006a7e:	bf08      	it	eq
 8006a80:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006a84:	f380 8809 	msr	PSP, r0
 8006a88:	f3bf 8f6f 	isb	sy
 8006a8c:	4770      	bx	lr
 8006a8e:	bf00      	nop

08006a90 <pxCurrentTCBConst>:
 8006a90:	20000a08 	.word	0x20000a08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006a94:	bf00      	nop
 8006a96:	bf00      	nop

08006a98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
	__asm volatile
 8006a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa2:	b672      	cpsid	i
 8006aa4:	f383 8811 	msr	BASEPRI, r3
 8006aa8:	f3bf 8f6f 	isb	sy
 8006aac:	f3bf 8f4f 	dsb	sy
 8006ab0:	b662      	cpsie	i
 8006ab2:	607b      	str	r3, [r7, #4]
}
 8006ab4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ab6:	f7fe fecb 	bl	8005850 <xTaskIncrementTick>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d003      	beq.n	8006ac8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006ac0:	4b06      	ldr	r3, [pc, #24]	; (8006adc <SysTick_Handler+0x44>)
 8006ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ac6:	601a      	str	r2, [r3, #0]
 8006ac8:	2300      	movs	r3, #0
 8006aca:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	f383 8811 	msr	BASEPRI, r3
}
 8006ad2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006ad4:	bf00      	nop
 8006ad6:	3708      	adds	r7, #8
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	e000ed04 	.word	0xe000ed04

08006ae0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ae4:	4b0b      	ldr	r3, [pc, #44]	; (8006b14 <vPortSetupTimerInterrupt+0x34>)
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006aea:	4b0b      	ldr	r3, [pc, #44]	; (8006b18 <vPortSetupTimerInterrupt+0x38>)
 8006aec:	2200      	movs	r2, #0
 8006aee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006af0:	4b0a      	ldr	r3, [pc, #40]	; (8006b1c <vPortSetupTimerInterrupt+0x3c>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a0a      	ldr	r2, [pc, #40]	; (8006b20 <vPortSetupTimerInterrupt+0x40>)
 8006af6:	fba2 2303 	umull	r2, r3, r2, r3
 8006afa:	099b      	lsrs	r3, r3, #6
 8006afc:	4a09      	ldr	r2, [pc, #36]	; (8006b24 <vPortSetupTimerInterrupt+0x44>)
 8006afe:	3b01      	subs	r3, #1
 8006b00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006b02:	4b04      	ldr	r3, [pc, #16]	; (8006b14 <vPortSetupTimerInterrupt+0x34>)
 8006b04:	2207      	movs	r2, #7
 8006b06:	601a      	str	r2, [r3, #0]
}
 8006b08:	bf00      	nop
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr
 8006b12:	bf00      	nop
 8006b14:	e000e010 	.word	0xe000e010
 8006b18:	e000e018 	.word	0xe000e018
 8006b1c:	20000000 	.word	0x20000000
 8006b20:	10624dd3 	.word	0x10624dd3
 8006b24:	e000e014 	.word	0xe000e014

08006b28 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006b28:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006b38 <vPortEnableVFP+0x10>
 8006b2c:	6801      	ldr	r1, [r0, #0]
 8006b2e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006b32:	6001      	str	r1, [r0, #0]
 8006b34:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006b36:	bf00      	nop
 8006b38:	e000ed88 	.word	0xe000ed88

08006b3c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b085      	sub	sp, #20
 8006b40:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006b42:	f3ef 8305 	mrs	r3, IPSR
 8006b46:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2b0f      	cmp	r3, #15
 8006b4c:	d916      	bls.n	8006b7c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006b4e:	4a19      	ldr	r2, [pc, #100]	; (8006bb4 <vPortValidateInterruptPriority+0x78>)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	4413      	add	r3, r2
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006b58:	4b17      	ldr	r3, [pc, #92]	; (8006bb8 <vPortValidateInterruptPriority+0x7c>)
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	7afa      	ldrb	r2, [r7, #11]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d20c      	bcs.n	8006b7c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8006b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b66:	b672      	cpsid	i
 8006b68:	f383 8811 	msr	BASEPRI, r3
 8006b6c:	f3bf 8f6f 	isb	sy
 8006b70:	f3bf 8f4f 	dsb	sy
 8006b74:	b662      	cpsie	i
 8006b76:	607b      	str	r3, [r7, #4]
}
 8006b78:	bf00      	nop
 8006b7a:	e7fe      	b.n	8006b7a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006b7c:	4b0f      	ldr	r3, [pc, #60]	; (8006bbc <vPortValidateInterruptPriority+0x80>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006b84:	4b0e      	ldr	r3, [pc, #56]	; (8006bc0 <vPortValidateInterruptPriority+0x84>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d90c      	bls.n	8006ba6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8006b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b90:	b672      	cpsid	i
 8006b92:	f383 8811 	msr	BASEPRI, r3
 8006b96:	f3bf 8f6f 	isb	sy
 8006b9a:	f3bf 8f4f 	dsb	sy
 8006b9e:	b662      	cpsie	i
 8006ba0:	603b      	str	r3, [r7, #0]
}
 8006ba2:	bf00      	nop
 8006ba4:	e7fe      	b.n	8006ba4 <vPortValidateInterruptPriority+0x68>
	}
 8006ba6:	bf00      	nop
 8006ba8:	3714      	adds	r7, #20
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr
 8006bb2:	bf00      	nop
 8006bb4:	e000e3f0 	.word	0xe000e3f0
 8006bb8:	20001034 	.word	0x20001034
 8006bbc:	e000ed0c 	.word	0xe000ed0c
 8006bc0:	20001038 	.word	0x20001038

08006bc4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b08a      	sub	sp, #40	; 0x28
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006bd0:	f7fe fd80 	bl	80056d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006bd4:	4b5b      	ldr	r3, [pc, #364]	; (8006d44 <pvPortMalloc+0x180>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d101      	bne.n	8006be0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006bdc:	f000 f91a 	bl	8006e14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006be0:	4b59      	ldr	r3, [pc, #356]	; (8006d48 <pvPortMalloc+0x184>)
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4013      	ands	r3, r2
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	f040 8092 	bne.w	8006d12 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d01f      	beq.n	8006c34 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8006bf4:	2208      	movs	r2, #8
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f003 0307 	and.w	r3, r3, #7
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d016      	beq.n	8006c34 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f023 0307 	bic.w	r3, r3, #7
 8006c0c:	3308      	adds	r3, #8
 8006c0e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f003 0307 	and.w	r3, r3, #7
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d00c      	beq.n	8006c34 <pvPortMalloc+0x70>
	__asm volatile
 8006c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c1e:	b672      	cpsid	i
 8006c20:	f383 8811 	msr	BASEPRI, r3
 8006c24:	f3bf 8f6f 	isb	sy
 8006c28:	f3bf 8f4f 	dsb	sy
 8006c2c:	b662      	cpsie	i
 8006c2e:	617b      	str	r3, [r7, #20]
}
 8006c30:	bf00      	nop
 8006c32:	e7fe      	b.n	8006c32 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d06b      	beq.n	8006d12 <pvPortMalloc+0x14e>
 8006c3a:	4b44      	ldr	r3, [pc, #272]	; (8006d4c <pvPortMalloc+0x188>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d866      	bhi.n	8006d12 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006c44:	4b42      	ldr	r3, [pc, #264]	; (8006d50 <pvPortMalloc+0x18c>)
 8006c46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006c48:	4b41      	ldr	r3, [pc, #260]	; (8006d50 <pvPortMalloc+0x18c>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c4e:	e004      	b.n	8006c5a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8006c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d903      	bls.n	8006c6c <pvPortMalloc+0xa8>
 8006c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d1f1      	bne.n	8006c50 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006c6c:	4b35      	ldr	r3, [pc, #212]	; (8006d44 <pvPortMalloc+0x180>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d04d      	beq.n	8006d12 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006c76:	6a3b      	ldr	r3, [r7, #32]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	2208      	movs	r2, #8
 8006c7c:	4413      	add	r3, r2
 8006c7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	6a3b      	ldr	r3, [r7, #32]
 8006c86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8a:	685a      	ldr	r2, [r3, #4]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	1ad2      	subs	r2, r2, r3
 8006c90:	2308      	movs	r3, #8
 8006c92:	005b      	lsls	r3, r3, #1
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d921      	bls.n	8006cdc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	f003 0307 	and.w	r3, r3, #7
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00c      	beq.n	8006cc4 <pvPortMalloc+0x100>
	__asm volatile
 8006caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cae:	b672      	cpsid	i
 8006cb0:	f383 8811 	msr	BASEPRI, r3
 8006cb4:	f3bf 8f6f 	isb	sy
 8006cb8:	f3bf 8f4f 	dsb	sy
 8006cbc:	b662      	cpsie	i
 8006cbe:	613b      	str	r3, [r7, #16]
}
 8006cc0:	bf00      	nop
 8006cc2:	e7fe      	b.n	8006cc2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc6:	685a      	ldr	r2, [r3, #4]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	1ad2      	subs	r2, r2, r3
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006cd6:	69b8      	ldr	r0, [r7, #24]
 8006cd8:	f000 f8fe 	bl	8006ed8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006cdc:	4b1b      	ldr	r3, [pc, #108]	; (8006d4c <pvPortMalloc+0x188>)
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	1ad3      	subs	r3, r2, r3
 8006ce6:	4a19      	ldr	r2, [pc, #100]	; (8006d4c <pvPortMalloc+0x188>)
 8006ce8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006cea:	4b18      	ldr	r3, [pc, #96]	; (8006d4c <pvPortMalloc+0x188>)
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	4b19      	ldr	r3, [pc, #100]	; (8006d54 <pvPortMalloc+0x190>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d203      	bcs.n	8006cfe <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006cf6:	4b15      	ldr	r3, [pc, #84]	; (8006d4c <pvPortMalloc+0x188>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a16      	ldr	r2, [pc, #88]	; (8006d54 <pvPortMalloc+0x190>)
 8006cfc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d00:	685a      	ldr	r2, [r3, #4]
 8006d02:	4b11      	ldr	r3, [pc, #68]	; (8006d48 <pvPortMalloc+0x184>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	431a      	orrs	r2, r3
 8006d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0e:	2200      	movs	r2, #0
 8006d10:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006d12:	f7fe fced 	bl	80056f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	f003 0307 	and.w	r3, r3, #7
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d00c      	beq.n	8006d3a <pvPortMalloc+0x176>
	__asm volatile
 8006d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d24:	b672      	cpsid	i
 8006d26:	f383 8811 	msr	BASEPRI, r3
 8006d2a:	f3bf 8f6f 	isb	sy
 8006d2e:	f3bf 8f4f 	dsb	sy
 8006d32:	b662      	cpsie	i
 8006d34:	60fb      	str	r3, [r7, #12]
}
 8006d36:	bf00      	nop
 8006d38:	e7fe      	b.n	8006d38 <pvPortMalloc+0x174>
	return pvReturn;
 8006d3a:	69fb      	ldr	r3, [r7, #28]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3728      	adds	r7, #40	; 0x28
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	20004c44 	.word	0x20004c44
 8006d48:	20004c50 	.word	0x20004c50
 8006d4c:	20004c48 	.word	0x20004c48
 8006d50:	20004c3c 	.word	0x20004c3c
 8006d54:	20004c4c 	.word	0x20004c4c

08006d58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b086      	sub	sp, #24
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d04c      	beq.n	8006e04 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006d6a:	2308      	movs	r3, #8
 8006d6c:	425b      	negs	r3, r3
 8006d6e:	697a      	ldr	r2, [r7, #20]
 8006d70:	4413      	add	r3, r2
 8006d72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	685a      	ldr	r2, [r3, #4]
 8006d7c:	4b23      	ldr	r3, [pc, #140]	; (8006e0c <vPortFree+0xb4>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4013      	ands	r3, r2
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d10c      	bne.n	8006da0 <vPortFree+0x48>
	__asm volatile
 8006d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d8a:	b672      	cpsid	i
 8006d8c:	f383 8811 	msr	BASEPRI, r3
 8006d90:	f3bf 8f6f 	isb	sy
 8006d94:	f3bf 8f4f 	dsb	sy
 8006d98:	b662      	cpsie	i
 8006d9a:	60fb      	str	r3, [r7, #12]
}
 8006d9c:	bf00      	nop
 8006d9e:	e7fe      	b.n	8006d9e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d00c      	beq.n	8006dc2 <vPortFree+0x6a>
	__asm volatile
 8006da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dac:	b672      	cpsid	i
 8006dae:	f383 8811 	msr	BASEPRI, r3
 8006db2:	f3bf 8f6f 	isb	sy
 8006db6:	f3bf 8f4f 	dsb	sy
 8006dba:	b662      	cpsie	i
 8006dbc:	60bb      	str	r3, [r7, #8]
}
 8006dbe:	bf00      	nop
 8006dc0:	e7fe      	b.n	8006dc0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	685a      	ldr	r2, [r3, #4]
 8006dc6:	4b11      	ldr	r3, [pc, #68]	; (8006e0c <vPortFree+0xb4>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4013      	ands	r3, r2
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d019      	beq.n	8006e04 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d115      	bne.n	8006e04 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	685a      	ldr	r2, [r3, #4]
 8006ddc:	4b0b      	ldr	r3, [pc, #44]	; (8006e0c <vPortFree+0xb4>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	43db      	mvns	r3, r3
 8006de2:	401a      	ands	r2, r3
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006de8:	f7fe fc74 	bl	80056d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	685a      	ldr	r2, [r3, #4]
 8006df0:	4b07      	ldr	r3, [pc, #28]	; (8006e10 <vPortFree+0xb8>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4413      	add	r3, r2
 8006df6:	4a06      	ldr	r2, [pc, #24]	; (8006e10 <vPortFree+0xb8>)
 8006df8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006dfa:	6938      	ldr	r0, [r7, #16]
 8006dfc:	f000 f86c 	bl	8006ed8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006e00:	f7fe fc76 	bl	80056f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006e04:	bf00      	nop
 8006e06:	3718      	adds	r7, #24
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	20004c50 	.word	0x20004c50
 8006e10:	20004c48 	.word	0x20004c48

08006e14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e14:	b480      	push	{r7}
 8006e16:	b085      	sub	sp, #20
 8006e18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006e1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006e20:	4b27      	ldr	r3, [pc, #156]	; (8006ec0 <prvHeapInit+0xac>)
 8006e22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f003 0307 	and.w	r3, r3, #7
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d00c      	beq.n	8006e48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	3307      	adds	r3, #7
 8006e32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f023 0307 	bic.w	r3, r3, #7
 8006e3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e3c:	68ba      	ldr	r2, [r7, #8]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	1ad3      	subs	r3, r2, r3
 8006e42:	4a1f      	ldr	r2, [pc, #124]	; (8006ec0 <prvHeapInit+0xac>)
 8006e44:	4413      	add	r3, r2
 8006e46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e4c:	4a1d      	ldr	r2, [pc, #116]	; (8006ec4 <prvHeapInit+0xb0>)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006e52:	4b1c      	ldr	r3, [pc, #112]	; (8006ec4 <prvHeapInit+0xb0>)
 8006e54:	2200      	movs	r2, #0
 8006e56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	68ba      	ldr	r2, [r7, #8]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006e60:	2208      	movs	r2, #8
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	1a9b      	subs	r3, r3, r2
 8006e66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f023 0307 	bic.w	r3, r3, #7
 8006e6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	4a15      	ldr	r2, [pc, #84]	; (8006ec8 <prvHeapInit+0xb4>)
 8006e74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006e76:	4b14      	ldr	r3, [pc, #80]	; (8006ec8 <prvHeapInit+0xb4>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006e7e:	4b12      	ldr	r3, [pc, #72]	; (8006ec8 <prvHeapInit+0xb4>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2200      	movs	r2, #0
 8006e84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	68fa      	ldr	r2, [r7, #12]
 8006e8e:	1ad2      	subs	r2, r2, r3
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006e94:	4b0c      	ldr	r3, [pc, #48]	; (8006ec8 <prvHeapInit+0xb4>)
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	4a0a      	ldr	r2, [pc, #40]	; (8006ecc <prvHeapInit+0xb8>)
 8006ea2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	4a09      	ldr	r2, [pc, #36]	; (8006ed0 <prvHeapInit+0xbc>)
 8006eaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006eac:	4b09      	ldr	r3, [pc, #36]	; (8006ed4 <prvHeapInit+0xc0>)
 8006eae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006eb2:	601a      	str	r2, [r3, #0]
}
 8006eb4:	bf00      	nop
 8006eb6:	3714      	adds	r7, #20
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr
 8006ec0:	2000103c 	.word	0x2000103c
 8006ec4:	20004c3c 	.word	0x20004c3c
 8006ec8:	20004c44 	.word	0x20004c44
 8006ecc:	20004c4c 	.word	0x20004c4c
 8006ed0:	20004c48 	.word	0x20004c48
 8006ed4:	20004c50 	.word	0x20004c50

08006ed8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ee0:	4b28      	ldr	r3, [pc, #160]	; (8006f84 <prvInsertBlockIntoFreeList+0xac>)
 8006ee2:	60fb      	str	r3, [r7, #12]
 8006ee4:	e002      	b.n	8006eec <prvInsertBlockIntoFreeList+0x14>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	60fb      	str	r3, [r7, #12]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d8f7      	bhi.n	8006ee6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	68ba      	ldr	r2, [r7, #8]
 8006f00:	4413      	add	r3, r2
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d108      	bne.n	8006f1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	685a      	ldr	r2, [r3, #4]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	441a      	add	r2, r3
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	68ba      	ldr	r2, [r7, #8]
 8006f24:	441a      	add	r2, r3
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d118      	bne.n	8006f60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	4b15      	ldr	r3, [pc, #84]	; (8006f88 <prvInsertBlockIntoFreeList+0xb0>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d00d      	beq.n	8006f56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	685a      	ldr	r2, [r3, #4]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	441a      	add	r2, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	601a      	str	r2, [r3, #0]
 8006f54:	e008      	b.n	8006f68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006f56:	4b0c      	ldr	r3, [pc, #48]	; (8006f88 <prvInsertBlockIntoFreeList+0xb0>)
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	601a      	str	r2, [r3, #0]
 8006f5e:	e003      	b.n	8006f68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d002      	beq.n	8006f76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f76:	bf00      	nop
 8006f78:	3714      	adds	r7, #20
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	20004c3c 	.word	0x20004c3c
 8006f88:	20004c44 	.word	0x20004c44

08006f8c <memset>:
 8006f8c:	4402      	add	r2, r0
 8006f8e:	4603      	mov	r3, r0
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d100      	bne.n	8006f96 <memset+0xa>
 8006f94:	4770      	bx	lr
 8006f96:	f803 1b01 	strb.w	r1, [r3], #1
 8006f9a:	e7f9      	b.n	8006f90 <memset+0x4>

08006f9c <_reclaim_reent>:
 8006f9c:	4b29      	ldr	r3, [pc, #164]	; (8007044 <_reclaim_reent+0xa8>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4283      	cmp	r3, r0
 8006fa2:	b570      	push	{r4, r5, r6, lr}
 8006fa4:	4604      	mov	r4, r0
 8006fa6:	d04b      	beq.n	8007040 <_reclaim_reent+0xa4>
 8006fa8:	69c3      	ldr	r3, [r0, #28]
 8006faa:	b143      	cbz	r3, 8006fbe <_reclaim_reent+0x22>
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d144      	bne.n	800703c <_reclaim_reent+0xa0>
 8006fb2:	69e3      	ldr	r3, [r4, #28]
 8006fb4:	6819      	ldr	r1, [r3, #0]
 8006fb6:	b111      	cbz	r1, 8006fbe <_reclaim_reent+0x22>
 8006fb8:	4620      	mov	r0, r4
 8006fba:	f000 f879 	bl	80070b0 <_free_r>
 8006fbe:	6961      	ldr	r1, [r4, #20]
 8006fc0:	b111      	cbz	r1, 8006fc8 <_reclaim_reent+0x2c>
 8006fc2:	4620      	mov	r0, r4
 8006fc4:	f000 f874 	bl	80070b0 <_free_r>
 8006fc8:	69e1      	ldr	r1, [r4, #28]
 8006fca:	b111      	cbz	r1, 8006fd2 <_reclaim_reent+0x36>
 8006fcc:	4620      	mov	r0, r4
 8006fce:	f000 f86f 	bl	80070b0 <_free_r>
 8006fd2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006fd4:	b111      	cbz	r1, 8006fdc <_reclaim_reent+0x40>
 8006fd6:	4620      	mov	r0, r4
 8006fd8:	f000 f86a 	bl	80070b0 <_free_r>
 8006fdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fde:	b111      	cbz	r1, 8006fe6 <_reclaim_reent+0x4a>
 8006fe0:	4620      	mov	r0, r4
 8006fe2:	f000 f865 	bl	80070b0 <_free_r>
 8006fe6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006fe8:	b111      	cbz	r1, 8006ff0 <_reclaim_reent+0x54>
 8006fea:	4620      	mov	r0, r4
 8006fec:	f000 f860 	bl	80070b0 <_free_r>
 8006ff0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006ff2:	b111      	cbz	r1, 8006ffa <_reclaim_reent+0x5e>
 8006ff4:	4620      	mov	r0, r4
 8006ff6:	f000 f85b 	bl	80070b0 <_free_r>
 8006ffa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006ffc:	b111      	cbz	r1, 8007004 <_reclaim_reent+0x68>
 8006ffe:	4620      	mov	r0, r4
 8007000:	f000 f856 	bl	80070b0 <_free_r>
 8007004:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007006:	b111      	cbz	r1, 800700e <_reclaim_reent+0x72>
 8007008:	4620      	mov	r0, r4
 800700a:	f000 f851 	bl	80070b0 <_free_r>
 800700e:	6a23      	ldr	r3, [r4, #32]
 8007010:	b1b3      	cbz	r3, 8007040 <_reclaim_reent+0xa4>
 8007012:	4620      	mov	r0, r4
 8007014:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007018:	4718      	bx	r3
 800701a:	5949      	ldr	r1, [r1, r5]
 800701c:	b941      	cbnz	r1, 8007030 <_reclaim_reent+0x94>
 800701e:	3504      	adds	r5, #4
 8007020:	69e3      	ldr	r3, [r4, #28]
 8007022:	2d80      	cmp	r5, #128	; 0x80
 8007024:	68d9      	ldr	r1, [r3, #12]
 8007026:	d1f8      	bne.n	800701a <_reclaim_reent+0x7e>
 8007028:	4620      	mov	r0, r4
 800702a:	f000 f841 	bl	80070b0 <_free_r>
 800702e:	e7c0      	b.n	8006fb2 <_reclaim_reent+0x16>
 8007030:	680e      	ldr	r6, [r1, #0]
 8007032:	4620      	mov	r0, r4
 8007034:	f000 f83c 	bl	80070b0 <_free_r>
 8007038:	4631      	mov	r1, r6
 800703a:	e7ef      	b.n	800701c <_reclaim_reent+0x80>
 800703c:	2500      	movs	r5, #0
 800703e:	e7ef      	b.n	8007020 <_reclaim_reent+0x84>
 8007040:	bd70      	pop	{r4, r5, r6, pc}
 8007042:	bf00      	nop
 8007044:	2000005c 	.word	0x2000005c

08007048 <__libc_init_array>:
 8007048:	b570      	push	{r4, r5, r6, lr}
 800704a:	4d0d      	ldr	r5, [pc, #52]	; (8007080 <__libc_init_array+0x38>)
 800704c:	4c0d      	ldr	r4, [pc, #52]	; (8007084 <__libc_init_array+0x3c>)
 800704e:	1b64      	subs	r4, r4, r5
 8007050:	10a4      	asrs	r4, r4, #2
 8007052:	2600      	movs	r6, #0
 8007054:	42a6      	cmp	r6, r4
 8007056:	d109      	bne.n	800706c <__libc_init_array+0x24>
 8007058:	4d0b      	ldr	r5, [pc, #44]	; (8007088 <__libc_init_array+0x40>)
 800705a:	4c0c      	ldr	r4, [pc, #48]	; (800708c <__libc_init_array+0x44>)
 800705c:	f000 f880 	bl	8007160 <_init>
 8007060:	1b64      	subs	r4, r4, r5
 8007062:	10a4      	asrs	r4, r4, #2
 8007064:	2600      	movs	r6, #0
 8007066:	42a6      	cmp	r6, r4
 8007068:	d105      	bne.n	8007076 <__libc_init_array+0x2e>
 800706a:	bd70      	pop	{r4, r5, r6, pc}
 800706c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007070:	4798      	blx	r3
 8007072:	3601      	adds	r6, #1
 8007074:	e7ee      	b.n	8007054 <__libc_init_array+0xc>
 8007076:	f855 3b04 	ldr.w	r3, [r5], #4
 800707a:	4798      	blx	r3
 800707c:	3601      	adds	r6, #1
 800707e:	e7f2      	b.n	8007066 <__libc_init_array+0x1e>
 8007080:	08007218 	.word	0x08007218
 8007084:	08007218 	.word	0x08007218
 8007088:	08007218 	.word	0x08007218
 800708c:	0800721c 	.word	0x0800721c

08007090 <__retarget_lock_acquire_recursive>:
 8007090:	4770      	bx	lr

08007092 <__retarget_lock_release_recursive>:
 8007092:	4770      	bx	lr

08007094 <memcpy>:
 8007094:	440a      	add	r2, r1
 8007096:	4291      	cmp	r1, r2
 8007098:	f100 33ff 	add.w	r3, r0, #4294967295
 800709c:	d100      	bne.n	80070a0 <memcpy+0xc>
 800709e:	4770      	bx	lr
 80070a0:	b510      	push	{r4, lr}
 80070a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070aa:	4291      	cmp	r1, r2
 80070ac:	d1f9      	bne.n	80070a2 <memcpy+0xe>
 80070ae:	bd10      	pop	{r4, pc}

080070b0 <_free_r>:
 80070b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070b2:	2900      	cmp	r1, #0
 80070b4:	d044      	beq.n	8007140 <_free_r+0x90>
 80070b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070ba:	9001      	str	r0, [sp, #4]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f1a1 0404 	sub.w	r4, r1, #4
 80070c2:	bfb8      	it	lt
 80070c4:	18e4      	addlt	r4, r4, r3
 80070c6:	f000 f83f 	bl	8007148 <__malloc_lock>
 80070ca:	4a1e      	ldr	r2, [pc, #120]	; (8007144 <_free_r+0x94>)
 80070cc:	9801      	ldr	r0, [sp, #4]
 80070ce:	6813      	ldr	r3, [r2, #0]
 80070d0:	b933      	cbnz	r3, 80070e0 <_free_r+0x30>
 80070d2:	6063      	str	r3, [r4, #4]
 80070d4:	6014      	str	r4, [r2, #0]
 80070d6:	b003      	add	sp, #12
 80070d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80070dc:	f000 b83a 	b.w	8007154 <__malloc_unlock>
 80070e0:	42a3      	cmp	r3, r4
 80070e2:	d908      	bls.n	80070f6 <_free_r+0x46>
 80070e4:	6825      	ldr	r5, [r4, #0]
 80070e6:	1961      	adds	r1, r4, r5
 80070e8:	428b      	cmp	r3, r1
 80070ea:	bf01      	itttt	eq
 80070ec:	6819      	ldreq	r1, [r3, #0]
 80070ee:	685b      	ldreq	r3, [r3, #4]
 80070f0:	1949      	addeq	r1, r1, r5
 80070f2:	6021      	streq	r1, [r4, #0]
 80070f4:	e7ed      	b.n	80070d2 <_free_r+0x22>
 80070f6:	461a      	mov	r2, r3
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	b10b      	cbz	r3, 8007100 <_free_r+0x50>
 80070fc:	42a3      	cmp	r3, r4
 80070fe:	d9fa      	bls.n	80070f6 <_free_r+0x46>
 8007100:	6811      	ldr	r1, [r2, #0]
 8007102:	1855      	adds	r5, r2, r1
 8007104:	42a5      	cmp	r5, r4
 8007106:	d10b      	bne.n	8007120 <_free_r+0x70>
 8007108:	6824      	ldr	r4, [r4, #0]
 800710a:	4421      	add	r1, r4
 800710c:	1854      	adds	r4, r2, r1
 800710e:	42a3      	cmp	r3, r4
 8007110:	6011      	str	r1, [r2, #0]
 8007112:	d1e0      	bne.n	80070d6 <_free_r+0x26>
 8007114:	681c      	ldr	r4, [r3, #0]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	6053      	str	r3, [r2, #4]
 800711a:	440c      	add	r4, r1
 800711c:	6014      	str	r4, [r2, #0]
 800711e:	e7da      	b.n	80070d6 <_free_r+0x26>
 8007120:	d902      	bls.n	8007128 <_free_r+0x78>
 8007122:	230c      	movs	r3, #12
 8007124:	6003      	str	r3, [r0, #0]
 8007126:	e7d6      	b.n	80070d6 <_free_r+0x26>
 8007128:	6825      	ldr	r5, [r4, #0]
 800712a:	1961      	adds	r1, r4, r5
 800712c:	428b      	cmp	r3, r1
 800712e:	bf04      	itt	eq
 8007130:	6819      	ldreq	r1, [r3, #0]
 8007132:	685b      	ldreq	r3, [r3, #4]
 8007134:	6063      	str	r3, [r4, #4]
 8007136:	bf04      	itt	eq
 8007138:	1949      	addeq	r1, r1, r5
 800713a:	6021      	streq	r1, [r4, #0]
 800713c:	6054      	str	r4, [r2, #4]
 800713e:	e7ca      	b.n	80070d6 <_free_r+0x26>
 8007140:	b003      	add	sp, #12
 8007142:	bd30      	pop	{r4, r5, pc}
 8007144:	20004d90 	.word	0x20004d90

08007148 <__malloc_lock>:
 8007148:	4801      	ldr	r0, [pc, #4]	; (8007150 <__malloc_lock+0x8>)
 800714a:	f7ff bfa1 	b.w	8007090 <__retarget_lock_acquire_recursive>
 800714e:	bf00      	nop
 8007150:	20004d8c 	.word	0x20004d8c

08007154 <__malloc_unlock>:
 8007154:	4801      	ldr	r0, [pc, #4]	; (800715c <__malloc_unlock+0x8>)
 8007156:	f7ff bf9c 	b.w	8007092 <__retarget_lock_release_recursive>
 800715a:	bf00      	nop
 800715c:	20004d8c 	.word	0x20004d8c

08007160 <_init>:
 8007160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007162:	bf00      	nop
 8007164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007166:	bc08      	pop	{r3}
 8007168:	469e      	mov	lr, r3
 800716a:	4770      	bx	lr

0800716c <_fini>:
 800716c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800716e:	bf00      	nop
 8007170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007172:	bc08      	pop	{r3}
 8007174:	469e      	mov	lr, r3
 8007176:	4770      	bx	lr
