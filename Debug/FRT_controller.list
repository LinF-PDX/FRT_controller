
FRT_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d30  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08006f30  08006f30  00016f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007028  08007028  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007028  08007028  00017028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007030  08007030  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007030  08007030  00017030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007034  08007034  00017034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007038  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c1c  20000074  080070ac  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c90  080070ac  00024c90  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001917e  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031c7  00000000  00000000  00039220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a8  00000000  00000000  0003c3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001260  00000000  00000000  0003d790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000344e  00000000  00000000  0003e9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015ab4  00000000  00000000  00041e3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010732c  00000000  00000000  000578f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015ec1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005620  00000000  00000000  0015ec70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
 8000220:	08006f18 	.word	0x08006f18

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
 800023c:	08006f18 	.word	0x08006f18

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b974 	b.w	8000540 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <APPS2_ADC_Percent>:
	ADC_VAL = HAL_ADC_GetValue(&hadc1);
	HAL_ADC_Stop(&hadc1);
	return (float)ADC_VAL/4095; //returns ADC percentage ranges from 0-1
}

float APPS2_ADC_Percent(void) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
	uint16_t ADC_VAL;

	HAL_ADC_Start(&hadc2);
 800054a:	480f      	ldr	r0, [pc, #60]	; (8000588 <APPS2_ADC_Percent+0x44>)
 800054c:	f000 fff0 	bl	8001530 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 10);
 8000550:	210a      	movs	r1, #10
 8000552:	480d      	ldr	r0, [pc, #52]	; (8000588 <APPS2_ADC_Percent+0x44>)
 8000554:	f001 f8ee 	bl	8001734 <HAL_ADC_PollForConversion>
	ADC_VAL = HAL_ADC_GetValue(&hadc2);
 8000558:	480b      	ldr	r0, [pc, #44]	; (8000588 <APPS2_ADC_Percent+0x44>)
 800055a:	f001 f976 	bl	800184a <HAL_ADC_GetValue>
 800055e:	4603      	mov	r3, r0
 8000560:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc2);
 8000562:	4809      	ldr	r0, [pc, #36]	; (8000588 <APPS2_ADC_Percent+0x44>)
 8000564:	f001 f8b2 	bl	80016cc <HAL_ADC_Stop>
	return (float)ADC_VAL/4095;
 8000568:	88fb      	ldrh	r3, [r7, #6]
 800056a:	ee07 3a90 	vmov	s15, r3
 800056e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000572:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800058c <APPS2_ADC_Percent+0x48>
 8000576:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800057a:	eef0 7a66 	vmov.f32	s15, s13
}
 800057e:	eeb0 0a67 	vmov.f32	s0, s15
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	200000d8 	.word	0x200000d8
 800058c:	457ff000 	.word	0x457ff000

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000594:	f000 ff5b 	bl	800144e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000598:	f000 f892 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059c:	f000 fa5a 	bl	8000a54 <MX_GPIO_Init>
  MX_CAN1_Init();
 80005a0:	f000 f9ec 	bl	800097c <MX_CAN1_Init>
  MX_ADC1_Init();
 80005a4:	f000 f8f4 	bl	8000790 <MX_ADC1_Init>
  MX_ADC2_Init();
 80005a8:	f000 f944 	bl	8000834 <MX_ADC2_Init>
  MX_ADC3_Init();
 80005ac:	f000 f994 	bl	80008d8 <MX_ADC3_Init>
  MX_CAN3_Init();
 80005b0:	f000 fa1a 	bl	80009e8 <MX_CAN3_Init>
  /* USER CODE BEGIN 2 */
  	CAN_Config();
 80005b4:	f000 faba 	bl	8000b2c <CAN_Config>

	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80005b8:	2102      	movs	r1, #2
 80005ba:	4836      	ldr	r0, [pc, #216]	; (8000694 <main+0x104>)
 80005bc:	f001 ffb0 	bl	8002520 <HAL_CAN_ActivateNotification>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <main+0x3a>
	{
	  Error_Handler();
 80005c6:	f000 fd19 	bl	8000ffc <Error_Handler>
	}
	// Initialize TxHeader and TxData
	AMK_TxHeader_R.DLC = 8;
 80005ca:	4b33      	ldr	r3, [pc, #204]	; (8000698 <main+0x108>)
 80005cc:	2208      	movs	r2, #8
 80005ce:	611a      	str	r2, [r3, #16]
	AMK_TxHeader_R.IDE = CAN_ID_STD;
 80005d0:	4b31      	ldr	r3, [pc, #196]	; (8000698 <main+0x108>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
	AMK_TxHeader_R.RTR = CAN_RTR_DATA;
 80005d6:	4b30      	ldr	r3, [pc, #192]	; (8000698 <main+0x108>)
 80005d8:	2200      	movs	r2, #0
 80005da:	60da      	str	r2, [r3, #12]
	AMK_TxHeader_R.StdId = 0x186;
 80005dc:	4b2e      	ldr	r3, [pc, #184]	; (8000698 <main+0x108>)
 80005de:	f44f 72c3 	mov.w	r2, #390	; 0x186
 80005e2:	601a      	str	r2, [r3, #0]
	AMK_TxHeader_R.TransmitGlobalTime = DISABLE;
 80005e4:	4b2c      	ldr	r3, [pc, #176]	; (8000698 <main+0x108>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	751a      	strb	r2, [r3, #20]

	AMK_TxData_R[0] = 0x00;
 80005ea:	4b2c      	ldr	r3, [pc, #176]	; (800069c <main+0x10c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	AMK_TxData_R[1] = 0x00;
 80005f0:	4b2a      	ldr	r3, [pc, #168]	; (800069c <main+0x10c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	705a      	strb	r2, [r3, #1]
	AMK_TxData_R[2] = 0x00;
 80005f6:	4b29      	ldr	r3, [pc, #164]	; (800069c <main+0x10c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	709a      	strb	r2, [r3, #2]
	AMK_TxData_R[3] = 0x00;
 80005fc:	4b27      	ldr	r3, [pc, #156]	; (800069c <main+0x10c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	70da      	strb	r2, [r3, #3]
	AMK_TxData_R[4] = 0x00;
 8000602:	4b26      	ldr	r3, [pc, #152]	; (800069c <main+0x10c>)
 8000604:	2200      	movs	r2, #0
 8000606:	711a      	strb	r2, [r3, #4]
	AMK_TxData_R[5] = 0x00;
 8000608:	4b24      	ldr	r3, [pc, #144]	; (800069c <main+0x10c>)
 800060a:	2200      	movs	r2, #0
 800060c:	715a      	strb	r2, [r3, #5]
	AMK_TxData_R[6] = 0x00;
 800060e:	4b23      	ldr	r3, [pc, #140]	; (800069c <main+0x10c>)
 8000610:	2200      	movs	r2, #0
 8000612:	719a      	strb	r2, [r3, #6]
	AMK_TxData_R[7] = 0x00;
 8000614:	4b21      	ldr	r3, [pc, #132]	; (800069c <main+0x10c>)
 8000616:	2200      	movs	r2, #0
 8000618:	71da      	strb	r2, [r3, #7]

	AMK_TxHeader_L.DLC = 8;
 800061a:	4b21      	ldr	r3, [pc, #132]	; (80006a0 <main+0x110>)
 800061c:	2208      	movs	r2, #8
 800061e:	611a      	str	r2, [r3, #16]
	AMK_TxHeader_L.IDE = CAN_ID_STD;
 8000620:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <main+0x110>)
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
	AMK_TxHeader_L.RTR = CAN_RTR_DATA;
 8000626:	4b1e      	ldr	r3, [pc, #120]	; (80006a0 <main+0x110>)
 8000628:	2200      	movs	r2, #0
 800062a:	60da      	str	r2, [r3, #12]
	AMK_TxHeader_L.StdId = 0x185;
 800062c:	4b1c      	ldr	r3, [pc, #112]	; (80006a0 <main+0x110>)
 800062e:	f240 1285 	movw	r2, #389	; 0x185
 8000632:	601a      	str	r2, [r3, #0]
	AMK_TxHeader_L.TransmitGlobalTime = DISABLE;
 8000634:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <main+0x110>)
 8000636:	2200      	movs	r2, #0
 8000638:	751a      	strb	r2, [r3, #20]

	AMK_TxData_L[0] = 0x00;
 800063a:	4b1a      	ldr	r3, [pc, #104]	; (80006a4 <main+0x114>)
 800063c:	2200      	movs	r2, #0
 800063e:	701a      	strb	r2, [r3, #0]
	AMK_TxData_L[1] = 0x00;
 8000640:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <main+0x114>)
 8000642:	2200      	movs	r2, #0
 8000644:	705a      	strb	r2, [r3, #1]
	AMK_TxData_L[2] = 0x00;
 8000646:	4b17      	ldr	r3, [pc, #92]	; (80006a4 <main+0x114>)
 8000648:	2200      	movs	r2, #0
 800064a:	709a      	strb	r2, [r3, #2]
	AMK_TxData_L[3] = 0x00;
 800064c:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <main+0x114>)
 800064e:	2200      	movs	r2, #0
 8000650:	70da      	strb	r2, [r3, #3]
	AMK_TxData_L[4] = 0x00;
 8000652:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <main+0x114>)
 8000654:	2200      	movs	r2, #0
 8000656:	711a      	strb	r2, [r3, #4]
	AMK_TxData_L[5] = 0x00;
 8000658:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <main+0x114>)
 800065a:	2200      	movs	r2, #0
 800065c:	715a      	strb	r2, [r3, #5]
	AMK_TxData_L[6] = 0x00;
 800065e:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <main+0x114>)
 8000660:	2200      	movs	r2, #0
 8000662:	719a      	strb	r2, [r3, #6]
	AMK_TxData_L[7] = 0x00;
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <main+0x114>)
 8000666:	2200      	movs	r2, #0
 8000668:	71da      	strb	r2, [r3, #7]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800066a:	f003 fc49 	bl	8003f00 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of controllerStart */
  controllerStartHandle = osThreadNew(Start_FRT_controller, NULL, &controllerStart_attributes);
 800066e:	4a0e      	ldr	r2, [pc, #56]	; (80006a8 <main+0x118>)
 8000670:	2100      	movs	r1, #0
 8000672:	480e      	ldr	r0, [pc, #56]	; (80006ac <main+0x11c>)
 8000674:	f003 fcae 	bl	8003fd4 <osThreadNew>
 8000678:	4603      	mov	r3, r0
 800067a:	4a0d      	ldr	r2, [pc, #52]	; (80006b0 <main+0x120>)
 800067c:	6013      	str	r3, [r2, #0]

  /* creation of motorControl */
  motorControlHandle = osThreadNew(Start_AMK, NULL, &motorControl_attributes);
 800067e:	4a0d      	ldr	r2, [pc, #52]	; (80006b4 <main+0x124>)
 8000680:	2100      	movs	r1, #0
 8000682:	480d      	ldr	r0, [pc, #52]	; (80006b8 <main+0x128>)
 8000684:	f003 fca6 	bl	8003fd4 <osThreadNew>
 8000688:	4603      	mov	r3, r0
 800068a:	4a0c      	ldr	r2, [pc, #48]	; (80006bc <main+0x12c>)
 800068c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800068e:	f003 fc6b 	bl	8003f68 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000692:	e7fe      	b.n	8000692 <main+0x102>
 8000694:	20000168 	.word	0x20000168
 8000698:	200001c0 	.word	0x200001c0
 800069c:	2000020c 	.word	0x2000020c
 80006a0:	200001d8 	.word	0x200001d8
 80006a4:	20000214 	.word	0x20000214
 80006a8:	08006f68 	.word	0x08006f68
 80006ac:	08000cfd 	.word	0x08000cfd
 80006b0:	200001b8 	.word	0x200001b8
 80006b4:	08006f8c 	.word	0x08006f8c
 80006b8:	08000dd5 	.word	0x08000dd5
 80006bc:	200001bc 	.word	0x200001bc

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b094      	sub	sp, #80	; 0x50
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 031c 	add.w	r3, r7, #28
 80006ca:	2234      	movs	r2, #52	; 0x34
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f006 fb58 	bl	8006d84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	f107 0308 	add.w	r3, r7, #8
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e4:	4b28      	ldr	r3, [pc, #160]	; (8000788 <SystemClock_Config+0xc8>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	4a27      	ldr	r2, [pc, #156]	; (8000788 <SystemClock_Config+0xc8>)
 80006ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ee:	6413      	str	r3, [r2, #64]	; 0x40
 80006f0:	4b25      	ldr	r3, [pc, #148]	; (8000788 <SystemClock_Config+0xc8>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006fc:	4b23      	ldr	r3, [pc, #140]	; (800078c <SystemClock_Config+0xcc>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000704:	4a21      	ldr	r2, [pc, #132]	; (800078c <SystemClock_Config+0xcc>)
 8000706:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800070a:	6013      	str	r3, [r2, #0]
 800070c:	4b1f      	ldr	r3, [pc, #124]	; (800078c <SystemClock_Config+0xcc>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000714:	603b      	str	r3, [r7, #0]
 8000716:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000718:	2302      	movs	r3, #2
 800071a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800071c:	2301      	movs	r3, #1
 800071e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000720:	2310      	movs	r3, #16
 8000722:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000724:	2302      	movs	r3, #2
 8000726:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000728:	2300      	movs	r3, #0
 800072a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800072c:	2308      	movs	r3, #8
 800072e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000730:	2360      	movs	r3, #96	; 0x60
 8000732:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8000734:	2306      	movs	r3, #6
 8000736:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000738:	2302      	movs	r3, #2
 800073a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800073c:	2302      	movs	r3, #2
 800073e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000740:	f107 031c 	add.w	r3, r7, #28
 8000744:	4618      	mov	r0, r3
 8000746:	f002 fc01 	bl	8002f4c <HAL_RCC_OscConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000750:	f000 fc54 	bl	8000ffc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000754:	230f      	movs	r3, #15
 8000756:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000758:	2302      	movs	r3, #2
 800075a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800075c:	2380      	movs	r3, #128	; 0x80
 800075e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000760:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000764:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800076a:	f107 0308 	add.w	r3, r7, #8
 800076e:	2100      	movs	r1, #0
 8000770:	4618      	mov	r0, r3
 8000772:	f002 fe99 	bl	80034a8 <HAL_RCC_ClockConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800077c:	f000 fc3e 	bl	8000ffc <Error_Handler>
  }
}
 8000780:	bf00      	nop
 8000782:	3750      	adds	r7, #80	; 0x50
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40023800 	.word	0x40023800
 800078c:	40007000 	.word	0x40007000

08000790 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000796:	463b      	mov	r3, r7
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007a2:	4b21      	ldr	r3, [pc, #132]	; (8000828 <MX_ADC1_Init+0x98>)
 80007a4:	4a21      	ldr	r2, [pc, #132]	; (800082c <MX_ADC1_Init+0x9c>)
 80007a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007a8:	4b1f      	ldr	r3, [pc, #124]	; (8000828 <MX_ADC1_Init+0x98>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007ae:	4b1e      	ldr	r3, [pc, #120]	; (8000828 <MX_ADC1_Init+0x98>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007b4:	4b1c      	ldr	r3, [pc, #112]	; (8000828 <MX_ADC1_Init+0x98>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007ba:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <MX_ADC1_Init+0x98>)
 80007bc:	2201      	movs	r2, #1
 80007be:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007c0:	4b19      	ldr	r3, [pc, #100]	; (8000828 <MX_ADC1_Init+0x98>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007c8:	4b17      	ldr	r3, [pc, #92]	; (8000828 <MX_ADC1_Init+0x98>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007ce:	4b16      	ldr	r3, [pc, #88]	; (8000828 <MX_ADC1_Init+0x98>)
 80007d0:	4a17      	ldr	r2, [pc, #92]	; (8000830 <MX_ADC1_Init+0xa0>)
 80007d2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007d4:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_ADC1_Init+0x98>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007da:	4b13      	ldr	r3, [pc, #76]	; (8000828 <MX_ADC1_Init+0x98>)
 80007dc:	2201      	movs	r2, #1
 80007de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_ADC1_Init+0x98>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_ADC1_Init+0x98>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007ee:	480e      	ldr	r0, [pc, #56]	; (8000828 <MX_ADC1_Init+0x98>)
 80007f0:	f000 fe5a 	bl	80014a8 <HAL_ADC_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80007fa:	f000 fbff 	bl	8000ffc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80007fe:	230a      	movs	r3, #10
 8000800:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000802:	2301      	movs	r3, #1
 8000804:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000806:	2300      	movs	r3, #0
 8000808:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800080a:	463b      	mov	r3, r7
 800080c:	4619      	mov	r1, r3
 800080e:	4806      	ldr	r0, [pc, #24]	; (8000828 <MX_ADC1_Init+0x98>)
 8000810:	f001 f828 	bl	8001864 <HAL_ADC_ConfigChannel>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800081a:	f000 fbef 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000090 	.word	0x20000090
 800082c:	40012000 	.word	0x40012000
 8000830:	0f000001 	.word	0x0f000001

08000834 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800083a:	463b      	mov	r3, r7
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000846:	4b21      	ldr	r3, [pc, #132]	; (80008cc <MX_ADC2_Init+0x98>)
 8000848:	4a21      	ldr	r2, [pc, #132]	; (80008d0 <MX_ADC2_Init+0x9c>)
 800084a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800084c:	4b1f      	ldr	r3, [pc, #124]	; (80008cc <MX_ADC2_Init+0x98>)
 800084e:	2200      	movs	r2, #0
 8000850:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000852:	4b1e      	ldr	r3, [pc, #120]	; (80008cc <MX_ADC2_Init+0x98>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000858:	4b1c      	ldr	r3, [pc, #112]	; (80008cc <MX_ADC2_Init+0x98>)
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800085e:	4b1b      	ldr	r3, [pc, #108]	; (80008cc <MX_ADC2_Init+0x98>)
 8000860:	2201      	movs	r2, #1
 8000862:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000864:	4b19      	ldr	r3, [pc, #100]	; (80008cc <MX_ADC2_Init+0x98>)
 8000866:	2200      	movs	r2, #0
 8000868:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800086c:	4b17      	ldr	r3, [pc, #92]	; (80008cc <MX_ADC2_Init+0x98>)
 800086e:	2200      	movs	r2, #0
 8000870:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000872:	4b16      	ldr	r3, [pc, #88]	; (80008cc <MX_ADC2_Init+0x98>)
 8000874:	4a17      	ldr	r2, [pc, #92]	; (80008d4 <MX_ADC2_Init+0xa0>)
 8000876:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000878:	4b14      	ldr	r3, [pc, #80]	; (80008cc <MX_ADC2_Init+0x98>)
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800087e:	4b13      	ldr	r3, [pc, #76]	; (80008cc <MX_ADC2_Init+0x98>)
 8000880:	2201      	movs	r2, #1
 8000882:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000884:	4b11      	ldr	r3, [pc, #68]	; (80008cc <MX_ADC2_Init+0x98>)
 8000886:	2200      	movs	r2, #0
 8000888:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800088c:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <MX_ADC2_Init+0x98>)
 800088e:	2201      	movs	r2, #1
 8000890:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000892:	480e      	ldr	r0, [pc, #56]	; (80008cc <MX_ADC2_Init+0x98>)
 8000894:	f000 fe08 	bl	80014a8 <HAL_ADC_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 800089e:	f000 fbad 	bl	8000ffc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80008a2:	230b      	movs	r3, #11
 80008a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008a6:	2301      	movs	r3, #1
 80008a8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008ae:	463b      	mov	r3, r7
 80008b0:	4619      	mov	r1, r3
 80008b2:	4806      	ldr	r0, [pc, #24]	; (80008cc <MX_ADC2_Init+0x98>)
 80008b4:	f000 ffd6 	bl	8001864 <HAL_ADC_ConfigChannel>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80008be:	f000 fb9d 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	3710      	adds	r7, #16
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	200000d8 	.word	0x200000d8
 80008d0:	40012100 	.word	0x40012100
 80008d4:	0f000001 	.word	0x0f000001

080008d8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008de:	463b      	mov	r3, r7
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80008ea:	4b21      	ldr	r3, [pc, #132]	; (8000970 <MX_ADC3_Init+0x98>)
 80008ec:	4a21      	ldr	r2, [pc, #132]	; (8000974 <MX_ADC3_Init+0x9c>)
 80008ee:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80008f0:	4b1f      	ldr	r3, [pc, #124]	; (8000970 <MX_ADC3_Init+0x98>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80008f6:	4b1e      	ldr	r3, [pc, #120]	; (8000970 <MX_ADC3_Init+0x98>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008fc:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <MX_ADC3_Init+0x98>)
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000902:	4b1b      	ldr	r3, [pc, #108]	; (8000970 <MX_ADC3_Init+0x98>)
 8000904:	2200      	movs	r2, #0
 8000906:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000908:	4b19      	ldr	r3, [pc, #100]	; (8000970 <MX_ADC3_Init+0x98>)
 800090a:	2200      	movs	r2, #0
 800090c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000910:	4b17      	ldr	r3, [pc, #92]	; (8000970 <MX_ADC3_Init+0x98>)
 8000912:	2200      	movs	r2, #0
 8000914:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000916:	4b16      	ldr	r3, [pc, #88]	; (8000970 <MX_ADC3_Init+0x98>)
 8000918:	4a17      	ldr	r2, [pc, #92]	; (8000978 <MX_ADC3_Init+0xa0>)
 800091a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800091c:	4b14      	ldr	r3, [pc, #80]	; (8000970 <MX_ADC3_Init+0x98>)
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000922:	4b13      	ldr	r3, [pc, #76]	; (8000970 <MX_ADC3_Init+0x98>)
 8000924:	2201      	movs	r2, #1
 8000926:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000928:	4b11      	ldr	r3, [pc, #68]	; (8000970 <MX_ADC3_Init+0x98>)
 800092a:	2200      	movs	r2, #0
 800092c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000930:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <MX_ADC3_Init+0x98>)
 8000932:	2201      	movs	r2, #1
 8000934:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000936:	480e      	ldr	r0, [pc, #56]	; (8000970 <MX_ADC3_Init+0x98>)
 8000938:	f000 fdb6 	bl	80014a8 <HAL_ADC_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8000942:	f000 fb5b 	bl	8000ffc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000946:	230c      	movs	r3, #12
 8000948:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800094a:	2301      	movs	r3, #1
 800094c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800094e:	2300      	movs	r3, #0
 8000950:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000952:	463b      	mov	r3, r7
 8000954:	4619      	mov	r1, r3
 8000956:	4806      	ldr	r0, [pc, #24]	; (8000970 <MX_ADC3_Init+0x98>)
 8000958:	f000 ff84 	bl	8001864 <HAL_ADC_ConfigChannel>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8000962:	f000 fb4b 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	3710      	adds	r7, #16
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000120 	.word	0x20000120
 8000974:	40012200 	.word	0x40012200
 8000978:	0f000001 	.word	0x0f000001

0800097c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000980:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <MX_CAN1_Init+0x64>)
 8000982:	4a18      	ldr	r2, [pc, #96]	; (80009e4 <MX_CAN1_Init+0x68>)
 8000984:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1;
 8000986:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <MX_CAN1_Init+0x64>)
 8000988:	2201      	movs	r2, #1
 800098a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800098c:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <MX_CAN1_Init+0x64>)
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000992:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <MX_CAN1_Init+0x64>)
 8000994:	2200      	movs	r2, #0
 8000996:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000998:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <MX_CAN1_Init+0x64>)
 800099a:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800099e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <MX_CAN1_Init+0x64>)
 80009a2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80009a6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80009a8:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <MX_CAN1_Init+0x64>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 80009ae:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MX_CAN1_Init+0x64>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80009b4:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <MX_CAN1_Init+0x64>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_CAN1_Init+0x64>)
 80009bc:	2200      	movs	r2, #0
 80009be:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80009c0:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <MX_CAN1_Init+0x64>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <MX_CAN1_Init+0x64>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80009cc:	4804      	ldr	r0, [pc, #16]	; (80009e0 <MX_CAN1_Init+0x64>)
 80009ce:	f001 f999 	bl	8001d04 <HAL_CAN_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80009d8:	f000 fb10 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000168 	.word	0x20000168
 80009e4:	40006400 	.word	0x40006400

080009e8 <MX_CAN3_Init>:
  * @brief CAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN3_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 80009ec:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <MX_CAN3_Init+0x64>)
 80009ee:	4a18      	ldr	r2, [pc, #96]	; (8000a50 <MX_CAN3_Init+0x68>)
 80009f0:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 1;
 80009f2:	4b16      	ldr	r3, [pc, #88]	; (8000a4c <MX_CAN3_Init+0x64>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 80009f8:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <MX_CAN3_Init+0x64>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80009fe:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <MX_CAN3_Init+0x64>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000a04:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <MX_CAN3_Init+0x64>)
 8000a06:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000a0a:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <MX_CAN3_Init+0x64>)
 8000a0e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000a12:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8000a14:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <MX_CAN3_Init+0x64>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = ENABLE;
 8000a1a:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <MX_CAN3_Init+0x64>)
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8000a20:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <MX_CAN3_Init+0x64>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8000a26:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <MX_CAN3_Init+0x64>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8000a2c:	4b07      	ldr	r3, [pc, #28]	; (8000a4c <MX_CAN3_Init+0x64>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <MX_CAN3_Init+0x64>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8000a38:	4804      	ldr	r0, [pc, #16]	; (8000a4c <MX_CAN3_Init+0x64>)
 8000a3a:	f001 f963 	bl	8001d04 <HAL_CAN_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 8000a44:	f000 fada 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000190 	.word	0x20000190
 8000a50:	40003400 	.word	0x40003400

08000a54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b088      	sub	sp, #32
 8000a58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5a:	f107 030c 	add.w	r3, r7, #12
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	60da      	str	r2, [r3, #12]
 8000a68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6a:	4b2d      	ldr	r3, [pc, #180]	; (8000b20 <MX_GPIO_Init+0xcc>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a2c      	ldr	r2, [pc, #176]	; (8000b20 <MX_GPIO_Init+0xcc>)
 8000a70:	f043 0304 	orr.w	r3, r3, #4
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b2a      	ldr	r3, [pc, #168]	; (8000b20 <MX_GPIO_Init+0xcc>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0304 	and.w	r3, r3, #4
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a82:	4b27      	ldr	r3, [pc, #156]	; (8000b20 <MX_GPIO_Init+0xcc>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a26      	ldr	r2, [pc, #152]	; (8000b20 <MX_GPIO_Init+0xcc>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b24      	ldr	r3, [pc, #144]	; (8000b20 <MX_GPIO_Init+0xcc>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a9a:	4b21      	ldr	r3, [pc, #132]	; (8000b20 <MX_GPIO_Init+0xcc>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a20      	ldr	r2, [pc, #128]	; (8000b20 <MX_GPIO_Init+0xcc>)
 8000aa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b1e      	ldr	r3, [pc, #120]	; (8000b20 <MX_GPIO_Init+0xcc>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aae:	603b      	str	r3, [r7, #0]
 8000ab0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED_Pin|START_BTN_LED_EN_Pin, GPIO_PIN_RESET);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2128      	movs	r1, #40	; 0x28
 8000ab6:	481b      	ldr	r0, [pc, #108]	; (8000b24 <MX_GPIO_Init+0xd0>)
 8000ab8:	f002 fa2e 	bl	8002f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BRAKE_LIGHT_EN_Pin|RTDS_EN_Pin, GPIO_PIN_RESET);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2109      	movs	r1, #9
 8000ac0:	4819      	ldr	r0, [pc, #100]	; (8000b28 <MX_GPIO_Init+0xd4>)
 8000ac2:	f002 fa29 	bl	8002f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_LED_Pin START_BTN_LED_EN_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|START_BTN_LED_EN_Pin;
 8000ac6:	2328      	movs	r3, #40	; 0x28
 8000ac8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aca:	2301      	movs	r3, #1
 8000acc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad6:	f107 030c 	add.w	r3, r7, #12
 8000ada:	4619      	mov	r1, r3
 8000adc:	4811      	ldr	r0, [pc, #68]	; (8000b24 <MX_GPIO_Init+0xd0>)
 8000ade:	f002 f857 	bl	8002b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : BRAKE_LIGHT_EN_Pin RTDS_EN_Pin */
  GPIO_InitStruct.Pin = BRAKE_LIGHT_EN_Pin|RTDS_EN_Pin;
 8000ae2:	2309      	movs	r3, #9
 8000ae4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000af2:	f107 030c 	add.w	r3, r7, #12
 8000af6:	4619      	mov	r1, r3
 8000af8:	480b      	ldr	r0, [pc, #44]	; (8000b28 <MX_GPIO_Init+0xd4>)
 8000afa:	f002 f849 	bl	8002b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BTN_n_Pin */
  GPIO_InitStruct.Pin = START_BTN_n_Pin;
 8000afe:	2340      	movs	r3, #64	; 0x40
 8000b00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b02:	2300      	movs	r3, #0
 8000b04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(START_BTN_n_GPIO_Port, &GPIO_InitStruct);
 8000b0a:	f107 030c 	add.w	r3, r7, #12
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4805      	ldr	r0, [pc, #20]	; (8000b28 <MX_GPIO_Init+0xd4>)
 8000b12:	f002 f83d 	bl	8002b90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b16:	bf00      	nop
 8000b18:	3720      	adds	r7, #32
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40020000 	.word	0x40020000
 8000b28:	40021800 	.word	0x40021800

08000b2c <CAN_Config>:

/* USER CODE BEGIN 4 */
static void CAN_Config(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08a      	sub	sp, #40	; 0x28
 8000b30:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 13;
 8000b32:	230d      	movs	r3, #13
 8000b34:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x284<<5;
 8000b3e:	f44f 43a1 	mov.w	r3, #20608	; 0x5080
 8000b42:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8000b44:	2300      	movs	r3, #0
 8000b46:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0xFFE<<5; //Only ID 0x284 and 0x285 can pass through
 8000b48:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <CAN_Config+0x6c>)
 8000b4a:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8000b54:	2301      	movs	r3, #1
 8000b56:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8000b5c:	463b      	mov	r3, r7
 8000b5e:	4619      	mov	r1, r3
 8000b60:	480e      	ldr	r0, [pc, #56]	; (8000b9c <CAN_Config+0x70>)
 8000b62:	f001 f9cb 	bl	8001efc <HAL_CAN_ConfigFilter>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <CAN_Config+0x44>
	{
		/* Filter configuration Error */
		Error_Handler();
 8000b6c:	f000 fa46 	bl	8000ffc <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8000b70:	480a      	ldr	r0, [pc, #40]	; (8000b9c <CAN_Config+0x70>)
 8000b72:	f001 faaf 	bl	80020d4 <HAL_CAN_Start>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <CAN_Config+0x54>
	{
		/* Start Error */
		Error_Handler();
 8000b7c:	f000 fa3e 	bl	8000ffc <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan3) != HAL_OK)
 8000b80:	4807      	ldr	r0, [pc, #28]	; (8000ba0 <CAN_Config+0x74>)
 8000b82:	f001 faa7 	bl	80020d4 <HAL_CAN_Start>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <CAN_Config+0x64>
	{
		/* Start Error */
		Error_Handler();
 8000b8c:	f000 fa36 	bl	8000ffc <Error_Handler>
	}
}
 8000b90:	bf00      	nop
 8000b92:	3728      	adds	r7, #40	; 0x28
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	0001ffc0 	.word	0x0001ffc0
 8000b9c:	20000168 	.word	0x20000168
 8000ba0:	20000190 	.word	0x20000190

08000ba4 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
	//Get Rx message
	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8000bac:	4b4e      	ldr	r3, [pc, #312]	; (8000ce8 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000bae:	4a4f      	ldr	r2, [pc, #316]	; (8000cec <HAL_CAN_RxFifo0MsgPendingCallback+0x148>)
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	484f      	ldr	r0, [pc, #316]	; (8000cf0 <HAL_CAN_RxFifo0MsgPendingCallback+0x14c>)
 8000bb4:	f001 fba2 	bl	80022fc <HAL_CAN_GetRxMessage>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
		Error_Handler();
 8000bbe:	f000 fa1d 	bl	8000ffc <Error_Handler>
	}

	if (RxHeader.StdId == 0x285) {
 8000bc2:	4b4a      	ldr	r3, [pc, #296]	; (8000cec <HAL_CAN_RxFifo0MsgPendingCallback+0x148>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f240 2285 	movw	r2, #645	; 0x285
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d142      	bne.n	8000c54 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>
		if ((RxData[1] >> 1) & 1) {
 8000bce:	4b46      	ldr	r3, [pc, #280]	; (8000ce8 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000bd0:	785b      	ldrb	r3, [r3, #1]
 8000bd2:	085b      	lsrs	r3, r3, #1
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d003      	beq.n	8000be6 <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
			MotorStatus_R = STATUS_ERROR;
 8000bde:	4b45      	ldr	r3, [pc, #276]	; (8000cf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000be0:	2207      	movs	r2, #7
 8000be2:	701a      	strb	r2, [r3, #0]
			return;
 8000be4:	e07d      	b.n	8000ce2 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
		} else if (RxData[1] >> 7 & 1){
 8000be6:	4b40      	ldr	r3, [pc, #256]	; (8000ce8 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000be8:	785b      	ldrb	r3, [r3, #1]
 8000bea:	09db      	lsrs	r3, r3, #7
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d003      	beq.n	8000bfe <HAL_CAN_RxFifo0MsgPendingCallback+0x5a>
			MotorStatus_R = STATUS_DERATING;
 8000bf6:	4b3f      	ldr	r3, [pc, #252]	; (8000cf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000bf8:	2206      	movs	r2, #6
 8000bfa:	701a      	strb	r2, [r3, #0]
			return;
 8000bfc:	e071      	b.n	8000ce2 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
		} else {
			switch(RxData[1]) {
 8000bfe:	4b3a      	ldr	r3, [pc, #232]	; (8000ce8 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000c00:	785b      	ldrb	r3, [r3, #1]
 8000c02:	2b79      	cmp	r3, #121	; 0x79
 8000c04:	d01e      	beq.n	8000c44 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>
 8000c06:	2b79      	cmp	r3, #121	; 0x79
 8000c08:	dc20      	bgt.n	8000c4c <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
 8000c0a:	2b59      	cmp	r3, #89	; 0x59
 8000c0c:	d016      	beq.n	8000c3c <HAL_CAN_RxFifo0MsgPendingCallback+0x98>
 8000c0e:	2b59      	cmp	r3, #89	; 0x59
 8000c10:	dc1c      	bgt.n	8000c4c <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
 8000c12:	2b19      	cmp	r3, #25
 8000c14:	d00e      	beq.n	8000c34 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>
 8000c16:	2b19      	cmp	r3, #25
 8000c18:	dc18      	bgt.n	8000c4c <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d002      	beq.n	8000c24 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>
 8000c1e:	2b11      	cmp	r3, #17
 8000c20:	d004      	beq.n	8000c2c <HAL_CAN_RxFifo0MsgPendingCallback+0x88>
 8000c22:	e013      	b.n	8000c4c <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
				case 0x01:
					MotorStatus_R = STATUS_SYSTEM_READY;
 8000c24:	4b33      	ldr	r3, [pc, #204]	; (8000cf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	701a      	strb	r2, [r3, #0]
					break;
 8000c2a:	e05a      	b.n	8000ce2 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x11:
					MotorStatus_R = STATUS_DC_ON;
 8000c2c:	4b31      	ldr	r3, [pc, #196]	; (8000cf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000c2e:	2202      	movs	r2, #2
 8000c30:	701a      	strb	r2, [r3, #0]
					break;
 8000c32:	e056      	b.n	8000ce2 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x19:
					MotorStatus_R = STATUS_QUIT_DC_ON;
 8000c34:	4b2f      	ldr	r3, [pc, #188]	; (8000cf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000c36:	2203      	movs	r2, #3
 8000c38:	701a      	strb	r2, [r3, #0]
					break;
 8000c3a:	e052      	b.n	8000ce2 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x59:
					MotorStatus_R = STATUS_INVERTER_ON;
 8000c3c:	4b2d      	ldr	r3, [pc, #180]	; (8000cf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000c3e:	2204      	movs	r2, #4
 8000c40:	701a      	strb	r2, [r3, #0]
					break;
 8000c42:	e04e      	b.n	8000ce2 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x79:
					MotorStatus_R = STATUS_QUIT_INVERTER_ON;
 8000c44:	4b2b      	ldr	r3, [pc, #172]	; (8000cf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000c46:	2205      	movs	r2, #5
 8000c48:	701a      	strb	r2, [r3, #0]
					break;
 8000c4a:	e04a      	b.n	8000ce2 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				default:
					MotorStatus_R = STATUS_UNKNOWN;
 8000c4c:	4b29      	ldr	r3, [pc, #164]	; (8000cf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	701a      	strb	r2, [r3, #0]
 8000c52:	e046      	b.n	8000ce2 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
			}
		}
	}
	else if (RxHeader.StdId == 0x284) {
 8000c54:	4b25      	ldr	r3, [pc, #148]	; (8000cec <HAL_CAN_RxFifo0MsgPendingCallback+0x148>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f5b3 7f21 	cmp.w	r3, #644	; 0x284
 8000c5c:	d141      	bne.n	8000ce2 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
		if ((RxData[1] >> 1) & 1) {
 8000c5e:	4b22      	ldr	r3, [pc, #136]	; (8000ce8 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000c60:	785b      	ldrb	r3, [r3, #1]
 8000c62:	085b      	lsrs	r3, r3, #1
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d003      	beq.n	8000c76 <HAL_CAN_RxFifo0MsgPendingCallback+0xd2>
			MotorStatus_L = STATUS_ERROR;
 8000c6e:	4b22      	ldr	r3, [pc, #136]	; (8000cf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000c70:	2207      	movs	r2, #7
 8000c72:	701a      	strb	r2, [r3, #0]
			return;
 8000c74:	e035      	b.n	8000ce2 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
		} else if (RxData[1] >> 7 & 1){
 8000c76:	4b1c      	ldr	r3, [pc, #112]	; (8000ce8 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000c78:	785b      	ldrb	r3, [r3, #1]
 8000c7a:	09db      	lsrs	r3, r3, #7
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d003      	beq.n	8000c8e <HAL_CAN_RxFifo0MsgPendingCallback+0xea>
			MotorStatus_L = STATUS_DERATING;
 8000c86:	4b1c      	ldr	r3, [pc, #112]	; (8000cf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000c88:	2206      	movs	r2, #6
 8000c8a:	701a      	strb	r2, [r3, #0]
			return;
 8000c8c:	e029      	b.n	8000ce2 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
		} else {
			switch(RxData[1]) {
 8000c8e:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000c90:	785b      	ldrb	r3, [r3, #1]
 8000c92:	2b79      	cmp	r3, #121	; 0x79
 8000c94:	d01e      	beq.n	8000cd4 <HAL_CAN_RxFifo0MsgPendingCallback+0x130>
 8000c96:	2b79      	cmp	r3, #121	; 0x79
 8000c98:	dc20      	bgt.n	8000cdc <HAL_CAN_RxFifo0MsgPendingCallback+0x138>
 8000c9a:	2b59      	cmp	r3, #89	; 0x59
 8000c9c:	d016      	beq.n	8000ccc <HAL_CAN_RxFifo0MsgPendingCallback+0x128>
 8000c9e:	2b59      	cmp	r3, #89	; 0x59
 8000ca0:	dc1c      	bgt.n	8000cdc <HAL_CAN_RxFifo0MsgPendingCallback+0x138>
 8000ca2:	2b19      	cmp	r3, #25
 8000ca4:	d00e      	beq.n	8000cc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>
 8000ca6:	2b19      	cmp	r3, #25
 8000ca8:	dc18      	bgt.n	8000cdc <HAL_CAN_RxFifo0MsgPendingCallback+0x138>
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d002      	beq.n	8000cb4 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>
 8000cae:	2b11      	cmp	r3, #17
 8000cb0:	d004      	beq.n	8000cbc <HAL_CAN_RxFifo0MsgPendingCallback+0x118>
 8000cb2:	e013      	b.n	8000cdc <HAL_CAN_RxFifo0MsgPendingCallback+0x138>
				case 0x01:
					MotorStatus_L = STATUS_SYSTEM_READY;
 8000cb4:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	701a      	strb	r2, [r3, #0]
					break;
 8000cba:	e012      	b.n	8000ce2 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x11:
					MotorStatus_L = STATUS_DC_ON;
 8000cbc:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000cbe:	2202      	movs	r2, #2
 8000cc0:	701a      	strb	r2, [r3, #0]
					break;
 8000cc2:	e00e      	b.n	8000ce2 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x19:
					MotorStatus_L = STATUS_QUIT_DC_ON;
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000cc6:	2203      	movs	r2, #3
 8000cc8:	701a      	strb	r2, [r3, #0]
					break;
 8000cca:	e00a      	b.n	8000ce2 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x59:
					MotorStatus_L = STATUS_INVERTER_ON;
 8000ccc:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000cce:	2204      	movs	r2, #4
 8000cd0:	701a      	strb	r2, [r3, #0]
					break;
 8000cd2:	e006      	b.n	8000ce2 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x79:
					MotorStatus_L = STATUS_QUIT_INVERTER_ON;
 8000cd4:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000cd6:	2205      	movs	r2, #5
 8000cd8:	701a      	strb	r2, [r3, #0]
					break;
 8000cda:	e002      	b.n	8000ce2 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				default:
					MotorStatus_L = STATUS_UNKNOWN;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	2000021c 	.word	0x2000021c
 8000cec:	200001f0 	.word	0x200001f0
 8000cf0:	20000168 	.word	0x20000168
 8000cf4:	20000228 	.word	0x20000228
 8000cf8:	20000229 	.word	0x20000229

08000cfc <Start_FRT_controller>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_FRT_controller */
void Start_FRT_controller(void *argument)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(50);
 8000d04:	2032      	movs	r0, #50	; 0x32
 8000d06:	f003 fa4b 	bl	80041a0 <osDelay>
    if (HAL_GPIO_ReadPin(START_BTN_n_GPIO_Port, START_BTN_n_Pin) == 0) {
 8000d0a:	2140      	movs	r1, #64	; 0x40
 8000d0c:	482a      	ldr	r0, [pc, #168]	; (8000db8 <Start_FRT_controller+0xbc>)
 8000d0e:	f002 f8eb 	bl	8002ee8 <HAL_GPIO_ReadPin>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d102      	bne.n	8000d1e <Start_FRT_controller+0x22>
    	//Read Ready to Drive button
    	TsOn_n = 1;
 8000d18:	4b28      	ldr	r3, [pc, #160]	; (8000dbc <Start_FRT_controller+0xc0>)
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	701a      	strb	r2, [r3, #0]
    }
    if (RxData[1] == 0x79 && TsOn_n && BrakeOn) {
 8000d1e:	4b28      	ldr	r3, [pc, #160]	; (8000dc0 <Start_FRT_controller+0xc4>)
 8000d20:	785b      	ldrb	r3, [r3, #1]
 8000d22:	2b79      	cmp	r3, #121	; 0x79
 8000d24:	d11e      	bne.n	8000d64 <Start_FRT_controller+0x68>
 8000d26:	4b25      	ldr	r3, [pc, #148]	; (8000dbc <Start_FRT_controller+0xc0>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d01a      	beq.n	8000d64 <Start_FRT_controller+0x68>
 8000d2e:	4b25      	ldr	r3, [pc, #148]	; (8000dc4 <Start_FRT_controller+0xc8>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d016      	beq.n	8000d64 <Start_FRT_controller+0x68>
    	ReadyToDrive = 1;
 8000d36:	4b24      	ldr	r3, [pc, #144]	; (8000dc8 <Start_FRT_controller+0xcc>)
 8000d38:	2201      	movs	r2, #1
 8000d3a:	701a      	strb	r2, [r3, #0]
    	//osSemaphoreRelease(semReadytoDriveHandle);
    	//HAL_GPIO_WritePin(RTDS_EN_GPIO_Port, RTDS_EN_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(BRAKE_LIGHT_EN_GPIO_Port, BRAKE_LIGHT_EN_Pin, GPIO_PIN_SET);
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	2101      	movs	r1, #1
 8000d40:	481d      	ldr	r0, [pc, #116]	; (8000db8 <Start_FRT_controller+0xbc>)
 8000d42:	f002 f8e9 	bl	8002f18 <HAL_GPIO_WritePin>
    	osDelay(1500);
 8000d46:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000d4a:	f003 fa29 	bl	80041a0 <osDelay>
    	//HAL_GPIO_WritePin(RTDS_EN_GPIO_Port, RTDS_EN_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(BRAKE_LIGHT_EN_GPIO_Port, BRAKE_LIGHT_EN_Pin, GPIO_PIN_RESET);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2101      	movs	r1, #1
 8000d52:	4819      	ldr	r0, [pc, #100]	; (8000db8 <Start_FRT_controller+0xbc>)
 8000d54:	f002 f8e0 	bl	8002f18 <HAL_GPIO_WritePin>
    	osThreadTerminate(controllerStartHandle);
 8000d58:	4b1c      	ldr	r3, [pc, #112]	; (8000dcc <Start_FRT_controller+0xd0>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f003 f9df 	bl	8004120 <osThreadTerminate>
 8000d62:	e028      	b.n	8000db6 <Start_FRT_controller+0xba>
    } else if ((RxData[1] & 1) && !TsOn_n) {
 8000d64:	4b16      	ldr	r3, [pc, #88]	; (8000dc0 <Start_FRT_controller+0xc4>)
 8000d66:	785b      	ldrb	r3, [r3, #1]
 8000d68:	f003 0301 	and.w	r3, r3, #1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d019      	beq.n	8000da4 <Start_FRT_controller+0xa8>
 8000d70:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <Start_FRT_controller+0xc0>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	f083 0301 	eor.w	r3, r3, #1
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d012      	beq.n	8000da4 <Start_FRT_controller+0xa8>
		HAL_GPIO_WritePin(START_BTN_LED_EN_GPIO_Port, START_BTN_LED_EN_Pin, GPIO_PIN_SET);
 8000d7e:	2201      	movs	r2, #1
 8000d80:	2120      	movs	r1, #32
 8000d82:	4813      	ldr	r0, [pc, #76]	; (8000dd0 <Start_FRT_controller+0xd4>)
 8000d84:	f002 f8c8 	bl	8002f18 <HAL_GPIO_WritePin>
		osDelay(500);
 8000d88:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d8c:	f003 fa08 	bl	80041a0 <osDelay>
		HAL_GPIO_WritePin(START_BTN_LED_EN_GPIO_Port, START_BTN_LED_EN_Pin, GPIO_PIN_RESET);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2120      	movs	r1, #32
 8000d94:	480e      	ldr	r0, [pc, #56]	; (8000dd0 <Start_FRT_controller+0xd4>)
 8000d96:	f002 f8bf 	bl	8002f18 <HAL_GPIO_WritePin>
		osDelay(450);
 8000d9a:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8000d9e:	f003 f9ff 	bl	80041a0 <osDelay>
 8000da2:	e008      	b.n	8000db6 <Start_FRT_controller+0xba>
    } else if (TsOn_n) {
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <Start_FRT_controller+0xc0>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d0ab      	beq.n	8000d04 <Start_FRT_controller+0x8>
    	//Send CAN messages to close AIRs
		HAL_GPIO_WritePin(START_BTN_LED_EN_GPIO_Port, START_BTN_LED_EN_Pin, GPIO_PIN_SET);
 8000dac:	2201      	movs	r2, #1
 8000dae:	2120      	movs	r1, #32
 8000db0:	4807      	ldr	r0, [pc, #28]	; (8000dd0 <Start_FRT_controller+0xd4>)
 8000db2:	f002 f8b1 	bl	8002f18 <HAL_GPIO_WritePin>
    osDelay(50);
 8000db6:	e7a5      	b.n	8000d04 <Start_FRT_controller+0x8>
 8000db8:	40021800 	.word	0x40021800
 8000dbc:	2000022b 	.word	0x2000022b
 8000dc0:	2000021c 	.word	0x2000021c
 8000dc4:	2000022c 	.word	0x2000022c
 8000dc8:	2000022d 	.word	0x2000022d
 8000dcc:	200001b8 	.word	0x200001b8
 8000dd0:	40020000 	.word	0x40020000

08000dd4 <Start_AMK>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_AMK */
void Start_AMK(void *argument)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_AMK */
  /* Infinite loop */
  for(;;)
  {

    osDelay(5);
 8000ddc:	2005      	movs	r0, #5
 8000dde:	f003 f9df 	bl	80041a0 <osDelay>
    APPS2_VAL = APPS2_ADC_Percent()*500;
 8000de2:	f7ff fbaf 	bl	8000544 <APPS2_ADC_Percent>
 8000de6:	eef0 7a40 	vmov.f32	s15, s0
 8000dea:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8000f98 <Start_AMK+0x1c4>
 8000dee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000df2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000df6:	ee17 3a90 	vmov	r3, s15
 8000dfa:	b29a      	uxth	r2, r3
 8000dfc:	4b67      	ldr	r3, [pc, #412]	; (8000f9c <Start_AMK+0x1c8>)
 8000dfe:	801a      	strh	r2, [r3, #0]
    if (APPS2_VAL >= 450) {
 8000e00:	4b66      	ldr	r3, [pc, #408]	; (8000f9c <Start_AMK+0x1c8>)
 8000e02:	881b      	ldrh	r3, [r3, #0]
 8000e04:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8000e08:	d303      	bcc.n	8000e12 <Start_AMK+0x3e>
    	BrakeOn = 1;
 8000e0a:	4b65      	ldr	r3, [pc, #404]	; (8000fa0 <Start_AMK+0x1cc>)
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	701a      	strb	r2, [r3, #0]
 8000e10:	e002      	b.n	8000e18 <Start_AMK+0x44>
    } else {
    	BrakeOn = 0;
 8000e12:	4b63      	ldr	r3, [pc, #396]	; (8000fa0 <Start_AMK+0x1cc>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	701a      	strb	r2, [r3, #0]
    }

	//HAL_GPIO_WritePin(BRAKE_LIGHT_EN_GPIO_Port, BRAKE_LIGHT_EN_Pin, GPIO_PIN_SET);
	//HAL_GPIO_WritePin(RTDS_EN_GPIO_Port, RTDS_EN_Pin, GPIO_PIN_SET);

    if ((MotorStatus_R == STATUS_SYSTEM_READY) && (MotorStatus_L == STATUS_SYSTEM_READY)) {
 8000e18:	4b62      	ldr	r3, [pc, #392]	; (8000fa4 <Start_AMK+0x1d0>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d10d      	bne.n	8000e3c <Start_AMK+0x68>
 8000e20:	4b61      	ldr	r3, [pc, #388]	; (8000fa8 <Start_AMK+0x1d4>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d109      	bne.n	8000e3c <Start_AMK+0x68>
    	AMK_TxData_R[1] = 0x02;
 8000e28:	4b60      	ldr	r3, [pc, #384]	; (8000fac <Start_AMK+0x1d8>)
 8000e2a:	2202      	movs	r2, #2
 8000e2c:	705a      	strb	r2, [r3, #1]
    	AMK_TxData_L[1] = 0x02;
 8000e2e:	4b60      	ldr	r3, [pc, #384]	; (8000fb0 <Start_AMK+0x1dc>)
 8000e30:	2202      	movs	r2, #2
 8000e32:	705a      	strb	r2, [r3, #1]
		ControlStatus = CONTROL_DC_ON;
 8000e34:	4b5f      	ldr	r3, [pc, #380]	; (8000fb4 <Start_AMK+0x1e0>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	701a      	strb	r2, [r3, #0]
 8000e3a:	e096      	b.n	8000f6a <Start_AMK+0x196>
    } else if ((MotorStatus_R == STATUS_QUIT_DC_ON) && (MotorStatus_L == STATUS_QUIT_DC_ON)) {
 8000e3c:	4b59      	ldr	r3, [pc, #356]	; (8000fa4 <Start_AMK+0x1d0>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b03      	cmp	r3, #3
 8000e42:	d117      	bne.n	8000e74 <Start_AMK+0xa0>
 8000e44:	4b58      	ldr	r3, [pc, #352]	; (8000fa8 <Start_AMK+0x1d4>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b03      	cmp	r3, #3
 8000e4a:	d113      	bne.n	8000e74 <Start_AMK+0xa0>
		AMK_TxData_L[1] = 0x07;
 8000e4c:	4b58      	ldr	r3, [pc, #352]	; (8000fb0 <Start_AMK+0x1dc>)
 8000e4e:	2207      	movs	r2, #7
 8000e50:	705a      	strb	r2, [r3, #1]
		AMK_TxData_R[1] = 0x07;
 8000e52:	4b56      	ldr	r3, [pc, #344]	; (8000fac <Start_AMK+0x1d8>)
 8000e54:	2207      	movs	r2, #7
 8000e56:	705a      	strb	r2, [r3, #1]
		memset(&AMK_TxData_R[2],0x00, 4*sizeof(uint8_t));
 8000e58:	2204      	movs	r2, #4
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	4856      	ldr	r0, [pc, #344]	; (8000fb8 <Start_AMK+0x1e4>)
 8000e5e:	f005 ff91 	bl	8006d84 <memset>
		memset(&AMK_TxData_L[2],0x00, 4*sizeof(uint8_t));
 8000e62:	2204      	movs	r2, #4
 8000e64:	2100      	movs	r1, #0
 8000e66:	4855      	ldr	r0, [pc, #340]	; (8000fbc <Start_AMK+0x1e8>)
 8000e68:	f005 ff8c 	bl	8006d84 <memset>
		ControlStatus = CONTROL_ENABLE;
 8000e6c:	4b51      	ldr	r3, [pc, #324]	; (8000fb4 <Start_AMK+0x1e0>)
 8000e6e:	2202      	movs	r2, #2
 8000e70:	701a      	strb	r2, [r3, #0]
 8000e72:	e07a      	b.n	8000f6a <Start_AMK+0x196>
    } else if ((MotorStatus_R == STATUS_INVERTER_ON) && (MotorStatus_L == STATUS_INVERTER_ON)) {
 8000e74:	4b4b      	ldr	r3, [pc, #300]	; (8000fa4 <Start_AMK+0x1d0>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2b04      	cmp	r3, #4
 8000e7a:	d117      	bne.n	8000eac <Start_AMK+0xd8>
 8000e7c:	4b4a      	ldr	r3, [pc, #296]	; (8000fa8 <Start_AMK+0x1d4>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b04      	cmp	r3, #4
 8000e82:	d113      	bne.n	8000eac <Start_AMK+0xd8>
    	AMK_TxData_L[1] = 0x07;
 8000e84:	4b4a      	ldr	r3, [pc, #296]	; (8000fb0 <Start_AMK+0x1dc>)
 8000e86:	2207      	movs	r2, #7
 8000e88:	705a      	strb	r2, [r3, #1]
    	AMK_TxData_R[1] = 0x07;
 8000e8a:	4b48      	ldr	r3, [pc, #288]	; (8000fac <Start_AMK+0x1d8>)
 8000e8c:	2207      	movs	r2, #7
 8000e8e:	705a      	strb	r2, [r3, #1]
    	memset(&AMK_TxData_R[2],0x00, 4*sizeof(uint8_t));
 8000e90:	2204      	movs	r2, #4
 8000e92:	2100      	movs	r1, #0
 8000e94:	4848      	ldr	r0, [pc, #288]	; (8000fb8 <Start_AMK+0x1e4>)
 8000e96:	f005 ff75 	bl	8006d84 <memset>
    	memset(&AMK_TxData_L[2],0x00, 4*sizeof(uint8_t));
 8000e9a:	2204      	movs	r2, #4
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	4847      	ldr	r0, [pc, #284]	; (8000fbc <Start_AMK+0x1e8>)
 8000ea0:	f005 ff70 	bl	8006d84 <memset>
    	ControlStatus = CONTROL_INVERTER_ON;
 8000ea4:	4b43      	ldr	r3, [pc, #268]	; (8000fb4 <Start_AMK+0x1e0>)
 8000ea6:	2203      	movs	r2, #3
 8000ea8:	701a      	strb	r2, [r3, #0]
 8000eaa:	e05e      	b.n	8000f6a <Start_AMK+0x196>
    } else if ((MotorStatus_R == STATUS_QUIT_INVERTER_ON) && (MotorStatus_L == STATUS_QUIT_INVERTER_ON) && TsOn_n) {
 8000eac:	4b3d      	ldr	r3, [pc, #244]	; (8000fa4 <Start_AMK+0x1d0>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b05      	cmp	r3, #5
 8000eb2:	d131      	bne.n	8000f18 <Start_AMK+0x144>
 8000eb4:	4b3c      	ldr	r3, [pc, #240]	; (8000fa8 <Start_AMK+0x1d4>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b05      	cmp	r3, #5
 8000eba:	d12d      	bne.n	8000f18 <Start_AMK+0x144>
 8000ebc:	4b40      	ldr	r3, [pc, #256]	; (8000fc0 <Start_AMK+0x1ec>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d029      	beq.n	8000f18 <Start_AMK+0x144>
    	if (ReadyToDrive) {
 8000ec4:	4b3f      	ldr	r3, [pc, #252]	; (8000fc4 <Start_AMK+0x1f0>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d01b      	beq.n	8000f04 <Start_AMK+0x130>
    		AMK_TxData_R[1] = 0x07;
 8000ecc:	4b37      	ldr	r3, [pc, #220]	; (8000fac <Start_AMK+0x1d8>)
 8000ece:	2207      	movs	r2, #7
 8000ed0:	705a      	strb	r2, [r3, #1]
			AMK_TxData_L[1] = 0x07;
 8000ed2:	4b37      	ldr	r3, [pc, #220]	; (8000fb0 <Start_AMK+0x1dc>)
 8000ed4:	2207      	movs	r2, #7
 8000ed6:	705a      	strb	r2, [r3, #1]

			AMK_TxData_R[2] = 0xFF;		//APPS2_VAL & 0xFF;
 8000ed8:	4b34      	ldr	r3, [pc, #208]	; (8000fac <Start_AMK+0x1d8>)
 8000eda:	22ff      	movs	r2, #255	; 0xff
 8000edc:	709a      	strb	r2, [r3, #2]
			AMK_TxData_R[3] = 0x01;		//(APPS2_VAL >> 8) & 0xFF;
 8000ede:	4b33      	ldr	r3, [pc, #204]	; (8000fac <Start_AMK+0x1d8>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	70da      	strb	r2, [r3, #3]
			AMK_TxData_R[4] = 0x32; //set positive torque request to 50
 8000ee4:	4b31      	ldr	r3, [pc, #196]	; (8000fac <Start_AMK+0x1d8>)
 8000ee6:	2232      	movs	r2, #50	; 0x32
 8000ee8:	711a      	strb	r2, [r3, #4]

			AMK_TxData_L[2] = 0xFF;		//APPS2_VAL & 0xFF;
 8000eea:	4b31      	ldr	r3, [pc, #196]	; (8000fb0 <Start_AMK+0x1dc>)
 8000eec:	22ff      	movs	r2, #255	; 0xff
 8000eee:	709a      	strb	r2, [r3, #2]
			AMK_TxData_L[3] = 0x01;		//(APPS2_VAL >> 8) & 0xFF;
 8000ef0:	4b2f      	ldr	r3, [pc, #188]	; (8000fb0 <Start_AMK+0x1dc>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	70da      	strb	r2, [r3, #3]
			AMK_TxData_L[4] = 0x32;
 8000ef6:	4b2e      	ldr	r3, [pc, #184]	; (8000fb0 <Start_AMK+0x1dc>)
 8000ef8:	2232      	movs	r2, #50	; 0x32
 8000efa:	711a      	strb	r2, [r3, #4]
			ControlStatus = CONTROL_RUNNING;
 8000efc:	4b2d      	ldr	r3, [pc, #180]	; (8000fb4 <Start_AMK+0x1e0>)
 8000efe:	2207      	movs	r2, #7
 8000f00:	701a      	strb	r2, [r3, #0]
    	if (ReadyToDrive) {
 8000f02:	e032      	b.n	8000f6a <Start_AMK+0x196>
    	} else {
    		AMK_TxData_R[1] = 0x07;
 8000f04:	4b29      	ldr	r3, [pc, #164]	; (8000fac <Start_AMK+0x1d8>)
 8000f06:	2207      	movs	r2, #7
 8000f08:	705a      	strb	r2, [r3, #1]
    		AMK_TxData_L[1] = 0x07;
 8000f0a:	4b29      	ldr	r3, [pc, #164]	; (8000fb0 <Start_AMK+0x1dc>)
 8000f0c:	2207      	movs	r2, #7
 8000f0e:	705a      	strb	r2, [r3, #1]
    		ControlStatus = CONTROL_TS_READY;
 8000f10:	4b28      	ldr	r3, [pc, #160]	; (8000fb4 <Start_AMK+0x1e0>)
 8000f12:	2204      	movs	r2, #4
 8000f14:	701a      	strb	r2, [r3, #0]
    	if (ReadyToDrive) {
 8000f16:	e028      	b.n	8000f6a <Start_AMK+0x196>
    	}
    } else if (MotorStatus_R == STATUS_ERROR) {
 8000f18:	4b22      	ldr	r3, [pc, #136]	; (8000fa4 <Start_AMK+0x1d0>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b07      	cmp	r3, #7
 8000f1e:	d106      	bne.n	8000f2e <Start_AMK+0x15a>
    	AMK_TxData_R[1] = 0x08;
 8000f20:	4b22      	ldr	r3, [pc, #136]	; (8000fac <Start_AMK+0x1d8>)
 8000f22:	2208      	movs	r2, #8
 8000f24:	705a      	strb	r2, [r3, #1]
		ControlStatus = CONTROL_ERROR_RESET_RIGHT;
 8000f26:	4b23      	ldr	r3, [pc, #140]	; (8000fb4 <Start_AMK+0x1e0>)
 8000f28:	2205      	movs	r2, #5
 8000f2a:	701a      	strb	r2, [r3, #0]
 8000f2c:	e01d      	b.n	8000f6a <Start_AMK+0x196>
    } else if (MotorStatus_L == STATUS_ERROR) {
 8000f2e:	4b1e      	ldr	r3, [pc, #120]	; (8000fa8 <Start_AMK+0x1d4>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	2b07      	cmp	r3, #7
 8000f34:	d106      	bne.n	8000f44 <Start_AMK+0x170>
    	AMK_TxData_L[1] = 0x08;
 8000f36:	4b1e      	ldr	r3, [pc, #120]	; (8000fb0 <Start_AMK+0x1dc>)
 8000f38:	2208      	movs	r2, #8
 8000f3a:	705a      	strb	r2, [r3, #1]
		ControlStatus = CONTROL_ERROR_RESET_LEFT;
 8000f3c:	4b1d      	ldr	r3, [pc, #116]	; (8000fb4 <Start_AMK+0x1e0>)
 8000f3e:	2206      	movs	r2, #6
 8000f40:	701a      	strb	r2, [r3, #0]
 8000f42:	e012      	b.n	8000f6a <Start_AMK+0x196>
    } else {
    	AMK_TxData_L[1] = 0x07;
 8000f44:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <Start_AMK+0x1dc>)
 8000f46:	2207      	movs	r2, #7
 8000f48:	705a      	strb	r2, [r3, #1]
		AMK_TxData_R[1] = 0x07;
 8000f4a:	4b18      	ldr	r3, [pc, #96]	; (8000fac <Start_AMK+0x1d8>)
 8000f4c:	2207      	movs	r2, #7
 8000f4e:	705a      	strb	r2, [r3, #1]
		memset(&AMK_TxData_R[2],0x00, 4*sizeof(uint8_t));
 8000f50:	2204      	movs	r2, #4
 8000f52:	2100      	movs	r1, #0
 8000f54:	4818      	ldr	r0, [pc, #96]	; (8000fb8 <Start_AMK+0x1e4>)
 8000f56:	f005 ff15 	bl	8006d84 <memset>
		memset(&AMK_TxData_L[2],0x00, 4*sizeof(uint8_t));
 8000f5a:	2204      	movs	r2, #4
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4817      	ldr	r0, [pc, #92]	; (8000fbc <Start_AMK+0x1e8>)
 8000f60:	f005 ff10 	bl	8006d84 <memset>
    	ControlStatus = CONTROL_UNKNOWN;
 8000f64:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <Start_AMK+0x1e0>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	701a      	strb	r2, [r3, #0]
    }

	HAL_CAN_AddTxMessage(&hcan1, &AMK_TxHeader_R, AMK_TxData_R, &TxMailbox);
 8000f6a:	4b17      	ldr	r3, [pc, #92]	; (8000fc8 <Start_AMK+0x1f4>)
 8000f6c:	4a0f      	ldr	r2, [pc, #60]	; (8000fac <Start_AMK+0x1d8>)
 8000f6e:	4917      	ldr	r1, [pc, #92]	; (8000fcc <Start_AMK+0x1f8>)
 8000f70:	4817      	ldr	r0, [pc, #92]	; (8000fd0 <Start_AMK+0x1fc>)
 8000f72:	f001 f8f3 	bl	800215c <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&hcan1, &AMK_TxHeader_L, AMK_TxData_L, &TxMailbox);
 8000f76:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <Start_AMK+0x1f4>)
 8000f78:	4a0d      	ldr	r2, [pc, #52]	; (8000fb0 <Start_AMK+0x1dc>)
 8000f7a:	4916      	ldr	r1, [pc, #88]	; (8000fd4 <Start_AMK+0x200>)
 8000f7c:	4814      	ldr	r0, [pc, #80]	; (8000fd0 <Start_AMK+0x1fc>)
 8000f7e:	f001 f8ed 	bl	800215c <HAL_CAN_AddTxMessage>
	memset(&AMK_TxData_R[0],0x00, 8*sizeof(uint8_t));
 8000f82:	2208      	movs	r2, #8
 8000f84:	2100      	movs	r1, #0
 8000f86:	4809      	ldr	r0, [pc, #36]	; (8000fac <Start_AMK+0x1d8>)
 8000f88:	f005 fefc 	bl	8006d84 <memset>
	memset(&AMK_TxData_L[0],0x00, 8*sizeof(uint8_t));
 8000f8c:	2208      	movs	r2, #8
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4807      	ldr	r0, [pc, #28]	; (8000fb0 <Start_AMK+0x1dc>)
 8000f92:	f005 fef7 	bl	8006d84 <memset>
    osDelay(5);
 8000f96:	e721      	b.n	8000ddc <Start_AMK+0x8>
 8000f98:	43fa0000 	.word	0x43fa0000
 8000f9c:	2000022e 	.word	0x2000022e
 8000fa0:	2000022c 	.word	0x2000022c
 8000fa4:	20000228 	.word	0x20000228
 8000fa8:	20000229 	.word	0x20000229
 8000fac:	2000020c 	.word	0x2000020c
 8000fb0:	20000214 	.word	0x20000214
 8000fb4:	2000022a 	.word	0x2000022a
 8000fb8:	2000020e 	.word	0x2000020e
 8000fbc:	20000216 	.word	0x20000216
 8000fc0:	2000022b 	.word	0x2000022b
 8000fc4:	2000022d 	.word	0x2000022d
 8000fc8:	20000224 	.word	0x20000224
 8000fcc:	200001c0 	.word	0x200001c0
 8000fd0:	20000168 	.word	0x20000168
 8000fd4:	200001d8 	.word	0x200001d8

08000fd8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a04      	ldr	r2, [pc, #16]	; (8000ff8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d101      	bne.n	8000fee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fea:	f000 fa3d 	bl	8001468 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40001000 	.word	0x40001000

08000ffc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001000:	b672      	cpsid	i
}
 8001002:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 1);
 8001004:	2201      	movs	r2, #1
 8001006:	2108      	movs	r1, #8
 8001008:	4801      	ldr	r0, [pc, #4]	; (8001010 <Error_Handler+0x14>)
 800100a:	f001 ff85 	bl	8002f18 <HAL_GPIO_WritePin>
  while (1)
 800100e:	e7fe      	b.n	800100e <Error_Handler+0x12>
 8001010:	40020000 	.word	0x40020000

08001014 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800101a:	4b11      	ldr	r3, [pc, #68]	; (8001060 <HAL_MspInit+0x4c>)
 800101c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101e:	4a10      	ldr	r2, [pc, #64]	; (8001060 <HAL_MspInit+0x4c>)
 8001020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001024:	6413      	str	r3, [r2, #64]	; 0x40
 8001026:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <HAL_MspInit+0x4c>)
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001032:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <HAL_MspInit+0x4c>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001036:	4a0a      	ldr	r2, [pc, #40]	; (8001060 <HAL_MspInit+0x4c>)
 8001038:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800103c:	6453      	str	r3, [r2, #68]	; 0x44
 800103e:	4b08      	ldr	r3, [pc, #32]	; (8001060 <HAL_MspInit+0x4c>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001046:	603b      	str	r3, [r7, #0]
 8001048:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800104a:	2200      	movs	r2, #0
 800104c:	210f      	movs	r1, #15
 800104e:	f06f 0001 	mvn.w	r0, #1
 8001052:	f001 fd73 	bl	8002b3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40023800 	.word	0x40023800

08001064 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08e      	sub	sp, #56	; 0x38
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a3f      	ldr	r2, [pc, #252]	; (8001180 <HAL_ADC_MspInit+0x11c>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d124      	bne.n	80010d0 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001086:	4b3f      	ldr	r3, [pc, #252]	; (8001184 <HAL_ADC_MspInit+0x120>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	4a3e      	ldr	r2, [pc, #248]	; (8001184 <HAL_ADC_MspInit+0x120>)
 800108c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001090:	6453      	str	r3, [r2, #68]	; 0x44
 8001092:	4b3c      	ldr	r3, [pc, #240]	; (8001184 <HAL_ADC_MspInit+0x120>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800109a:	623b      	str	r3, [r7, #32]
 800109c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800109e:	4b39      	ldr	r3, [pc, #228]	; (8001184 <HAL_ADC_MspInit+0x120>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a38      	ldr	r2, [pc, #224]	; (8001184 <HAL_ADC_MspInit+0x120>)
 80010a4:	f043 0304 	orr.w	r3, r3, #4
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b36      	ldr	r3, [pc, #216]	; (8001184 <HAL_ADC_MspInit+0x120>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0304 	and.w	r3, r3, #4
 80010b2:	61fb      	str	r3, [r7, #28]
 80010b4:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = APPS1_Pin;
 80010b6:	2301      	movs	r3, #1
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ba:	2303      	movs	r3, #3
 80010bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(APPS1_GPIO_Port, &GPIO_InitStruct);
 80010c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c6:	4619      	mov	r1, r3
 80010c8:	482f      	ldr	r0, [pc, #188]	; (8001188 <HAL_ADC_MspInit+0x124>)
 80010ca:	f001 fd61 	bl	8002b90 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80010ce:	e052      	b.n	8001176 <HAL_ADC_MspInit+0x112>
  else if(hadc->Instance==ADC2)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a2d      	ldr	r2, [pc, #180]	; (800118c <HAL_ADC_MspInit+0x128>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d124      	bne.n	8001124 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80010da:	4b2a      	ldr	r3, [pc, #168]	; (8001184 <HAL_ADC_MspInit+0x120>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	4a29      	ldr	r2, [pc, #164]	; (8001184 <HAL_ADC_MspInit+0x120>)
 80010e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010e4:	6453      	str	r3, [r2, #68]	; 0x44
 80010e6:	4b27      	ldr	r3, [pc, #156]	; (8001184 <HAL_ADC_MspInit+0x120>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010ee:	61bb      	str	r3, [r7, #24]
 80010f0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f2:	4b24      	ldr	r3, [pc, #144]	; (8001184 <HAL_ADC_MspInit+0x120>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a23      	ldr	r2, [pc, #140]	; (8001184 <HAL_ADC_MspInit+0x120>)
 80010f8:	f043 0304 	orr.w	r3, r3, #4
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b21      	ldr	r3, [pc, #132]	; (8001184 <HAL_ADC_MspInit+0x120>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0304 	and.w	r3, r3, #4
 8001106:	617b      	str	r3, [r7, #20]
 8001108:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = APPS2_Pin;
 800110a:	2302      	movs	r3, #2
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800110e:	2303      	movs	r3, #3
 8001110:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(APPS2_GPIO_Port, &GPIO_InitStruct);
 8001116:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800111a:	4619      	mov	r1, r3
 800111c:	481a      	ldr	r0, [pc, #104]	; (8001188 <HAL_ADC_MspInit+0x124>)
 800111e:	f001 fd37 	bl	8002b90 <HAL_GPIO_Init>
}
 8001122:	e028      	b.n	8001176 <HAL_ADC_MspInit+0x112>
  else if(hadc->Instance==ADC3)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a19      	ldr	r2, [pc, #100]	; (8001190 <HAL_ADC_MspInit+0x12c>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d123      	bne.n	8001176 <HAL_ADC_MspInit+0x112>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800112e:	4b15      	ldr	r3, [pc, #84]	; (8001184 <HAL_ADC_MspInit+0x120>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	4a14      	ldr	r2, [pc, #80]	; (8001184 <HAL_ADC_MspInit+0x120>)
 8001134:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001138:	6453      	str	r3, [r2, #68]	; 0x44
 800113a:	4b12      	ldr	r3, [pc, #72]	; (8001184 <HAL_ADC_MspInit+0x120>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001146:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <HAL_ADC_MspInit+0x120>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a0e      	ldr	r2, [pc, #56]	; (8001184 <HAL_ADC_MspInit+0x120>)
 800114c:	f043 0304 	orr.w	r3, r3, #4
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <HAL_ADC_MspInit+0x120>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0304 	and.w	r3, r3, #4
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEERING_ANGLE_SENSOR_Pin|BPPS_BUFFERED_Pin;
 800115e:	230c      	movs	r3, #12
 8001160:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001162:	2303      	movs	r3, #3
 8001164:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800116a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116e:	4619      	mov	r1, r3
 8001170:	4805      	ldr	r0, [pc, #20]	; (8001188 <HAL_ADC_MspInit+0x124>)
 8001172:	f001 fd0d 	bl	8002b90 <HAL_GPIO_Init>
}
 8001176:	bf00      	nop
 8001178:	3738      	adds	r7, #56	; 0x38
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40012000 	.word	0x40012000
 8001184:	40023800 	.word	0x40023800
 8001188:	40020800 	.word	0x40020800
 800118c:	40012100 	.word	0x40012100
 8001190:	40012200 	.word	0x40012200

08001194 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08c      	sub	sp, #48	; 0x30
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119c:	f107 031c 	add.w	r3, r7, #28
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a33      	ldr	r2, [pc, #204]	; (8001280 <HAL_CAN_MspInit+0xec>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d131      	bne.n	800121a <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80011b6:	4b33      	ldr	r3, [pc, #204]	; (8001284 <HAL_CAN_MspInit+0xf0>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	4a32      	ldr	r2, [pc, #200]	; (8001284 <HAL_CAN_MspInit+0xf0>)
 80011bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011c0:	6413      	str	r3, [r2, #64]	; 0x40
 80011c2:	4b30      	ldr	r3, [pc, #192]	; (8001284 <HAL_CAN_MspInit+0xf0>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ca:	61bb      	str	r3, [r7, #24]
 80011cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ce:	4b2d      	ldr	r3, [pc, #180]	; (8001284 <HAL_CAN_MspInit+0xf0>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a2c      	ldr	r2, [pc, #176]	; (8001284 <HAL_CAN_MspInit+0xf0>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b2a      	ldr	r3, [pc, #168]	; (8001284 <HAL_CAN_MspInit+0xf0>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	617b      	str	r3, [r7, #20]
 80011e4:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80011e6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80011ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ec:	2302      	movs	r3, #2
 80011ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f4:	2303      	movs	r3, #3
 80011f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80011f8:	2309      	movs	r3, #9
 80011fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fc:	f107 031c 	add.w	r3, r7, #28
 8001200:	4619      	mov	r1, r3
 8001202:	4821      	ldr	r0, [pc, #132]	; (8001288 <HAL_CAN_MspInit+0xf4>)
 8001204:	f001 fcc4 	bl	8002b90 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001208:	2200      	movs	r2, #0
 800120a:	2105      	movs	r1, #5
 800120c:	2014      	movs	r0, #20
 800120e:	f001 fc95 	bl	8002b3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001212:	2014      	movs	r0, #20
 8001214:	f001 fcae 	bl	8002b74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }

}
 8001218:	e02d      	b.n	8001276 <HAL_CAN_MspInit+0xe2>
  else if(hcan->Instance==CAN3)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a1b      	ldr	r2, [pc, #108]	; (800128c <HAL_CAN_MspInit+0xf8>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d128      	bne.n	8001276 <HAL_CAN_MspInit+0xe2>
    __HAL_RCC_CAN3_CLK_ENABLE();
 8001224:	4b17      	ldr	r3, [pc, #92]	; (8001284 <HAL_CAN_MspInit+0xf0>)
 8001226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001228:	4a16      	ldr	r2, [pc, #88]	; (8001284 <HAL_CAN_MspInit+0xf0>)
 800122a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800122e:	6413      	str	r3, [r2, #64]	; 0x40
 8001230:	4b14      	ldr	r3, [pc, #80]	; (8001284 <HAL_CAN_MspInit+0xf0>)
 8001232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001234:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001238:	613b      	str	r3, [r7, #16]
 800123a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800123c:	4b11      	ldr	r3, [pc, #68]	; (8001284 <HAL_CAN_MspInit+0xf0>)
 800123e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001240:	4a10      	ldr	r2, [pc, #64]	; (8001284 <HAL_CAN_MspInit+0xf0>)
 8001242:	f043 0301 	orr.w	r3, r3, #1
 8001246:	6313      	str	r3, [r2, #48]	; 0x30
 8001248:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <HAL_CAN_MspInit+0xf0>)
 800124a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8001254:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001258:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	2302      	movs	r3, #2
 800125c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001262:	2303      	movs	r3, #3
 8001264:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8001266:	230b      	movs	r3, #11
 8001268:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126a:	f107 031c 	add.w	r3, r7, #28
 800126e:	4619      	mov	r1, r3
 8001270:	4805      	ldr	r0, [pc, #20]	; (8001288 <HAL_CAN_MspInit+0xf4>)
 8001272:	f001 fc8d 	bl	8002b90 <HAL_GPIO_Init>
}
 8001276:	bf00      	nop
 8001278:	3730      	adds	r7, #48	; 0x30
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40006400 	.word	0x40006400
 8001284:	40023800 	.word	0x40023800
 8001288:	40020000 	.word	0x40020000
 800128c:	40003400 	.word	0x40003400

08001290 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08e      	sub	sp, #56	; 0x38
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001298:	2300      	movs	r3, #0
 800129a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800129c:	2300      	movs	r3, #0
 800129e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80012a0:	4b33      	ldr	r3, [pc, #204]	; (8001370 <HAL_InitTick+0xe0>)
 80012a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a4:	4a32      	ldr	r2, [pc, #200]	; (8001370 <HAL_InitTick+0xe0>)
 80012a6:	f043 0310 	orr.w	r3, r3, #16
 80012aa:	6413      	str	r3, [r2, #64]	; 0x40
 80012ac:	4b30      	ldr	r3, [pc, #192]	; (8001370 <HAL_InitTick+0xe0>)
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	f003 0310 	and.w	r3, r3, #16
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012b8:	f107 0210 	add.w	r2, r7, #16
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	4611      	mov	r1, r2
 80012c2:	4618      	mov	r0, r3
 80012c4:	f002 fb02 	bl	80038cc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80012c8:	6a3b      	ldr	r3, [r7, #32]
 80012ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80012cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d103      	bne.n	80012da <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80012d2:	f002 fae7 	bl	80038a4 <HAL_RCC_GetPCLK1Freq>
 80012d6:	6378      	str	r0, [r7, #52]	; 0x34
 80012d8:	e004      	b.n	80012e4 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80012da:	f002 fae3 	bl	80038a4 <HAL_RCC_GetPCLK1Freq>
 80012de:	4603      	mov	r3, r0
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012e6:	4a23      	ldr	r2, [pc, #140]	; (8001374 <HAL_InitTick+0xe4>)
 80012e8:	fba2 2303 	umull	r2, r3, r2, r3
 80012ec:	0c9b      	lsrs	r3, r3, #18
 80012ee:	3b01      	subs	r3, #1
 80012f0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80012f2:	4b21      	ldr	r3, [pc, #132]	; (8001378 <HAL_InitTick+0xe8>)
 80012f4:	4a21      	ldr	r2, [pc, #132]	; (800137c <HAL_InitTick+0xec>)
 80012f6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80012f8:	4b1f      	ldr	r3, [pc, #124]	; (8001378 <HAL_InitTick+0xe8>)
 80012fa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012fe:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001300:	4a1d      	ldr	r2, [pc, #116]	; (8001378 <HAL_InitTick+0xe8>)
 8001302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001304:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001306:	4b1c      	ldr	r3, [pc, #112]	; (8001378 <HAL_InitTick+0xe8>)
 8001308:	2200      	movs	r2, #0
 800130a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130c:	4b1a      	ldr	r3, [pc, #104]	; (8001378 <HAL_InitTick+0xe8>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001312:	4b19      	ldr	r3, [pc, #100]	; (8001378 <HAL_InitTick+0xe8>)
 8001314:	2200      	movs	r2, #0
 8001316:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001318:	4817      	ldr	r0, [pc, #92]	; (8001378 <HAL_InitTick+0xe8>)
 800131a:	f002 fb09 	bl	8003930 <HAL_TIM_Base_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001324:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001328:	2b00      	cmp	r3, #0
 800132a:	d11b      	bne.n	8001364 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800132c:	4812      	ldr	r0, [pc, #72]	; (8001378 <HAL_InitTick+0xe8>)
 800132e:	f002 fb61 	bl	80039f4 <HAL_TIM_Base_Start_IT>
 8001332:	4603      	mov	r3, r0
 8001334:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001338:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800133c:	2b00      	cmp	r3, #0
 800133e:	d111      	bne.n	8001364 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001340:	2036      	movs	r0, #54	; 0x36
 8001342:	f001 fc17 	bl	8002b74 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2b0f      	cmp	r3, #15
 800134a:	d808      	bhi.n	800135e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800134c:	2200      	movs	r2, #0
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	2036      	movs	r0, #54	; 0x36
 8001352:	f001 fbf3 	bl	8002b3c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001356:	4a0a      	ldr	r2, [pc, #40]	; (8001380 <HAL_InitTick+0xf0>)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6013      	str	r3, [r2, #0]
 800135c:	e002      	b.n	8001364 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001364:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001368:	4618      	mov	r0, r3
 800136a:	3738      	adds	r7, #56	; 0x38
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40023800 	.word	0x40023800
 8001374:	431bde83 	.word	0x431bde83
 8001378:	20000230 	.word	0x20000230
 800137c:	40001000 	.word	0x40001000
 8001380:	20000004 	.word	0x20000004

08001384 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001388:	e7fe      	b.n	8001388 <NMI_Handler+0x4>

0800138a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800138e:	e7fe      	b.n	800138e <HardFault_Handler+0x4>

08001390 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001394:	e7fe      	b.n	8001394 <MemManage_Handler+0x4>

08001396 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800139a:	e7fe      	b.n	800139a <BusFault_Handler+0x4>

0800139c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <UsageFault_Handler+0x4>

080013a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80013b4:	4802      	ldr	r0, [pc, #8]	; (80013c0 <CAN1_RX0_IRQHandler+0x10>)
 80013b6:	f001 f8d9 	bl	800256c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000168 	.word	0x20000168

080013c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80013c8:	4802      	ldr	r0, [pc, #8]	; (80013d4 <TIM6_DAC_IRQHandler+0x10>)
 80013ca:	f002 fb8b 	bl	8003ae4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000230 	.word	0x20000230

080013d8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <SystemInit+0x20>)
 80013de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013e2:	4a05      	ldr	r2, [pc, #20]	; (80013f8 <SystemInit+0x20>)
 80013e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001434 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001400:	480d      	ldr	r0, [pc, #52]	; (8001438 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001402:	490e      	ldr	r1, [pc, #56]	; (800143c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001404:	4a0e      	ldr	r2, [pc, #56]	; (8001440 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001406:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001408:	e002      	b.n	8001410 <LoopCopyDataInit>

0800140a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800140a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800140c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800140e:	3304      	adds	r3, #4

08001410 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001410:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001412:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001414:	d3f9      	bcc.n	800140a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001416:	4a0b      	ldr	r2, [pc, #44]	; (8001444 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001418:	4c0b      	ldr	r4, [pc, #44]	; (8001448 <LoopFillZerobss+0x26>)
  movs r3, #0
 800141a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800141c:	e001      	b.n	8001422 <LoopFillZerobss>

0800141e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800141e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001420:	3204      	adds	r2, #4

08001422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001422:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001424:	d3fb      	bcc.n	800141e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001426:	f7ff ffd7 	bl	80013d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800142a:	f005 fc77 	bl	8006d1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800142e:	f7ff f8af 	bl	8000590 <main>
  bx  lr    
 8001432:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001434:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001438:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800143c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001440:	08007038 	.word	0x08007038
  ldr r2, =_sbss
 8001444:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001448:	20004c90 	.word	0x20004c90

0800144c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800144c:	e7fe      	b.n	800144c <ADC_IRQHandler>

0800144e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001452:	2003      	movs	r0, #3
 8001454:	f001 fb67 	bl	8002b26 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001458:	200f      	movs	r0, #15
 800145a:	f7ff ff19 	bl	8001290 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800145e:	f7ff fdd9 	bl	8001014 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001462:	2300      	movs	r3, #0
}
 8001464:	4618      	mov	r0, r3
 8001466:	bd80      	pop	{r7, pc}

08001468 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <HAL_IncTick+0x20>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	461a      	mov	r2, r3
 8001472:	4b06      	ldr	r3, [pc, #24]	; (800148c <HAL_IncTick+0x24>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4413      	add	r3, r2
 8001478:	4a04      	ldr	r2, [pc, #16]	; (800148c <HAL_IncTick+0x24>)
 800147a:	6013      	str	r3, [r2, #0]
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	20000008 	.word	0x20000008
 800148c:	2000027c 	.word	0x2000027c

08001490 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  return uwTick;
 8001494:	4b03      	ldr	r3, [pc, #12]	; (80014a4 <HAL_GetTick+0x14>)
 8001496:	681b      	ldr	r3, [r3, #0]
}
 8001498:	4618      	mov	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	2000027c 	.word	0x2000027c

080014a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014b0:	2300      	movs	r3, #0
 80014b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d101      	bne.n	80014be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e031      	b.n	8001522 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d109      	bne.n	80014da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f7ff fdcc 	bl	8001064 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2200      	movs	r2, #0
 80014d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	f003 0310 	and.w	r3, r3, #16
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d116      	bne.n	8001514 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014ea:	4b10      	ldr	r3, [pc, #64]	; (800152c <HAL_ADC_Init+0x84>)
 80014ec:	4013      	ands	r3, r2
 80014ee:	f043 0202 	orr.w	r2, r3, #2
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f000 fb0a 	bl	8001b10 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2200      	movs	r2, #0
 8001500:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	f023 0303 	bic.w	r3, r3, #3
 800150a:	f043 0201 	orr.w	r2, r3, #1
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	641a      	str	r2, [r3, #64]	; 0x40
 8001512:	e001      	b.n	8001518 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001520:	7bfb      	ldrb	r3, [r7, #15]
}
 8001522:	4618      	mov	r0, r3
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	ffffeefd 	.word	0xffffeefd

08001530 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001542:	2b01      	cmp	r3, #1
 8001544:	d101      	bne.n	800154a <HAL_ADC_Start+0x1a>
 8001546:	2302      	movs	r3, #2
 8001548:	e0ad      	b.n	80016a6 <HAL_ADC_Start+0x176>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2201      	movs	r2, #1
 800154e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f003 0301 	and.w	r3, r3, #1
 800155c:	2b01      	cmp	r3, #1
 800155e:	d018      	beq.n	8001592 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	689a      	ldr	r2, [r3, #8]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f042 0201 	orr.w	r2, r2, #1
 800156e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001570:	4b50      	ldr	r3, [pc, #320]	; (80016b4 <HAL_ADC_Start+0x184>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a50      	ldr	r2, [pc, #320]	; (80016b8 <HAL_ADC_Start+0x188>)
 8001576:	fba2 2303 	umull	r2, r3, r2, r3
 800157a:	0c9a      	lsrs	r2, r3, #18
 800157c:	4613      	mov	r3, r2
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	4413      	add	r3, r2
 8001582:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001584:	e002      	b.n	800158c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	3b01      	subs	r3, #1
 800158a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f9      	bne.n	8001586 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	2b01      	cmp	r3, #1
 800159e:	d175      	bne.n	800168c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015a4:	4b45      	ldr	r3, [pc, #276]	; (80016bc <HAL_ADC_Start+0x18c>)
 80015a6:	4013      	ands	r3, r2
 80015a8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d007      	beq.n	80015ce <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015c6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015da:	d106      	bne.n	80015ea <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e0:	f023 0206 	bic.w	r2, r3, #6
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	645a      	str	r2, [r3, #68]	; 0x44
 80015e8:	e002      	b.n	80015f0 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001600:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001602:	4b2f      	ldr	r3, [pc, #188]	; (80016c0 <HAL_ADC_Start+0x190>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f003 031f 	and.w	r3, r3, #31
 800160a:	2b00      	cmp	r3, #0
 800160c:	d10f      	bne.n	800162e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d143      	bne.n	80016a4 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	689a      	ldr	r2, [r3, #8]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	e03a      	b.n	80016a4 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a24      	ldr	r2, [pc, #144]	; (80016c4 <HAL_ADC_Start+0x194>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d10e      	bne.n	8001656 <HAL_ADC_Start+0x126>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d107      	bne.n	8001656 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	689a      	ldr	r2, [r3, #8]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001654:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001656:	4b1a      	ldr	r3, [pc, #104]	; (80016c0 <HAL_ADC_Start+0x190>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f003 0310 	and.w	r3, r3, #16
 800165e:	2b00      	cmp	r3, #0
 8001660:	d120      	bne.n	80016a4 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a18      	ldr	r2, [pc, #96]	; (80016c8 <HAL_ADC_Start+0x198>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d11b      	bne.n	80016a4 <HAL_ADC_Start+0x174>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d114      	bne.n	80016a4 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001688:	609a      	str	r2, [r3, #8]
 800168a:	e00b      	b.n	80016a4 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001690:	f043 0210 	orr.w	r2, r3, #16
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169c:	f043 0201 	orr.w	r2, r3, #1
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3714      	adds	r7, #20
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	20000000 	.word	0x20000000
 80016b8:	431bde83 	.word	0x431bde83
 80016bc:	fffff8fe 	.word	0xfffff8fe
 80016c0:	40012300 	.word	0x40012300
 80016c4:	40012000 	.word	0x40012000
 80016c8:	40012200 	.word	0x40012200

080016cc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d101      	bne.n	80016e2 <HAL_ADC_Stop+0x16>
 80016de:	2302      	movs	r3, #2
 80016e0:	e01f      	b.n	8001722 <HAL_ADC_Stop+0x56>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2201      	movs	r2, #1
 80016e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	689a      	ldr	r2, [r3, #8]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f022 0201 	bic.w	r2, r2, #1
 80016f8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	2b00      	cmp	r3, #0
 8001706:	d107      	bne.n	8001718 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800170c:	4b08      	ldr	r3, [pc, #32]	; (8001730 <HAL_ADC_Stop+0x64>)
 800170e:	4013      	ands	r3, r2
 8001710:	f043 0201 	orr.w	r2, r3, #1
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2200      	movs	r2, #0
 800171c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	ffffeefe 	.word	0xffffeefe

08001734 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800174c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001750:	d113      	bne.n	800177a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800175c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001760:	d10b      	bne.n	800177a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	f043 0220 	orr.w	r2, r3, #32
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e063      	b.n	8001842 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800177a:	f7ff fe89 	bl	8001490 <HAL_GetTick>
 800177e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001780:	e021      	b.n	80017c6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001788:	d01d      	beq.n	80017c6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d007      	beq.n	80017a0 <HAL_ADC_PollForConversion+0x6c>
 8001790:	f7ff fe7e 	bl	8001490 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	429a      	cmp	r2, r3
 800179e:	d212      	bcs.n	80017c6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d00b      	beq.n	80017c6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	f043 0204 	orr.w	r2, r3, #4
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e03d      	b.n	8001842 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d1d6      	bne.n	8001782 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f06f 0212 	mvn.w	r2, #18
 80017dc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d123      	bne.n	8001840 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d11f      	bne.n	8001840 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001806:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800180a:	2b00      	cmp	r3, #0
 800180c:	d006      	beq.n	800181c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001818:	2b00      	cmp	r3, #0
 800181a:	d111      	bne.n	8001840 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001820:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d105      	bne.n	8001840 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001838:	f043 0201 	orr.w	r2, r3, #1
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800184a:	b480      	push	{r7}
 800184c:	b083      	sub	sp, #12
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001858:	4618      	mov	r0, r3
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800186e:	2300      	movs	r3, #0
 8001870:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001878:	2b01      	cmp	r3, #1
 800187a:	d101      	bne.n	8001880 <HAL_ADC_ConfigChannel+0x1c>
 800187c:	2302      	movs	r3, #2
 800187e:	e136      	b.n	8001aee <HAL_ADC_ConfigChannel+0x28a>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2201      	movs	r2, #1
 8001884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b09      	cmp	r3, #9
 800188e:	d93a      	bls.n	8001906 <HAL_ADC_ConfigChannel+0xa2>
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001898:	d035      	beq.n	8001906 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	68d9      	ldr	r1, [r3, #12]
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	461a      	mov	r2, r3
 80018a8:	4613      	mov	r3, r2
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	4413      	add	r3, r2
 80018ae:	3b1e      	subs	r3, #30
 80018b0:	2207      	movs	r2, #7
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	43da      	mvns	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	400a      	ands	r2, r1
 80018be:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a8d      	ldr	r2, [pc, #564]	; (8001afc <HAL_ADC_ConfigChannel+0x298>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d10a      	bne.n	80018e0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	68d9      	ldr	r1, [r3, #12]
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	061a      	lsls	r2, r3, #24
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	430a      	orrs	r2, r1
 80018dc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018de:	e035      	b.n	800194c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	68d9      	ldr	r1, [r3, #12]
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	689a      	ldr	r2, [r3, #8]
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	4618      	mov	r0, r3
 80018f2:	4603      	mov	r3, r0
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	4403      	add	r3, r0
 80018f8:	3b1e      	subs	r3, #30
 80018fa:	409a      	lsls	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	430a      	orrs	r2, r1
 8001902:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001904:	e022      	b.n	800194c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	6919      	ldr	r1, [r3, #16]
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	b29b      	uxth	r3, r3
 8001912:	461a      	mov	r2, r3
 8001914:	4613      	mov	r3, r2
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	4413      	add	r3, r2
 800191a:	2207      	movs	r2, #7
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	43da      	mvns	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	400a      	ands	r2, r1
 8001928:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6919      	ldr	r1, [r3, #16]
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	689a      	ldr	r2, [r3, #8]
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	b29b      	uxth	r3, r3
 800193a:	4618      	mov	r0, r3
 800193c:	4603      	mov	r3, r0
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	4403      	add	r3, r0
 8001942:	409a      	lsls	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	430a      	orrs	r2, r1
 800194a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	2b06      	cmp	r3, #6
 8001952:	d824      	bhi.n	800199e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685a      	ldr	r2, [r3, #4]
 800195e:	4613      	mov	r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4413      	add	r3, r2
 8001964:	3b05      	subs	r3, #5
 8001966:	221f      	movs	r2, #31
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43da      	mvns	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	400a      	ands	r2, r1
 8001974:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	b29b      	uxth	r3, r3
 8001982:	4618      	mov	r0, r3
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685a      	ldr	r2, [r3, #4]
 8001988:	4613      	mov	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4413      	add	r3, r2
 800198e:	3b05      	subs	r3, #5
 8001990:	fa00 f203 	lsl.w	r2, r0, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	430a      	orrs	r2, r1
 800199a:	635a      	str	r2, [r3, #52]	; 0x34
 800199c:	e04c      	b.n	8001a38 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b0c      	cmp	r3, #12
 80019a4:	d824      	bhi.n	80019f0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685a      	ldr	r2, [r3, #4]
 80019b0:	4613      	mov	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4413      	add	r3, r2
 80019b6:	3b23      	subs	r3, #35	; 0x23
 80019b8:	221f      	movs	r2, #31
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	43da      	mvns	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	400a      	ands	r2, r1
 80019c6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	4618      	mov	r0, r3
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685a      	ldr	r2, [r3, #4]
 80019da:	4613      	mov	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	3b23      	subs	r3, #35	; 0x23
 80019e2:	fa00 f203 	lsl.w	r2, r0, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	430a      	orrs	r2, r1
 80019ec:	631a      	str	r2, [r3, #48]	; 0x30
 80019ee:	e023      	b.n	8001a38 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685a      	ldr	r2, [r3, #4]
 80019fa:	4613      	mov	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4413      	add	r3, r2
 8001a00:	3b41      	subs	r3, #65	; 0x41
 8001a02:	221f      	movs	r2, #31
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	43da      	mvns	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	400a      	ands	r2, r1
 8001a10:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	4618      	mov	r0, r3
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685a      	ldr	r2, [r3, #4]
 8001a24:	4613      	mov	r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	4413      	add	r3, r2
 8001a2a:	3b41      	subs	r3, #65	; 0x41
 8001a2c:	fa00 f203 	lsl.w	r2, r0, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	430a      	orrs	r2, r1
 8001a36:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a30      	ldr	r2, [pc, #192]	; (8001b00 <HAL_ADC_ConfigChannel+0x29c>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d10a      	bne.n	8001a58 <HAL_ADC_ConfigChannel+0x1f4>
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a4a:	d105      	bne.n	8001a58 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001a4c:	4b2d      	ldr	r3, [pc, #180]	; (8001b04 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	4a2c      	ldr	r2, [pc, #176]	; (8001b04 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a52:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001a56:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a28      	ldr	r2, [pc, #160]	; (8001b00 <HAL_ADC_ConfigChannel+0x29c>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d10f      	bne.n	8001a82 <HAL_ADC_ConfigChannel+0x21e>
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2b12      	cmp	r3, #18
 8001a68:	d10b      	bne.n	8001a82 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001a6a:	4b26      	ldr	r3, [pc, #152]	; (8001b04 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	4a25      	ldr	r2, [pc, #148]	; (8001b04 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a70:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001a74:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001a76:	4b23      	ldr	r3, [pc, #140]	; (8001b04 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	4a22      	ldr	r2, [pc, #136]	; (8001b04 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a80:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a1e      	ldr	r2, [pc, #120]	; (8001b00 <HAL_ADC_ConfigChannel+0x29c>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d12b      	bne.n	8001ae4 <HAL_ADC_ConfigChannel+0x280>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a1a      	ldr	r2, [pc, #104]	; (8001afc <HAL_ADC_ConfigChannel+0x298>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d003      	beq.n	8001a9e <HAL_ADC_ConfigChannel+0x23a>
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2b11      	cmp	r3, #17
 8001a9c:	d122      	bne.n	8001ae4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001a9e:	4b19      	ldr	r3, [pc, #100]	; (8001b04 <HAL_ADC_ConfigChannel+0x2a0>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	4a18      	ldr	r2, [pc, #96]	; (8001b04 <HAL_ADC_ConfigChannel+0x2a0>)
 8001aa4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001aa8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001aaa:	4b16      	ldr	r3, [pc, #88]	; (8001b04 <HAL_ADC_ConfigChannel+0x2a0>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	4a15      	ldr	r2, [pc, #84]	; (8001b04 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ab0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ab4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a10      	ldr	r2, [pc, #64]	; (8001afc <HAL_ADC_ConfigChannel+0x298>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d111      	bne.n	8001ae4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001ac0:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <HAL_ADC_ConfigChannel+0x2a4>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a11      	ldr	r2, [pc, #68]	; (8001b0c <HAL_ADC_ConfigChannel+0x2a8>)
 8001ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aca:	0c9a      	lsrs	r2, r3, #18
 8001acc:	4613      	mov	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4413      	add	r3, r2
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001ad6:	e002      	b.n	8001ade <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d1f9      	bne.n	8001ad8 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3714      	adds	r7, #20
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	10000012 	.word	0x10000012
 8001b00:	40012000 	.word	0x40012000
 8001b04:	40012300 	.word	0x40012300
 8001b08:	20000000 	.word	0x20000000
 8001b0c:	431bde83 	.word	0x431bde83

08001b10 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001b18:	4b78      	ldr	r3, [pc, #480]	; (8001cfc <ADC_Init+0x1ec>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	4a77      	ldr	r2, [pc, #476]	; (8001cfc <ADC_Init+0x1ec>)
 8001b1e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001b22:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001b24:	4b75      	ldr	r3, [pc, #468]	; (8001cfc <ADC_Init+0x1ec>)
 8001b26:	685a      	ldr	r2, [r3, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	4973      	ldr	r1, [pc, #460]	; (8001cfc <ADC_Init+0x1ec>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	685a      	ldr	r2, [r3, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	6859      	ldr	r1, [r3, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	021a      	lsls	r2, r3, #8
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	430a      	orrs	r2, r1
 8001b54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	685a      	ldr	r2, [r3, #4]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001b64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	6859      	ldr	r1, [r3, #4]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	430a      	orrs	r2, r1
 8001b76:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	689a      	ldr	r2, [r3, #8]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6899      	ldr	r1, [r3, #8]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	68da      	ldr	r2, [r3, #12]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	430a      	orrs	r2, r1
 8001b98:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9e:	4a58      	ldr	r2, [pc, #352]	; (8001d00 <ADC_Init+0x1f0>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d022      	beq.n	8001bea <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	689a      	ldr	r2, [r3, #8]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bb2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6899      	ldr	r1, [r3, #8]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bd4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	6899      	ldr	r1, [r3, #8]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	430a      	orrs	r2, r1
 8001be6:	609a      	str	r2, [r3, #8]
 8001be8:	e00f      	b.n	8001c0a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bf8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	689a      	ldr	r2, [r3, #8]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c08:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 0202 	bic.w	r2, r2, #2
 8001c18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	6899      	ldr	r1, [r3, #8]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	005a      	lsls	r2, r3, #1
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d01b      	beq.n	8001c70 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c46:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	685a      	ldr	r2, [r3, #4]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001c56:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6859      	ldr	r1, [r3, #4]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c62:	3b01      	subs	r3, #1
 8001c64:	035a      	lsls	r2, r3, #13
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	e007      	b.n	8001c80 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	685a      	ldr	r2, [r3, #4]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c7e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001c8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	051a      	lsls	r2, r3, #20
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	689a      	ldr	r2, [r3, #8]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001cb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	6899      	ldr	r1, [r3, #8]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001cc2:	025a      	lsls	r2, r3, #9
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	689a      	ldr	r2, [r3, #8]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6899      	ldr	r1, [r3, #8]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	029a      	lsls	r2, r3, #10
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	430a      	orrs	r2, r1
 8001cee:	609a      	str	r2, [r3, #8]
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	40012300 	.word	0x40012300
 8001d00:	0f000001 	.word	0x0f000001

08001d04 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e0ed      	b.n	8001ef2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d102      	bne.n	8001d28 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7ff fa36 	bl	8001194 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f042 0201 	orr.w	r2, r2, #1
 8001d36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d38:	f7ff fbaa 	bl	8001490 <HAL_GetTick>
 8001d3c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d3e:	e012      	b.n	8001d66 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d40:	f7ff fba6 	bl	8001490 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b0a      	cmp	r3, #10
 8001d4c:	d90b      	bls.n	8001d66 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d52:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2205      	movs	r2, #5
 8001d5e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e0c5      	b.n	8001ef2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d0e5      	beq.n	8001d40 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 0202 	bic.w	r2, r2, #2
 8001d82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d84:	f7ff fb84 	bl	8001490 <HAL_GetTick>
 8001d88:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d8a:	e012      	b.n	8001db2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d8c:	f7ff fb80 	bl	8001490 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b0a      	cmp	r3, #10
 8001d98:	d90b      	bls.n	8001db2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2205      	movs	r2, #5
 8001daa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e09f      	b.n	8001ef2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1e5      	bne.n	8001d8c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	7e1b      	ldrb	r3, [r3, #24]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d108      	bne.n	8001dda <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	e007      	b.n	8001dea <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001de8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	7e5b      	ldrb	r3, [r3, #25]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d108      	bne.n	8001e04 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	e007      	b.n	8001e14 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e12:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	7e9b      	ldrb	r3, [r3, #26]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d108      	bne.n	8001e2e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f042 0220 	orr.w	r2, r2, #32
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	e007      	b.n	8001e3e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 0220 	bic.w	r2, r2, #32
 8001e3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	7edb      	ldrb	r3, [r3, #27]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d108      	bne.n	8001e58 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 0210 	bic.w	r2, r2, #16
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	e007      	b.n	8001e68 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f042 0210 	orr.w	r2, r2, #16
 8001e66:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	7f1b      	ldrb	r3, [r3, #28]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d108      	bne.n	8001e82 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f042 0208 	orr.w	r2, r2, #8
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	e007      	b.n	8001e92 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 0208 	bic.w	r2, r2, #8
 8001e90:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	7f5b      	ldrb	r3, [r3, #29]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d108      	bne.n	8001eac <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f042 0204 	orr.w	r2, r2, #4
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	e007      	b.n	8001ebc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f022 0204 	bic.w	r2, r2, #4
 8001eba:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	431a      	orrs	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	695b      	ldr	r3, [r3, #20]
 8001ed0:	ea42 0103 	orr.w	r1, r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	1e5a      	subs	r2, r3, #1
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
	...

08001efc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b087      	sub	sp, #28
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f12:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001f14:	7cfb      	ldrb	r3, [r7, #19]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d003      	beq.n	8001f22 <HAL_CAN_ConfigFilter+0x26>
 8001f1a:	7cfb      	ldrb	r3, [r7, #19]
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	f040 80c7 	bne.w	80020b0 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a69      	ldr	r2, [pc, #420]	; (80020cc <HAL_CAN_ConfigFilter+0x1d0>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d001      	beq.n	8001f30 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001f2c:	4b68      	ldr	r3, [pc, #416]	; (80020d0 <HAL_CAN_ConfigFilter+0x1d4>)
 8001f2e:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f36:	f043 0201 	orr.w	r2, r3, #1
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	4a63      	ldr	r2, [pc, #396]	; (80020d0 <HAL_CAN_ConfigFilter+0x1d4>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d111      	bne.n	8001f6c <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f4e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f62:	021b      	lsls	r3, r3, #8
 8001f64:	431a      	orrs	r2, r3
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	695b      	ldr	r3, [r3, #20]
 8001f70:	f003 031f 	and.w	r3, r3, #31
 8001f74:	2201      	movs	r2, #1
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	43db      	mvns	r3, r3
 8001f86:	401a      	ands	r2, r3
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d123      	bne.n	8001fde <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	401a      	ands	r2, r3
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001fb8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	3248      	adds	r2, #72	; 0x48
 8001fbe:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fd2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fd4:	6979      	ldr	r1, [r7, #20]
 8001fd6:	3348      	adds	r3, #72	; 0x48
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	440b      	add	r3, r1
 8001fdc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d122      	bne.n	800202c <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002006:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	3248      	adds	r2, #72	; 0x48
 800200c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002020:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002022:	6979      	ldr	r1, [r7, #20]
 8002024:	3348      	adds	r3, #72	; 0x48
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	440b      	add	r3, r1
 800202a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d109      	bne.n	8002048 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	43db      	mvns	r3, r3
 800203e:	401a      	ands	r2, r3
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002046:	e007      	b.n	8002058 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	431a      	orrs	r2, r3
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d109      	bne.n	8002074 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	43db      	mvns	r3, r3
 800206a:	401a      	ands	r2, r3
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002072:	e007      	b.n	8002084 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	431a      	orrs	r2, r3
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d107      	bne.n	800209c <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	431a      	orrs	r2, r3
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80020a2:	f023 0201 	bic.w	r2, r3, #1
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80020ac:	2300      	movs	r3, #0
 80020ae:	e006      	b.n	80020be <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
  }
}
 80020be:	4618      	mov	r0, r3
 80020c0:	371c      	adds	r7, #28
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	40003400 	.word	0x40003400
 80020d0:	40006400 	.word	0x40006400

080020d4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d12e      	bne.n	8002146 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2202      	movs	r2, #2
 80020ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f022 0201 	bic.w	r2, r2, #1
 80020fe:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002100:	f7ff f9c6 	bl	8001490 <HAL_GetTick>
 8002104:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002106:	e012      	b.n	800212e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002108:	f7ff f9c2 	bl	8001490 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b0a      	cmp	r3, #10
 8002114:	d90b      	bls.n	800212e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2205      	movs	r2, #5
 8002126:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e012      	b.n	8002154 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1e5      	bne.n	8002108 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002142:	2300      	movs	r3, #0
 8002144:	e006      	b.n	8002154 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
  }
}
 8002154:	4618      	mov	r0, r3
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800215c:	b480      	push	{r7}
 800215e:	b089      	sub	sp, #36	; 0x24
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
 8002168:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002170:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800217a:	7ffb      	ldrb	r3, [r7, #31]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d003      	beq.n	8002188 <HAL_CAN_AddTxMessage+0x2c>
 8002180:	7ffb      	ldrb	r3, [r7, #31]
 8002182:	2b02      	cmp	r3, #2
 8002184:	f040 80ad 	bne.w	80022e2 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10a      	bne.n	80021a8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002198:	2b00      	cmp	r3, #0
 800219a:	d105      	bne.n	80021a8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f000 8095 	beq.w	80022d2 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	0e1b      	lsrs	r3, r3, #24
 80021ac:	f003 0303 	and.w	r3, r3, #3
 80021b0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80021b2:	2201      	movs	r2, #1
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	409a      	lsls	r2, r3
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d10d      	bne.n	80021e0 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80021ce:	68f9      	ldr	r1, [r7, #12]
 80021d0:	6809      	ldr	r1, [r1, #0]
 80021d2:	431a      	orrs	r2, r3
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	3318      	adds	r3, #24
 80021d8:	011b      	lsls	r3, r3, #4
 80021da:	440b      	add	r3, r1
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	e00f      	b.n	8002200 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021ea:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021f0:	68f9      	ldr	r1, [r7, #12]
 80021f2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80021f4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	3318      	adds	r3, #24
 80021fa:	011b      	lsls	r3, r3, #4
 80021fc:	440b      	add	r3, r1
 80021fe:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6819      	ldr	r1, [r3, #0]
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	691a      	ldr	r2, [r3, #16]
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	3318      	adds	r3, #24
 800220c:	011b      	lsls	r3, r3, #4
 800220e:	440b      	add	r3, r1
 8002210:	3304      	adds	r3, #4
 8002212:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	7d1b      	ldrb	r3, [r3, #20]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d111      	bne.n	8002240 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	3318      	adds	r3, #24
 8002224:	011b      	lsls	r3, r3, #4
 8002226:	4413      	add	r3, r2
 8002228:	3304      	adds	r3, #4
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	6811      	ldr	r1, [r2, #0]
 8002230:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	3318      	adds	r3, #24
 8002238:	011b      	lsls	r3, r3, #4
 800223a:	440b      	add	r3, r1
 800223c:	3304      	adds	r3, #4
 800223e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3307      	adds	r3, #7
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	061a      	lsls	r2, r3, #24
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3306      	adds	r3, #6
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	041b      	lsls	r3, r3, #16
 8002250:	431a      	orrs	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	3305      	adds	r3, #5
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	021b      	lsls	r3, r3, #8
 800225a:	4313      	orrs	r3, r2
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	3204      	adds	r2, #4
 8002260:	7812      	ldrb	r2, [r2, #0]
 8002262:	4610      	mov	r0, r2
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	6811      	ldr	r1, [r2, #0]
 8002268:	ea43 0200 	orr.w	r2, r3, r0
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	011b      	lsls	r3, r3, #4
 8002270:	440b      	add	r3, r1
 8002272:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002276:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3303      	adds	r3, #3
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	061a      	lsls	r2, r3, #24
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3302      	adds	r3, #2
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	041b      	lsls	r3, r3, #16
 8002288:	431a      	orrs	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	3301      	adds	r3, #1
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	021b      	lsls	r3, r3, #8
 8002292:	4313      	orrs	r3, r2
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	7812      	ldrb	r2, [r2, #0]
 8002298:	4610      	mov	r0, r2
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	6811      	ldr	r1, [r2, #0]
 800229e:	ea43 0200 	orr.w	r2, r3, r0
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	011b      	lsls	r3, r3, #4
 80022a6:	440b      	add	r3, r1
 80022a8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80022ac:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	3318      	adds	r3, #24
 80022b6:	011b      	lsls	r3, r3, #4
 80022b8:	4413      	add	r3, r2
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	6811      	ldr	r1, [r2, #0]
 80022c0:	f043 0201 	orr.w	r2, r3, #1
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	3318      	adds	r3, #24
 80022c8:	011b      	lsls	r3, r3, #4
 80022ca:	440b      	add	r3, r1
 80022cc:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80022ce:	2300      	movs	r3, #0
 80022d0:	e00e      	b.n	80022f0 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e006      	b.n	80022f0 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
  }
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3724      	adds	r7, #36	; 0x24
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80022fc:	b480      	push	{r7}
 80022fe:	b087      	sub	sp, #28
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
 8002308:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002310:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002312:	7dfb      	ldrb	r3, [r7, #23]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d003      	beq.n	8002320 <HAL_CAN_GetRxMessage+0x24>
 8002318:	7dfb      	ldrb	r3, [r7, #23]
 800231a:	2b02      	cmp	r3, #2
 800231c:	f040 80f3 	bne.w	8002506 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d10e      	bne.n	8002344 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	f003 0303 	and.w	r3, r3, #3
 8002330:	2b00      	cmp	r3, #0
 8002332:	d116      	bne.n	8002362 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e0e7      	b.n	8002514 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	f003 0303 	and.w	r3, r3, #3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d107      	bne.n	8002362 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002356:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e0d8      	b.n	8002514 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	331b      	adds	r3, #27
 800236a:	011b      	lsls	r3, r3, #4
 800236c:	4413      	add	r3, r2
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0204 	and.w	r2, r3, #4
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10c      	bne.n	800239a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	331b      	adds	r3, #27
 8002388:	011b      	lsls	r3, r3, #4
 800238a:	4413      	add	r3, r2
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	0d5b      	lsrs	r3, r3, #21
 8002390:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	e00b      	b.n	80023b2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	331b      	adds	r3, #27
 80023a2:	011b      	lsls	r3, r3, #4
 80023a4:	4413      	add	r3, r2
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	08db      	lsrs	r3, r3, #3
 80023aa:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	331b      	adds	r3, #27
 80023ba:	011b      	lsls	r3, r3, #4
 80023bc:	4413      	add	r3, r2
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0202 	and.w	r2, r3, #2
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	331b      	adds	r3, #27
 80023d0:	011b      	lsls	r3, r3, #4
 80023d2:	4413      	add	r3, r2
 80023d4:	3304      	adds	r3, #4
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 020f 	and.w	r2, r3, #15
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	331b      	adds	r3, #27
 80023e8:	011b      	lsls	r3, r3, #4
 80023ea:	4413      	add	r3, r2
 80023ec:	3304      	adds	r3, #4
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	0a1b      	lsrs	r3, r3, #8
 80023f2:	b2da      	uxtb	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	331b      	adds	r3, #27
 8002400:	011b      	lsls	r3, r3, #4
 8002402:	4413      	add	r3, r2
 8002404:	3304      	adds	r3, #4
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	0c1b      	lsrs	r3, r3, #16
 800240a:	b29a      	uxth	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	011b      	lsls	r3, r3, #4
 8002418:	4413      	add	r3, r2
 800241a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	b2da      	uxtb	r2, r3
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	011b      	lsls	r3, r3, #4
 800242e:	4413      	add	r3, r2
 8002430:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	0a1a      	lsrs	r2, r3, #8
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	3301      	adds	r3, #1
 800243c:	b2d2      	uxtb	r2, r2
 800243e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	011b      	lsls	r3, r3, #4
 8002448:	4413      	add	r3, r2
 800244a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	0c1a      	lsrs	r2, r3, #16
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	3302      	adds	r3, #2
 8002456:	b2d2      	uxtb	r2, r2
 8002458:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	011b      	lsls	r3, r3, #4
 8002462:	4413      	add	r3, r2
 8002464:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	0e1a      	lsrs	r2, r3, #24
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	3303      	adds	r3, #3
 8002470:	b2d2      	uxtb	r2, r2
 8002472:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	011b      	lsls	r3, r3, #4
 800247c:	4413      	add	r3, r2
 800247e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	3304      	adds	r3, #4
 8002488:	b2d2      	uxtb	r2, r2
 800248a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	011b      	lsls	r3, r3, #4
 8002494:	4413      	add	r3, r2
 8002496:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	0a1a      	lsrs	r2, r3, #8
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	3305      	adds	r3, #5
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	011b      	lsls	r3, r3, #4
 80024ae:	4413      	add	r3, r2
 80024b0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	0c1a      	lsrs	r2, r3, #16
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	3306      	adds	r3, #6
 80024bc:	b2d2      	uxtb	r2, r2
 80024be:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	011b      	lsls	r3, r3, #4
 80024c8:	4413      	add	r3, r2
 80024ca:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	0e1a      	lsrs	r2, r3, #24
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	3307      	adds	r3, #7
 80024d6:	b2d2      	uxtb	r2, r2
 80024d8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d108      	bne.n	80024f2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68da      	ldr	r2, [r3, #12]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f042 0220 	orr.w	r2, r2, #32
 80024ee:	60da      	str	r2, [r3, #12]
 80024f0:	e007      	b.n	8002502 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	691a      	ldr	r2, [r3, #16]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f042 0220 	orr.w	r2, r2, #32
 8002500:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002502:	2300      	movs	r3, #0
 8002504:	e006      	b.n	8002514 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
  }
}
 8002514:	4618      	mov	r0, r3
 8002516:	371c      	adds	r7, #28
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002530:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002532:	7bfb      	ldrb	r3, [r7, #15]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d002      	beq.n	800253e <HAL_CAN_ActivateNotification+0x1e>
 8002538:	7bfb      	ldrb	r3, [r7, #15]
 800253a:	2b02      	cmp	r3, #2
 800253c:	d109      	bne.n	8002552 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6959      	ldr	r1, [r3, #20]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	430a      	orrs	r2, r1
 800254c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800254e:	2300      	movs	r3, #0
 8002550:	e006      	b.n	8002560 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002556:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
  }
}
 8002560:	4618      	mov	r0, r3
 8002562:	3714      	adds	r7, #20
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b08a      	sub	sp, #40	; 0x28
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002574:	2300      	movs	r3, #0
 8002576:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80025a8:	6a3b      	ldr	r3, [r7, #32]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d07c      	beq.n	80026ac <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d023      	beq.n	8002604 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2201      	movs	r2, #1
 80025c2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 f983 	bl	80028da <HAL_CAN_TxMailbox0CompleteCallback>
 80025d4:	e016      	b.n	8002604 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d004      	beq.n	80025ea <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80025e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025e6:	627b      	str	r3, [r7, #36]	; 0x24
 80025e8:	e00c      	b.n	8002604 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	f003 0308 	and.w	r3, r3, #8
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d004      	beq.n	80025fe <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025fa:	627b      	str	r3, [r7, #36]	; 0x24
 80025fc:	e002      	b.n	8002604 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 f989 	bl	8002916 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260a:	2b00      	cmp	r3, #0
 800260c:	d024      	beq.n	8002658 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002616:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f963 	bl	80028ee <HAL_CAN_TxMailbox1CompleteCallback>
 8002628:	e016      	b.n	8002658 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002630:	2b00      	cmp	r3, #0
 8002632:	d004      	beq.n	800263e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002636:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800263a:	627b      	str	r3, [r7, #36]	; 0x24
 800263c:	e00c      	b.n	8002658 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002644:	2b00      	cmp	r3, #0
 8002646:	d004      	beq.n	8002652 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800264e:	627b      	str	r3, [r7, #36]	; 0x24
 8002650:	e002      	b.n	8002658 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f969 	bl	800292a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d024      	beq.n	80026ac <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800266a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f943 	bl	8002902 <HAL_CAN_TxMailbox2CompleteCallback>
 800267c:	e016      	b.n	80026ac <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d004      	beq.n	8002692 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800268e:	627b      	str	r3, [r7, #36]	; 0x24
 8002690:	e00c      	b.n	80026ac <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d004      	beq.n	80026a6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026a2:	627b      	str	r3, [r7, #36]	; 0x24
 80026a4:	e002      	b.n	80026ac <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 f949 	bl	800293e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80026ac:	6a3b      	ldr	r3, [r7, #32]
 80026ae:	f003 0308 	and.w	r3, r3, #8
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00c      	beq.n	80026d0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	f003 0310 	and.w	r3, r3, #16
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d007      	beq.n	80026d0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80026c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026c6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2210      	movs	r2, #16
 80026ce:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80026d0:	6a3b      	ldr	r3, [r7, #32]
 80026d2:	f003 0304 	and.w	r3, r3, #4
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00b      	beq.n	80026f2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	f003 0308 	and.w	r3, r3, #8
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d006      	beq.n	80026f2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2208      	movs	r2, #8
 80026ea:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 f930 	bl	8002952 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80026f2:	6a3b      	ldr	r3, [r7, #32]
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d009      	beq.n	8002710 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	f003 0303 	and.w	r3, r3, #3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d002      	beq.n	8002710 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7fe fa4a 	bl	8000ba4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002710:	6a3b      	ldr	r3, [r7, #32]
 8002712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00c      	beq.n	8002734 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	f003 0310 	and.w	r3, r3, #16
 8002720:	2b00      	cmp	r3, #0
 8002722:	d007      	beq.n	8002734 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002726:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800272a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2210      	movs	r2, #16
 8002732:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002734:	6a3b      	ldr	r3, [r7, #32]
 8002736:	f003 0320 	and.w	r3, r3, #32
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00b      	beq.n	8002756 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	f003 0308 	and.w	r3, r3, #8
 8002744:	2b00      	cmp	r3, #0
 8002746:	d006      	beq.n	8002756 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2208      	movs	r2, #8
 800274e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f000 f912 	bl	800297a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002756:	6a3b      	ldr	r3, [r7, #32]
 8002758:	f003 0310 	and.w	r3, r3, #16
 800275c:	2b00      	cmp	r3, #0
 800275e:	d009      	beq.n	8002774 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	f003 0303 	and.w	r3, r3, #3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d002      	beq.n	8002774 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 f8f9 	bl	8002966 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002774:	6a3b      	ldr	r3, [r7, #32]
 8002776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00b      	beq.n	8002796 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	f003 0310 	and.w	r3, r3, #16
 8002784:	2b00      	cmp	r3, #0
 8002786:	d006      	beq.n	8002796 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2210      	movs	r2, #16
 800278e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 f8fc 	bl	800298e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002796:	6a3b      	ldr	r3, [r7, #32]
 8002798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d00b      	beq.n	80027b8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	f003 0308 	and.w	r3, r3, #8
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d006      	beq.n	80027b8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2208      	movs	r2, #8
 80027b0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 f8f5 	bl	80029a2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80027b8:	6a3b      	ldr	r3, [r7, #32]
 80027ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d07b      	beq.n	80028ba <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d072      	beq.n	80028b2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80027cc:	6a3b      	ldr	r3, [r7, #32]
 80027ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d008      	beq.n	80027e8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	f043 0301 	orr.w	r3, r3, #1
 80027e6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80027e8:	6a3b      	ldr	r3, [r7, #32]
 80027ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d008      	beq.n	8002804 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d003      	beq.n	8002804 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80027fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fe:	f043 0302 	orr.w	r3, r3, #2
 8002802:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002804:	6a3b      	ldr	r3, [r7, #32]
 8002806:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800280a:	2b00      	cmp	r3, #0
 800280c:	d008      	beq.n	8002820 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002814:	2b00      	cmp	r3, #0
 8002816:	d003      	beq.n	8002820 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281a:	f043 0304 	orr.w	r3, r3, #4
 800281e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002820:	6a3b      	ldr	r3, [r7, #32]
 8002822:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002826:	2b00      	cmp	r3, #0
 8002828:	d043      	beq.n	80028b2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002830:	2b00      	cmp	r3, #0
 8002832:	d03e      	beq.n	80028b2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800283a:	2b60      	cmp	r3, #96	; 0x60
 800283c:	d02b      	beq.n	8002896 <HAL_CAN_IRQHandler+0x32a>
 800283e:	2b60      	cmp	r3, #96	; 0x60
 8002840:	d82e      	bhi.n	80028a0 <HAL_CAN_IRQHandler+0x334>
 8002842:	2b50      	cmp	r3, #80	; 0x50
 8002844:	d022      	beq.n	800288c <HAL_CAN_IRQHandler+0x320>
 8002846:	2b50      	cmp	r3, #80	; 0x50
 8002848:	d82a      	bhi.n	80028a0 <HAL_CAN_IRQHandler+0x334>
 800284a:	2b40      	cmp	r3, #64	; 0x40
 800284c:	d019      	beq.n	8002882 <HAL_CAN_IRQHandler+0x316>
 800284e:	2b40      	cmp	r3, #64	; 0x40
 8002850:	d826      	bhi.n	80028a0 <HAL_CAN_IRQHandler+0x334>
 8002852:	2b30      	cmp	r3, #48	; 0x30
 8002854:	d010      	beq.n	8002878 <HAL_CAN_IRQHandler+0x30c>
 8002856:	2b30      	cmp	r3, #48	; 0x30
 8002858:	d822      	bhi.n	80028a0 <HAL_CAN_IRQHandler+0x334>
 800285a:	2b10      	cmp	r3, #16
 800285c:	d002      	beq.n	8002864 <HAL_CAN_IRQHandler+0x2f8>
 800285e:	2b20      	cmp	r3, #32
 8002860:	d005      	beq.n	800286e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002862:	e01d      	b.n	80028a0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	f043 0308 	orr.w	r3, r3, #8
 800286a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800286c:	e019      	b.n	80028a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	f043 0310 	orr.w	r3, r3, #16
 8002874:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002876:	e014      	b.n	80028a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	f043 0320 	orr.w	r3, r3, #32
 800287e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002880:	e00f      	b.n	80028a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002888:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800288a:	e00a      	b.n	80028a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002892:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002894:	e005      	b.n	80028a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800289c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800289e:	e000      	b.n	80028a2 <HAL_CAN_IRQHandler+0x336>
            break;
 80028a0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	699a      	ldr	r2, [r3, #24]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80028b0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2204      	movs	r2, #4
 80028b8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80028ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d008      	beq.n	80028d2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	431a      	orrs	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f000 f872 	bl	80029b6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80028d2:	bf00      	nop
 80028d4:	3728      	adds	r7, #40	; 0x28
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b083      	sub	sp, #12
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002916:	b480      	push	{r7}
 8002918:	b083      	sub	sp, #12
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800292a:	b480      	push	{r7}
 800292c:	b083      	sub	sp, #12
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800295a:	bf00      	nop
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002966:	b480      	push	{r7}
 8002968:	b083      	sub	sp, #12
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800298e:	b480      	push	{r7}
 8002990:	b083      	sub	sp, #12
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002996:	bf00      	nop
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b083      	sub	sp, #12
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
	...

080029cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f003 0307 	and.w	r3, r3, #7
 80029da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029dc:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <__NVIC_SetPriorityGrouping+0x40>)
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029e8:	4013      	ands	r3, r2
 80029ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80029f4:	4b06      	ldr	r3, [pc, #24]	; (8002a10 <__NVIC_SetPriorityGrouping+0x44>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029fa:	4a04      	ldr	r2, [pc, #16]	; (8002a0c <__NVIC_SetPriorityGrouping+0x40>)
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	60d3      	str	r3, [r2, #12]
}
 8002a00:	bf00      	nop
 8002a02:	3714      	adds	r7, #20
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr
 8002a0c:	e000ed00 	.word	0xe000ed00
 8002a10:	05fa0000 	.word	0x05fa0000

08002a14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a18:	4b04      	ldr	r3, [pc, #16]	; (8002a2c <__NVIC_GetPriorityGrouping+0x18>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	0a1b      	lsrs	r3, r3, #8
 8002a1e:	f003 0307 	and.w	r3, r3, #7
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	e000ed00 	.word	0xe000ed00

08002a30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	4603      	mov	r3, r0
 8002a38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	db0b      	blt.n	8002a5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a42:	79fb      	ldrb	r3, [r7, #7]
 8002a44:	f003 021f 	and.w	r2, r3, #31
 8002a48:	4907      	ldr	r1, [pc, #28]	; (8002a68 <__NVIC_EnableIRQ+0x38>)
 8002a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4e:	095b      	lsrs	r3, r3, #5
 8002a50:	2001      	movs	r0, #1
 8002a52:	fa00 f202 	lsl.w	r2, r0, r2
 8002a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	e000e100 	.word	0xe000e100

08002a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	4603      	mov	r3, r0
 8002a74:	6039      	str	r1, [r7, #0]
 8002a76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	db0a      	blt.n	8002a96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	b2da      	uxtb	r2, r3
 8002a84:	490c      	ldr	r1, [pc, #48]	; (8002ab8 <__NVIC_SetPriority+0x4c>)
 8002a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8a:	0112      	lsls	r2, r2, #4
 8002a8c:	b2d2      	uxtb	r2, r2
 8002a8e:	440b      	add	r3, r1
 8002a90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a94:	e00a      	b.n	8002aac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	b2da      	uxtb	r2, r3
 8002a9a:	4908      	ldr	r1, [pc, #32]	; (8002abc <__NVIC_SetPriority+0x50>)
 8002a9c:	79fb      	ldrb	r3, [r7, #7]
 8002a9e:	f003 030f 	and.w	r3, r3, #15
 8002aa2:	3b04      	subs	r3, #4
 8002aa4:	0112      	lsls	r2, r2, #4
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	761a      	strb	r2, [r3, #24]
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr
 8002ab8:	e000e100 	.word	0xe000e100
 8002abc:	e000ed00 	.word	0xe000ed00

08002ac0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b089      	sub	sp, #36	; 0x24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f003 0307 	and.w	r3, r3, #7
 8002ad2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	f1c3 0307 	rsb	r3, r3, #7
 8002ada:	2b04      	cmp	r3, #4
 8002adc:	bf28      	it	cs
 8002ade:	2304      	movcs	r3, #4
 8002ae0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	3304      	adds	r3, #4
 8002ae6:	2b06      	cmp	r3, #6
 8002ae8:	d902      	bls.n	8002af0 <NVIC_EncodePriority+0x30>
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	3b03      	subs	r3, #3
 8002aee:	e000      	b.n	8002af2 <NVIC_EncodePriority+0x32>
 8002af0:	2300      	movs	r3, #0
 8002af2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002af4:	f04f 32ff 	mov.w	r2, #4294967295
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	fa02 f303 	lsl.w	r3, r2, r3
 8002afe:	43da      	mvns	r2, r3
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	401a      	ands	r2, r3
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b08:	f04f 31ff 	mov.w	r1, #4294967295
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b12:	43d9      	mvns	r1, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b18:	4313      	orrs	r3, r2
         );
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3724      	adds	r7, #36	; 0x24
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b082      	sub	sp, #8
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f7ff ff4c 	bl	80029cc <__NVIC_SetPriorityGrouping>
}
 8002b34:	bf00      	nop
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	4603      	mov	r3, r0
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
 8002b48:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b4e:	f7ff ff61 	bl	8002a14 <__NVIC_GetPriorityGrouping>
 8002b52:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	68b9      	ldr	r1, [r7, #8]
 8002b58:	6978      	ldr	r0, [r7, #20]
 8002b5a:	f7ff ffb1 	bl	8002ac0 <NVIC_EncodePriority>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b64:	4611      	mov	r1, r2
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff ff80 	bl	8002a6c <__NVIC_SetPriority>
}
 8002b6c:	bf00      	nop
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff ff54 	bl	8002a30 <__NVIC_EnableIRQ>
}
 8002b88:	bf00      	nop
 8002b8a:	3708      	adds	r7, #8
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b089      	sub	sp, #36	; 0x24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002baa:	2300      	movs	r3, #0
 8002bac:	61fb      	str	r3, [r7, #28]
 8002bae:	e175      	b.n	8002e9c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	f040 8164 	bne.w	8002e96 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f003 0303 	and.w	r3, r3, #3
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d005      	beq.n	8002be6 <HAL_GPIO_Init+0x56>
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f003 0303 	and.w	r3, r3, #3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d130      	bne.n	8002c48 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	2203      	movs	r2, #3
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	68da      	ldr	r2, [r3, #12]
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	43db      	mvns	r3, r3
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	091b      	lsrs	r3, r3, #4
 8002c32:	f003 0201 	and.w	r2, r3, #1
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f003 0303 	and.w	r3, r3, #3
 8002c50:	2b03      	cmp	r3, #3
 8002c52:	d017      	beq.n	8002c84 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	2203      	movs	r2, #3
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	43db      	mvns	r3, r3
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f003 0303 	and.w	r3, r3, #3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d123      	bne.n	8002cd8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	08da      	lsrs	r2, r3, #3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3208      	adds	r2, #8
 8002c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	f003 0307 	and.w	r3, r3, #7
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	220f      	movs	r2, #15
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	43db      	mvns	r3, r3
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	691a      	ldr	r2, [r3, #16]
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	f003 0307 	and.w	r3, r3, #7
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	08da      	lsrs	r2, r3, #3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	3208      	adds	r2, #8
 8002cd2:	69b9      	ldr	r1, [r7, #24]
 8002cd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	2203      	movs	r2, #3
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	4013      	ands	r3, r2
 8002cee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f003 0203 	and.w	r2, r3, #3
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 80be 	beq.w	8002e96 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d1a:	4b66      	ldr	r3, [pc, #408]	; (8002eb4 <HAL_GPIO_Init+0x324>)
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1e:	4a65      	ldr	r2, [pc, #404]	; (8002eb4 <HAL_GPIO_Init+0x324>)
 8002d20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d24:	6453      	str	r3, [r2, #68]	; 0x44
 8002d26:	4b63      	ldr	r3, [pc, #396]	; (8002eb4 <HAL_GPIO_Init+0x324>)
 8002d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002d32:	4a61      	ldr	r2, [pc, #388]	; (8002eb8 <HAL_GPIO_Init+0x328>)
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	089b      	lsrs	r3, r3, #2
 8002d38:	3302      	adds	r3, #2
 8002d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	220f      	movs	r2, #15
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	4013      	ands	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a58      	ldr	r2, [pc, #352]	; (8002ebc <HAL_GPIO_Init+0x32c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d037      	beq.n	8002dce <HAL_GPIO_Init+0x23e>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a57      	ldr	r2, [pc, #348]	; (8002ec0 <HAL_GPIO_Init+0x330>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d031      	beq.n	8002dca <HAL_GPIO_Init+0x23a>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a56      	ldr	r2, [pc, #344]	; (8002ec4 <HAL_GPIO_Init+0x334>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d02b      	beq.n	8002dc6 <HAL_GPIO_Init+0x236>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a55      	ldr	r2, [pc, #340]	; (8002ec8 <HAL_GPIO_Init+0x338>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d025      	beq.n	8002dc2 <HAL_GPIO_Init+0x232>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a54      	ldr	r2, [pc, #336]	; (8002ecc <HAL_GPIO_Init+0x33c>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d01f      	beq.n	8002dbe <HAL_GPIO_Init+0x22e>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a53      	ldr	r2, [pc, #332]	; (8002ed0 <HAL_GPIO_Init+0x340>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d019      	beq.n	8002dba <HAL_GPIO_Init+0x22a>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a52      	ldr	r2, [pc, #328]	; (8002ed4 <HAL_GPIO_Init+0x344>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d013      	beq.n	8002db6 <HAL_GPIO_Init+0x226>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a51      	ldr	r2, [pc, #324]	; (8002ed8 <HAL_GPIO_Init+0x348>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d00d      	beq.n	8002db2 <HAL_GPIO_Init+0x222>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a50      	ldr	r2, [pc, #320]	; (8002edc <HAL_GPIO_Init+0x34c>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d007      	beq.n	8002dae <HAL_GPIO_Init+0x21e>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a4f      	ldr	r2, [pc, #316]	; (8002ee0 <HAL_GPIO_Init+0x350>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d101      	bne.n	8002daa <HAL_GPIO_Init+0x21a>
 8002da6:	2309      	movs	r3, #9
 8002da8:	e012      	b.n	8002dd0 <HAL_GPIO_Init+0x240>
 8002daa:	230a      	movs	r3, #10
 8002dac:	e010      	b.n	8002dd0 <HAL_GPIO_Init+0x240>
 8002dae:	2308      	movs	r3, #8
 8002db0:	e00e      	b.n	8002dd0 <HAL_GPIO_Init+0x240>
 8002db2:	2307      	movs	r3, #7
 8002db4:	e00c      	b.n	8002dd0 <HAL_GPIO_Init+0x240>
 8002db6:	2306      	movs	r3, #6
 8002db8:	e00a      	b.n	8002dd0 <HAL_GPIO_Init+0x240>
 8002dba:	2305      	movs	r3, #5
 8002dbc:	e008      	b.n	8002dd0 <HAL_GPIO_Init+0x240>
 8002dbe:	2304      	movs	r3, #4
 8002dc0:	e006      	b.n	8002dd0 <HAL_GPIO_Init+0x240>
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e004      	b.n	8002dd0 <HAL_GPIO_Init+0x240>
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	e002      	b.n	8002dd0 <HAL_GPIO_Init+0x240>
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e000      	b.n	8002dd0 <HAL_GPIO_Init+0x240>
 8002dce:	2300      	movs	r3, #0
 8002dd0:	69fa      	ldr	r2, [r7, #28]
 8002dd2:	f002 0203 	and.w	r2, r2, #3
 8002dd6:	0092      	lsls	r2, r2, #2
 8002dd8:	4093      	lsls	r3, r2
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002de0:	4935      	ldr	r1, [pc, #212]	; (8002eb8 <HAL_GPIO_Init+0x328>)
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	089b      	lsrs	r3, r3, #2
 8002de6:	3302      	adds	r3, #2
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dee:	4b3d      	ldr	r3, [pc, #244]	; (8002ee4 <HAL_GPIO_Init+0x354>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	43db      	mvns	r3, r3
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e12:	4a34      	ldr	r2, [pc, #208]	; (8002ee4 <HAL_GPIO_Init+0x354>)
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e18:	4b32      	ldr	r3, [pc, #200]	; (8002ee4 <HAL_GPIO_Init+0x354>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	43db      	mvns	r3, r3
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	4013      	ands	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d003      	beq.n	8002e3c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e3c:	4a29      	ldr	r2, [pc, #164]	; (8002ee4 <HAL_GPIO_Init+0x354>)
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e42:	4b28      	ldr	r3, [pc, #160]	; (8002ee4 <HAL_GPIO_Init+0x354>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e66:	4a1f      	ldr	r2, [pc, #124]	; (8002ee4 <HAL_GPIO_Init+0x354>)
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e6c:	4b1d      	ldr	r3, [pc, #116]	; (8002ee4 <HAL_GPIO_Init+0x354>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	43db      	mvns	r3, r3
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e90:	4a14      	ldr	r2, [pc, #80]	; (8002ee4 <HAL_GPIO_Init+0x354>)
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	61fb      	str	r3, [r7, #28]
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	2b0f      	cmp	r3, #15
 8002ea0:	f67f ae86 	bls.w	8002bb0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002ea4:	bf00      	nop
 8002ea6:	bf00      	nop
 8002ea8:	3724      	adds	r7, #36	; 0x24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	40013800 	.word	0x40013800
 8002ebc:	40020000 	.word	0x40020000
 8002ec0:	40020400 	.word	0x40020400
 8002ec4:	40020800 	.word	0x40020800
 8002ec8:	40020c00 	.word	0x40020c00
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	40021400 	.word	0x40021400
 8002ed4:	40021800 	.word	0x40021800
 8002ed8:	40021c00 	.word	0x40021c00
 8002edc:	40022000 	.word	0x40022000
 8002ee0:	40022400 	.word	0x40022400
 8002ee4:	40013c00 	.word	0x40013c00

08002ee8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	691a      	ldr	r2, [r3, #16]
 8002ef8:	887b      	ldrh	r3, [r7, #2]
 8002efa:	4013      	ands	r3, r2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d002      	beq.n	8002f06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f00:	2301      	movs	r3, #1
 8002f02:	73fb      	strb	r3, [r7, #15]
 8002f04:	e001      	b.n	8002f0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f06:	2300      	movs	r3, #0
 8002f08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3714      	adds	r7, #20
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	460b      	mov	r3, r1
 8002f22:	807b      	strh	r3, [r7, #2]
 8002f24:	4613      	mov	r3, r2
 8002f26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f28:	787b      	ldrb	r3, [r7, #1]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f2e:	887a      	ldrh	r2, [r7, #2]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002f34:	e003      	b.n	8002f3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002f36:	887b      	ldrh	r3, [r7, #2]
 8002f38:	041a      	lsls	r2, r3, #16
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	619a      	str	r2, [r3, #24]
}
 8002f3e:	bf00      	nop
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
	...

08002f4c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002f54:	2300      	movs	r3, #0
 8002f56:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e29b      	b.n	800349a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f000 8087 	beq.w	800307e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f70:	4b96      	ldr	r3, [pc, #600]	; (80031cc <HAL_RCC_OscConfig+0x280>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f003 030c 	and.w	r3, r3, #12
 8002f78:	2b04      	cmp	r3, #4
 8002f7a:	d00c      	beq.n	8002f96 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f7c:	4b93      	ldr	r3, [pc, #588]	; (80031cc <HAL_RCC_OscConfig+0x280>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f003 030c 	and.w	r3, r3, #12
 8002f84:	2b08      	cmp	r3, #8
 8002f86:	d112      	bne.n	8002fae <HAL_RCC_OscConfig+0x62>
 8002f88:	4b90      	ldr	r3, [pc, #576]	; (80031cc <HAL_RCC_OscConfig+0x280>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f94:	d10b      	bne.n	8002fae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f96:	4b8d      	ldr	r3, [pc, #564]	; (80031cc <HAL_RCC_OscConfig+0x280>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d06c      	beq.n	800307c <HAL_RCC_OscConfig+0x130>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d168      	bne.n	800307c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e275      	b.n	800349a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb6:	d106      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x7a>
 8002fb8:	4b84      	ldr	r3, [pc, #528]	; (80031cc <HAL_RCC_OscConfig+0x280>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a83      	ldr	r2, [pc, #524]	; (80031cc <HAL_RCC_OscConfig+0x280>)
 8002fbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc2:	6013      	str	r3, [r2, #0]
 8002fc4:	e02e      	b.n	8003024 <HAL_RCC_OscConfig+0xd8>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10c      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x9c>
 8002fce:	4b7f      	ldr	r3, [pc, #508]	; (80031cc <HAL_RCC_OscConfig+0x280>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a7e      	ldr	r2, [pc, #504]	; (80031cc <HAL_RCC_OscConfig+0x280>)
 8002fd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fd8:	6013      	str	r3, [r2, #0]
 8002fda:	4b7c      	ldr	r3, [pc, #496]	; (80031cc <HAL_RCC_OscConfig+0x280>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a7b      	ldr	r2, [pc, #492]	; (80031cc <HAL_RCC_OscConfig+0x280>)
 8002fe0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fe4:	6013      	str	r3, [r2, #0]
 8002fe6:	e01d      	b.n	8003024 <HAL_RCC_OscConfig+0xd8>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ff0:	d10c      	bne.n	800300c <HAL_RCC_OscConfig+0xc0>
 8002ff2:	4b76      	ldr	r3, [pc, #472]	; (80031cc <HAL_RCC_OscConfig+0x280>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a75      	ldr	r2, [pc, #468]	; (80031cc <HAL_RCC_OscConfig+0x280>)
 8002ff8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ffc:	6013      	str	r3, [r2, #0]
 8002ffe:	4b73      	ldr	r3, [pc, #460]	; (80031cc <HAL_RCC_OscConfig+0x280>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a72      	ldr	r2, [pc, #456]	; (80031cc <HAL_RCC_OscConfig+0x280>)
 8003004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003008:	6013      	str	r3, [r2, #0]
 800300a:	e00b      	b.n	8003024 <HAL_RCC_OscConfig+0xd8>
 800300c:	4b6f      	ldr	r3, [pc, #444]	; (80031cc <HAL_RCC_OscConfig+0x280>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a6e      	ldr	r2, [pc, #440]	; (80031cc <HAL_RCC_OscConfig+0x280>)
 8003012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003016:	6013      	str	r3, [r2, #0]
 8003018:	4b6c      	ldr	r3, [pc, #432]	; (80031cc <HAL_RCC_OscConfig+0x280>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a6b      	ldr	r2, [pc, #428]	; (80031cc <HAL_RCC_OscConfig+0x280>)
 800301e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003022:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d013      	beq.n	8003054 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302c:	f7fe fa30 	bl	8001490 <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003034:	f7fe fa2c 	bl	8001490 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b64      	cmp	r3, #100	; 0x64
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e229      	b.n	800349a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003046:	4b61      	ldr	r3, [pc, #388]	; (80031cc <HAL_RCC_OscConfig+0x280>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0f0      	beq.n	8003034 <HAL_RCC_OscConfig+0xe8>
 8003052:	e014      	b.n	800307e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003054:	f7fe fa1c 	bl	8001490 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800305c:	f7fe fa18 	bl	8001490 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b64      	cmp	r3, #100	; 0x64
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e215      	b.n	800349a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800306e:	4b57      	ldr	r3, [pc, #348]	; (80031cc <HAL_RCC_OscConfig+0x280>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1f0      	bne.n	800305c <HAL_RCC_OscConfig+0x110>
 800307a:	e000      	b.n	800307e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800307c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d069      	beq.n	800315e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800308a:	4b50      	ldr	r3, [pc, #320]	; (80031cc <HAL_RCC_OscConfig+0x280>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f003 030c 	and.w	r3, r3, #12
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00b      	beq.n	80030ae <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003096:	4b4d      	ldr	r3, [pc, #308]	; (80031cc <HAL_RCC_OscConfig+0x280>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f003 030c 	and.w	r3, r3, #12
 800309e:	2b08      	cmp	r3, #8
 80030a0:	d11c      	bne.n	80030dc <HAL_RCC_OscConfig+0x190>
 80030a2:	4b4a      	ldr	r3, [pc, #296]	; (80031cc <HAL_RCC_OscConfig+0x280>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d116      	bne.n	80030dc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ae:	4b47      	ldr	r3, [pc, #284]	; (80031cc <HAL_RCC_OscConfig+0x280>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d005      	beq.n	80030c6 <HAL_RCC_OscConfig+0x17a>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d001      	beq.n	80030c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e1e9      	b.n	800349a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c6:	4b41      	ldr	r3, [pc, #260]	; (80031cc <HAL_RCC_OscConfig+0x280>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	493d      	ldr	r1, [pc, #244]	; (80031cc <HAL_RCC_OscConfig+0x280>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030da:	e040      	b.n	800315e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d023      	beq.n	800312c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030e4:	4b39      	ldr	r3, [pc, #228]	; (80031cc <HAL_RCC_OscConfig+0x280>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a38      	ldr	r2, [pc, #224]	; (80031cc <HAL_RCC_OscConfig+0x280>)
 80030ea:	f043 0301 	orr.w	r3, r3, #1
 80030ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f0:	f7fe f9ce 	bl	8001490 <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030f8:	f7fe f9ca 	bl	8001490 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e1c7      	b.n	800349a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800310a:	4b30      	ldr	r3, [pc, #192]	; (80031cc <HAL_RCC_OscConfig+0x280>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d0f0      	beq.n	80030f8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003116:	4b2d      	ldr	r3, [pc, #180]	; (80031cc <HAL_RCC_OscConfig+0x280>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	4929      	ldr	r1, [pc, #164]	; (80031cc <HAL_RCC_OscConfig+0x280>)
 8003126:	4313      	orrs	r3, r2
 8003128:	600b      	str	r3, [r1, #0]
 800312a:	e018      	b.n	800315e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800312c:	4b27      	ldr	r3, [pc, #156]	; (80031cc <HAL_RCC_OscConfig+0x280>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a26      	ldr	r2, [pc, #152]	; (80031cc <HAL_RCC_OscConfig+0x280>)
 8003132:	f023 0301 	bic.w	r3, r3, #1
 8003136:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003138:	f7fe f9aa 	bl	8001490 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003140:	f7fe f9a6 	bl	8001490 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e1a3      	b.n	800349a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003152:	4b1e      	ldr	r3, [pc, #120]	; (80031cc <HAL_RCC_OscConfig+0x280>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1f0      	bne.n	8003140 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0308 	and.w	r3, r3, #8
 8003166:	2b00      	cmp	r3, #0
 8003168:	d038      	beq.n	80031dc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d019      	beq.n	80031a6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003172:	4b16      	ldr	r3, [pc, #88]	; (80031cc <HAL_RCC_OscConfig+0x280>)
 8003174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003176:	4a15      	ldr	r2, [pc, #84]	; (80031cc <HAL_RCC_OscConfig+0x280>)
 8003178:	f043 0301 	orr.w	r3, r3, #1
 800317c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800317e:	f7fe f987 	bl	8001490 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003186:	f7fe f983 	bl	8001490 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e180      	b.n	800349a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003198:	4b0c      	ldr	r3, [pc, #48]	; (80031cc <HAL_RCC_OscConfig+0x280>)
 800319a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0f0      	beq.n	8003186 <HAL_RCC_OscConfig+0x23a>
 80031a4:	e01a      	b.n	80031dc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031a6:	4b09      	ldr	r3, [pc, #36]	; (80031cc <HAL_RCC_OscConfig+0x280>)
 80031a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031aa:	4a08      	ldr	r2, [pc, #32]	; (80031cc <HAL_RCC_OscConfig+0x280>)
 80031ac:	f023 0301 	bic.w	r3, r3, #1
 80031b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b2:	f7fe f96d 	bl	8001490 <HAL_GetTick>
 80031b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031b8:	e00a      	b.n	80031d0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031ba:	f7fe f969 	bl	8001490 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d903      	bls.n	80031d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e166      	b.n	800349a <HAL_RCC_OscConfig+0x54e>
 80031cc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031d0:	4b92      	ldr	r3, [pc, #584]	; (800341c <HAL_RCC_OscConfig+0x4d0>)
 80031d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1ee      	bne.n	80031ba <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f000 80a4 	beq.w	8003332 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031ea:	4b8c      	ldr	r3, [pc, #560]	; (800341c <HAL_RCC_OscConfig+0x4d0>)
 80031ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10d      	bne.n	8003212 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80031f6:	4b89      	ldr	r3, [pc, #548]	; (800341c <HAL_RCC_OscConfig+0x4d0>)
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	4a88      	ldr	r2, [pc, #544]	; (800341c <HAL_RCC_OscConfig+0x4d0>)
 80031fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003200:	6413      	str	r3, [r2, #64]	; 0x40
 8003202:	4b86      	ldr	r3, [pc, #536]	; (800341c <HAL_RCC_OscConfig+0x4d0>)
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320a:	60bb      	str	r3, [r7, #8]
 800320c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800320e:	2301      	movs	r3, #1
 8003210:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003212:	4b83      	ldr	r3, [pc, #524]	; (8003420 <HAL_RCC_OscConfig+0x4d4>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321a:	2b00      	cmp	r3, #0
 800321c:	d118      	bne.n	8003250 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800321e:	4b80      	ldr	r3, [pc, #512]	; (8003420 <HAL_RCC_OscConfig+0x4d4>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a7f      	ldr	r2, [pc, #508]	; (8003420 <HAL_RCC_OscConfig+0x4d4>)
 8003224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003228:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800322a:	f7fe f931 	bl	8001490 <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003230:	e008      	b.n	8003244 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003232:	f7fe f92d 	bl	8001490 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b64      	cmp	r3, #100	; 0x64
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e12a      	b.n	800349a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003244:	4b76      	ldr	r3, [pc, #472]	; (8003420 <HAL_RCC_OscConfig+0x4d4>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324c:	2b00      	cmp	r3, #0
 800324e:	d0f0      	beq.n	8003232 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d106      	bne.n	8003266 <HAL_RCC_OscConfig+0x31a>
 8003258:	4b70      	ldr	r3, [pc, #448]	; (800341c <HAL_RCC_OscConfig+0x4d0>)
 800325a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325c:	4a6f      	ldr	r2, [pc, #444]	; (800341c <HAL_RCC_OscConfig+0x4d0>)
 800325e:	f043 0301 	orr.w	r3, r3, #1
 8003262:	6713      	str	r3, [r2, #112]	; 0x70
 8003264:	e02d      	b.n	80032c2 <HAL_RCC_OscConfig+0x376>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10c      	bne.n	8003288 <HAL_RCC_OscConfig+0x33c>
 800326e:	4b6b      	ldr	r3, [pc, #428]	; (800341c <HAL_RCC_OscConfig+0x4d0>)
 8003270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003272:	4a6a      	ldr	r2, [pc, #424]	; (800341c <HAL_RCC_OscConfig+0x4d0>)
 8003274:	f023 0301 	bic.w	r3, r3, #1
 8003278:	6713      	str	r3, [r2, #112]	; 0x70
 800327a:	4b68      	ldr	r3, [pc, #416]	; (800341c <HAL_RCC_OscConfig+0x4d0>)
 800327c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327e:	4a67      	ldr	r2, [pc, #412]	; (800341c <HAL_RCC_OscConfig+0x4d0>)
 8003280:	f023 0304 	bic.w	r3, r3, #4
 8003284:	6713      	str	r3, [r2, #112]	; 0x70
 8003286:	e01c      	b.n	80032c2 <HAL_RCC_OscConfig+0x376>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	2b05      	cmp	r3, #5
 800328e:	d10c      	bne.n	80032aa <HAL_RCC_OscConfig+0x35e>
 8003290:	4b62      	ldr	r3, [pc, #392]	; (800341c <HAL_RCC_OscConfig+0x4d0>)
 8003292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003294:	4a61      	ldr	r2, [pc, #388]	; (800341c <HAL_RCC_OscConfig+0x4d0>)
 8003296:	f043 0304 	orr.w	r3, r3, #4
 800329a:	6713      	str	r3, [r2, #112]	; 0x70
 800329c:	4b5f      	ldr	r3, [pc, #380]	; (800341c <HAL_RCC_OscConfig+0x4d0>)
 800329e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a0:	4a5e      	ldr	r2, [pc, #376]	; (800341c <HAL_RCC_OscConfig+0x4d0>)
 80032a2:	f043 0301 	orr.w	r3, r3, #1
 80032a6:	6713      	str	r3, [r2, #112]	; 0x70
 80032a8:	e00b      	b.n	80032c2 <HAL_RCC_OscConfig+0x376>
 80032aa:	4b5c      	ldr	r3, [pc, #368]	; (800341c <HAL_RCC_OscConfig+0x4d0>)
 80032ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ae:	4a5b      	ldr	r2, [pc, #364]	; (800341c <HAL_RCC_OscConfig+0x4d0>)
 80032b0:	f023 0301 	bic.w	r3, r3, #1
 80032b4:	6713      	str	r3, [r2, #112]	; 0x70
 80032b6:	4b59      	ldr	r3, [pc, #356]	; (800341c <HAL_RCC_OscConfig+0x4d0>)
 80032b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ba:	4a58      	ldr	r2, [pc, #352]	; (800341c <HAL_RCC_OscConfig+0x4d0>)
 80032bc:	f023 0304 	bic.w	r3, r3, #4
 80032c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d015      	beq.n	80032f6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ca:	f7fe f8e1 	bl	8001490 <HAL_GetTick>
 80032ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d0:	e00a      	b.n	80032e8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d2:	f7fe f8dd 	bl	8001490 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e0d8      	b.n	800349a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e8:	4b4c      	ldr	r3, [pc, #304]	; (800341c <HAL_RCC_OscConfig+0x4d0>)
 80032ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d0ee      	beq.n	80032d2 <HAL_RCC_OscConfig+0x386>
 80032f4:	e014      	b.n	8003320 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f6:	f7fe f8cb 	bl	8001490 <HAL_GetTick>
 80032fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032fc:	e00a      	b.n	8003314 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032fe:	f7fe f8c7 	bl	8001490 <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	f241 3288 	movw	r2, #5000	; 0x1388
 800330c:	4293      	cmp	r3, r2
 800330e:	d901      	bls.n	8003314 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e0c2      	b.n	800349a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003314:	4b41      	ldr	r3, [pc, #260]	; (800341c <HAL_RCC_OscConfig+0x4d0>)
 8003316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1ee      	bne.n	80032fe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003320:	7dfb      	ldrb	r3, [r7, #23]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d105      	bne.n	8003332 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003326:	4b3d      	ldr	r3, [pc, #244]	; (800341c <HAL_RCC_OscConfig+0x4d0>)
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	4a3c      	ldr	r2, [pc, #240]	; (800341c <HAL_RCC_OscConfig+0x4d0>)
 800332c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003330:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	2b00      	cmp	r3, #0
 8003338:	f000 80ae 	beq.w	8003498 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800333c:	4b37      	ldr	r3, [pc, #220]	; (800341c <HAL_RCC_OscConfig+0x4d0>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f003 030c 	and.w	r3, r3, #12
 8003344:	2b08      	cmp	r3, #8
 8003346:	d06d      	beq.n	8003424 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	2b02      	cmp	r3, #2
 800334e:	d14b      	bne.n	80033e8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003350:	4b32      	ldr	r3, [pc, #200]	; (800341c <HAL_RCC_OscConfig+0x4d0>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a31      	ldr	r2, [pc, #196]	; (800341c <HAL_RCC_OscConfig+0x4d0>)
 8003356:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800335a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800335c:	f7fe f898 	bl	8001490 <HAL_GetTick>
 8003360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003362:	e008      	b.n	8003376 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003364:	f7fe f894 	bl	8001490 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e091      	b.n	800349a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003376:	4b29      	ldr	r3, [pc, #164]	; (800341c <HAL_RCC_OscConfig+0x4d0>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1f0      	bne.n	8003364 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	69da      	ldr	r2, [r3, #28]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	431a      	orrs	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003390:	019b      	lsls	r3, r3, #6
 8003392:	431a      	orrs	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003398:	085b      	lsrs	r3, r3, #1
 800339a:	3b01      	subs	r3, #1
 800339c:	041b      	lsls	r3, r3, #16
 800339e:	431a      	orrs	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a4:	061b      	lsls	r3, r3, #24
 80033a6:	431a      	orrs	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ac:	071b      	lsls	r3, r3, #28
 80033ae:	491b      	ldr	r1, [pc, #108]	; (800341c <HAL_RCC_OscConfig+0x4d0>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033b4:	4b19      	ldr	r3, [pc, #100]	; (800341c <HAL_RCC_OscConfig+0x4d0>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a18      	ldr	r2, [pc, #96]	; (800341c <HAL_RCC_OscConfig+0x4d0>)
 80033ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c0:	f7fe f866 	bl	8001490 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c8:	f7fe f862 	bl	8001490 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e05f      	b.n	800349a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033da:	4b10      	ldr	r3, [pc, #64]	; (800341c <HAL_RCC_OscConfig+0x4d0>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d0f0      	beq.n	80033c8 <HAL_RCC_OscConfig+0x47c>
 80033e6:	e057      	b.n	8003498 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033e8:	4b0c      	ldr	r3, [pc, #48]	; (800341c <HAL_RCC_OscConfig+0x4d0>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a0b      	ldr	r2, [pc, #44]	; (800341c <HAL_RCC_OscConfig+0x4d0>)
 80033ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f4:	f7fe f84c 	bl	8001490 <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033fc:	f7fe f848 	bl	8001490 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e045      	b.n	800349a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800340e:	4b03      	ldr	r3, [pc, #12]	; (800341c <HAL_RCC_OscConfig+0x4d0>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1f0      	bne.n	80033fc <HAL_RCC_OscConfig+0x4b0>
 800341a:	e03d      	b.n	8003498 <HAL_RCC_OscConfig+0x54c>
 800341c:	40023800 	.word	0x40023800
 8003420:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003424:	4b1f      	ldr	r3, [pc, #124]	; (80034a4 <HAL_RCC_OscConfig+0x558>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d030      	beq.n	8003494 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800343c:	429a      	cmp	r2, r3
 800343e:	d129      	bne.n	8003494 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800344a:	429a      	cmp	r2, r3
 800344c:	d122      	bne.n	8003494 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003454:	4013      	ands	r3, r2
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800345a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800345c:	4293      	cmp	r3, r2
 800345e:	d119      	bne.n	8003494 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346a:	085b      	lsrs	r3, r3, #1
 800346c:	3b01      	subs	r3, #1
 800346e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003470:	429a      	cmp	r2, r3
 8003472:	d10f      	bne.n	8003494 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003480:	429a      	cmp	r2, r3
 8003482:	d107      	bne.n	8003494 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003490:	429a      	cmp	r2, r3
 8003492:	d001      	beq.n	8003498 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e000      	b.n	800349a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3718      	adds	r7, #24
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	40023800 	.word	0x40023800

080034a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80034b2:	2300      	movs	r3, #0
 80034b4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d101      	bne.n	80034c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e0d0      	b.n	8003662 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034c0:	4b6a      	ldr	r3, [pc, #424]	; (800366c <HAL_RCC_ClockConfig+0x1c4>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 030f 	and.w	r3, r3, #15
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d910      	bls.n	80034f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ce:	4b67      	ldr	r3, [pc, #412]	; (800366c <HAL_RCC_ClockConfig+0x1c4>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f023 020f 	bic.w	r2, r3, #15
 80034d6:	4965      	ldr	r1, [pc, #404]	; (800366c <HAL_RCC_ClockConfig+0x1c4>)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	4313      	orrs	r3, r2
 80034dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034de:	4b63      	ldr	r3, [pc, #396]	; (800366c <HAL_RCC_ClockConfig+0x1c4>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 030f 	and.w	r3, r3, #15
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d001      	beq.n	80034f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e0b8      	b.n	8003662 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d020      	beq.n	800353e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0304 	and.w	r3, r3, #4
 8003504:	2b00      	cmp	r3, #0
 8003506:	d005      	beq.n	8003514 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003508:	4b59      	ldr	r3, [pc, #356]	; (8003670 <HAL_RCC_ClockConfig+0x1c8>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	4a58      	ldr	r2, [pc, #352]	; (8003670 <HAL_RCC_ClockConfig+0x1c8>)
 800350e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003512:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0308 	and.w	r3, r3, #8
 800351c:	2b00      	cmp	r3, #0
 800351e:	d005      	beq.n	800352c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003520:	4b53      	ldr	r3, [pc, #332]	; (8003670 <HAL_RCC_ClockConfig+0x1c8>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	4a52      	ldr	r2, [pc, #328]	; (8003670 <HAL_RCC_ClockConfig+0x1c8>)
 8003526:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800352a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800352c:	4b50      	ldr	r3, [pc, #320]	; (8003670 <HAL_RCC_ClockConfig+0x1c8>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	494d      	ldr	r1, [pc, #308]	; (8003670 <HAL_RCC_ClockConfig+0x1c8>)
 800353a:	4313      	orrs	r3, r2
 800353c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d040      	beq.n	80035cc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d107      	bne.n	8003562 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003552:	4b47      	ldr	r3, [pc, #284]	; (8003670 <HAL_RCC_ClockConfig+0x1c8>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d115      	bne.n	800358a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e07f      	b.n	8003662 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	2b02      	cmp	r3, #2
 8003568:	d107      	bne.n	800357a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800356a:	4b41      	ldr	r3, [pc, #260]	; (8003670 <HAL_RCC_ClockConfig+0x1c8>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d109      	bne.n	800358a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e073      	b.n	8003662 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800357a:	4b3d      	ldr	r3, [pc, #244]	; (8003670 <HAL_RCC_ClockConfig+0x1c8>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e06b      	b.n	8003662 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800358a:	4b39      	ldr	r3, [pc, #228]	; (8003670 <HAL_RCC_ClockConfig+0x1c8>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f023 0203 	bic.w	r2, r3, #3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	4936      	ldr	r1, [pc, #216]	; (8003670 <HAL_RCC_ClockConfig+0x1c8>)
 8003598:	4313      	orrs	r3, r2
 800359a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800359c:	f7fd ff78 	bl	8001490 <HAL_GetTick>
 80035a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035a2:	e00a      	b.n	80035ba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035a4:	f7fd ff74 	bl	8001490 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e053      	b.n	8003662 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ba:	4b2d      	ldr	r3, [pc, #180]	; (8003670 <HAL_RCC_ClockConfig+0x1c8>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f003 020c 	and.w	r2, r3, #12
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d1eb      	bne.n	80035a4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035cc:	4b27      	ldr	r3, [pc, #156]	; (800366c <HAL_RCC_ClockConfig+0x1c4>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 030f 	and.w	r3, r3, #15
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d210      	bcs.n	80035fc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035da:	4b24      	ldr	r3, [pc, #144]	; (800366c <HAL_RCC_ClockConfig+0x1c4>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f023 020f 	bic.w	r2, r3, #15
 80035e2:	4922      	ldr	r1, [pc, #136]	; (800366c <HAL_RCC_ClockConfig+0x1c4>)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ea:	4b20      	ldr	r3, [pc, #128]	; (800366c <HAL_RCC_ClockConfig+0x1c4>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	683a      	ldr	r2, [r7, #0]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d001      	beq.n	80035fc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e032      	b.n	8003662 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0304 	and.w	r3, r3, #4
 8003604:	2b00      	cmp	r3, #0
 8003606:	d008      	beq.n	800361a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003608:	4b19      	ldr	r3, [pc, #100]	; (8003670 <HAL_RCC_ClockConfig+0x1c8>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	4916      	ldr	r1, [pc, #88]	; (8003670 <HAL_RCC_ClockConfig+0x1c8>)
 8003616:	4313      	orrs	r3, r2
 8003618:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0308 	and.w	r3, r3, #8
 8003622:	2b00      	cmp	r3, #0
 8003624:	d009      	beq.n	800363a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003626:	4b12      	ldr	r3, [pc, #72]	; (8003670 <HAL_RCC_ClockConfig+0x1c8>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	490e      	ldr	r1, [pc, #56]	; (8003670 <HAL_RCC_ClockConfig+0x1c8>)
 8003636:	4313      	orrs	r3, r2
 8003638:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800363a:	f000 f821 	bl	8003680 <HAL_RCC_GetSysClockFreq>
 800363e:	4602      	mov	r2, r0
 8003640:	4b0b      	ldr	r3, [pc, #44]	; (8003670 <HAL_RCC_ClockConfig+0x1c8>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	091b      	lsrs	r3, r3, #4
 8003646:	f003 030f 	and.w	r3, r3, #15
 800364a:	490a      	ldr	r1, [pc, #40]	; (8003674 <HAL_RCC_ClockConfig+0x1cc>)
 800364c:	5ccb      	ldrb	r3, [r1, r3]
 800364e:	fa22 f303 	lsr.w	r3, r2, r3
 8003652:	4a09      	ldr	r2, [pc, #36]	; (8003678 <HAL_RCC_ClockConfig+0x1d0>)
 8003654:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003656:	4b09      	ldr	r3, [pc, #36]	; (800367c <HAL_RCC_ClockConfig+0x1d4>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4618      	mov	r0, r3
 800365c:	f7fd fe18 	bl	8001290 <HAL_InitTick>

  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	40023c00 	.word	0x40023c00
 8003670:	40023800 	.word	0x40023800
 8003674:	08006fb0 	.word	0x08006fb0
 8003678:	20000000 	.word	0x20000000
 800367c:	20000004 	.word	0x20000004

08003680 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003680:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003684:	b094      	sub	sp, #80	; 0x50
 8003686:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003688:	2300      	movs	r3, #0
 800368a:	647b      	str	r3, [r7, #68]	; 0x44
 800368c:	2300      	movs	r3, #0
 800368e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003690:	2300      	movs	r3, #0
 8003692:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003694:	2300      	movs	r3, #0
 8003696:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003698:	4b79      	ldr	r3, [pc, #484]	; (8003880 <HAL_RCC_GetSysClockFreq+0x200>)
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f003 030c 	and.w	r3, r3, #12
 80036a0:	2b08      	cmp	r3, #8
 80036a2:	d00d      	beq.n	80036c0 <HAL_RCC_GetSysClockFreq+0x40>
 80036a4:	2b08      	cmp	r3, #8
 80036a6:	f200 80e1 	bhi.w	800386c <HAL_RCC_GetSysClockFreq+0x1ec>
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d002      	beq.n	80036b4 <HAL_RCC_GetSysClockFreq+0x34>
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	d003      	beq.n	80036ba <HAL_RCC_GetSysClockFreq+0x3a>
 80036b2:	e0db      	b.n	800386c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036b4:	4b73      	ldr	r3, [pc, #460]	; (8003884 <HAL_RCC_GetSysClockFreq+0x204>)
 80036b6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036b8:	e0db      	b.n	8003872 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036ba:	4b73      	ldr	r3, [pc, #460]	; (8003888 <HAL_RCC_GetSysClockFreq+0x208>)
 80036bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036be:	e0d8      	b.n	8003872 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036c0:	4b6f      	ldr	r3, [pc, #444]	; (8003880 <HAL_RCC_GetSysClockFreq+0x200>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036c8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80036ca:	4b6d      	ldr	r3, [pc, #436]	; (8003880 <HAL_RCC_GetSysClockFreq+0x200>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d063      	beq.n	800379e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036d6:	4b6a      	ldr	r3, [pc, #424]	; (8003880 <HAL_RCC_GetSysClockFreq+0x200>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	099b      	lsrs	r3, r3, #6
 80036dc:	2200      	movs	r2, #0
 80036de:	63bb      	str	r3, [r7, #56]	; 0x38
 80036e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80036e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036e8:	633b      	str	r3, [r7, #48]	; 0x30
 80036ea:	2300      	movs	r3, #0
 80036ec:	637b      	str	r3, [r7, #52]	; 0x34
 80036ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80036f2:	4622      	mov	r2, r4
 80036f4:	462b      	mov	r3, r5
 80036f6:	f04f 0000 	mov.w	r0, #0
 80036fa:	f04f 0100 	mov.w	r1, #0
 80036fe:	0159      	lsls	r1, r3, #5
 8003700:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003704:	0150      	lsls	r0, r2, #5
 8003706:	4602      	mov	r2, r0
 8003708:	460b      	mov	r3, r1
 800370a:	4621      	mov	r1, r4
 800370c:	1a51      	subs	r1, r2, r1
 800370e:	6139      	str	r1, [r7, #16]
 8003710:	4629      	mov	r1, r5
 8003712:	eb63 0301 	sbc.w	r3, r3, r1
 8003716:	617b      	str	r3, [r7, #20]
 8003718:	f04f 0200 	mov.w	r2, #0
 800371c:	f04f 0300 	mov.w	r3, #0
 8003720:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003724:	4659      	mov	r1, fp
 8003726:	018b      	lsls	r3, r1, #6
 8003728:	4651      	mov	r1, sl
 800372a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800372e:	4651      	mov	r1, sl
 8003730:	018a      	lsls	r2, r1, #6
 8003732:	4651      	mov	r1, sl
 8003734:	ebb2 0801 	subs.w	r8, r2, r1
 8003738:	4659      	mov	r1, fp
 800373a:	eb63 0901 	sbc.w	r9, r3, r1
 800373e:	f04f 0200 	mov.w	r2, #0
 8003742:	f04f 0300 	mov.w	r3, #0
 8003746:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800374a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800374e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003752:	4690      	mov	r8, r2
 8003754:	4699      	mov	r9, r3
 8003756:	4623      	mov	r3, r4
 8003758:	eb18 0303 	adds.w	r3, r8, r3
 800375c:	60bb      	str	r3, [r7, #8]
 800375e:	462b      	mov	r3, r5
 8003760:	eb49 0303 	adc.w	r3, r9, r3
 8003764:	60fb      	str	r3, [r7, #12]
 8003766:	f04f 0200 	mov.w	r2, #0
 800376a:	f04f 0300 	mov.w	r3, #0
 800376e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003772:	4629      	mov	r1, r5
 8003774:	024b      	lsls	r3, r1, #9
 8003776:	4621      	mov	r1, r4
 8003778:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800377c:	4621      	mov	r1, r4
 800377e:	024a      	lsls	r2, r1, #9
 8003780:	4610      	mov	r0, r2
 8003782:	4619      	mov	r1, r3
 8003784:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003786:	2200      	movs	r2, #0
 8003788:	62bb      	str	r3, [r7, #40]	; 0x28
 800378a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800378c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003790:	f7fc fd56 	bl	8000240 <__aeabi_uldivmod>
 8003794:	4602      	mov	r2, r0
 8003796:	460b      	mov	r3, r1
 8003798:	4613      	mov	r3, r2
 800379a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800379c:	e058      	b.n	8003850 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800379e:	4b38      	ldr	r3, [pc, #224]	; (8003880 <HAL_RCC_GetSysClockFreq+0x200>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	099b      	lsrs	r3, r3, #6
 80037a4:	2200      	movs	r2, #0
 80037a6:	4618      	mov	r0, r3
 80037a8:	4611      	mov	r1, r2
 80037aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80037ae:	623b      	str	r3, [r7, #32]
 80037b0:	2300      	movs	r3, #0
 80037b2:	627b      	str	r3, [r7, #36]	; 0x24
 80037b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80037b8:	4642      	mov	r2, r8
 80037ba:	464b      	mov	r3, r9
 80037bc:	f04f 0000 	mov.w	r0, #0
 80037c0:	f04f 0100 	mov.w	r1, #0
 80037c4:	0159      	lsls	r1, r3, #5
 80037c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037ca:	0150      	lsls	r0, r2, #5
 80037cc:	4602      	mov	r2, r0
 80037ce:	460b      	mov	r3, r1
 80037d0:	4641      	mov	r1, r8
 80037d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80037d6:	4649      	mov	r1, r9
 80037d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80037dc:	f04f 0200 	mov.w	r2, #0
 80037e0:	f04f 0300 	mov.w	r3, #0
 80037e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80037e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80037ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80037f0:	ebb2 040a 	subs.w	r4, r2, sl
 80037f4:	eb63 050b 	sbc.w	r5, r3, fp
 80037f8:	f04f 0200 	mov.w	r2, #0
 80037fc:	f04f 0300 	mov.w	r3, #0
 8003800:	00eb      	lsls	r3, r5, #3
 8003802:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003806:	00e2      	lsls	r2, r4, #3
 8003808:	4614      	mov	r4, r2
 800380a:	461d      	mov	r5, r3
 800380c:	4643      	mov	r3, r8
 800380e:	18e3      	adds	r3, r4, r3
 8003810:	603b      	str	r3, [r7, #0]
 8003812:	464b      	mov	r3, r9
 8003814:	eb45 0303 	adc.w	r3, r5, r3
 8003818:	607b      	str	r3, [r7, #4]
 800381a:	f04f 0200 	mov.w	r2, #0
 800381e:	f04f 0300 	mov.w	r3, #0
 8003822:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003826:	4629      	mov	r1, r5
 8003828:	028b      	lsls	r3, r1, #10
 800382a:	4621      	mov	r1, r4
 800382c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003830:	4621      	mov	r1, r4
 8003832:	028a      	lsls	r2, r1, #10
 8003834:	4610      	mov	r0, r2
 8003836:	4619      	mov	r1, r3
 8003838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800383a:	2200      	movs	r2, #0
 800383c:	61bb      	str	r3, [r7, #24]
 800383e:	61fa      	str	r2, [r7, #28]
 8003840:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003844:	f7fc fcfc 	bl	8000240 <__aeabi_uldivmod>
 8003848:	4602      	mov	r2, r0
 800384a:	460b      	mov	r3, r1
 800384c:	4613      	mov	r3, r2
 800384e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003850:	4b0b      	ldr	r3, [pc, #44]	; (8003880 <HAL_RCC_GetSysClockFreq+0x200>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	0c1b      	lsrs	r3, r3, #16
 8003856:	f003 0303 	and.w	r3, r3, #3
 800385a:	3301      	adds	r3, #1
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003860:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003862:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003864:	fbb2 f3f3 	udiv	r3, r2, r3
 8003868:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800386a:	e002      	b.n	8003872 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800386c:	4b05      	ldr	r3, [pc, #20]	; (8003884 <HAL_RCC_GetSysClockFreq+0x204>)
 800386e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003870:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003874:	4618      	mov	r0, r3
 8003876:	3750      	adds	r7, #80	; 0x50
 8003878:	46bd      	mov	sp, r7
 800387a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800387e:	bf00      	nop
 8003880:	40023800 	.word	0x40023800
 8003884:	00f42400 	.word	0x00f42400
 8003888:	007a1200 	.word	0x007a1200

0800388c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003890:	4b03      	ldr	r3, [pc, #12]	; (80038a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003892:	681b      	ldr	r3, [r3, #0]
}
 8003894:	4618      	mov	r0, r3
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	20000000 	.word	0x20000000

080038a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038a8:	f7ff fff0 	bl	800388c <HAL_RCC_GetHCLKFreq>
 80038ac:	4602      	mov	r2, r0
 80038ae:	4b05      	ldr	r3, [pc, #20]	; (80038c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	0a9b      	lsrs	r3, r3, #10
 80038b4:	f003 0307 	and.w	r3, r3, #7
 80038b8:	4903      	ldr	r1, [pc, #12]	; (80038c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038ba:	5ccb      	ldrb	r3, [r1, r3]
 80038bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	40023800 	.word	0x40023800
 80038c8:	08006fc0 	.word	0x08006fc0

080038cc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	220f      	movs	r2, #15
 80038da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80038dc:	4b12      	ldr	r3, [pc, #72]	; (8003928 <HAL_RCC_GetClockConfig+0x5c>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f003 0203 	and.w	r2, r3, #3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80038e8:	4b0f      	ldr	r3, [pc, #60]	; (8003928 <HAL_RCC_GetClockConfig+0x5c>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80038f4:	4b0c      	ldr	r3, [pc, #48]	; (8003928 <HAL_RCC_GetClockConfig+0x5c>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003900:	4b09      	ldr	r3, [pc, #36]	; (8003928 <HAL_RCC_GetClockConfig+0x5c>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	08db      	lsrs	r3, r3, #3
 8003906:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800390e:	4b07      	ldr	r3, [pc, #28]	; (800392c <HAL_RCC_GetClockConfig+0x60>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 020f 	and.w	r2, r3, #15
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	601a      	str	r2, [r3, #0]
}
 800391a:	bf00      	nop
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	40023800 	.word	0x40023800
 800392c:	40023c00 	.word	0x40023c00

08003930 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e049      	b.n	80039d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d106      	bne.n	800395c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 f841 	bl	80039de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2202      	movs	r2, #2
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	3304      	adds	r3, #4
 800396c:	4619      	mov	r1, r3
 800396e:	4610      	mov	r0, r2
 8003970:	f000 fa00 	bl	8003d74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80039de:	b480      	push	{r7}
 80039e0:	b083      	sub	sp, #12
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80039e6:	bf00      	nop
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
	...

080039f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d001      	beq.n	8003a0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e054      	b.n	8003ab6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2202      	movs	r2, #2
 8003a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68da      	ldr	r2, [r3, #12]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f042 0201 	orr.w	r2, r2, #1
 8003a22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a26      	ldr	r2, [pc, #152]	; (8003ac4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d022      	beq.n	8003a74 <HAL_TIM_Base_Start_IT+0x80>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a36:	d01d      	beq.n	8003a74 <HAL_TIM_Base_Start_IT+0x80>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a22      	ldr	r2, [pc, #136]	; (8003ac8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d018      	beq.n	8003a74 <HAL_TIM_Base_Start_IT+0x80>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a21      	ldr	r2, [pc, #132]	; (8003acc <HAL_TIM_Base_Start_IT+0xd8>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d013      	beq.n	8003a74 <HAL_TIM_Base_Start_IT+0x80>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a1f      	ldr	r2, [pc, #124]	; (8003ad0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d00e      	beq.n	8003a74 <HAL_TIM_Base_Start_IT+0x80>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a1e      	ldr	r2, [pc, #120]	; (8003ad4 <HAL_TIM_Base_Start_IT+0xe0>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d009      	beq.n	8003a74 <HAL_TIM_Base_Start_IT+0x80>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a1c      	ldr	r2, [pc, #112]	; (8003ad8 <HAL_TIM_Base_Start_IT+0xe4>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d004      	beq.n	8003a74 <HAL_TIM_Base_Start_IT+0x80>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a1b      	ldr	r2, [pc, #108]	; (8003adc <HAL_TIM_Base_Start_IT+0xe8>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d115      	bne.n	8003aa0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	689a      	ldr	r2, [r3, #8]
 8003a7a:	4b19      	ldr	r3, [pc, #100]	; (8003ae0 <HAL_TIM_Base_Start_IT+0xec>)
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2b06      	cmp	r3, #6
 8003a84:	d015      	beq.n	8003ab2 <HAL_TIM_Base_Start_IT+0xbe>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a8c:	d011      	beq.n	8003ab2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f042 0201 	orr.w	r2, r2, #1
 8003a9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a9e:	e008      	b.n	8003ab2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f042 0201 	orr.w	r2, r2, #1
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	e000      	b.n	8003ab4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ab2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3714      	adds	r7, #20
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	40010000 	.word	0x40010000
 8003ac8:	40000400 	.word	0x40000400
 8003acc:	40000800 	.word	0x40000800
 8003ad0:	40000c00 	.word	0x40000c00
 8003ad4:	40010400 	.word	0x40010400
 8003ad8:	40014000 	.word	0x40014000
 8003adc:	40001800 	.word	0x40001800
 8003ae0:	00010007 	.word	0x00010007

08003ae4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d122      	bne.n	8003b40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d11b      	bne.n	8003b40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f06f 0202 	mvn.w	r2, #2
 8003b10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2201      	movs	r2, #1
 8003b16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	f003 0303 	and.w	r3, r3, #3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d003      	beq.n	8003b2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f905 	bl	8003d36 <HAL_TIM_IC_CaptureCallback>
 8003b2c:	e005      	b.n	8003b3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f8f7 	bl	8003d22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 f908 	bl	8003d4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	f003 0304 	and.w	r3, r3, #4
 8003b4a:	2b04      	cmp	r3, #4
 8003b4c:	d122      	bne.n	8003b94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	f003 0304 	and.w	r3, r3, #4
 8003b58:	2b04      	cmp	r3, #4
 8003b5a:	d11b      	bne.n	8003b94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f06f 0204 	mvn.w	r2, #4
 8003b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2202      	movs	r2, #2
 8003b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d003      	beq.n	8003b82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f8db 	bl	8003d36 <HAL_TIM_IC_CaptureCallback>
 8003b80:	e005      	b.n	8003b8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f8cd 	bl	8003d22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 f8de 	bl	8003d4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	f003 0308 	and.w	r3, r3, #8
 8003b9e:	2b08      	cmp	r3, #8
 8003ba0:	d122      	bne.n	8003be8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	f003 0308 	and.w	r3, r3, #8
 8003bac:	2b08      	cmp	r3, #8
 8003bae:	d11b      	bne.n	8003be8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f06f 0208 	mvn.w	r2, #8
 8003bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2204      	movs	r2, #4
 8003bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	f003 0303 	and.w	r3, r3, #3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d003      	beq.n	8003bd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f8b1 	bl	8003d36 <HAL_TIM_IC_CaptureCallback>
 8003bd4:	e005      	b.n	8003be2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f8a3 	bl	8003d22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 f8b4 	bl	8003d4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	f003 0310 	and.w	r3, r3, #16
 8003bf2:	2b10      	cmp	r3, #16
 8003bf4:	d122      	bne.n	8003c3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	f003 0310 	and.w	r3, r3, #16
 8003c00:	2b10      	cmp	r3, #16
 8003c02:	d11b      	bne.n	8003c3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f06f 0210 	mvn.w	r2, #16
 8003c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2208      	movs	r2, #8
 8003c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	69db      	ldr	r3, [r3, #28]
 8003c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d003      	beq.n	8003c2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f887 	bl	8003d36 <HAL_TIM_IC_CaptureCallback>
 8003c28:	e005      	b.n	8003c36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f879 	bl	8003d22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 f88a 	bl	8003d4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d10e      	bne.n	8003c68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	f003 0301 	and.w	r3, r3, #1
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d107      	bne.n	8003c68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f06f 0201 	mvn.w	r2, #1
 8003c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7fd f9b8 	bl	8000fd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c72:	2b80      	cmp	r3, #128	; 0x80
 8003c74:	d10e      	bne.n	8003c94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c80:	2b80      	cmp	r3, #128	; 0x80
 8003c82:	d107      	bne.n	8003c94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 f91a 	bl	8003ec8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ca2:	d10e      	bne.n	8003cc2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cae:	2b80      	cmp	r3, #128	; 0x80
 8003cb0:	d107      	bne.n	8003cc2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 f90d 	bl	8003edc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ccc:	2b40      	cmp	r3, #64	; 0x40
 8003cce:	d10e      	bne.n	8003cee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cda:	2b40      	cmp	r3, #64	; 0x40
 8003cdc:	d107      	bne.n	8003cee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 f838 	bl	8003d5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	f003 0320 	and.w	r3, r3, #32
 8003cf8:	2b20      	cmp	r3, #32
 8003cfa:	d10e      	bne.n	8003d1a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	f003 0320 	and.w	r3, r3, #32
 8003d06:	2b20      	cmp	r3, #32
 8003d08:	d107      	bne.n	8003d1a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f06f 0220 	mvn.w	r2, #32
 8003d12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 f8cd 	bl	8003eb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d1a:	bf00      	nop
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d22:	b480      	push	{r7}
 8003d24:	b083      	sub	sp, #12
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d2a:	bf00      	nop
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d36:	b480      	push	{r7}
 8003d38:	b083      	sub	sp, #12
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d3e:	bf00      	nop
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b083      	sub	sp, #12
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d52:	bf00      	nop
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b083      	sub	sp, #12
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d66:	bf00      	nop
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
	...

08003d74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a40      	ldr	r2, [pc, #256]	; (8003e88 <TIM_Base_SetConfig+0x114>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d013      	beq.n	8003db4 <TIM_Base_SetConfig+0x40>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d92:	d00f      	beq.n	8003db4 <TIM_Base_SetConfig+0x40>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a3d      	ldr	r2, [pc, #244]	; (8003e8c <TIM_Base_SetConfig+0x118>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d00b      	beq.n	8003db4 <TIM_Base_SetConfig+0x40>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a3c      	ldr	r2, [pc, #240]	; (8003e90 <TIM_Base_SetConfig+0x11c>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d007      	beq.n	8003db4 <TIM_Base_SetConfig+0x40>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a3b      	ldr	r2, [pc, #236]	; (8003e94 <TIM_Base_SetConfig+0x120>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d003      	beq.n	8003db4 <TIM_Base_SetConfig+0x40>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a3a      	ldr	r2, [pc, #232]	; (8003e98 <TIM_Base_SetConfig+0x124>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d108      	bne.n	8003dc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a2f      	ldr	r2, [pc, #188]	; (8003e88 <TIM_Base_SetConfig+0x114>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d02b      	beq.n	8003e26 <TIM_Base_SetConfig+0xb2>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd4:	d027      	beq.n	8003e26 <TIM_Base_SetConfig+0xb2>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a2c      	ldr	r2, [pc, #176]	; (8003e8c <TIM_Base_SetConfig+0x118>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d023      	beq.n	8003e26 <TIM_Base_SetConfig+0xb2>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a2b      	ldr	r2, [pc, #172]	; (8003e90 <TIM_Base_SetConfig+0x11c>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d01f      	beq.n	8003e26 <TIM_Base_SetConfig+0xb2>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a2a      	ldr	r2, [pc, #168]	; (8003e94 <TIM_Base_SetConfig+0x120>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d01b      	beq.n	8003e26 <TIM_Base_SetConfig+0xb2>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a29      	ldr	r2, [pc, #164]	; (8003e98 <TIM_Base_SetConfig+0x124>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d017      	beq.n	8003e26 <TIM_Base_SetConfig+0xb2>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a28      	ldr	r2, [pc, #160]	; (8003e9c <TIM_Base_SetConfig+0x128>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d013      	beq.n	8003e26 <TIM_Base_SetConfig+0xb2>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a27      	ldr	r2, [pc, #156]	; (8003ea0 <TIM_Base_SetConfig+0x12c>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d00f      	beq.n	8003e26 <TIM_Base_SetConfig+0xb2>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a26      	ldr	r2, [pc, #152]	; (8003ea4 <TIM_Base_SetConfig+0x130>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d00b      	beq.n	8003e26 <TIM_Base_SetConfig+0xb2>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a25      	ldr	r2, [pc, #148]	; (8003ea8 <TIM_Base_SetConfig+0x134>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d007      	beq.n	8003e26 <TIM_Base_SetConfig+0xb2>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a24      	ldr	r2, [pc, #144]	; (8003eac <TIM_Base_SetConfig+0x138>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d003      	beq.n	8003e26 <TIM_Base_SetConfig+0xb2>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a23      	ldr	r2, [pc, #140]	; (8003eb0 <TIM_Base_SetConfig+0x13c>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d108      	bne.n	8003e38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	689a      	ldr	r2, [r3, #8]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a0a      	ldr	r2, [pc, #40]	; (8003e88 <TIM_Base_SetConfig+0x114>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d003      	beq.n	8003e6c <TIM_Base_SetConfig+0xf8>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a0c      	ldr	r2, [pc, #48]	; (8003e98 <TIM_Base_SetConfig+0x124>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d103      	bne.n	8003e74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	691a      	ldr	r2, [r3, #16]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	615a      	str	r2, [r3, #20]
}
 8003e7a:	bf00      	nop
 8003e7c:	3714      	adds	r7, #20
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	40010000 	.word	0x40010000
 8003e8c:	40000400 	.word	0x40000400
 8003e90:	40000800 	.word	0x40000800
 8003e94:	40000c00 	.word	0x40000c00
 8003e98:	40010400 	.word	0x40010400
 8003e9c:	40014000 	.word	0x40014000
 8003ea0:	40014400 	.word	0x40014400
 8003ea4:	40014800 	.word	0x40014800
 8003ea8:	40001800 	.word	0x40001800
 8003eac:	40001c00 	.word	0x40001c00
 8003eb0:	40002000 	.word	0x40002000

08003eb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003ef0:	b480      	push	{r7}
 8003ef2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003ef4:	bf00      	nop
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
	...

08003f00 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f06:	f3ef 8305 	mrs	r3, IPSR
 8003f0a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f0c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10f      	bne.n	8003f32 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f12:	f3ef 8310 	mrs	r3, PRIMASK
 8003f16:	607b      	str	r3, [r7, #4]
  return(result);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d105      	bne.n	8003f2a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f1e:	f3ef 8311 	mrs	r3, BASEPRI
 8003f22:	603b      	str	r3, [r7, #0]
  return(result);
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d007      	beq.n	8003f3a <osKernelInitialize+0x3a>
 8003f2a:	4b0e      	ldr	r3, [pc, #56]	; (8003f64 <osKernelInitialize+0x64>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d103      	bne.n	8003f3a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003f32:	f06f 0305 	mvn.w	r3, #5
 8003f36:	60fb      	str	r3, [r7, #12]
 8003f38:	e00c      	b.n	8003f54 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003f3a:	4b0a      	ldr	r3, [pc, #40]	; (8003f64 <osKernelInitialize+0x64>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d105      	bne.n	8003f4e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003f42:	4b08      	ldr	r3, [pc, #32]	; (8003f64 <osKernelInitialize+0x64>)
 8003f44:	2201      	movs	r2, #1
 8003f46:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	60fb      	str	r3, [r7, #12]
 8003f4c:	e002      	b.n	8003f54 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f52:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003f54:	68fb      	ldr	r3, [r7, #12]
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	20000280 	.word	0x20000280

08003f68 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f6e:	f3ef 8305 	mrs	r3, IPSR
 8003f72:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f74:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10f      	bne.n	8003f9a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f7a:	f3ef 8310 	mrs	r3, PRIMASK
 8003f7e:	607b      	str	r3, [r7, #4]
  return(result);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d105      	bne.n	8003f92 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f86:	f3ef 8311 	mrs	r3, BASEPRI
 8003f8a:	603b      	str	r3, [r7, #0]
  return(result);
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d007      	beq.n	8003fa2 <osKernelStart+0x3a>
 8003f92:	4b0f      	ldr	r3, [pc, #60]	; (8003fd0 <osKernelStart+0x68>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d103      	bne.n	8003fa2 <osKernelStart+0x3a>
    stat = osErrorISR;
 8003f9a:	f06f 0305 	mvn.w	r3, #5
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	e010      	b.n	8003fc4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003fa2:	4b0b      	ldr	r3, [pc, #44]	; (8003fd0 <osKernelStart+0x68>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d109      	bne.n	8003fbe <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003faa:	f7ff ffa1 	bl	8003ef0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003fae:	4b08      	ldr	r3, [pc, #32]	; (8003fd0 <osKernelStart+0x68>)
 8003fb0:	2202      	movs	r2, #2
 8003fb2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003fb4:	f001 f9e6 	bl	8005384 <vTaskStartScheduler>
      stat = osOK;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	60fb      	str	r3, [r7, #12]
 8003fbc:	e002      	b.n	8003fc4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8003fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8003fc2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3710      	adds	r7, #16
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	20000280 	.word	0x20000280

08003fd4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b090      	sub	sp, #64	; 0x40
 8003fd8:	af04      	add	r7, sp, #16
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fe4:	f3ef 8305 	mrs	r3, IPSR
 8003fe8:	61fb      	str	r3, [r7, #28]
  return(result);
 8003fea:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f040 808f 	bne.w	8004110 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ff2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ff6:	61bb      	str	r3, [r7, #24]
  return(result);
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d105      	bne.n	800400a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003ffe:	f3ef 8311 	mrs	r3, BASEPRI
 8004002:	617b      	str	r3, [r7, #20]
  return(result);
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <osThreadNew+0x3e>
 800400a:	4b44      	ldr	r3, [pc, #272]	; (800411c <osThreadNew+0x148>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2b02      	cmp	r3, #2
 8004010:	d07e      	beq.n	8004110 <osThreadNew+0x13c>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d07b      	beq.n	8004110 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004018:	2380      	movs	r3, #128	; 0x80
 800401a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800401c:	2318      	movs	r3, #24
 800401e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8004020:	2300      	movs	r3, #0
 8004022:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004024:	f04f 33ff 	mov.w	r3, #4294967295
 8004028:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d045      	beq.n	80040bc <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d002      	beq.n	800403e <osThreadNew+0x6a>
        name = attr->name;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d002      	beq.n	800404c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800404c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404e:	2b00      	cmp	r3, #0
 8004050:	d008      	beq.n	8004064 <osThreadNew+0x90>
 8004052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004054:	2b38      	cmp	r3, #56	; 0x38
 8004056:	d805      	bhi.n	8004064 <osThreadNew+0x90>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f003 0301 	and.w	r3, r3, #1
 8004060:	2b00      	cmp	r3, #0
 8004062:	d001      	beq.n	8004068 <osThreadNew+0x94>
        return (NULL);
 8004064:	2300      	movs	r3, #0
 8004066:	e054      	b.n	8004112 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	695b      	ldr	r3, [r3, #20]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d003      	beq.n	8004078 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	089b      	lsrs	r3, r3, #2
 8004076:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00e      	beq.n	800409e <osThreadNew+0xca>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	2bbb      	cmp	r3, #187	; 0xbb
 8004086:	d90a      	bls.n	800409e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800408c:	2b00      	cmp	r3, #0
 800408e:	d006      	beq.n	800409e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	695b      	ldr	r3, [r3, #20]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d002      	beq.n	800409e <osThreadNew+0xca>
        mem = 1;
 8004098:	2301      	movs	r3, #1
 800409a:	623b      	str	r3, [r7, #32]
 800409c:	e010      	b.n	80040c0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10c      	bne.n	80040c0 <osThreadNew+0xec>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d108      	bne.n	80040c0 <osThreadNew+0xec>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d104      	bne.n	80040c0 <osThreadNew+0xec>
          mem = 0;
 80040b6:	2300      	movs	r3, #0
 80040b8:	623b      	str	r3, [r7, #32]
 80040ba:	e001      	b.n	80040c0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80040bc:	2300      	movs	r3, #0
 80040be:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80040c0:	6a3b      	ldr	r3, [r7, #32]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d110      	bne.n	80040e8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80040ce:	9202      	str	r2, [sp, #8]
 80040d0:	9301      	str	r3, [sp, #4]
 80040d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d4:	9300      	str	r3, [sp, #0]
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040dc:	68f8      	ldr	r0, [r7, #12]
 80040de:	f000 fe7f 	bl	8004de0 <xTaskCreateStatic>
 80040e2:	4603      	mov	r3, r0
 80040e4:	613b      	str	r3, [r7, #16]
 80040e6:	e013      	b.n	8004110 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80040e8:	6a3b      	ldr	r3, [r7, #32]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d110      	bne.n	8004110 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80040ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	f107 0310 	add.w	r3, r7, #16
 80040f6:	9301      	str	r3, [sp, #4]
 80040f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fa:	9300      	str	r3, [sp, #0]
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f000 fed0 	bl	8004ea6 <xTaskCreate>
 8004106:	4603      	mov	r3, r0
 8004108:	2b01      	cmp	r3, #1
 800410a:	d001      	beq.n	8004110 <osThreadNew+0x13c>
          hTask = NULL;
 800410c:	2300      	movs	r3, #0
 800410e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004110:	693b      	ldr	r3, [r7, #16]
}
 8004112:	4618      	mov	r0, r3
 8004114:	3730      	adds	r7, #48	; 0x30
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	20000280 	.word	0x20000280

08004120 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8004120:	b580      	push	{r7, lr}
 8004122:	b088      	sub	sp, #32
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800412c:	f3ef 8305 	mrs	r3, IPSR
 8004130:	613b      	str	r3, [r7, #16]
  return(result);
 8004132:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10f      	bne.n	8004158 <osThreadTerminate+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004138:	f3ef 8310 	mrs	r3, PRIMASK
 800413c:	60fb      	str	r3, [r7, #12]
  return(result);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d105      	bne.n	8004150 <osThreadTerminate+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004144:	f3ef 8311 	mrs	r3, BASEPRI
 8004148:	60bb      	str	r3, [r7, #8]
  return(result);
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d007      	beq.n	8004160 <osThreadTerminate+0x40>
 8004150:	4b12      	ldr	r3, [pc, #72]	; (800419c <osThreadTerminate+0x7c>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2b02      	cmp	r3, #2
 8004156:	d103      	bne.n	8004160 <osThreadTerminate+0x40>
    stat = osErrorISR;
 8004158:	f06f 0305 	mvn.w	r3, #5
 800415c:	61fb      	str	r3, [r7, #28]
 800415e:	e017      	b.n	8004190 <osThreadTerminate+0x70>
  }
  else if (hTask == NULL) {
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d103      	bne.n	800416e <osThreadTerminate+0x4e>
    stat = osErrorParameter;
 8004166:	f06f 0303 	mvn.w	r3, #3
 800416a:	61fb      	str	r3, [r7, #28]
 800416c:	e010      	b.n	8004190 <osThreadTerminate+0x70>
  }
  else {
    tstate = eTaskGetState (hTask);
 800416e:	69b8      	ldr	r0, [r7, #24]
 8004170:	f001 f8a0 	bl	80052b4 <eTaskGetState>
 8004174:	4603      	mov	r3, r0
 8004176:	75fb      	strb	r3, [r7, #23]

    if (tstate != eDeleted) {
 8004178:	7dfb      	ldrb	r3, [r7, #23]
 800417a:	2b04      	cmp	r3, #4
 800417c:	d005      	beq.n	800418a <osThreadTerminate+0x6a>
      stat = osOK;
 800417e:	2300      	movs	r3, #0
 8004180:	61fb      	str	r3, [r7, #28]
      vTaskDelete (hTask);
 8004182:	69b8      	ldr	r0, [r7, #24]
 8004184:	f000 ffec 	bl	8005160 <vTaskDelete>
 8004188:	e002      	b.n	8004190 <osThreadTerminate+0x70>
    } else {
      stat = osErrorResource;
 800418a:	f06f 0302 	mvn.w	r3, #2
 800418e:	61fb      	str	r3, [r7, #28]
  }
#else
  stat = osError;
#endif

  return (stat);
 8004190:	69fb      	ldr	r3, [r7, #28]
}
 8004192:	4618      	mov	r0, r3
 8004194:	3720      	adds	r7, #32
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	20000280 	.word	0x20000280

080041a0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041a8:	f3ef 8305 	mrs	r3, IPSR
 80041ac:	613b      	str	r3, [r7, #16]
  return(result);
 80041ae:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d10f      	bne.n	80041d4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041b4:	f3ef 8310 	mrs	r3, PRIMASK
 80041b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d105      	bne.n	80041cc <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80041c0:	f3ef 8311 	mrs	r3, BASEPRI
 80041c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d007      	beq.n	80041dc <osDelay+0x3c>
 80041cc:	4b0a      	ldr	r3, [pc, #40]	; (80041f8 <osDelay+0x58>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d103      	bne.n	80041dc <osDelay+0x3c>
    stat = osErrorISR;
 80041d4:	f06f 0305 	mvn.w	r3, #5
 80041d8:	617b      	str	r3, [r7, #20]
 80041da:	e007      	b.n	80041ec <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80041dc:	2300      	movs	r3, #0
 80041de:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d002      	beq.n	80041ec <osDelay+0x4c>
      vTaskDelay(ticks);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f001 f82e 	bl	8005248 <vTaskDelay>
    }
  }

  return (stat);
 80041ec:	697b      	ldr	r3, [r7, #20]
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3718      	adds	r7, #24
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	20000280 	.word	0x20000280

080041fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80041fc:	b480      	push	{r7}
 80041fe:	b085      	sub	sp, #20
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	4a07      	ldr	r2, [pc, #28]	; (8004228 <vApplicationGetIdleTaskMemory+0x2c>)
 800420c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	4a06      	ldr	r2, [pc, #24]	; (800422c <vApplicationGetIdleTaskMemory+0x30>)
 8004212:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2280      	movs	r2, #128	; 0x80
 8004218:	601a      	str	r2, [r3, #0]
}
 800421a:	bf00      	nop
 800421c:	3714      	adds	r7, #20
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	20000284 	.word	0x20000284
 800422c:	20000340 	.word	0x20000340

08004230 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	4a07      	ldr	r2, [pc, #28]	; (800425c <vApplicationGetTimerTaskMemory+0x2c>)
 8004240:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	4a06      	ldr	r2, [pc, #24]	; (8004260 <vApplicationGetTimerTaskMemory+0x30>)
 8004246:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800424e:	601a      	str	r2, [r3, #0]
}
 8004250:	bf00      	nop
 8004252:	3714      	adds	r7, #20
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	20000540 	.word	0x20000540
 8004260:	200005fc 	.word	0x200005fc

08004264 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f103 0208 	add.w	r2, r3, #8
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f04f 32ff 	mov.w	r2, #4294967295
 800427c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f103 0208 	add.w	r2, r3, #8
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f103 0208 	add.w	r2, r3, #8
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004298:	bf00      	nop
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80042b2:	bf00      	nop
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80042be:	b480      	push	{r7}
 80042c0:	b085      	sub	sp, #20
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
 80042c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	689a      	ldr	r2, [r3, #8]
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	683a      	ldr	r2, [r7, #0]
 80042e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	683a      	ldr	r2, [r7, #0]
 80042e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	1c5a      	adds	r2, r3, #1
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	601a      	str	r2, [r3, #0]
}
 80042fa:	bf00      	nop
 80042fc:	3714      	adds	r7, #20
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004306:	b480      	push	{r7}
 8004308:	b085      	sub	sp, #20
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
 800430e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800431c:	d103      	bne.n	8004326 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	60fb      	str	r3, [r7, #12]
 8004324:	e00c      	b.n	8004340 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	3308      	adds	r3, #8
 800432a:	60fb      	str	r3, [r7, #12]
 800432c:	e002      	b.n	8004334 <vListInsert+0x2e>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68ba      	ldr	r2, [r7, #8]
 800433c:	429a      	cmp	r2, r3
 800433e:	d2f6      	bcs.n	800432e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	685a      	ldr	r2, [r3, #4]
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	683a      	ldr	r2, [r7, #0]
 800434e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	683a      	ldr	r2, [r7, #0]
 800435a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	1c5a      	adds	r2, r3, #1
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	601a      	str	r2, [r3, #0]
}
 800436c:	bf00      	nop
 800436e:	3714      	adds	r7, #20
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	6892      	ldr	r2, [r2, #8]
 800438e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	6852      	ldr	r2, [r2, #4]
 8004398:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d103      	bne.n	80043ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689a      	ldr	r2, [r3, #8]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	1e5a      	subs	r2, r3, #1
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3714      	adds	r7, #20
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d10c      	bne.n	80043fa <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80043e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e4:	b672      	cpsid	i
 80043e6:	f383 8811 	msr	BASEPRI, r3
 80043ea:	f3bf 8f6f 	isb	sy
 80043ee:	f3bf 8f4f 	dsb	sy
 80043f2:	b662      	cpsie	i
 80043f4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80043f6:	bf00      	nop
 80043f8:	e7fe      	b.n	80043f8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80043fa:	f002 f97f 	bl	80066fc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004406:	68f9      	ldr	r1, [r7, #12]
 8004408:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800440a:	fb01 f303 	mul.w	r3, r1, r3
 800440e:	441a      	add	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800442a:	3b01      	subs	r3, #1
 800442c:	68f9      	ldr	r1, [r7, #12]
 800442e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004430:	fb01 f303 	mul.w	r3, r1, r3
 8004434:	441a      	add	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	22ff      	movs	r2, #255	; 0xff
 800443e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	22ff      	movs	r2, #255	; 0xff
 8004446:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d114      	bne.n	800447a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d01a      	beq.n	800448e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	3310      	adds	r3, #16
 800445c:	4618      	mov	r0, r3
 800445e:	f001 fa39 	bl	80058d4 <xTaskRemoveFromEventList>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d012      	beq.n	800448e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004468:	4b0c      	ldr	r3, [pc, #48]	; (800449c <xQueueGenericReset+0xd0>)
 800446a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800446e:	601a      	str	r2, [r3, #0]
 8004470:	f3bf 8f4f 	dsb	sy
 8004474:	f3bf 8f6f 	isb	sy
 8004478:	e009      	b.n	800448e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	3310      	adds	r3, #16
 800447e:	4618      	mov	r0, r3
 8004480:	f7ff fef0 	bl	8004264 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	3324      	adds	r3, #36	; 0x24
 8004488:	4618      	mov	r0, r3
 800448a:	f7ff feeb 	bl	8004264 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800448e:	f002 f969 	bl	8006764 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004492:	2301      	movs	r3, #1
}
 8004494:	4618      	mov	r0, r3
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	e000ed04 	.word	0xe000ed04

080044a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b08e      	sub	sp, #56	; 0x38
 80044a4:	af02      	add	r7, sp, #8
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
 80044ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10c      	bne.n	80044ce <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80044b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b8:	b672      	cpsid	i
 80044ba:	f383 8811 	msr	BASEPRI, r3
 80044be:	f3bf 8f6f 	isb	sy
 80044c2:	f3bf 8f4f 	dsb	sy
 80044c6:	b662      	cpsie	i
 80044c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80044ca:	bf00      	nop
 80044cc:	e7fe      	b.n	80044cc <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10c      	bne.n	80044ee <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80044d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d8:	b672      	cpsid	i
 80044da:	f383 8811 	msr	BASEPRI, r3
 80044de:	f3bf 8f6f 	isb	sy
 80044e2:	f3bf 8f4f 	dsb	sy
 80044e6:	b662      	cpsie	i
 80044e8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80044ea:	bf00      	nop
 80044ec:	e7fe      	b.n	80044ec <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d002      	beq.n	80044fa <xQueueGenericCreateStatic+0x5a>
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d001      	beq.n	80044fe <xQueueGenericCreateStatic+0x5e>
 80044fa:	2301      	movs	r3, #1
 80044fc:	e000      	b.n	8004500 <xQueueGenericCreateStatic+0x60>
 80044fe:	2300      	movs	r3, #0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10c      	bne.n	800451e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8004504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004508:	b672      	cpsid	i
 800450a:	f383 8811 	msr	BASEPRI, r3
 800450e:	f3bf 8f6f 	isb	sy
 8004512:	f3bf 8f4f 	dsb	sy
 8004516:	b662      	cpsie	i
 8004518:	623b      	str	r3, [r7, #32]
}
 800451a:	bf00      	nop
 800451c:	e7fe      	b.n	800451c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d102      	bne.n	800452a <xQueueGenericCreateStatic+0x8a>
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <xQueueGenericCreateStatic+0x8e>
 800452a:	2301      	movs	r3, #1
 800452c:	e000      	b.n	8004530 <xQueueGenericCreateStatic+0x90>
 800452e:	2300      	movs	r3, #0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10c      	bne.n	800454e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8004534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004538:	b672      	cpsid	i
 800453a:	f383 8811 	msr	BASEPRI, r3
 800453e:	f3bf 8f6f 	isb	sy
 8004542:	f3bf 8f4f 	dsb	sy
 8004546:	b662      	cpsie	i
 8004548:	61fb      	str	r3, [r7, #28]
}
 800454a:	bf00      	nop
 800454c:	e7fe      	b.n	800454c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800454e:	2350      	movs	r3, #80	; 0x50
 8004550:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	2b50      	cmp	r3, #80	; 0x50
 8004556:	d00c      	beq.n	8004572 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8004558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800455c:	b672      	cpsid	i
 800455e:	f383 8811 	msr	BASEPRI, r3
 8004562:	f3bf 8f6f 	isb	sy
 8004566:	f3bf 8f4f 	dsb	sy
 800456a:	b662      	cpsie	i
 800456c:	61bb      	str	r3, [r7, #24]
}
 800456e:	bf00      	nop
 8004570:	e7fe      	b.n	8004570 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004572:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00d      	beq.n	800459a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800457e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004580:	2201      	movs	r2, #1
 8004582:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004586:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800458a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800458c:	9300      	str	r3, [sp, #0]
 800458e:	4613      	mov	r3, r2
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	68b9      	ldr	r1, [r7, #8]
 8004594:	68f8      	ldr	r0, [r7, #12]
 8004596:	f000 f805 	bl	80045a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800459a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800459c:	4618      	mov	r0, r3
 800459e:	3730      	adds	r7, #48	; 0x30
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	607a      	str	r2, [r7, #4]
 80045b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d103      	bne.n	80045c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	69ba      	ldr	r2, [r7, #24]
 80045bc:	601a      	str	r2, [r3, #0]
 80045be:	e002      	b.n	80045c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80045d2:	2101      	movs	r1, #1
 80045d4:	69b8      	ldr	r0, [r7, #24]
 80045d6:	f7ff fef9 	bl	80043cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	78fa      	ldrb	r2, [r7, #3]
 80045de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80045e2:	bf00      	nop
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
	...

080045ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b08e      	sub	sp, #56	; 0x38
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
 80045f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80045fa:	2300      	movs	r3, #0
 80045fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10c      	bne.n	8004622 <xQueueGenericSend+0x36>
	__asm volatile
 8004608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460c:	b672      	cpsid	i
 800460e:	f383 8811 	msr	BASEPRI, r3
 8004612:	f3bf 8f6f 	isb	sy
 8004616:	f3bf 8f4f 	dsb	sy
 800461a:	b662      	cpsie	i
 800461c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800461e:	bf00      	nop
 8004620:	e7fe      	b.n	8004620 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d103      	bne.n	8004630 <xQueueGenericSend+0x44>
 8004628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462c:	2b00      	cmp	r3, #0
 800462e:	d101      	bne.n	8004634 <xQueueGenericSend+0x48>
 8004630:	2301      	movs	r3, #1
 8004632:	e000      	b.n	8004636 <xQueueGenericSend+0x4a>
 8004634:	2300      	movs	r3, #0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d10c      	bne.n	8004654 <xQueueGenericSend+0x68>
	__asm volatile
 800463a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463e:	b672      	cpsid	i
 8004640:	f383 8811 	msr	BASEPRI, r3
 8004644:	f3bf 8f6f 	isb	sy
 8004648:	f3bf 8f4f 	dsb	sy
 800464c:	b662      	cpsie	i
 800464e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004650:	bf00      	nop
 8004652:	e7fe      	b.n	8004652 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	2b02      	cmp	r3, #2
 8004658:	d103      	bne.n	8004662 <xQueueGenericSend+0x76>
 800465a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800465e:	2b01      	cmp	r3, #1
 8004660:	d101      	bne.n	8004666 <xQueueGenericSend+0x7a>
 8004662:	2301      	movs	r3, #1
 8004664:	e000      	b.n	8004668 <xQueueGenericSend+0x7c>
 8004666:	2300      	movs	r3, #0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10c      	bne.n	8004686 <xQueueGenericSend+0x9a>
	__asm volatile
 800466c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004670:	b672      	cpsid	i
 8004672:	f383 8811 	msr	BASEPRI, r3
 8004676:	f3bf 8f6f 	isb	sy
 800467a:	f3bf 8f4f 	dsb	sy
 800467e:	b662      	cpsie	i
 8004680:	623b      	str	r3, [r7, #32]
}
 8004682:	bf00      	nop
 8004684:	e7fe      	b.n	8004684 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004686:	f001 faef 	bl	8005c68 <xTaskGetSchedulerState>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d102      	bne.n	8004696 <xQueueGenericSend+0xaa>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <xQueueGenericSend+0xae>
 8004696:	2301      	movs	r3, #1
 8004698:	e000      	b.n	800469c <xQueueGenericSend+0xb0>
 800469a:	2300      	movs	r3, #0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d10c      	bne.n	80046ba <xQueueGenericSend+0xce>
	__asm volatile
 80046a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a4:	b672      	cpsid	i
 80046a6:	f383 8811 	msr	BASEPRI, r3
 80046aa:	f3bf 8f6f 	isb	sy
 80046ae:	f3bf 8f4f 	dsb	sy
 80046b2:	b662      	cpsie	i
 80046b4:	61fb      	str	r3, [r7, #28]
}
 80046b6:	bf00      	nop
 80046b8:	e7fe      	b.n	80046b8 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80046ba:	f002 f81f 	bl	80066fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80046be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d302      	bcc.n	80046d0 <xQueueGenericSend+0xe4>
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d129      	bne.n	8004724 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80046d0:	683a      	ldr	r2, [r7, #0]
 80046d2:	68b9      	ldr	r1, [r7, #8]
 80046d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046d6:	f000 fa15 	bl	8004b04 <prvCopyDataToQueue>
 80046da:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d010      	beq.n	8004706 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e6:	3324      	adds	r3, #36	; 0x24
 80046e8:	4618      	mov	r0, r3
 80046ea:	f001 f8f3 	bl	80058d4 <xTaskRemoveFromEventList>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d013      	beq.n	800471c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80046f4:	4b3f      	ldr	r3, [pc, #252]	; (80047f4 <xQueueGenericSend+0x208>)
 80046f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046fa:	601a      	str	r2, [r3, #0]
 80046fc:	f3bf 8f4f 	dsb	sy
 8004700:	f3bf 8f6f 	isb	sy
 8004704:	e00a      	b.n	800471c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004708:	2b00      	cmp	r3, #0
 800470a:	d007      	beq.n	800471c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800470c:	4b39      	ldr	r3, [pc, #228]	; (80047f4 <xQueueGenericSend+0x208>)
 800470e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	f3bf 8f4f 	dsb	sy
 8004718:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800471c:	f002 f822 	bl	8006764 <vPortExitCritical>
				return pdPASS;
 8004720:	2301      	movs	r3, #1
 8004722:	e063      	b.n	80047ec <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d103      	bne.n	8004732 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800472a:	f002 f81b 	bl	8006764 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800472e:	2300      	movs	r3, #0
 8004730:	e05c      	b.n	80047ec <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004734:	2b00      	cmp	r3, #0
 8004736:	d106      	bne.n	8004746 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004738:	f107 0314 	add.w	r3, r7, #20
 800473c:	4618      	mov	r0, r3
 800473e:	f001 f92f 	bl	80059a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004742:	2301      	movs	r3, #1
 8004744:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004746:	f002 f80d 	bl	8006764 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800474a:	f000 fe8f 	bl	800546c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800474e:	f001 ffd5 	bl	80066fc <vPortEnterCritical>
 8004752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004754:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004758:	b25b      	sxtb	r3, r3
 800475a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800475e:	d103      	bne.n	8004768 <xQueueGenericSend+0x17c>
 8004760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004762:	2200      	movs	r2, #0
 8004764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800476e:	b25b      	sxtb	r3, r3
 8004770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004774:	d103      	bne.n	800477e <xQueueGenericSend+0x192>
 8004776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004778:	2200      	movs	r2, #0
 800477a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800477e:	f001 fff1 	bl	8006764 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004782:	1d3a      	adds	r2, r7, #4
 8004784:	f107 0314 	add.w	r3, r7, #20
 8004788:	4611      	mov	r1, r2
 800478a:	4618      	mov	r0, r3
 800478c:	f001 f91e 	bl	80059cc <xTaskCheckForTimeOut>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d124      	bne.n	80047e0 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004796:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004798:	f000 faac 	bl	8004cf4 <prvIsQueueFull>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d018      	beq.n	80047d4 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80047a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a4:	3310      	adds	r3, #16
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	4611      	mov	r1, r2
 80047aa:	4618      	mov	r0, r3
 80047ac:	f001 f83e 	bl	800582c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80047b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047b2:	f000 fa37 	bl	8004c24 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80047b6:	f000 fe67 	bl	8005488 <xTaskResumeAll>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f47f af7c 	bne.w	80046ba <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80047c2:	4b0c      	ldr	r3, [pc, #48]	; (80047f4 <xQueueGenericSend+0x208>)
 80047c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047c8:	601a      	str	r2, [r3, #0]
 80047ca:	f3bf 8f4f 	dsb	sy
 80047ce:	f3bf 8f6f 	isb	sy
 80047d2:	e772      	b.n	80046ba <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80047d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047d6:	f000 fa25 	bl	8004c24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047da:	f000 fe55 	bl	8005488 <xTaskResumeAll>
 80047de:	e76c      	b.n	80046ba <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80047e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047e2:	f000 fa1f 	bl	8004c24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047e6:	f000 fe4f 	bl	8005488 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80047ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3738      	adds	r7, #56	; 0x38
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	e000ed04 	.word	0xe000ed04

080047f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b08e      	sub	sp, #56	; 0x38
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
 8004804:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800480a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480c:	2b00      	cmp	r3, #0
 800480e:	d10c      	bne.n	800482a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8004810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004814:	b672      	cpsid	i
 8004816:	f383 8811 	msr	BASEPRI, r3
 800481a:	f3bf 8f6f 	isb	sy
 800481e:	f3bf 8f4f 	dsb	sy
 8004822:	b662      	cpsie	i
 8004824:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004826:	bf00      	nop
 8004828:	e7fe      	b.n	8004828 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d103      	bne.n	8004838 <xQueueGenericSendFromISR+0x40>
 8004830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004834:	2b00      	cmp	r3, #0
 8004836:	d101      	bne.n	800483c <xQueueGenericSendFromISR+0x44>
 8004838:	2301      	movs	r3, #1
 800483a:	e000      	b.n	800483e <xQueueGenericSendFromISR+0x46>
 800483c:	2300      	movs	r3, #0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d10c      	bne.n	800485c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8004842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004846:	b672      	cpsid	i
 8004848:	f383 8811 	msr	BASEPRI, r3
 800484c:	f3bf 8f6f 	isb	sy
 8004850:	f3bf 8f4f 	dsb	sy
 8004854:	b662      	cpsie	i
 8004856:	623b      	str	r3, [r7, #32]
}
 8004858:	bf00      	nop
 800485a:	e7fe      	b.n	800485a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	2b02      	cmp	r3, #2
 8004860:	d103      	bne.n	800486a <xQueueGenericSendFromISR+0x72>
 8004862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004866:	2b01      	cmp	r3, #1
 8004868:	d101      	bne.n	800486e <xQueueGenericSendFromISR+0x76>
 800486a:	2301      	movs	r3, #1
 800486c:	e000      	b.n	8004870 <xQueueGenericSendFromISR+0x78>
 800486e:	2300      	movs	r3, #0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10c      	bne.n	800488e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8004874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004878:	b672      	cpsid	i
 800487a:	f383 8811 	msr	BASEPRI, r3
 800487e:	f3bf 8f6f 	isb	sy
 8004882:	f3bf 8f4f 	dsb	sy
 8004886:	b662      	cpsie	i
 8004888:	61fb      	str	r3, [r7, #28]
}
 800488a:	bf00      	nop
 800488c:	e7fe      	b.n	800488c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800488e:	f002 f81d 	bl	80068cc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004892:	f3ef 8211 	mrs	r2, BASEPRI
 8004896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489a:	b672      	cpsid	i
 800489c:	f383 8811 	msr	BASEPRI, r3
 80048a0:	f3bf 8f6f 	isb	sy
 80048a4:	f3bf 8f4f 	dsb	sy
 80048a8:	b662      	cpsie	i
 80048aa:	61ba      	str	r2, [r7, #24]
 80048ac:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80048ae:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80048b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80048b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d302      	bcc.n	80048c4 <xQueueGenericSendFromISR+0xcc>
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d12c      	bne.n	800491e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80048c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80048ce:	683a      	ldr	r2, [r7, #0]
 80048d0:	68b9      	ldr	r1, [r7, #8]
 80048d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048d4:	f000 f916 	bl	8004b04 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80048d8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80048dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e0:	d112      	bne.n	8004908 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d016      	beq.n	8004918 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ec:	3324      	adds	r3, #36	; 0x24
 80048ee:	4618      	mov	r0, r3
 80048f0:	f000 fff0 	bl	80058d4 <xTaskRemoveFromEventList>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00e      	beq.n	8004918 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00b      	beq.n	8004918 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	601a      	str	r2, [r3, #0]
 8004906:	e007      	b.n	8004918 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004908:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800490c:	3301      	adds	r3, #1
 800490e:	b2db      	uxtb	r3, r3
 8004910:	b25a      	sxtb	r2, r3
 8004912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004914:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004918:	2301      	movs	r3, #1
 800491a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800491c:	e001      	b.n	8004922 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800491e:	2300      	movs	r3, #0
 8004920:	637b      	str	r3, [r7, #52]	; 0x34
 8004922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004924:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800492c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800492e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004930:	4618      	mov	r0, r3
 8004932:	3738      	adds	r7, #56	; 0x38
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b08c      	sub	sp, #48	; 0x30
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004944:	2300      	movs	r3, #0
 8004946:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800494c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10c      	bne.n	800496c <xQueueReceive+0x34>
	__asm volatile
 8004952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004956:	b672      	cpsid	i
 8004958:	f383 8811 	msr	BASEPRI, r3
 800495c:	f3bf 8f6f 	isb	sy
 8004960:	f3bf 8f4f 	dsb	sy
 8004964:	b662      	cpsie	i
 8004966:	623b      	str	r3, [r7, #32]
}
 8004968:	bf00      	nop
 800496a:	e7fe      	b.n	800496a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d103      	bne.n	800497a <xQueueReceive+0x42>
 8004972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004976:	2b00      	cmp	r3, #0
 8004978:	d101      	bne.n	800497e <xQueueReceive+0x46>
 800497a:	2301      	movs	r3, #1
 800497c:	e000      	b.n	8004980 <xQueueReceive+0x48>
 800497e:	2300      	movs	r3, #0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d10c      	bne.n	800499e <xQueueReceive+0x66>
	__asm volatile
 8004984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004988:	b672      	cpsid	i
 800498a:	f383 8811 	msr	BASEPRI, r3
 800498e:	f3bf 8f6f 	isb	sy
 8004992:	f3bf 8f4f 	dsb	sy
 8004996:	b662      	cpsie	i
 8004998:	61fb      	str	r3, [r7, #28]
}
 800499a:	bf00      	nop
 800499c:	e7fe      	b.n	800499c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800499e:	f001 f963 	bl	8005c68 <xTaskGetSchedulerState>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d102      	bne.n	80049ae <xQueueReceive+0x76>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <xQueueReceive+0x7a>
 80049ae:	2301      	movs	r3, #1
 80049b0:	e000      	b.n	80049b4 <xQueueReceive+0x7c>
 80049b2:	2300      	movs	r3, #0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d10c      	bne.n	80049d2 <xQueueReceive+0x9a>
	__asm volatile
 80049b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049bc:	b672      	cpsid	i
 80049be:	f383 8811 	msr	BASEPRI, r3
 80049c2:	f3bf 8f6f 	isb	sy
 80049c6:	f3bf 8f4f 	dsb	sy
 80049ca:	b662      	cpsie	i
 80049cc:	61bb      	str	r3, [r7, #24]
}
 80049ce:	bf00      	nop
 80049d0:	e7fe      	b.n	80049d0 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80049d2:	f001 fe93 	bl	80066fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049da:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80049dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d01f      	beq.n	8004a22 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80049e2:	68b9      	ldr	r1, [r7, #8]
 80049e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049e6:	f000 f8f7 	bl	8004bd8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80049ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ec:	1e5a      	subs	r2, r3, #1
 80049ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00f      	beq.n	8004a1a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fc:	3310      	adds	r3, #16
 80049fe:	4618      	mov	r0, r3
 8004a00:	f000 ff68 	bl	80058d4 <xTaskRemoveFromEventList>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d007      	beq.n	8004a1a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004a0a:	4b3d      	ldr	r3, [pc, #244]	; (8004b00 <xQueueReceive+0x1c8>)
 8004a0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a10:	601a      	str	r2, [r3, #0]
 8004a12:	f3bf 8f4f 	dsb	sy
 8004a16:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004a1a:	f001 fea3 	bl	8006764 <vPortExitCritical>
				return pdPASS;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e069      	b.n	8004af6 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d103      	bne.n	8004a30 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a28:	f001 fe9c 	bl	8006764 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	e062      	b.n	8004af6 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d106      	bne.n	8004a44 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a36:	f107 0310 	add.w	r3, r7, #16
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f000 ffb0 	bl	80059a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a40:	2301      	movs	r3, #1
 8004a42:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a44:	f001 fe8e 	bl	8006764 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a48:	f000 fd10 	bl	800546c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a4c:	f001 fe56 	bl	80066fc <vPortEnterCritical>
 8004a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a56:	b25b      	sxtb	r3, r3
 8004a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a5c:	d103      	bne.n	8004a66 <xQueueReceive+0x12e>
 8004a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a6c:	b25b      	sxtb	r3, r3
 8004a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a72:	d103      	bne.n	8004a7c <xQueueReceive+0x144>
 8004a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a7c:	f001 fe72 	bl	8006764 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a80:	1d3a      	adds	r2, r7, #4
 8004a82:	f107 0310 	add.w	r3, r7, #16
 8004a86:	4611      	mov	r1, r2
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f000 ff9f 	bl	80059cc <xTaskCheckForTimeOut>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d123      	bne.n	8004adc <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a96:	f000 f917 	bl	8004cc8 <prvIsQueueEmpty>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d017      	beq.n	8004ad0 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa2:	3324      	adds	r3, #36	; 0x24
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	4611      	mov	r1, r2
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f000 febf 	bl	800582c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004aae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ab0:	f000 f8b8 	bl	8004c24 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ab4:	f000 fce8 	bl	8005488 <xTaskResumeAll>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d189      	bne.n	80049d2 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8004abe:	4b10      	ldr	r3, [pc, #64]	; (8004b00 <xQueueReceive+0x1c8>)
 8004ac0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ac4:	601a      	str	r2, [r3, #0]
 8004ac6:	f3bf 8f4f 	dsb	sy
 8004aca:	f3bf 8f6f 	isb	sy
 8004ace:	e780      	b.n	80049d2 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004ad0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ad2:	f000 f8a7 	bl	8004c24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ad6:	f000 fcd7 	bl	8005488 <xTaskResumeAll>
 8004ada:	e77a      	b.n	80049d2 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004adc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ade:	f000 f8a1 	bl	8004c24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ae2:	f000 fcd1 	bl	8005488 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ae6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ae8:	f000 f8ee 	bl	8004cc8 <prvIsQueueEmpty>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	f43f af6f 	beq.w	80049d2 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004af4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3730      	adds	r7, #48	; 0x30
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	e000ed04 	.word	0xe000ed04

08004b04 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004b10:	2300      	movs	r3, #0
 8004b12:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b18:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10d      	bne.n	8004b3e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d14d      	bne.n	8004bc6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f001 f8b8 	bl	8005ca4 <xTaskPriorityDisinherit>
 8004b34:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	609a      	str	r2, [r3, #8]
 8004b3c:	e043      	b.n	8004bc6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d119      	bne.n	8004b78 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6858      	ldr	r0, [r3, #4]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	68b9      	ldr	r1, [r7, #8]
 8004b50:	f002 f90a 	bl	8006d68 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	685a      	ldr	r2, [r3, #4]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5c:	441a      	add	r2, r3
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	685a      	ldr	r2, [r3, #4]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d32b      	bcc.n	8004bc6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	605a      	str	r2, [r3, #4]
 8004b76:	e026      	b.n	8004bc6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	68d8      	ldr	r0, [r3, #12]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b80:	461a      	mov	r2, r3
 8004b82:	68b9      	ldr	r1, [r7, #8]
 8004b84:	f002 f8f0 	bl	8006d68 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	68da      	ldr	r2, [r3, #12]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b90:	425b      	negs	r3, r3
 8004b92:	441a      	add	r2, r3
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	68da      	ldr	r2, [r3, #12]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d207      	bcs.n	8004bb4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	689a      	ldr	r2, [r3, #8]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bac:	425b      	negs	r3, r3
 8004bae:	441a      	add	r2, r3
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d105      	bne.n	8004bc6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d002      	beq.n	8004bc6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	1c5a      	adds	r2, r3, #1
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004bce:	697b      	ldr	r3, [r7, #20]
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3718      	adds	r7, #24
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d018      	beq.n	8004c1c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	68da      	ldr	r2, [r3, #12]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	441a      	add	r2, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	68da      	ldr	r2, [r3, #12]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d303      	bcc.n	8004c0c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	68d9      	ldr	r1, [r3, #12]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c14:	461a      	mov	r2, r3
 8004c16:	6838      	ldr	r0, [r7, #0]
 8004c18:	f002 f8a6 	bl	8006d68 <memcpy>
	}
}
 8004c1c:	bf00      	nop
 8004c1e:	3708      	adds	r7, #8
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004c2c:	f001 fd66 	bl	80066fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c36:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c38:	e011      	b.n	8004c5e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d012      	beq.n	8004c68 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	3324      	adds	r3, #36	; 0x24
 8004c46:	4618      	mov	r0, r3
 8004c48:	f000 fe44 	bl	80058d4 <xTaskRemoveFromEventList>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d001      	beq.n	8004c56 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004c52:	f000 ff21 	bl	8005a98 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004c56:	7bfb      	ldrb	r3, [r7, #15]
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	dce9      	bgt.n	8004c3a <prvUnlockQueue+0x16>
 8004c66:	e000      	b.n	8004c6a <prvUnlockQueue+0x46>
					break;
 8004c68:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	22ff      	movs	r2, #255	; 0xff
 8004c6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004c72:	f001 fd77 	bl	8006764 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004c76:	f001 fd41 	bl	80066fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c80:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c82:	e011      	b.n	8004ca8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d012      	beq.n	8004cb2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	3310      	adds	r3, #16
 8004c90:	4618      	mov	r0, r3
 8004c92:	f000 fe1f 	bl	80058d4 <xTaskRemoveFromEventList>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d001      	beq.n	8004ca0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004c9c:	f000 fefc 	bl	8005a98 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004ca0:	7bbb      	ldrb	r3, [r7, #14]
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ca8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	dce9      	bgt.n	8004c84 <prvUnlockQueue+0x60>
 8004cb0:	e000      	b.n	8004cb4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004cb2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	22ff      	movs	r2, #255	; 0xff
 8004cb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004cbc:	f001 fd52 	bl	8006764 <vPortExitCritical>
}
 8004cc0:	bf00      	nop
 8004cc2:	3710      	adds	r7, #16
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004cd0:	f001 fd14 	bl	80066fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d102      	bne.n	8004ce2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	60fb      	str	r3, [r7, #12]
 8004ce0:	e001      	b.n	8004ce6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ce6:	f001 fd3d 	bl	8006764 <vPortExitCritical>

	return xReturn;
 8004cea:	68fb      	ldr	r3, [r7, #12]
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3710      	adds	r7, #16
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004cfc:	f001 fcfe 	bl	80066fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d102      	bne.n	8004d12 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	60fb      	str	r3, [r7, #12]
 8004d10:	e001      	b.n	8004d16 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004d12:	2300      	movs	r3, #0
 8004d14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d16:	f001 fd25 	bl	8006764 <vPortExitCritical>

	return xReturn;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3710      	adds	r7, #16
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d2e:	2300      	movs	r3, #0
 8004d30:	60fb      	str	r3, [r7, #12]
 8004d32:	e014      	b.n	8004d5e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004d34:	4a0f      	ldr	r2, [pc, #60]	; (8004d74 <vQueueAddToRegistry+0x50>)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d10b      	bne.n	8004d58 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004d40:	490c      	ldr	r1, [pc, #48]	; (8004d74 <vQueueAddToRegistry+0x50>)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	683a      	ldr	r2, [r7, #0]
 8004d46:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004d4a:	4a0a      	ldr	r2, [pc, #40]	; (8004d74 <vQueueAddToRegistry+0x50>)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	00db      	lsls	r3, r3, #3
 8004d50:	4413      	add	r3, r2
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004d56:	e006      	b.n	8004d66 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	60fb      	str	r3, [r7, #12]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2b07      	cmp	r3, #7
 8004d62:	d9e7      	bls.n	8004d34 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004d64:	bf00      	nop
 8004d66:	bf00      	nop
 8004d68:	3714      	adds	r7, #20
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	200009fc 	.word	0x200009fc

08004d78 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b086      	sub	sp, #24
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004d88:	f001 fcb8 	bl	80066fc <vPortEnterCritical>
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d92:	b25b      	sxtb	r3, r3
 8004d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d98:	d103      	bne.n	8004da2 <vQueueWaitForMessageRestricted+0x2a>
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004da8:	b25b      	sxtb	r3, r3
 8004daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dae:	d103      	bne.n	8004db8 <vQueueWaitForMessageRestricted+0x40>
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004db8:	f001 fcd4 	bl	8006764 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d106      	bne.n	8004dd2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	3324      	adds	r3, #36	; 0x24
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	68b9      	ldr	r1, [r7, #8]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f000 fd53 	bl	8005878 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004dd2:	6978      	ldr	r0, [r7, #20]
 8004dd4:	f7ff ff26 	bl	8004c24 <prvUnlockQueue>
	}
 8004dd8:	bf00      	nop
 8004dda:	3718      	adds	r7, #24
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b08e      	sub	sp, #56	; 0x38
 8004de4:	af04      	add	r7, sp, #16
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
 8004dec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10c      	bne.n	8004e0e <xTaskCreateStatic+0x2e>
	__asm volatile
 8004df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df8:	b672      	cpsid	i
 8004dfa:	f383 8811 	msr	BASEPRI, r3
 8004dfe:	f3bf 8f6f 	isb	sy
 8004e02:	f3bf 8f4f 	dsb	sy
 8004e06:	b662      	cpsie	i
 8004e08:	623b      	str	r3, [r7, #32]
}
 8004e0a:	bf00      	nop
 8004e0c:	e7fe      	b.n	8004e0c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8004e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10c      	bne.n	8004e2e <xTaskCreateStatic+0x4e>
	__asm volatile
 8004e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e18:	b672      	cpsid	i
 8004e1a:	f383 8811 	msr	BASEPRI, r3
 8004e1e:	f3bf 8f6f 	isb	sy
 8004e22:	f3bf 8f4f 	dsb	sy
 8004e26:	b662      	cpsie	i
 8004e28:	61fb      	str	r3, [r7, #28]
}
 8004e2a:	bf00      	nop
 8004e2c:	e7fe      	b.n	8004e2c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004e2e:	23bc      	movs	r3, #188	; 0xbc
 8004e30:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	2bbc      	cmp	r3, #188	; 0xbc
 8004e36:	d00c      	beq.n	8004e52 <xTaskCreateStatic+0x72>
	__asm volatile
 8004e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3c:	b672      	cpsid	i
 8004e3e:	f383 8811 	msr	BASEPRI, r3
 8004e42:	f3bf 8f6f 	isb	sy
 8004e46:	f3bf 8f4f 	dsb	sy
 8004e4a:	b662      	cpsie	i
 8004e4c:	61bb      	str	r3, [r7, #24]
}
 8004e4e:	bf00      	nop
 8004e50:	e7fe      	b.n	8004e50 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004e52:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d01e      	beq.n	8004e98 <xTaskCreateStatic+0xb8>
 8004e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d01b      	beq.n	8004e98 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e62:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e68:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6c:	2202      	movs	r2, #2
 8004e6e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004e72:	2300      	movs	r3, #0
 8004e74:	9303      	str	r3, [sp, #12]
 8004e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e78:	9302      	str	r3, [sp, #8]
 8004e7a:	f107 0314 	add.w	r3, r7, #20
 8004e7e:	9301      	str	r3, [sp, #4]
 8004e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e82:	9300      	str	r3, [sp, #0]
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	68b9      	ldr	r1, [r7, #8]
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f000 f850 	bl	8004f30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e92:	f000 f8f5 	bl	8005080 <prvAddNewTaskToReadyList>
 8004e96:	e001      	b.n	8004e9c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004e9c:	697b      	ldr	r3, [r7, #20]
	}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3728      	adds	r7, #40	; 0x28
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b08c      	sub	sp, #48	; 0x30
 8004eaa:	af04      	add	r7, sp, #16
 8004eac:	60f8      	str	r0, [r7, #12]
 8004eae:	60b9      	str	r1, [r7, #8]
 8004eb0:	603b      	str	r3, [r7, #0]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004eb6:	88fb      	ldrh	r3, [r7, #6]
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f001 fd4a 	bl	8006954 <pvPortMalloc>
 8004ec0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d00e      	beq.n	8004ee6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004ec8:	20bc      	movs	r0, #188	; 0xbc
 8004eca:	f001 fd43 	bl	8006954 <pvPortMalloc>
 8004ece:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	631a      	str	r2, [r3, #48]	; 0x30
 8004edc:	e005      	b.n	8004eea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004ede:	6978      	ldr	r0, [r7, #20]
 8004ee0:	f001 fe02 	bl	8006ae8 <vPortFree>
 8004ee4:	e001      	b.n	8004eea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d017      	beq.n	8004f20 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004ef8:	88fa      	ldrh	r2, [r7, #6]
 8004efa:	2300      	movs	r3, #0
 8004efc:	9303      	str	r3, [sp, #12]
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	9302      	str	r3, [sp, #8]
 8004f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f04:	9301      	str	r3, [sp, #4]
 8004f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f08:	9300      	str	r3, [sp, #0]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	68b9      	ldr	r1, [r7, #8]
 8004f0e:	68f8      	ldr	r0, [r7, #12]
 8004f10:	f000 f80e 	bl	8004f30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f14:	69f8      	ldr	r0, [r7, #28]
 8004f16:	f000 f8b3 	bl	8005080 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	61bb      	str	r3, [r7, #24]
 8004f1e:	e002      	b.n	8004f26 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004f20:	f04f 33ff 	mov.w	r3, #4294967295
 8004f24:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004f26:	69bb      	ldr	r3, [r7, #24]
	}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3720      	adds	r7, #32
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b088      	sub	sp, #32
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
 8004f3c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f40:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	461a      	mov	r2, r3
 8004f48:	21a5      	movs	r1, #165	; 0xa5
 8004f4a:	f001 ff1b 	bl	8006d84 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f52:	6879      	ldr	r1, [r7, #4]
 8004f54:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004f58:	440b      	add	r3, r1
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	4413      	add	r3, r2
 8004f5e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	f023 0307 	bic.w	r3, r3, #7
 8004f66:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	f003 0307 	and.w	r3, r3, #7
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00c      	beq.n	8004f8c <prvInitialiseNewTask+0x5c>
	__asm volatile
 8004f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f76:	b672      	cpsid	i
 8004f78:	f383 8811 	msr	BASEPRI, r3
 8004f7c:	f3bf 8f6f 	isb	sy
 8004f80:	f3bf 8f4f 	dsb	sy
 8004f84:	b662      	cpsie	i
 8004f86:	617b      	str	r3, [r7, #20]
}
 8004f88:	bf00      	nop
 8004f8a:	e7fe      	b.n	8004f8a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d01f      	beq.n	8004fd2 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f92:	2300      	movs	r3, #0
 8004f94:	61fb      	str	r3, [r7, #28]
 8004f96:	e012      	b.n	8004fbe <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004f98:	68ba      	ldr	r2, [r7, #8]
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	7819      	ldrb	r1, [r3, #0]
 8004fa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	3334      	adds	r3, #52	; 0x34
 8004fa8:	460a      	mov	r2, r1
 8004faa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004fac:	68ba      	ldr	r2, [r7, #8]
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d006      	beq.n	8004fc6 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	3301      	adds	r3, #1
 8004fbc:	61fb      	str	r3, [r7, #28]
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	2b0f      	cmp	r3, #15
 8004fc2:	d9e9      	bls.n	8004f98 <prvInitialiseNewTask+0x68>
 8004fc4:	e000      	b.n	8004fc8 <prvInitialiseNewTask+0x98>
			{
				break;
 8004fc6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fd0:	e003      	b.n	8004fda <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fdc:	2b37      	cmp	r3, #55	; 0x37
 8004fde:	d901      	bls.n	8004fe4 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004fe0:	2337      	movs	r3, #55	; 0x37
 8004fe2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fe8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff8:	3304      	adds	r3, #4
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7ff f952 	bl	80042a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005002:	3318      	adds	r3, #24
 8005004:	4618      	mov	r0, r3
 8005006:	f7ff f94d 	bl	80042a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800500a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800500e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005012:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005018:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800501a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800501e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005022:	2200      	movs	r2, #0
 8005024:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502a:	2200      	movs	r2, #0
 800502c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005032:	3354      	adds	r3, #84	; 0x54
 8005034:	2260      	movs	r2, #96	; 0x60
 8005036:	2100      	movs	r1, #0
 8005038:	4618      	mov	r0, r3
 800503a:	f001 fea3 	bl	8006d84 <memset>
 800503e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005040:	4a0c      	ldr	r2, [pc, #48]	; (8005074 <prvInitialiseNewTask+0x144>)
 8005042:	659a      	str	r2, [r3, #88]	; 0x58
 8005044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005046:	4a0c      	ldr	r2, [pc, #48]	; (8005078 <prvInitialiseNewTask+0x148>)
 8005048:	65da      	str	r2, [r3, #92]	; 0x5c
 800504a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504c:	4a0b      	ldr	r2, [pc, #44]	; (800507c <prvInitialiseNewTask+0x14c>)
 800504e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005050:	683a      	ldr	r2, [r7, #0]
 8005052:	68f9      	ldr	r1, [r7, #12]
 8005054:	69b8      	ldr	r0, [r7, #24]
 8005056:	f001 fa47 	bl	80064e8 <pxPortInitialiseStack>
 800505a:	4602      	mov	r2, r0
 800505c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005062:	2b00      	cmp	r3, #0
 8005064:	d002      	beq.n	800506c <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800506a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800506c:	bf00      	nop
 800506e:	3720      	adds	r7, #32
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	08006fe8 	.word	0x08006fe8
 8005078:	08007008 	.word	0x08007008
 800507c:	08006fc8 	.word	0x08006fc8

08005080 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005088:	f001 fb38 	bl	80066fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800508c:	4b2d      	ldr	r3, [pc, #180]	; (8005144 <prvAddNewTaskToReadyList+0xc4>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	3301      	adds	r3, #1
 8005092:	4a2c      	ldr	r2, [pc, #176]	; (8005144 <prvAddNewTaskToReadyList+0xc4>)
 8005094:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005096:	4b2c      	ldr	r3, [pc, #176]	; (8005148 <prvAddNewTaskToReadyList+0xc8>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d109      	bne.n	80050b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800509e:	4a2a      	ldr	r2, [pc, #168]	; (8005148 <prvAddNewTaskToReadyList+0xc8>)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80050a4:	4b27      	ldr	r3, [pc, #156]	; (8005144 <prvAddNewTaskToReadyList+0xc4>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d110      	bne.n	80050ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80050ac:	f000 fd18 	bl	8005ae0 <prvInitialiseTaskLists>
 80050b0:	e00d      	b.n	80050ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80050b2:	4b26      	ldr	r3, [pc, #152]	; (800514c <prvAddNewTaskToReadyList+0xcc>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d109      	bne.n	80050ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80050ba:	4b23      	ldr	r3, [pc, #140]	; (8005148 <prvAddNewTaskToReadyList+0xc8>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d802      	bhi.n	80050ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80050c8:	4a1f      	ldr	r2, [pc, #124]	; (8005148 <prvAddNewTaskToReadyList+0xc8>)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80050ce:	4b20      	ldr	r3, [pc, #128]	; (8005150 <prvAddNewTaskToReadyList+0xd0>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	3301      	adds	r3, #1
 80050d4:	4a1e      	ldr	r2, [pc, #120]	; (8005150 <prvAddNewTaskToReadyList+0xd0>)
 80050d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80050d8:	4b1d      	ldr	r3, [pc, #116]	; (8005150 <prvAddNewTaskToReadyList+0xd0>)
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e4:	4b1b      	ldr	r3, [pc, #108]	; (8005154 <prvAddNewTaskToReadyList+0xd4>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d903      	bls.n	80050f4 <prvAddNewTaskToReadyList+0x74>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f0:	4a18      	ldr	r2, [pc, #96]	; (8005154 <prvAddNewTaskToReadyList+0xd4>)
 80050f2:	6013      	str	r3, [r2, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050f8:	4613      	mov	r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	4413      	add	r3, r2
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	4a15      	ldr	r2, [pc, #84]	; (8005158 <prvAddNewTaskToReadyList+0xd8>)
 8005102:	441a      	add	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	3304      	adds	r3, #4
 8005108:	4619      	mov	r1, r3
 800510a:	4610      	mov	r0, r2
 800510c:	f7ff f8d7 	bl	80042be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005110:	f001 fb28 	bl	8006764 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005114:	4b0d      	ldr	r3, [pc, #52]	; (800514c <prvAddNewTaskToReadyList+0xcc>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00e      	beq.n	800513a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800511c:	4b0a      	ldr	r3, [pc, #40]	; (8005148 <prvAddNewTaskToReadyList+0xc8>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005126:	429a      	cmp	r2, r3
 8005128:	d207      	bcs.n	800513a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800512a:	4b0c      	ldr	r3, [pc, #48]	; (800515c <prvAddNewTaskToReadyList+0xdc>)
 800512c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005130:	601a      	str	r2, [r3, #0]
 8005132:	f3bf 8f4f 	dsb	sy
 8005136:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800513a:	bf00      	nop
 800513c:	3708      	adds	r7, #8
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	20000f10 	.word	0x20000f10
 8005148:	20000a3c 	.word	0x20000a3c
 800514c:	20000f1c 	.word	0x20000f1c
 8005150:	20000f2c 	.word	0x20000f2c
 8005154:	20000f18 	.word	0x20000f18
 8005158:	20000a40 	.word	0x20000a40
 800515c:	e000ed04 	.word	0xe000ed04

08005160 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005168:	f001 fac8 	bl	80066fc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d102      	bne.n	8005178 <vTaskDelete+0x18>
 8005172:	4b2d      	ldr	r3, [pc, #180]	; (8005228 <vTaskDelete+0xc8>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	e000      	b.n	800517a <vTaskDelete+0x1a>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	3304      	adds	r3, #4
 8005180:	4618      	mov	r0, r3
 8005182:	f7ff f8f9 	bl	8004378 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800518a:	2b00      	cmp	r3, #0
 800518c:	d004      	beq.n	8005198 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	3318      	adds	r3, #24
 8005192:	4618      	mov	r0, r3
 8005194:	f7ff f8f0 	bl	8004378 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8005198:	4b24      	ldr	r3, [pc, #144]	; (800522c <vTaskDelete+0xcc>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	3301      	adds	r3, #1
 800519e:	4a23      	ldr	r2, [pc, #140]	; (800522c <vTaskDelete+0xcc>)
 80051a0:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80051a2:	4b21      	ldr	r3, [pc, #132]	; (8005228 <vTaskDelete+0xc8>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d10b      	bne.n	80051c4 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	3304      	adds	r3, #4
 80051b0:	4619      	mov	r1, r3
 80051b2:	481f      	ldr	r0, [pc, #124]	; (8005230 <vTaskDelete+0xd0>)
 80051b4:	f7ff f883 	bl	80042be <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80051b8:	4b1e      	ldr	r3, [pc, #120]	; (8005234 <vTaskDelete+0xd4>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	3301      	adds	r3, #1
 80051be:	4a1d      	ldr	r2, [pc, #116]	; (8005234 <vTaskDelete+0xd4>)
 80051c0:	6013      	str	r3, [r2, #0]
 80051c2:	e009      	b.n	80051d8 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80051c4:	4b1c      	ldr	r3, [pc, #112]	; (8005238 <vTaskDelete+0xd8>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	3b01      	subs	r3, #1
 80051ca:	4a1b      	ldr	r2, [pc, #108]	; (8005238 <vTaskDelete+0xd8>)
 80051cc:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f000 fcf4 	bl	8005bbc <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80051d4:	f000 fd28 	bl	8005c28 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 80051d8:	f001 fac4 	bl	8006764 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80051dc:	4b17      	ldr	r3, [pc, #92]	; (800523c <vTaskDelete+0xdc>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d01d      	beq.n	8005220 <vTaskDelete+0xc0>
		{
			if( pxTCB == pxCurrentTCB )
 80051e4:	4b10      	ldr	r3, [pc, #64]	; (8005228 <vTaskDelete+0xc8>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d118      	bne.n	8005220 <vTaskDelete+0xc0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80051ee:	4b14      	ldr	r3, [pc, #80]	; (8005240 <vTaskDelete+0xe0>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00c      	beq.n	8005210 <vTaskDelete+0xb0>
	__asm volatile
 80051f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fa:	b672      	cpsid	i
 80051fc:	f383 8811 	msr	BASEPRI, r3
 8005200:	f3bf 8f6f 	isb	sy
 8005204:	f3bf 8f4f 	dsb	sy
 8005208:	b662      	cpsie	i
 800520a:	60bb      	str	r3, [r7, #8]
}
 800520c:	bf00      	nop
 800520e:	e7fe      	b.n	800520e <vTaskDelete+0xae>
				portYIELD_WITHIN_API();
 8005210:	4b0c      	ldr	r3, [pc, #48]	; (8005244 <vTaskDelete+0xe4>)
 8005212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005216:	601a      	str	r2, [r3, #0]
 8005218:	f3bf 8f4f 	dsb	sy
 800521c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005220:	bf00      	nop
 8005222:	3710      	adds	r7, #16
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	20000a3c 	.word	0x20000a3c
 800522c:	20000f2c 	.word	0x20000f2c
 8005230:	20000ee4 	.word	0x20000ee4
 8005234:	20000ef8 	.word	0x20000ef8
 8005238:	20000f10 	.word	0x20000f10
 800523c:	20000f1c 	.word	0x20000f1c
 8005240:	20000f38 	.word	0x20000f38
 8005244:	e000ed04 	.word	0xe000ed04

08005248 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005250:	2300      	movs	r3, #0
 8005252:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d019      	beq.n	800528e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800525a:	4b14      	ldr	r3, [pc, #80]	; (80052ac <vTaskDelay+0x64>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00c      	beq.n	800527c <vTaskDelay+0x34>
	__asm volatile
 8005262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005266:	b672      	cpsid	i
 8005268:	f383 8811 	msr	BASEPRI, r3
 800526c:	f3bf 8f6f 	isb	sy
 8005270:	f3bf 8f4f 	dsb	sy
 8005274:	b662      	cpsie	i
 8005276:	60bb      	str	r3, [r7, #8]
}
 8005278:	bf00      	nop
 800527a:	e7fe      	b.n	800527a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800527c:	f000 f8f6 	bl	800546c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005280:	2100      	movs	r1, #0
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 fd80 	bl	8005d88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005288:	f000 f8fe 	bl	8005488 <xTaskResumeAll>
 800528c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d107      	bne.n	80052a4 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8005294:	4b06      	ldr	r3, [pc, #24]	; (80052b0 <vTaskDelay+0x68>)
 8005296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800529a:	601a      	str	r2, [r3, #0]
 800529c:	f3bf 8f4f 	dsb	sy
 80052a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80052a4:	bf00      	nop
 80052a6:	3710      	adds	r7, #16
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	20000f38 	.word	0x20000f38
 80052b0:	e000ed04 	.word	0xe000ed04

080052b4 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b088      	sub	sp, #32
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10c      	bne.n	80052e0 <eTaskGetState+0x2c>
	__asm volatile
 80052c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ca:	b672      	cpsid	i
 80052cc:	f383 8811 	msr	BASEPRI, r3
 80052d0:	f3bf 8f6f 	isb	sy
 80052d4:	f3bf 8f4f 	dsb	sy
 80052d8:	b662      	cpsie	i
 80052da:	60bb      	str	r3, [r7, #8]
}
 80052dc:	bf00      	nop
 80052de:	e7fe      	b.n	80052de <eTaskGetState+0x2a>

		if( pxTCB == pxCurrentTCB )
 80052e0:	4b23      	ldr	r3, [pc, #140]	; (8005370 <eTaskGetState+0xbc>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	69ba      	ldr	r2, [r7, #24]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d102      	bne.n	80052f0 <eTaskGetState+0x3c>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80052ea:	2300      	movs	r3, #0
 80052ec:	77fb      	strb	r3, [r7, #31]
 80052ee:	e03a      	b.n	8005366 <eTaskGetState+0xb2>
		}
		else
		{
			taskENTER_CRITICAL();
 80052f0:	f001 fa04 	bl	80066fc <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	695b      	ldr	r3, [r3, #20]
 80052f8:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 80052fa:	4b1e      	ldr	r3, [pc, #120]	; (8005374 <eTaskGetState+0xc0>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8005300:	4b1d      	ldr	r3, [pc, #116]	; (8005378 <eTaskGetState+0xc4>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8005306:	f001 fa2d 	bl	8006764 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	429a      	cmp	r2, r3
 8005310:	d003      	beq.n	800531a <eTaskGetState+0x66>
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	429a      	cmp	r2, r3
 8005318:	d102      	bne.n	8005320 <eTaskGetState+0x6c>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800531a:	2302      	movs	r3, #2
 800531c:	77fb      	strb	r3, [r7, #31]
 800531e:	e022      	b.n	8005366 <eTaskGetState+0xb2>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	4a16      	ldr	r2, [pc, #88]	; (800537c <eTaskGetState+0xc8>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d112      	bne.n	800534e <eTaskGetState+0x9a>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532c:	2b00      	cmp	r3, #0
 800532e:	d10b      	bne.n	8005348 <eTaskGetState+0x94>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8005336:	b2db      	uxtb	r3, r3
 8005338:	2b01      	cmp	r3, #1
 800533a:	d102      	bne.n	8005342 <eTaskGetState+0x8e>
							{
								eReturn = eBlocked;
 800533c:	2302      	movs	r3, #2
 800533e:	77fb      	strb	r3, [r7, #31]
 8005340:	e011      	b.n	8005366 <eTaskGetState+0xb2>
							}
							else
							{
								eReturn = eSuspended;
 8005342:	2303      	movs	r3, #3
 8005344:	77fb      	strb	r3, [r7, #31]
 8005346:	e00e      	b.n	8005366 <eTaskGetState+0xb2>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8005348:	2302      	movs	r3, #2
 800534a:	77fb      	strb	r3, [r7, #31]
 800534c:	e00b      	b.n	8005366 <eTaskGetState+0xb2>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	4a0b      	ldr	r2, [pc, #44]	; (8005380 <eTaskGetState+0xcc>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d002      	beq.n	800535c <eTaskGetState+0xa8>
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d102      	bne.n	8005362 <eTaskGetState+0xae>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800535c:	2304      	movs	r3, #4
 800535e:	77fb      	strb	r3, [r7, #31]
 8005360:	e001      	b.n	8005366 <eTaskGetState+0xb2>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8005362:	2301      	movs	r3, #1
 8005364:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8005366:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8005368:	4618      	mov	r0, r3
 800536a:	3720      	adds	r7, #32
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	20000a3c 	.word	0x20000a3c
 8005374:	20000ec8 	.word	0x20000ec8
 8005378:	20000ecc 	.word	0x20000ecc
 800537c:	20000efc 	.word	0x20000efc
 8005380:	20000ee4 	.word	0x20000ee4

08005384 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b08a      	sub	sp, #40	; 0x28
 8005388:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800538a:	2300      	movs	r3, #0
 800538c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800538e:	2300      	movs	r3, #0
 8005390:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005392:	463a      	mov	r2, r7
 8005394:	1d39      	adds	r1, r7, #4
 8005396:	f107 0308 	add.w	r3, r7, #8
 800539a:	4618      	mov	r0, r3
 800539c:	f7fe ff2e 	bl	80041fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80053a0:	6839      	ldr	r1, [r7, #0]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	68ba      	ldr	r2, [r7, #8]
 80053a6:	9202      	str	r2, [sp, #8]
 80053a8:	9301      	str	r3, [sp, #4]
 80053aa:	2300      	movs	r3, #0
 80053ac:	9300      	str	r3, [sp, #0]
 80053ae:	2300      	movs	r3, #0
 80053b0:	460a      	mov	r2, r1
 80053b2:	4926      	ldr	r1, [pc, #152]	; (800544c <vTaskStartScheduler+0xc8>)
 80053b4:	4826      	ldr	r0, [pc, #152]	; (8005450 <vTaskStartScheduler+0xcc>)
 80053b6:	f7ff fd13 	bl	8004de0 <xTaskCreateStatic>
 80053ba:	4603      	mov	r3, r0
 80053bc:	4a25      	ldr	r2, [pc, #148]	; (8005454 <vTaskStartScheduler+0xd0>)
 80053be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80053c0:	4b24      	ldr	r3, [pc, #144]	; (8005454 <vTaskStartScheduler+0xd0>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d002      	beq.n	80053ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80053c8:	2301      	movs	r3, #1
 80053ca:	617b      	str	r3, [r7, #20]
 80053cc:	e001      	b.n	80053d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80053ce:	2300      	movs	r3, #0
 80053d0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d102      	bne.n	80053de <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80053d8:	f000 fd2a 	bl	8005e30 <xTimerCreateTimerTask>
 80053dc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d11d      	bne.n	8005420 <vTaskStartScheduler+0x9c>
	__asm volatile
 80053e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e8:	b672      	cpsid	i
 80053ea:	f383 8811 	msr	BASEPRI, r3
 80053ee:	f3bf 8f6f 	isb	sy
 80053f2:	f3bf 8f4f 	dsb	sy
 80053f6:	b662      	cpsie	i
 80053f8:	613b      	str	r3, [r7, #16]
}
 80053fa:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80053fc:	4b16      	ldr	r3, [pc, #88]	; (8005458 <vTaskStartScheduler+0xd4>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	3354      	adds	r3, #84	; 0x54
 8005402:	4a16      	ldr	r2, [pc, #88]	; (800545c <vTaskStartScheduler+0xd8>)
 8005404:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005406:	4b16      	ldr	r3, [pc, #88]	; (8005460 <vTaskStartScheduler+0xdc>)
 8005408:	f04f 32ff 	mov.w	r2, #4294967295
 800540c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800540e:	4b15      	ldr	r3, [pc, #84]	; (8005464 <vTaskStartScheduler+0xe0>)
 8005410:	2201      	movs	r2, #1
 8005412:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005414:	4b14      	ldr	r3, [pc, #80]	; (8005468 <vTaskStartScheduler+0xe4>)
 8005416:	2200      	movs	r2, #0
 8005418:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800541a:	f001 f8f1 	bl	8006600 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800541e:	e010      	b.n	8005442 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005426:	d10c      	bne.n	8005442 <vTaskStartScheduler+0xbe>
	__asm volatile
 8005428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542c:	b672      	cpsid	i
 800542e:	f383 8811 	msr	BASEPRI, r3
 8005432:	f3bf 8f6f 	isb	sy
 8005436:	f3bf 8f4f 	dsb	sy
 800543a:	b662      	cpsie	i
 800543c:	60fb      	str	r3, [r7, #12]
}
 800543e:	bf00      	nop
 8005440:	e7fe      	b.n	8005440 <vTaskStartScheduler+0xbc>
}
 8005442:	bf00      	nop
 8005444:	3718      	adds	r7, #24
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	08006f50 	.word	0x08006f50
 8005450:	08005ab1 	.word	0x08005ab1
 8005454:	20000f34 	.word	0x20000f34
 8005458:	20000a3c 	.word	0x20000a3c
 800545c:	20000010 	.word	0x20000010
 8005460:	20000f30 	.word	0x20000f30
 8005464:	20000f1c 	.word	0x20000f1c
 8005468:	20000f14 	.word	0x20000f14

0800546c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800546c:	b480      	push	{r7}
 800546e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005470:	4b04      	ldr	r3, [pc, #16]	; (8005484 <vTaskSuspendAll+0x18>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	3301      	adds	r3, #1
 8005476:	4a03      	ldr	r2, [pc, #12]	; (8005484 <vTaskSuspendAll+0x18>)
 8005478:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800547a:	bf00      	nop
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr
 8005484:	20000f38 	.word	0x20000f38

08005488 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800548e:	2300      	movs	r3, #0
 8005490:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005492:	2300      	movs	r3, #0
 8005494:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005496:	4b43      	ldr	r3, [pc, #268]	; (80055a4 <xTaskResumeAll+0x11c>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d10c      	bne.n	80054b8 <xTaskResumeAll+0x30>
	__asm volatile
 800549e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a2:	b672      	cpsid	i
 80054a4:	f383 8811 	msr	BASEPRI, r3
 80054a8:	f3bf 8f6f 	isb	sy
 80054ac:	f3bf 8f4f 	dsb	sy
 80054b0:	b662      	cpsie	i
 80054b2:	603b      	str	r3, [r7, #0]
}
 80054b4:	bf00      	nop
 80054b6:	e7fe      	b.n	80054b6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80054b8:	f001 f920 	bl	80066fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80054bc:	4b39      	ldr	r3, [pc, #228]	; (80055a4 <xTaskResumeAll+0x11c>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	3b01      	subs	r3, #1
 80054c2:	4a38      	ldr	r2, [pc, #224]	; (80055a4 <xTaskResumeAll+0x11c>)
 80054c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054c6:	4b37      	ldr	r3, [pc, #220]	; (80055a4 <xTaskResumeAll+0x11c>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d162      	bne.n	8005594 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80054ce:	4b36      	ldr	r3, [pc, #216]	; (80055a8 <xTaskResumeAll+0x120>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d05e      	beq.n	8005594 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054d6:	e02f      	b.n	8005538 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054d8:	4b34      	ldr	r3, [pc, #208]	; (80055ac <xTaskResumeAll+0x124>)
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	3318      	adds	r3, #24
 80054e4:	4618      	mov	r0, r3
 80054e6:	f7fe ff47 	bl	8004378 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	3304      	adds	r3, #4
 80054ee:	4618      	mov	r0, r3
 80054f0:	f7fe ff42 	bl	8004378 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054f8:	4b2d      	ldr	r3, [pc, #180]	; (80055b0 <xTaskResumeAll+0x128>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d903      	bls.n	8005508 <xTaskResumeAll+0x80>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005504:	4a2a      	ldr	r2, [pc, #168]	; (80055b0 <xTaskResumeAll+0x128>)
 8005506:	6013      	str	r3, [r2, #0]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800550c:	4613      	mov	r3, r2
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	4413      	add	r3, r2
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	4a27      	ldr	r2, [pc, #156]	; (80055b4 <xTaskResumeAll+0x12c>)
 8005516:	441a      	add	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	3304      	adds	r3, #4
 800551c:	4619      	mov	r1, r3
 800551e:	4610      	mov	r0, r2
 8005520:	f7fe fecd 	bl	80042be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005528:	4b23      	ldr	r3, [pc, #140]	; (80055b8 <xTaskResumeAll+0x130>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552e:	429a      	cmp	r2, r3
 8005530:	d302      	bcc.n	8005538 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8005532:	4b22      	ldr	r3, [pc, #136]	; (80055bc <xTaskResumeAll+0x134>)
 8005534:	2201      	movs	r2, #1
 8005536:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005538:	4b1c      	ldr	r3, [pc, #112]	; (80055ac <xTaskResumeAll+0x124>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d1cb      	bne.n	80054d8 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d001      	beq.n	800554a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005546:	f000 fb6f 	bl	8005c28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800554a:	4b1d      	ldr	r3, [pc, #116]	; (80055c0 <xTaskResumeAll+0x138>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d010      	beq.n	8005578 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005556:	f000 f847 	bl	80055e8 <xTaskIncrementTick>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d002      	beq.n	8005566 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8005560:	4b16      	ldr	r3, [pc, #88]	; (80055bc <xTaskResumeAll+0x134>)
 8005562:	2201      	movs	r2, #1
 8005564:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	3b01      	subs	r3, #1
 800556a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1f1      	bne.n	8005556 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8005572:	4b13      	ldr	r3, [pc, #76]	; (80055c0 <xTaskResumeAll+0x138>)
 8005574:	2200      	movs	r2, #0
 8005576:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005578:	4b10      	ldr	r3, [pc, #64]	; (80055bc <xTaskResumeAll+0x134>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d009      	beq.n	8005594 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005580:	2301      	movs	r3, #1
 8005582:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005584:	4b0f      	ldr	r3, [pc, #60]	; (80055c4 <xTaskResumeAll+0x13c>)
 8005586:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800558a:	601a      	str	r2, [r3, #0]
 800558c:	f3bf 8f4f 	dsb	sy
 8005590:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005594:	f001 f8e6 	bl	8006764 <vPortExitCritical>

	return xAlreadyYielded;
 8005598:	68bb      	ldr	r3, [r7, #8]
}
 800559a:	4618      	mov	r0, r3
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	20000f38 	.word	0x20000f38
 80055a8:	20000f10 	.word	0x20000f10
 80055ac:	20000ed0 	.word	0x20000ed0
 80055b0:	20000f18 	.word	0x20000f18
 80055b4:	20000a40 	.word	0x20000a40
 80055b8:	20000a3c 	.word	0x20000a3c
 80055bc:	20000f24 	.word	0x20000f24
 80055c0:	20000f20 	.word	0x20000f20
 80055c4:	e000ed04 	.word	0xe000ed04

080055c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80055ce:	4b05      	ldr	r3, [pc, #20]	; (80055e4 <xTaskGetTickCount+0x1c>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80055d4:	687b      	ldr	r3, [r7, #4]
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	370c      	adds	r7, #12
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	20000f14 	.word	0x20000f14

080055e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b086      	sub	sp, #24
 80055ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80055ee:	2300      	movs	r3, #0
 80055f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055f2:	4b50      	ldr	r3, [pc, #320]	; (8005734 <xTaskIncrementTick+0x14c>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	f040 808b 	bne.w	8005712 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80055fc:	4b4e      	ldr	r3, [pc, #312]	; (8005738 <xTaskIncrementTick+0x150>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	3301      	adds	r3, #1
 8005602:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005604:	4a4c      	ldr	r2, [pc, #304]	; (8005738 <xTaskIncrementTick+0x150>)
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d122      	bne.n	8005656 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8005610:	4b4a      	ldr	r3, [pc, #296]	; (800573c <xTaskIncrementTick+0x154>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00c      	beq.n	8005634 <xTaskIncrementTick+0x4c>
	__asm volatile
 800561a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561e:	b672      	cpsid	i
 8005620:	f383 8811 	msr	BASEPRI, r3
 8005624:	f3bf 8f6f 	isb	sy
 8005628:	f3bf 8f4f 	dsb	sy
 800562c:	b662      	cpsie	i
 800562e:	603b      	str	r3, [r7, #0]
}
 8005630:	bf00      	nop
 8005632:	e7fe      	b.n	8005632 <xTaskIncrementTick+0x4a>
 8005634:	4b41      	ldr	r3, [pc, #260]	; (800573c <xTaskIncrementTick+0x154>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	60fb      	str	r3, [r7, #12]
 800563a:	4b41      	ldr	r3, [pc, #260]	; (8005740 <xTaskIncrementTick+0x158>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a3f      	ldr	r2, [pc, #252]	; (800573c <xTaskIncrementTick+0x154>)
 8005640:	6013      	str	r3, [r2, #0]
 8005642:	4a3f      	ldr	r2, [pc, #252]	; (8005740 <xTaskIncrementTick+0x158>)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6013      	str	r3, [r2, #0]
 8005648:	4b3e      	ldr	r3, [pc, #248]	; (8005744 <xTaskIncrementTick+0x15c>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	3301      	adds	r3, #1
 800564e:	4a3d      	ldr	r2, [pc, #244]	; (8005744 <xTaskIncrementTick+0x15c>)
 8005650:	6013      	str	r3, [r2, #0]
 8005652:	f000 fae9 	bl	8005c28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005656:	4b3c      	ldr	r3, [pc, #240]	; (8005748 <xTaskIncrementTick+0x160>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	429a      	cmp	r2, r3
 800565e:	d349      	bcc.n	80056f4 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005660:	4b36      	ldr	r3, [pc, #216]	; (800573c <xTaskIncrementTick+0x154>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d104      	bne.n	8005674 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800566a:	4b37      	ldr	r3, [pc, #220]	; (8005748 <xTaskIncrementTick+0x160>)
 800566c:	f04f 32ff 	mov.w	r2, #4294967295
 8005670:	601a      	str	r2, [r3, #0]
					break;
 8005672:	e03f      	b.n	80056f4 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005674:	4b31      	ldr	r3, [pc, #196]	; (800573c <xTaskIncrementTick+0x154>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	429a      	cmp	r2, r3
 800568a:	d203      	bcs.n	8005694 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800568c:	4a2e      	ldr	r2, [pc, #184]	; (8005748 <xTaskIncrementTick+0x160>)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005692:	e02f      	b.n	80056f4 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	3304      	adds	r3, #4
 8005698:	4618      	mov	r0, r3
 800569a:	f7fe fe6d 	bl	8004378 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d004      	beq.n	80056b0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	3318      	adds	r3, #24
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7fe fe64 	bl	8004378 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b4:	4b25      	ldr	r3, [pc, #148]	; (800574c <xTaskIncrementTick+0x164>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d903      	bls.n	80056c4 <xTaskIncrementTick+0xdc>
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c0:	4a22      	ldr	r2, [pc, #136]	; (800574c <xTaskIncrementTick+0x164>)
 80056c2:	6013      	str	r3, [r2, #0]
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056c8:	4613      	mov	r3, r2
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	4413      	add	r3, r2
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	4a1f      	ldr	r2, [pc, #124]	; (8005750 <xTaskIncrementTick+0x168>)
 80056d2:	441a      	add	r2, r3
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	3304      	adds	r3, #4
 80056d8:	4619      	mov	r1, r3
 80056da:	4610      	mov	r0, r2
 80056dc:	f7fe fdef 	bl	80042be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056e4:	4b1b      	ldr	r3, [pc, #108]	; (8005754 <xTaskIncrementTick+0x16c>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d3b8      	bcc.n	8005660 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80056ee:	2301      	movs	r3, #1
 80056f0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056f2:	e7b5      	b.n	8005660 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80056f4:	4b17      	ldr	r3, [pc, #92]	; (8005754 <xTaskIncrementTick+0x16c>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056fa:	4915      	ldr	r1, [pc, #84]	; (8005750 <xTaskIncrementTick+0x168>)
 80056fc:	4613      	mov	r3, r2
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	4413      	add	r3, r2
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	440b      	add	r3, r1
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2b01      	cmp	r3, #1
 800570a:	d907      	bls.n	800571c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800570c:	2301      	movs	r3, #1
 800570e:	617b      	str	r3, [r7, #20]
 8005710:	e004      	b.n	800571c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005712:	4b11      	ldr	r3, [pc, #68]	; (8005758 <xTaskIncrementTick+0x170>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	3301      	adds	r3, #1
 8005718:	4a0f      	ldr	r2, [pc, #60]	; (8005758 <xTaskIncrementTick+0x170>)
 800571a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800571c:	4b0f      	ldr	r3, [pc, #60]	; (800575c <xTaskIncrementTick+0x174>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d001      	beq.n	8005728 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8005724:	2301      	movs	r3, #1
 8005726:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005728:	697b      	ldr	r3, [r7, #20]
}
 800572a:	4618      	mov	r0, r3
 800572c:	3718      	adds	r7, #24
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	20000f38 	.word	0x20000f38
 8005738:	20000f14 	.word	0x20000f14
 800573c:	20000ec8 	.word	0x20000ec8
 8005740:	20000ecc 	.word	0x20000ecc
 8005744:	20000f28 	.word	0x20000f28
 8005748:	20000f30 	.word	0x20000f30
 800574c:	20000f18 	.word	0x20000f18
 8005750:	20000a40 	.word	0x20000a40
 8005754:	20000a3c 	.word	0x20000a3c
 8005758:	20000f20 	.word	0x20000f20
 800575c:	20000f24 	.word	0x20000f24

08005760 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005766:	4b2b      	ldr	r3, [pc, #172]	; (8005814 <vTaskSwitchContext+0xb4>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d003      	beq.n	8005776 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800576e:	4b2a      	ldr	r3, [pc, #168]	; (8005818 <vTaskSwitchContext+0xb8>)
 8005770:	2201      	movs	r2, #1
 8005772:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005774:	e048      	b.n	8005808 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8005776:	4b28      	ldr	r3, [pc, #160]	; (8005818 <vTaskSwitchContext+0xb8>)
 8005778:	2200      	movs	r2, #0
 800577a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800577c:	4b27      	ldr	r3, [pc, #156]	; (800581c <vTaskSwitchContext+0xbc>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	60fb      	str	r3, [r7, #12]
 8005782:	e012      	b.n	80057aa <vTaskSwitchContext+0x4a>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10c      	bne.n	80057a4 <vTaskSwitchContext+0x44>
	__asm volatile
 800578a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578e:	b672      	cpsid	i
 8005790:	f383 8811 	msr	BASEPRI, r3
 8005794:	f3bf 8f6f 	isb	sy
 8005798:	f3bf 8f4f 	dsb	sy
 800579c:	b662      	cpsie	i
 800579e:	607b      	str	r3, [r7, #4]
}
 80057a0:	bf00      	nop
 80057a2:	e7fe      	b.n	80057a2 <vTaskSwitchContext+0x42>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	3b01      	subs	r3, #1
 80057a8:	60fb      	str	r3, [r7, #12]
 80057aa:	491d      	ldr	r1, [pc, #116]	; (8005820 <vTaskSwitchContext+0xc0>)
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	4613      	mov	r3, r2
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	4413      	add	r3, r2
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	440b      	add	r3, r1
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d0e2      	beq.n	8005784 <vTaskSwitchContext+0x24>
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	4613      	mov	r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	4413      	add	r3, r2
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	4a15      	ldr	r2, [pc, #84]	; (8005820 <vTaskSwitchContext+0xc0>)
 80057ca:	4413      	add	r3, r2
 80057cc:	60bb      	str	r3, [r7, #8]
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	685a      	ldr	r2, [r3, #4]
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	605a      	str	r2, [r3, #4]
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	3308      	adds	r3, #8
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d104      	bne.n	80057ee <vTaskSwitchContext+0x8e>
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	685a      	ldr	r2, [r3, #4]
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	605a      	str	r2, [r3, #4]
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	4a0b      	ldr	r2, [pc, #44]	; (8005824 <vTaskSwitchContext+0xc4>)
 80057f6:	6013      	str	r3, [r2, #0]
 80057f8:	4a08      	ldr	r2, [pc, #32]	; (800581c <vTaskSwitchContext+0xbc>)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80057fe:	4b09      	ldr	r3, [pc, #36]	; (8005824 <vTaskSwitchContext+0xc4>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	3354      	adds	r3, #84	; 0x54
 8005804:	4a08      	ldr	r2, [pc, #32]	; (8005828 <vTaskSwitchContext+0xc8>)
 8005806:	6013      	str	r3, [r2, #0]
}
 8005808:	bf00      	nop
 800580a:	3714      	adds	r7, #20
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr
 8005814:	20000f38 	.word	0x20000f38
 8005818:	20000f24 	.word	0x20000f24
 800581c:	20000f18 	.word	0x20000f18
 8005820:	20000a40 	.word	0x20000a40
 8005824:	20000a3c 	.word	0x20000a3c
 8005828:	20000010 	.word	0x20000010

0800582c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d10c      	bne.n	8005856 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800583c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005840:	b672      	cpsid	i
 8005842:	f383 8811 	msr	BASEPRI, r3
 8005846:	f3bf 8f6f 	isb	sy
 800584a:	f3bf 8f4f 	dsb	sy
 800584e:	b662      	cpsie	i
 8005850:	60fb      	str	r3, [r7, #12]
}
 8005852:	bf00      	nop
 8005854:	e7fe      	b.n	8005854 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005856:	4b07      	ldr	r3, [pc, #28]	; (8005874 <vTaskPlaceOnEventList+0x48>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	3318      	adds	r3, #24
 800585c:	4619      	mov	r1, r3
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f7fe fd51 	bl	8004306 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005864:	2101      	movs	r1, #1
 8005866:	6838      	ldr	r0, [r7, #0]
 8005868:	f000 fa8e 	bl	8005d88 <prvAddCurrentTaskToDelayedList>
}
 800586c:	bf00      	nop
 800586e:	3710      	adds	r7, #16
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}
 8005874:	20000a3c 	.word	0x20000a3c

08005878 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005878:	b580      	push	{r7, lr}
 800587a:	b086      	sub	sp, #24
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d10c      	bne.n	80058a4 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800588a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588e:	b672      	cpsid	i
 8005890:	f383 8811 	msr	BASEPRI, r3
 8005894:	f3bf 8f6f 	isb	sy
 8005898:	f3bf 8f4f 	dsb	sy
 800589c:	b662      	cpsie	i
 800589e:	617b      	str	r3, [r7, #20]
}
 80058a0:	bf00      	nop
 80058a2:	e7fe      	b.n	80058a2 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058a4:	4b0a      	ldr	r3, [pc, #40]	; (80058d0 <vTaskPlaceOnEventListRestricted+0x58>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	3318      	adds	r3, #24
 80058aa:	4619      	mov	r1, r3
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f7fe fd06 	bl	80042be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d002      	beq.n	80058be <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 80058b8:	f04f 33ff 	mov.w	r3, #4294967295
 80058bc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80058be:	6879      	ldr	r1, [r7, #4]
 80058c0:	68b8      	ldr	r0, [r7, #8]
 80058c2:	f000 fa61 	bl	8005d88 <prvAddCurrentTaskToDelayedList>
	}
 80058c6:	bf00      	nop
 80058c8:	3718      	adds	r7, #24
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	20000a3c 	.word	0x20000a3c

080058d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b086      	sub	sp, #24
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d10c      	bne.n	8005904 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80058ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ee:	b672      	cpsid	i
 80058f0:	f383 8811 	msr	BASEPRI, r3
 80058f4:	f3bf 8f6f 	isb	sy
 80058f8:	f3bf 8f4f 	dsb	sy
 80058fc:	b662      	cpsie	i
 80058fe:	60fb      	str	r3, [r7, #12]
}
 8005900:	bf00      	nop
 8005902:	e7fe      	b.n	8005902 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	3318      	adds	r3, #24
 8005908:	4618      	mov	r0, r3
 800590a:	f7fe fd35 	bl	8004378 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800590e:	4b1e      	ldr	r3, [pc, #120]	; (8005988 <xTaskRemoveFromEventList+0xb4>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d11d      	bne.n	8005952 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	3304      	adds	r3, #4
 800591a:	4618      	mov	r0, r3
 800591c:	f7fe fd2c 	bl	8004378 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005924:	4b19      	ldr	r3, [pc, #100]	; (800598c <xTaskRemoveFromEventList+0xb8>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	429a      	cmp	r2, r3
 800592a:	d903      	bls.n	8005934 <xTaskRemoveFromEventList+0x60>
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005930:	4a16      	ldr	r2, [pc, #88]	; (800598c <xTaskRemoveFromEventList+0xb8>)
 8005932:	6013      	str	r3, [r2, #0]
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005938:	4613      	mov	r3, r2
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	4413      	add	r3, r2
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	4a13      	ldr	r2, [pc, #76]	; (8005990 <xTaskRemoveFromEventList+0xbc>)
 8005942:	441a      	add	r2, r3
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	3304      	adds	r3, #4
 8005948:	4619      	mov	r1, r3
 800594a:	4610      	mov	r0, r2
 800594c:	f7fe fcb7 	bl	80042be <vListInsertEnd>
 8005950:	e005      	b.n	800595e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	3318      	adds	r3, #24
 8005956:	4619      	mov	r1, r3
 8005958:	480e      	ldr	r0, [pc, #56]	; (8005994 <xTaskRemoveFromEventList+0xc0>)
 800595a:	f7fe fcb0 	bl	80042be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005962:	4b0d      	ldr	r3, [pc, #52]	; (8005998 <xTaskRemoveFromEventList+0xc4>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005968:	429a      	cmp	r2, r3
 800596a:	d905      	bls.n	8005978 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800596c:	2301      	movs	r3, #1
 800596e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005970:	4b0a      	ldr	r3, [pc, #40]	; (800599c <xTaskRemoveFromEventList+0xc8>)
 8005972:	2201      	movs	r2, #1
 8005974:	601a      	str	r2, [r3, #0]
 8005976:	e001      	b.n	800597c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8005978:	2300      	movs	r3, #0
 800597a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800597c:	697b      	ldr	r3, [r7, #20]
}
 800597e:	4618      	mov	r0, r3
 8005980:	3718      	adds	r7, #24
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	20000f38 	.word	0x20000f38
 800598c:	20000f18 	.word	0x20000f18
 8005990:	20000a40 	.word	0x20000a40
 8005994:	20000ed0 	.word	0x20000ed0
 8005998:	20000a3c 	.word	0x20000a3c
 800599c:	20000f24 	.word	0x20000f24

080059a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80059a8:	4b06      	ldr	r3, [pc, #24]	; (80059c4 <vTaskInternalSetTimeOutState+0x24>)
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80059b0:	4b05      	ldr	r3, [pc, #20]	; (80059c8 <vTaskInternalSetTimeOutState+0x28>)
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	605a      	str	r2, [r3, #4]
}
 80059b8:	bf00      	nop
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr
 80059c4:	20000f28 	.word	0x20000f28
 80059c8:	20000f14 	.word	0x20000f14

080059cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b088      	sub	sp, #32
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d10c      	bne.n	80059f6 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80059dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e0:	b672      	cpsid	i
 80059e2:	f383 8811 	msr	BASEPRI, r3
 80059e6:	f3bf 8f6f 	isb	sy
 80059ea:	f3bf 8f4f 	dsb	sy
 80059ee:	b662      	cpsie	i
 80059f0:	613b      	str	r3, [r7, #16]
}
 80059f2:	bf00      	nop
 80059f4:	e7fe      	b.n	80059f4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d10c      	bne.n	8005a16 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80059fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a00:	b672      	cpsid	i
 8005a02:	f383 8811 	msr	BASEPRI, r3
 8005a06:	f3bf 8f6f 	isb	sy
 8005a0a:	f3bf 8f4f 	dsb	sy
 8005a0e:	b662      	cpsie	i
 8005a10:	60fb      	str	r3, [r7, #12]
}
 8005a12:	bf00      	nop
 8005a14:	e7fe      	b.n	8005a14 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8005a16:	f000 fe71 	bl	80066fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005a1a:	4b1d      	ldr	r3, [pc, #116]	; (8005a90 <xTaskCheckForTimeOut+0xc4>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	69ba      	ldr	r2, [r7, #24]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a32:	d102      	bne.n	8005a3a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005a34:	2300      	movs	r3, #0
 8005a36:	61fb      	str	r3, [r7, #28]
 8005a38:	e023      	b.n	8005a82 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	4b15      	ldr	r3, [pc, #84]	; (8005a94 <xTaskCheckForTimeOut+0xc8>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d007      	beq.n	8005a56 <xTaskCheckForTimeOut+0x8a>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	69ba      	ldr	r2, [r7, #24]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d302      	bcc.n	8005a56 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005a50:	2301      	movs	r3, #1
 8005a52:	61fb      	str	r3, [r7, #28]
 8005a54:	e015      	b.n	8005a82 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	697a      	ldr	r2, [r7, #20]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d20b      	bcs.n	8005a78 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	1ad2      	subs	r2, r2, r3
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f7ff ff97 	bl	80059a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005a72:	2300      	movs	r3, #0
 8005a74:	61fb      	str	r3, [r7, #28]
 8005a76:	e004      	b.n	8005a82 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005a82:	f000 fe6f 	bl	8006764 <vPortExitCritical>

	return xReturn;
 8005a86:	69fb      	ldr	r3, [r7, #28]
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3720      	adds	r7, #32
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	20000f14 	.word	0x20000f14
 8005a94:	20000f28 	.word	0x20000f28

08005a98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005a98:	b480      	push	{r7}
 8005a9a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005a9c:	4b03      	ldr	r3, [pc, #12]	; (8005aac <vTaskMissedYield+0x14>)
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	601a      	str	r2, [r3, #0]
}
 8005aa2:	bf00      	nop
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr
 8005aac:	20000f24 	.word	0x20000f24

08005ab0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005ab8:	f000 f852 	bl	8005b60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005abc:	4b06      	ldr	r3, [pc, #24]	; (8005ad8 <prvIdleTask+0x28>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d9f9      	bls.n	8005ab8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005ac4:	4b05      	ldr	r3, [pc, #20]	; (8005adc <prvIdleTask+0x2c>)
 8005ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aca:	601a      	str	r2, [r3, #0]
 8005acc:	f3bf 8f4f 	dsb	sy
 8005ad0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005ad4:	e7f0      	b.n	8005ab8 <prvIdleTask+0x8>
 8005ad6:	bf00      	nop
 8005ad8:	20000a40 	.word	0x20000a40
 8005adc:	e000ed04 	.word	0xe000ed04

08005ae0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b082      	sub	sp, #8
 8005ae4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	607b      	str	r3, [r7, #4]
 8005aea:	e00c      	b.n	8005b06 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	4613      	mov	r3, r2
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	4413      	add	r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	4a12      	ldr	r2, [pc, #72]	; (8005b40 <prvInitialiseTaskLists+0x60>)
 8005af8:	4413      	add	r3, r2
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7fe fbb2 	bl	8004264 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	3301      	adds	r3, #1
 8005b04:	607b      	str	r3, [r7, #4]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2b37      	cmp	r3, #55	; 0x37
 8005b0a:	d9ef      	bls.n	8005aec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005b0c:	480d      	ldr	r0, [pc, #52]	; (8005b44 <prvInitialiseTaskLists+0x64>)
 8005b0e:	f7fe fba9 	bl	8004264 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005b12:	480d      	ldr	r0, [pc, #52]	; (8005b48 <prvInitialiseTaskLists+0x68>)
 8005b14:	f7fe fba6 	bl	8004264 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005b18:	480c      	ldr	r0, [pc, #48]	; (8005b4c <prvInitialiseTaskLists+0x6c>)
 8005b1a:	f7fe fba3 	bl	8004264 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005b1e:	480c      	ldr	r0, [pc, #48]	; (8005b50 <prvInitialiseTaskLists+0x70>)
 8005b20:	f7fe fba0 	bl	8004264 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b24:	480b      	ldr	r0, [pc, #44]	; (8005b54 <prvInitialiseTaskLists+0x74>)
 8005b26:	f7fe fb9d 	bl	8004264 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b2a:	4b0b      	ldr	r3, [pc, #44]	; (8005b58 <prvInitialiseTaskLists+0x78>)
 8005b2c:	4a05      	ldr	r2, [pc, #20]	; (8005b44 <prvInitialiseTaskLists+0x64>)
 8005b2e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b30:	4b0a      	ldr	r3, [pc, #40]	; (8005b5c <prvInitialiseTaskLists+0x7c>)
 8005b32:	4a05      	ldr	r2, [pc, #20]	; (8005b48 <prvInitialiseTaskLists+0x68>)
 8005b34:	601a      	str	r2, [r3, #0]
}
 8005b36:	bf00      	nop
 8005b38:	3708      	adds	r7, #8
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	20000a40 	.word	0x20000a40
 8005b44:	20000ea0 	.word	0x20000ea0
 8005b48:	20000eb4 	.word	0x20000eb4
 8005b4c:	20000ed0 	.word	0x20000ed0
 8005b50:	20000ee4 	.word	0x20000ee4
 8005b54:	20000efc 	.word	0x20000efc
 8005b58:	20000ec8 	.word	0x20000ec8
 8005b5c:	20000ecc 	.word	0x20000ecc

08005b60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b66:	e019      	b.n	8005b9c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005b68:	f000 fdc8 	bl	80066fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b6c:	4b10      	ldr	r3, [pc, #64]	; (8005bb0 <prvCheckTasksWaitingTermination+0x50>)
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	3304      	adds	r3, #4
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7fe fbfd 	bl	8004378 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005b7e:	4b0d      	ldr	r3, [pc, #52]	; (8005bb4 <prvCheckTasksWaitingTermination+0x54>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	3b01      	subs	r3, #1
 8005b84:	4a0b      	ldr	r2, [pc, #44]	; (8005bb4 <prvCheckTasksWaitingTermination+0x54>)
 8005b86:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005b88:	4b0b      	ldr	r3, [pc, #44]	; (8005bb8 <prvCheckTasksWaitingTermination+0x58>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	4a0a      	ldr	r2, [pc, #40]	; (8005bb8 <prvCheckTasksWaitingTermination+0x58>)
 8005b90:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005b92:	f000 fde7 	bl	8006764 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 f810 	bl	8005bbc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b9c:	4b06      	ldr	r3, [pc, #24]	; (8005bb8 <prvCheckTasksWaitingTermination+0x58>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d1e1      	bne.n	8005b68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005ba4:	bf00      	nop
 8005ba6:	bf00      	nop
 8005ba8:	3708      	adds	r7, #8
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	20000ee4 	.word	0x20000ee4
 8005bb4:	20000f10 	.word	0x20000f10
 8005bb8:	20000ef8 	.word	0x20000ef8

08005bbc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	3354      	adds	r3, #84	; 0x54
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f001 f8f1 	bl	8006db0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d108      	bne.n	8005bea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f000 ff83 	bl	8006ae8 <vPortFree>
				vPortFree( pxTCB );
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 ff80 	bl	8006ae8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005be8:	e01a      	b.n	8005c20 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d103      	bne.n	8005bfc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 ff77 	bl	8006ae8 <vPortFree>
	}
 8005bfa:	e011      	b.n	8005c20 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	d00c      	beq.n	8005c20 <prvDeleteTCB+0x64>
	__asm volatile
 8005c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c0a:	b672      	cpsid	i
 8005c0c:	f383 8811 	msr	BASEPRI, r3
 8005c10:	f3bf 8f6f 	isb	sy
 8005c14:	f3bf 8f4f 	dsb	sy
 8005c18:	b662      	cpsie	i
 8005c1a:	60fb      	str	r3, [r7, #12]
}
 8005c1c:	bf00      	nop
 8005c1e:	e7fe      	b.n	8005c1e <prvDeleteTCB+0x62>
	}
 8005c20:	bf00      	nop
 8005c22:	3710      	adds	r7, #16
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c2e:	4b0c      	ldr	r3, [pc, #48]	; (8005c60 <prvResetNextTaskUnblockTime+0x38>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d104      	bne.n	8005c42 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005c38:	4b0a      	ldr	r3, [pc, #40]	; (8005c64 <prvResetNextTaskUnblockTime+0x3c>)
 8005c3a:	f04f 32ff 	mov.w	r2, #4294967295
 8005c3e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005c40:	e008      	b.n	8005c54 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c42:	4b07      	ldr	r3, [pc, #28]	; (8005c60 <prvResetNextTaskUnblockTime+0x38>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	4a04      	ldr	r2, [pc, #16]	; (8005c64 <prvResetNextTaskUnblockTime+0x3c>)
 8005c52:	6013      	str	r3, [r2, #0]
}
 8005c54:	bf00      	nop
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr
 8005c60:	20000ec8 	.word	0x20000ec8
 8005c64:	20000f30 	.word	0x20000f30

08005c68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005c6e:	4b0b      	ldr	r3, [pc, #44]	; (8005c9c <xTaskGetSchedulerState+0x34>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d102      	bne.n	8005c7c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005c76:	2301      	movs	r3, #1
 8005c78:	607b      	str	r3, [r7, #4]
 8005c7a:	e008      	b.n	8005c8e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c7c:	4b08      	ldr	r3, [pc, #32]	; (8005ca0 <xTaskGetSchedulerState+0x38>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d102      	bne.n	8005c8a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005c84:	2302      	movs	r3, #2
 8005c86:	607b      	str	r3, [r7, #4]
 8005c88:	e001      	b.n	8005c8e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005c8e:	687b      	ldr	r3, [r7, #4]
	}
 8005c90:	4618      	mov	r0, r3
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr
 8005c9c:	20000f1c 	.word	0x20000f1c
 8005ca0:	20000f38 	.word	0x20000f38

08005ca4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b086      	sub	sp, #24
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d05a      	beq.n	8005d70 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005cba:	4b30      	ldr	r3, [pc, #192]	; (8005d7c <xTaskPriorityDisinherit+0xd8>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d00c      	beq.n	8005cde <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8005cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc8:	b672      	cpsid	i
 8005cca:	f383 8811 	msr	BASEPRI, r3
 8005cce:	f3bf 8f6f 	isb	sy
 8005cd2:	f3bf 8f4f 	dsb	sy
 8005cd6:	b662      	cpsie	i
 8005cd8:	60fb      	str	r3, [r7, #12]
}
 8005cda:	bf00      	nop
 8005cdc:	e7fe      	b.n	8005cdc <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10c      	bne.n	8005d00 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8005ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cea:	b672      	cpsid	i
 8005cec:	f383 8811 	msr	BASEPRI, r3
 8005cf0:	f3bf 8f6f 	isb	sy
 8005cf4:	f3bf 8f4f 	dsb	sy
 8005cf8:	b662      	cpsie	i
 8005cfa:	60bb      	str	r3, [r7, #8]
}
 8005cfc:	bf00      	nop
 8005cfe:	e7fe      	b.n	8005cfe <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d04:	1e5a      	subs	r2, r3, #1
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d02c      	beq.n	8005d70 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d128      	bne.n	8005d70 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	3304      	adds	r3, #4
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7fe fb28 	bl	8004378 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d34:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d40:	4b0f      	ldr	r3, [pc, #60]	; (8005d80 <xTaskPriorityDisinherit+0xdc>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d903      	bls.n	8005d50 <xTaskPriorityDisinherit+0xac>
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d4c:	4a0c      	ldr	r2, [pc, #48]	; (8005d80 <xTaskPriorityDisinherit+0xdc>)
 8005d4e:	6013      	str	r3, [r2, #0]
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d54:	4613      	mov	r3, r2
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4413      	add	r3, r2
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	4a09      	ldr	r2, [pc, #36]	; (8005d84 <xTaskPriorityDisinherit+0xe0>)
 8005d5e:	441a      	add	r2, r3
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	3304      	adds	r3, #4
 8005d64:	4619      	mov	r1, r3
 8005d66:	4610      	mov	r0, r2
 8005d68:	f7fe faa9 	bl	80042be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d70:	697b      	ldr	r3, [r7, #20]
	}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3718      	adds	r7, #24
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	20000a3c 	.word	0x20000a3c
 8005d80:	20000f18 	.word	0x20000f18
 8005d84:	20000a40 	.word	0x20000a40

08005d88 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005d92:	4b21      	ldr	r3, [pc, #132]	; (8005e18 <prvAddCurrentTaskToDelayedList+0x90>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d98:	4b20      	ldr	r3, [pc, #128]	; (8005e1c <prvAddCurrentTaskToDelayedList+0x94>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	3304      	adds	r3, #4
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7fe faea 	bl	8004378 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005daa:	d10a      	bne.n	8005dc2 <prvAddCurrentTaskToDelayedList+0x3a>
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d007      	beq.n	8005dc2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005db2:	4b1a      	ldr	r3, [pc, #104]	; (8005e1c <prvAddCurrentTaskToDelayedList+0x94>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	3304      	adds	r3, #4
 8005db8:	4619      	mov	r1, r3
 8005dba:	4819      	ldr	r0, [pc, #100]	; (8005e20 <prvAddCurrentTaskToDelayedList+0x98>)
 8005dbc:	f7fe fa7f 	bl	80042be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005dc0:	e026      	b.n	8005e10 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005dca:	4b14      	ldr	r3, [pc, #80]	; (8005e1c <prvAddCurrentTaskToDelayedList+0x94>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68ba      	ldr	r2, [r7, #8]
 8005dd0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005dd2:	68ba      	ldr	r2, [r7, #8]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d209      	bcs.n	8005dee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005dda:	4b12      	ldr	r3, [pc, #72]	; (8005e24 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	4b0f      	ldr	r3, [pc, #60]	; (8005e1c <prvAddCurrentTaskToDelayedList+0x94>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	3304      	adds	r3, #4
 8005de4:	4619      	mov	r1, r3
 8005de6:	4610      	mov	r0, r2
 8005de8:	f7fe fa8d 	bl	8004306 <vListInsert>
}
 8005dec:	e010      	b.n	8005e10 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005dee:	4b0e      	ldr	r3, [pc, #56]	; (8005e28 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	4b0a      	ldr	r3, [pc, #40]	; (8005e1c <prvAddCurrentTaskToDelayedList+0x94>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	3304      	adds	r3, #4
 8005df8:	4619      	mov	r1, r3
 8005dfa:	4610      	mov	r0, r2
 8005dfc:	f7fe fa83 	bl	8004306 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005e00:	4b0a      	ldr	r3, [pc, #40]	; (8005e2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68ba      	ldr	r2, [r7, #8]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d202      	bcs.n	8005e10 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005e0a:	4a08      	ldr	r2, [pc, #32]	; (8005e2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	6013      	str	r3, [r2, #0]
}
 8005e10:	bf00      	nop
 8005e12:	3710      	adds	r7, #16
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	20000f14 	.word	0x20000f14
 8005e1c:	20000a3c 	.word	0x20000a3c
 8005e20:	20000efc 	.word	0x20000efc
 8005e24:	20000ecc 	.word	0x20000ecc
 8005e28:	20000ec8 	.word	0x20000ec8
 8005e2c:	20000f30 	.word	0x20000f30

08005e30 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b08a      	sub	sp, #40	; 0x28
 8005e34:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005e36:	2300      	movs	r3, #0
 8005e38:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005e3a:	f000 fb15 	bl	8006468 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005e3e:	4b1d      	ldr	r3, [pc, #116]	; (8005eb4 <xTimerCreateTimerTask+0x84>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d021      	beq.n	8005e8a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005e46:	2300      	movs	r3, #0
 8005e48:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005e4e:	1d3a      	adds	r2, r7, #4
 8005e50:	f107 0108 	add.w	r1, r7, #8
 8005e54:	f107 030c 	add.w	r3, r7, #12
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7fe f9e9 	bl	8004230 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005e5e:	6879      	ldr	r1, [r7, #4]
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	9202      	str	r2, [sp, #8]
 8005e66:	9301      	str	r3, [sp, #4]
 8005e68:	2302      	movs	r3, #2
 8005e6a:	9300      	str	r3, [sp, #0]
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	460a      	mov	r2, r1
 8005e70:	4911      	ldr	r1, [pc, #68]	; (8005eb8 <xTimerCreateTimerTask+0x88>)
 8005e72:	4812      	ldr	r0, [pc, #72]	; (8005ebc <xTimerCreateTimerTask+0x8c>)
 8005e74:	f7fe ffb4 	bl	8004de0 <xTaskCreateStatic>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	4a11      	ldr	r2, [pc, #68]	; (8005ec0 <xTimerCreateTimerTask+0x90>)
 8005e7c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005e7e:	4b10      	ldr	r3, [pc, #64]	; (8005ec0 <xTimerCreateTimerTask+0x90>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d001      	beq.n	8005e8a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005e86:	2301      	movs	r3, #1
 8005e88:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d10c      	bne.n	8005eaa <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8005e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e94:	b672      	cpsid	i
 8005e96:	f383 8811 	msr	BASEPRI, r3
 8005e9a:	f3bf 8f6f 	isb	sy
 8005e9e:	f3bf 8f4f 	dsb	sy
 8005ea2:	b662      	cpsie	i
 8005ea4:	613b      	str	r3, [r7, #16]
}
 8005ea6:	bf00      	nop
 8005ea8:	e7fe      	b.n	8005ea8 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8005eaa:	697b      	ldr	r3, [r7, #20]
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3718      	adds	r7, #24
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	20000f6c 	.word	0x20000f6c
 8005eb8:	08006f58 	.word	0x08006f58
 8005ebc:	08006001 	.word	0x08006001
 8005ec0:	20000f70 	.word	0x20000f70

08005ec4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b08a      	sub	sp, #40	; 0x28
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	607a      	str	r2, [r7, #4]
 8005ed0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d10c      	bne.n	8005ef6 <xTimerGenericCommand+0x32>
	__asm volatile
 8005edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee0:	b672      	cpsid	i
 8005ee2:	f383 8811 	msr	BASEPRI, r3
 8005ee6:	f3bf 8f6f 	isb	sy
 8005eea:	f3bf 8f4f 	dsb	sy
 8005eee:	b662      	cpsie	i
 8005ef0:	623b      	str	r3, [r7, #32]
}
 8005ef2:	bf00      	nop
 8005ef4:	e7fe      	b.n	8005ef4 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005ef6:	4b1a      	ldr	r3, [pc, #104]	; (8005f60 <xTimerGenericCommand+0x9c>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d02a      	beq.n	8005f54 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	2b05      	cmp	r3, #5
 8005f0e:	dc18      	bgt.n	8005f42 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005f10:	f7ff feaa 	bl	8005c68 <xTaskGetSchedulerState>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d109      	bne.n	8005f2e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005f1a:	4b11      	ldr	r3, [pc, #68]	; (8005f60 <xTimerGenericCommand+0x9c>)
 8005f1c:	6818      	ldr	r0, [r3, #0]
 8005f1e:	f107 0110 	add.w	r1, r7, #16
 8005f22:	2300      	movs	r3, #0
 8005f24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f26:	f7fe fb61 	bl	80045ec <xQueueGenericSend>
 8005f2a:	6278      	str	r0, [r7, #36]	; 0x24
 8005f2c:	e012      	b.n	8005f54 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005f2e:	4b0c      	ldr	r3, [pc, #48]	; (8005f60 <xTimerGenericCommand+0x9c>)
 8005f30:	6818      	ldr	r0, [r3, #0]
 8005f32:	f107 0110 	add.w	r1, r7, #16
 8005f36:	2300      	movs	r3, #0
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f7fe fb57 	bl	80045ec <xQueueGenericSend>
 8005f3e:	6278      	str	r0, [r7, #36]	; 0x24
 8005f40:	e008      	b.n	8005f54 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005f42:	4b07      	ldr	r3, [pc, #28]	; (8005f60 <xTimerGenericCommand+0x9c>)
 8005f44:	6818      	ldr	r0, [r3, #0]
 8005f46:	f107 0110 	add.w	r1, r7, #16
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	683a      	ldr	r2, [r7, #0]
 8005f4e:	f7fe fc53 	bl	80047f8 <xQueueGenericSendFromISR>
 8005f52:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3728      	adds	r7, #40	; 0x28
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	20000f6c 	.word	0x20000f6c

08005f64 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b088      	sub	sp, #32
 8005f68:	af02      	add	r7, sp, #8
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f6e:	4b23      	ldr	r3, [pc, #140]	; (8005ffc <prvProcessExpiredTimer+0x98>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	3304      	adds	r3, #4
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f7fe f9fb 	bl	8004378 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f88:	f003 0304 	and.w	r3, r3, #4
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d024      	beq.n	8005fda <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	699a      	ldr	r2, [r3, #24]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	18d1      	adds	r1, r2, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	683a      	ldr	r2, [r7, #0]
 8005f9c:	6978      	ldr	r0, [r7, #20]
 8005f9e:	f000 f8d3 	bl	8006148 <prvInsertTimerInActiveList>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d021      	beq.n	8005fec <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005fa8:	2300      	movs	r3, #0
 8005faa:	9300      	str	r3, [sp, #0]
 8005fac:	2300      	movs	r3, #0
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	2100      	movs	r1, #0
 8005fb2:	6978      	ldr	r0, [r7, #20]
 8005fb4:	f7ff ff86 	bl	8005ec4 <xTimerGenericCommand>
 8005fb8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d115      	bne.n	8005fec <prvProcessExpiredTimer+0x88>
	__asm volatile
 8005fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc4:	b672      	cpsid	i
 8005fc6:	f383 8811 	msr	BASEPRI, r3
 8005fca:	f3bf 8f6f 	isb	sy
 8005fce:	f3bf 8f4f 	dsb	sy
 8005fd2:	b662      	cpsie	i
 8005fd4:	60fb      	str	r3, [r7, #12]
}
 8005fd6:	bf00      	nop
 8005fd8:	e7fe      	b.n	8005fd8 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fe0:	f023 0301 	bic.w	r3, r3, #1
 8005fe4:	b2da      	uxtb	r2, r3
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	6a1b      	ldr	r3, [r3, #32]
 8005ff0:	6978      	ldr	r0, [r7, #20]
 8005ff2:	4798      	blx	r3
}
 8005ff4:	bf00      	nop
 8005ff6:	3718      	adds	r7, #24
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	20000f64 	.word	0x20000f64

08006000 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006008:	f107 0308 	add.w	r3, r7, #8
 800600c:	4618      	mov	r0, r3
 800600e:	f000 f857 	bl	80060c0 <prvGetNextExpireTime>
 8006012:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	4619      	mov	r1, r3
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f000 f803 	bl	8006024 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800601e:	f000 f8d5 	bl	80061cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006022:	e7f1      	b.n	8006008 <prvTimerTask+0x8>

08006024 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800602e:	f7ff fa1d 	bl	800546c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006032:	f107 0308 	add.w	r3, r7, #8
 8006036:	4618      	mov	r0, r3
 8006038:	f000 f866 	bl	8006108 <prvSampleTimeNow>
 800603c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d130      	bne.n	80060a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d10a      	bne.n	8006060 <prvProcessTimerOrBlockTask+0x3c>
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	429a      	cmp	r2, r3
 8006050:	d806      	bhi.n	8006060 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006052:	f7ff fa19 	bl	8005488 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006056:	68f9      	ldr	r1, [r7, #12]
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f7ff ff83 	bl	8005f64 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800605e:	e024      	b.n	80060aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d008      	beq.n	8006078 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006066:	4b13      	ldr	r3, [pc, #76]	; (80060b4 <prvProcessTimerOrBlockTask+0x90>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d101      	bne.n	8006074 <prvProcessTimerOrBlockTask+0x50>
 8006070:	2301      	movs	r3, #1
 8006072:	e000      	b.n	8006076 <prvProcessTimerOrBlockTask+0x52>
 8006074:	2300      	movs	r3, #0
 8006076:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006078:	4b0f      	ldr	r3, [pc, #60]	; (80060b8 <prvProcessTimerOrBlockTask+0x94>)
 800607a:	6818      	ldr	r0, [r3, #0]
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	683a      	ldr	r2, [r7, #0]
 8006084:	4619      	mov	r1, r3
 8006086:	f7fe fe77 	bl	8004d78 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800608a:	f7ff f9fd 	bl	8005488 <xTaskResumeAll>
 800608e:	4603      	mov	r3, r0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d10a      	bne.n	80060aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006094:	4b09      	ldr	r3, [pc, #36]	; (80060bc <prvProcessTimerOrBlockTask+0x98>)
 8006096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800609a:	601a      	str	r2, [r3, #0]
 800609c:	f3bf 8f4f 	dsb	sy
 80060a0:	f3bf 8f6f 	isb	sy
}
 80060a4:	e001      	b.n	80060aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80060a6:	f7ff f9ef 	bl	8005488 <xTaskResumeAll>
}
 80060aa:	bf00      	nop
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	20000f68 	.word	0x20000f68
 80060b8:	20000f6c 	.word	0x20000f6c
 80060bc:	e000ed04 	.word	0xe000ed04

080060c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80060c0:	b480      	push	{r7}
 80060c2:	b085      	sub	sp, #20
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80060c8:	4b0e      	ldr	r3, [pc, #56]	; (8006104 <prvGetNextExpireTime+0x44>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d101      	bne.n	80060d6 <prvGetNextExpireTime+0x16>
 80060d2:	2201      	movs	r2, #1
 80060d4:	e000      	b.n	80060d8 <prvGetNextExpireTime+0x18>
 80060d6:	2200      	movs	r2, #0
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d105      	bne.n	80060f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80060e4:	4b07      	ldr	r3, [pc, #28]	; (8006104 <prvGetNextExpireTime+0x44>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	60fb      	str	r3, [r7, #12]
 80060ee:	e001      	b.n	80060f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80060f0:	2300      	movs	r3, #0
 80060f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80060f4:	68fb      	ldr	r3, [r7, #12]
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3714      	adds	r7, #20
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	20000f64 	.word	0x20000f64

08006108 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006110:	f7ff fa5a 	bl	80055c8 <xTaskGetTickCount>
 8006114:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006116:	4b0b      	ldr	r3, [pc, #44]	; (8006144 <prvSampleTimeNow+0x3c>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	429a      	cmp	r2, r3
 800611e:	d205      	bcs.n	800612c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006120:	f000 f93c 	bl	800639c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	601a      	str	r2, [r3, #0]
 800612a:	e002      	b.n	8006132 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006132:	4a04      	ldr	r2, [pc, #16]	; (8006144 <prvSampleTimeNow+0x3c>)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006138:	68fb      	ldr	r3, [r7, #12]
}
 800613a:	4618      	mov	r0, r3
 800613c:	3710      	adds	r7, #16
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	20000f74 	.word	0x20000f74

08006148 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b086      	sub	sp, #24
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]
 8006154:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006156:	2300      	movs	r3, #0
 8006158:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	68ba      	ldr	r2, [r7, #8]
 800615e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006166:	68ba      	ldr	r2, [r7, #8]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	429a      	cmp	r2, r3
 800616c:	d812      	bhi.n	8006194 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	1ad2      	subs	r2, r2, r3
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	699b      	ldr	r3, [r3, #24]
 8006178:	429a      	cmp	r2, r3
 800617a:	d302      	bcc.n	8006182 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800617c:	2301      	movs	r3, #1
 800617e:	617b      	str	r3, [r7, #20]
 8006180:	e01b      	b.n	80061ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006182:	4b10      	ldr	r3, [pc, #64]	; (80061c4 <prvInsertTimerInActiveList+0x7c>)
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	3304      	adds	r3, #4
 800618a:	4619      	mov	r1, r3
 800618c:	4610      	mov	r0, r2
 800618e:	f7fe f8ba 	bl	8004306 <vListInsert>
 8006192:	e012      	b.n	80061ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	429a      	cmp	r2, r3
 800619a:	d206      	bcs.n	80061aa <prvInsertTimerInActiveList+0x62>
 800619c:	68ba      	ldr	r2, [r7, #8]
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d302      	bcc.n	80061aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80061a4:	2301      	movs	r3, #1
 80061a6:	617b      	str	r3, [r7, #20]
 80061a8:	e007      	b.n	80061ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80061aa:	4b07      	ldr	r3, [pc, #28]	; (80061c8 <prvInsertTimerInActiveList+0x80>)
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	3304      	adds	r3, #4
 80061b2:	4619      	mov	r1, r3
 80061b4:	4610      	mov	r0, r2
 80061b6:	f7fe f8a6 	bl	8004306 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80061ba:	697b      	ldr	r3, [r7, #20]
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3718      	adds	r7, #24
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	20000f68 	.word	0x20000f68
 80061c8:	20000f64 	.word	0x20000f64

080061cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b08e      	sub	sp, #56	; 0x38
 80061d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80061d2:	e0d0      	b.n	8006376 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	da1a      	bge.n	8006210 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80061da:	1d3b      	adds	r3, r7, #4
 80061dc:	3304      	adds	r3, #4
 80061de:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80061e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d10c      	bne.n	8006200 <prvProcessReceivedCommands+0x34>
	__asm volatile
 80061e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ea:	b672      	cpsid	i
 80061ec:	f383 8811 	msr	BASEPRI, r3
 80061f0:	f3bf 8f6f 	isb	sy
 80061f4:	f3bf 8f4f 	dsb	sy
 80061f8:	b662      	cpsie	i
 80061fa:	61fb      	str	r3, [r7, #28]
}
 80061fc:	bf00      	nop
 80061fe:	e7fe      	b.n	80061fe <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006206:	6850      	ldr	r0, [r2, #4]
 8006208:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800620a:	6892      	ldr	r2, [r2, #8]
 800620c:	4611      	mov	r1, r2
 800620e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	f2c0 80ae 	blt.w	8006374 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800621c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621e:	695b      	ldr	r3, [r3, #20]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d004      	beq.n	800622e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006226:	3304      	adds	r3, #4
 8006228:	4618      	mov	r0, r3
 800622a:	f7fe f8a5 	bl	8004378 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800622e:	463b      	mov	r3, r7
 8006230:	4618      	mov	r0, r3
 8006232:	f7ff ff69 	bl	8006108 <prvSampleTimeNow>
 8006236:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2b09      	cmp	r3, #9
 800623c:	f200 809b 	bhi.w	8006376 <prvProcessReceivedCommands+0x1aa>
 8006240:	a201      	add	r2, pc, #4	; (adr r2, 8006248 <prvProcessReceivedCommands+0x7c>)
 8006242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006246:	bf00      	nop
 8006248:	08006271 	.word	0x08006271
 800624c:	08006271 	.word	0x08006271
 8006250:	08006271 	.word	0x08006271
 8006254:	080062e9 	.word	0x080062e9
 8006258:	080062fd 	.word	0x080062fd
 800625c:	0800634b 	.word	0x0800634b
 8006260:	08006271 	.word	0x08006271
 8006264:	08006271 	.word	0x08006271
 8006268:	080062e9 	.word	0x080062e9
 800626c:	080062fd 	.word	0x080062fd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006272:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006276:	f043 0301 	orr.w	r3, r3, #1
 800627a:	b2da      	uxtb	r2, r3
 800627c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006282:	68ba      	ldr	r2, [r7, #8]
 8006284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006286:	699b      	ldr	r3, [r3, #24]
 8006288:	18d1      	adds	r1, r2, r3
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800628e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006290:	f7ff ff5a 	bl	8006148 <prvInsertTimerInActiveList>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d06d      	beq.n	8006376 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800629a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629c:	6a1b      	ldr	r3, [r3, #32]
 800629e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062a0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80062a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062a8:	f003 0304 	and.w	r3, r3, #4
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d062      	beq.n	8006376 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80062b0:	68ba      	ldr	r2, [r7, #8]
 80062b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	441a      	add	r2, r3
 80062b8:	2300      	movs	r3, #0
 80062ba:	9300      	str	r3, [sp, #0]
 80062bc:	2300      	movs	r3, #0
 80062be:	2100      	movs	r1, #0
 80062c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062c2:	f7ff fdff 	bl	8005ec4 <xTimerGenericCommand>
 80062c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80062c8:	6a3b      	ldr	r3, [r7, #32]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d153      	bne.n	8006376 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 80062ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d2:	b672      	cpsid	i
 80062d4:	f383 8811 	msr	BASEPRI, r3
 80062d8:	f3bf 8f6f 	isb	sy
 80062dc:	f3bf 8f4f 	dsb	sy
 80062e0:	b662      	cpsie	i
 80062e2:	61bb      	str	r3, [r7, #24]
}
 80062e4:	bf00      	nop
 80062e6:	e7fe      	b.n	80062e6 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80062e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062ee:	f023 0301 	bic.w	r3, r3, #1
 80062f2:	b2da      	uxtb	r2, r3
 80062f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80062fa:	e03c      	b.n	8006376 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80062fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006302:	f043 0301 	orr.w	r3, r3, #1
 8006306:	b2da      	uxtb	r2, r3
 8006308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800630e:	68ba      	ldr	r2, [r7, #8]
 8006310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006312:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006316:	699b      	ldr	r3, [r3, #24]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d10c      	bne.n	8006336 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800631c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006320:	b672      	cpsid	i
 8006322:	f383 8811 	msr	BASEPRI, r3
 8006326:	f3bf 8f6f 	isb	sy
 800632a:	f3bf 8f4f 	dsb	sy
 800632e:	b662      	cpsie	i
 8006330:	617b      	str	r3, [r7, #20]
}
 8006332:	bf00      	nop
 8006334:	e7fe      	b.n	8006334 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006338:	699a      	ldr	r2, [r3, #24]
 800633a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633c:	18d1      	adds	r1, r2, r3
 800633e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006342:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006344:	f7ff ff00 	bl	8006148 <prvInsertTimerInActiveList>
					break;
 8006348:	e015      	b.n	8006376 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800634a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006350:	f003 0302 	and.w	r3, r3, #2
 8006354:	2b00      	cmp	r3, #0
 8006356:	d103      	bne.n	8006360 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8006358:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800635a:	f000 fbc5 	bl	8006ae8 <vPortFree>
 800635e:	e00a      	b.n	8006376 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006362:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006366:	f023 0301 	bic.w	r3, r3, #1
 800636a:	b2da      	uxtb	r2, r3
 800636c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006372:	e000      	b.n	8006376 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006374:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006376:	4b08      	ldr	r3, [pc, #32]	; (8006398 <prvProcessReceivedCommands+0x1cc>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	1d39      	adds	r1, r7, #4
 800637c:	2200      	movs	r2, #0
 800637e:	4618      	mov	r0, r3
 8006380:	f7fe fada 	bl	8004938 <xQueueReceive>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	f47f af24 	bne.w	80061d4 <prvProcessReceivedCommands+0x8>
	}
}
 800638c:	bf00      	nop
 800638e:	bf00      	nop
 8006390:	3730      	adds	r7, #48	; 0x30
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	20000f6c 	.word	0x20000f6c

0800639c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b088      	sub	sp, #32
 80063a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80063a2:	e04a      	b.n	800643a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80063a4:	4b2e      	ldr	r3, [pc, #184]	; (8006460 <prvSwitchTimerLists+0xc4>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063ae:	4b2c      	ldr	r3, [pc, #176]	; (8006460 <prvSwitchTimerLists+0xc4>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	3304      	adds	r3, #4
 80063bc:	4618      	mov	r0, r3
 80063be:	f7fd ffdb 	bl	8004378 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6a1b      	ldr	r3, [r3, #32]
 80063c6:	68f8      	ldr	r0, [r7, #12]
 80063c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063d0:	f003 0304 	and.w	r3, r3, #4
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d030      	beq.n	800643a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	699b      	ldr	r3, [r3, #24]
 80063dc:	693a      	ldr	r2, [r7, #16]
 80063de:	4413      	add	r3, r2
 80063e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80063e2:	68ba      	ldr	r2, [r7, #8]
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d90e      	bls.n	8006408 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	68ba      	ldr	r2, [r7, #8]
 80063ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80063f6:	4b1a      	ldr	r3, [pc, #104]	; (8006460 <prvSwitchTimerLists+0xc4>)
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	3304      	adds	r3, #4
 80063fe:	4619      	mov	r1, r3
 8006400:	4610      	mov	r0, r2
 8006402:	f7fd ff80 	bl	8004306 <vListInsert>
 8006406:	e018      	b.n	800643a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006408:	2300      	movs	r3, #0
 800640a:	9300      	str	r3, [sp, #0]
 800640c:	2300      	movs	r3, #0
 800640e:	693a      	ldr	r2, [r7, #16]
 8006410:	2100      	movs	r1, #0
 8006412:	68f8      	ldr	r0, [r7, #12]
 8006414:	f7ff fd56 	bl	8005ec4 <xTimerGenericCommand>
 8006418:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d10c      	bne.n	800643a <prvSwitchTimerLists+0x9e>
	__asm volatile
 8006420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006424:	b672      	cpsid	i
 8006426:	f383 8811 	msr	BASEPRI, r3
 800642a:	f3bf 8f6f 	isb	sy
 800642e:	f3bf 8f4f 	dsb	sy
 8006432:	b662      	cpsie	i
 8006434:	603b      	str	r3, [r7, #0]
}
 8006436:	bf00      	nop
 8006438:	e7fe      	b.n	8006438 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800643a:	4b09      	ldr	r3, [pc, #36]	; (8006460 <prvSwitchTimerLists+0xc4>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1af      	bne.n	80063a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006444:	4b06      	ldr	r3, [pc, #24]	; (8006460 <prvSwitchTimerLists+0xc4>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800644a:	4b06      	ldr	r3, [pc, #24]	; (8006464 <prvSwitchTimerLists+0xc8>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a04      	ldr	r2, [pc, #16]	; (8006460 <prvSwitchTimerLists+0xc4>)
 8006450:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006452:	4a04      	ldr	r2, [pc, #16]	; (8006464 <prvSwitchTimerLists+0xc8>)
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	6013      	str	r3, [r2, #0]
}
 8006458:	bf00      	nop
 800645a:	3718      	adds	r7, #24
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}
 8006460:	20000f64 	.word	0x20000f64
 8006464:	20000f68 	.word	0x20000f68

08006468 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800646e:	f000 f945 	bl	80066fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006472:	4b15      	ldr	r3, [pc, #84]	; (80064c8 <prvCheckForValidListAndQueue+0x60>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d120      	bne.n	80064bc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800647a:	4814      	ldr	r0, [pc, #80]	; (80064cc <prvCheckForValidListAndQueue+0x64>)
 800647c:	f7fd fef2 	bl	8004264 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006480:	4813      	ldr	r0, [pc, #76]	; (80064d0 <prvCheckForValidListAndQueue+0x68>)
 8006482:	f7fd feef 	bl	8004264 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006486:	4b13      	ldr	r3, [pc, #76]	; (80064d4 <prvCheckForValidListAndQueue+0x6c>)
 8006488:	4a10      	ldr	r2, [pc, #64]	; (80064cc <prvCheckForValidListAndQueue+0x64>)
 800648a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800648c:	4b12      	ldr	r3, [pc, #72]	; (80064d8 <prvCheckForValidListAndQueue+0x70>)
 800648e:	4a10      	ldr	r2, [pc, #64]	; (80064d0 <prvCheckForValidListAndQueue+0x68>)
 8006490:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006492:	2300      	movs	r3, #0
 8006494:	9300      	str	r3, [sp, #0]
 8006496:	4b11      	ldr	r3, [pc, #68]	; (80064dc <prvCheckForValidListAndQueue+0x74>)
 8006498:	4a11      	ldr	r2, [pc, #68]	; (80064e0 <prvCheckForValidListAndQueue+0x78>)
 800649a:	2110      	movs	r1, #16
 800649c:	200a      	movs	r0, #10
 800649e:	f7fd ffff 	bl	80044a0 <xQueueGenericCreateStatic>
 80064a2:	4603      	mov	r3, r0
 80064a4:	4a08      	ldr	r2, [pc, #32]	; (80064c8 <prvCheckForValidListAndQueue+0x60>)
 80064a6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80064a8:	4b07      	ldr	r3, [pc, #28]	; (80064c8 <prvCheckForValidListAndQueue+0x60>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d005      	beq.n	80064bc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80064b0:	4b05      	ldr	r3, [pc, #20]	; (80064c8 <prvCheckForValidListAndQueue+0x60>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	490b      	ldr	r1, [pc, #44]	; (80064e4 <prvCheckForValidListAndQueue+0x7c>)
 80064b6:	4618      	mov	r0, r3
 80064b8:	f7fe fc34 	bl	8004d24 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80064bc:	f000 f952 	bl	8006764 <vPortExitCritical>
}
 80064c0:	bf00      	nop
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	20000f6c 	.word	0x20000f6c
 80064cc:	20000f3c 	.word	0x20000f3c
 80064d0:	20000f50 	.word	0x20000f50
 80064d4:	20000f64 	.word	0x20000f64
 80064d8:	20000f68 	.word	0x20000f68
 80064dc:	20001018 	.word	0x20001018
 80064e0:	20000f78 	.word	0x20000f78
 80064e4:	08006f60 	.word	0x08006f60

080064e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80064e8:	b480      	push	{r7}
 80064ea:	b085      	sub	sp, #20
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	3b04      	subs	r3, #4
 80064f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006500:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	3b04      	subs	r3, #4
 8006506:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	f023 0201 	bic.w	r2, r3, #1
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	3b04      	subs	r3, #4
 8006516:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006518:	4a0c      	ldr	r2, [pc, #48]	; (800654c <pxPortInitialiseStack+0x64>)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	3b14      	subs	r3, #20
 8006522:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	3b04      	subs	r3, #4
 800652e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f06f 0202 	mvn.w	r2, #2
 8006536:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	3b20      	subs	r3, #32
 800653c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800653e:	68fb      	ldr	r3, [r7, #12]
}
 8006540:	4618      	mov	r0, r3
 8006542:	3714      	adds	r7, #20
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr
 800654c:	08006551 	.word	0x08006551

08006550 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006550:	b480      	push	{r7}
 8006552:	b085      	sub	sp, #20
 8006554:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006556:	2300      	movs	r3, #0
 8006558:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800655a:	4b14      	ldr	r3, [pc, #80]	; (80065ac <prvTaskExitError+0x5c>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006562:	d00c      	beq.n	800657e <prvTaskExitError+0x2e>
	__asm volatile
 8006564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006568:	b672      	cpsid	i
 800656a:	f383 8811 	msr	BASEPRI, r3
 800656e:	f3bf 8f6f 	isb	sy
 8006572:	f3bf 8f4f 	dsb	sy
 8006576:	b662      	cpsie	i
 8006578:	60fb      	str	r3, [r7, #12]
}
 800657a:	bf00      	nop
 800657c:	e7fe      	b.n	800657c <prvTaskExitError+0x2c>
	__asm volatile
 800657e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006582:	b672      	cpsid	i
 8006584:	f383 8811 	msr	BASEPRI, r3
 8006588:	f3bf 8f6f 	isb	sy
 800658c:	f3bf 8f4f 	dsb	sy
 8006590:	b662      	cpsie	i
 8006592:	60bb      	str	r3, [r7, #8]
}
 8006594:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006596:	bf00      	nop
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d0fc      	beq.n	8006598 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800659e:	bf00      	nop
 80065a0:	bf00      	nop
 80065a2:	3714      	adds	r7, #20
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr
 80065ac:	2000000c 	.word	0x2000000c

080065b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80065b0:	4b07      	ldr	r3, [pc, #28]	; (80065d0 <pxCurrentTCBConst2>)
 80065b2:	6819      	ldr	r1, [r3, #0]
 80065b4:	6808      	ldr	r0, [r1, #0]
 80065b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ba:	f380 8809 	msr	PSP, r0
 80065be:	f3bf 8f6f 	isb	sy
 80065c2:	f04f 0000 	mov.w	r0, #0
 80065c6:	f380 8811 	msr	BASEPRI, r0
 80065ca:	4770      	bx	lr
 80065cc:	f3af 8000 	nop.w

080065d0 <pxCurrentTCBConst2>:
 80065d0:	20000a3c 	.word	0x20000a3c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80065d4:	bf00      	nop
 80065d6:	bf00      	nop

080065d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80065d8:	4808      	ldr	r0, [pc, #32]	; (80065fc <prvPortStartFirstTask+0x24>)
 80065da:	6800      	ldr	r0, [r0, #0]
 80065dc:	6800      	ldr	r0, [r0, #0]
 80065de:	f380 8808 	msr	MSP, r0
 80065e2:	f04f 0000 	mov.w	r0, #0
 80065e6:	f380 8814 	msr	CONTROL, r0
 80065ea:	b662      	cpsie	i
 80065ec:	b661      	cpsie	f
 80065ee:	f3bf 8f4f 	dsb	sy
 80065f2:	f3bf 8f6f 	isb	sy
 80065f6:	df00      	svc	0
 80065f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80065fa:	bf00      	nop
 80065fc:	e000ed08 	.word	0xe000ed08

08006600 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006606:	4b37      	ldr	r3, [pc, #220]	; (80066e4 <xPortStartScheduler+0xe4>)
 8006608:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	b2db      	uxtb	r3, r3
 8006610:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	22ff      	movs	r2, #255	; 0xff
 8006616:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	b2db      	uxtb	r3, r3
 800661e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006620:	78fb      	ldrb	r3, [r7, #3]
 8006622:	b2db      	uxtb	r3, r3
 8006624:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006628:	b2da      	uxtb	r2, r3
 800662a:	4b2f      	ldr	r3, [pc, #188]	; (80066e8 <xPortStartScheduler+0xe8>)
 800662c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800662e:	4b2f      	ldr	r3, [pc, #188]	; (80066ec <xPortStartScheduler+0xec>)
 8006630:	2207      	movs	r2, #7
 8006632:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006634:	e009      	b.n	800664a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006636:	4b2d      	ldr	r3, [pc, #180]	; (80066ec <xPortStartScheduler+0xec>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	3b01      	subs	r3, #1
 800663c:	4a2b      	ldr	r2, [pc, #172]	; (80066ec <xPortStartScheduler+0xec>)
 800663e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006640:	78fb      	ldrb	r3, [r7, #3]
 8006642:	b2db      	uxtb	r3, r3
 8006644:	005b      	lsls	r3, r3, #1
 8006646:	b2db      	uxtb	r3, r3
 8006648:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800664a:	78fb      	ldrb	r3, [r7, #3]
 800664c:	b2db      	uxtb	r3, r3
 800664e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006652:	2b80      	cmp	r3, #128	; 0x80
 8006654:	d0ef      	beq.n	8006636 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006656:	4b25      	ldr	r3, [pc, #148]	; (80066ec <xPortStartScheduler+0xec>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f1c3 0307 	rsb	r3, r3, #7
 800665e:	2b04      	cmp	r3, #4
 8006660:	d00c      	beq.n	800667c <xPortStartScheduler+0x7c>
	__asm volatile
 8006662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006666:	b672      	cpsid	i
 8006668:	f383 8811 	msr	BASEPRI, r3
 800666c:	f3bf 8f6f 	isb	sy
 8006670:	f3bf 8f4f 	dsb	sy
 8006674:	b662      	cpsie	i
 8006676:	60bb      	str	r3, [r7, #8]
}
 8006678:	bf00      	nop
 800667a:	e7fe      	b.n	800667a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800667c:	4b1b      	ldr	r3, [pc, #108]	; (80066ec <xPortStartScheduler+0xec>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	021b      	lsls	r3, r3, #8
 8006682:	4a1a      	ldr	r2, [pc, #104]	; (80066ec <xPortStartScheduler+0xec>)
 8006684:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006686:	4b19      	ldr	r3, [pc, #100]	; (80066ec <xPortStartScheduler+0xec>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800668e:	4a17      	ldr	r2, [pc, #92]	; (80066ec <xPortStartScheduler+0xec>)
 8006690:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	b2da      	uxtb	r2, r3
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800669a:	4b15      	ldr	r3, [pc, #84]	; (80066f0 <xPortStartScheduler+0xf0>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a14      	ldr	r2, [pc, #80]	; (80066f0 <xPortStartScheduler+0xf0>)
 80066a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80066a4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80066a6:	4b12      	ldr	r3, [pc, #72]	; (80066f0 <xPortStartScheduler+0xf0>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a11      	ldr	r2, [pc, #68]	; (80066f0 <xPortStartScheduler+0xf0>)
 80066ac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80066b0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80066b2:	f000 f8dd 	bl	8006870 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80066b6:	4b0f      	ldr	r3, [pc, #60]	; (80066f4 <xPortStartScheduler+0xf4>)
 80066b8:	2200      	movs	r2, #0
 80066ba:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80066bc:	f000 f8fc 	bl	80068b8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80066c0:	4b0d      	ldr	r3, [pc, #52]	; (80066f8 <xPortStartScheduler+0xf8>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a0c      	ldr	r2, [pc, #48]	; (80066f8 <xPortStartScheduler+0xf8>)
 80066c6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80066ca:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80066cc:	f7ff ff84 	bl	80065d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80066d0:	f7ff f846 	bl	8005760 <vTaskSwitchContext>
	prvTaskExitError();
 80066d4:	f7ff ff3c 	bl	8006550 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3710      	adds	r7, #16
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	e000e400 	.word	0xe000e400
 80066e8:	20001068 	.word	0x20001068
 80066ec:	2000106c 	.word	0x2000106c
 80066f0:	e000ed20 	.word	0xe000ed20
 80066f4:	2000000c 	.word	0x2000000c
 80066f8:	e000ef34 	.word	0xe000ef34

080066fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
	__asm volatile
 8006702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006706:	b672      	cpsid	i
 8006708:	f383 8811 	msr	BASEPRI, r3
 800670c:	f3bf 8f6f 	isb	sy
 8006710:	f3bf 8f4f 	dsb	sy
 8006714:	b662      	cpsie	i
 8006716:	607b      	str	r3, [r7, #4]
}
 8006718:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800671a:	4b10      	ldr	r3, [pc, #64]	; (800675c <vPortEnterCritical+0x60>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	3301      	adds	r3, #1
 8006720:	4a0e      	ldr	r2, [pc, #56]	; (800675c <vPortEnterCritical+0x60>)
 8006722:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006724:	4b0d      	ldr	r3, [pc, #52]	; (800675c <vPortEnterCritical+0x60>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2b01      	cmp	r3, #1
 800672a:	d111      	bne.n	8006750 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800672c:	4b0c      	ldr	r3, [pc, #48]	; (8006760 <vPortEnterCritical+0x64>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	b2db      	uxtb	r3, r3
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00c      	beq.n	8006750 <vPortEnterCritical+0x54>
	__asm volatile
 8006736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800673a:	b672      	cpsid	i
 800673c:	f383 8811 	msr	BASEPRI, r3
 8006740:	f3bf 8f6f 	isb	sy
 8006744:	f3bf 8f4f 	dsb	sy
 8006748:	b662      	cpsie	i
 800674a:	603b      	str	r3, [r7, #0]
}
 800674c:	bf00      	nop
 800674e:	e7fe      	b.n	800674e <vPortEnterCritical+0x52>
	}
}
 8006750:	bf00      	nop
 8006752:	370c      	adds	r7, #12
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr
 800675c:	2000000c 	.word	0x2000000c
 8006760:	e000ed04 	.word	0xe000ed04

08006764 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800676a:	4b13      	ldr	r3, [pc, #76]	; (80067b8 <vPortExitCritical+0x54>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d10c      	bne.n	800678c <vPortExitCritical+0x28>
	__asm volatile
 8006772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006776:	b672      	cpsid	i
 8006778:	f383 8811 	msr	BASEPRI, r3
 800677c:	f3bf 8f6f 	isb	sy
 8006780:	f3bf 8f4f 	dsb	sy
 8006784:	b662      	cpsie	i
 8006786:	607b      	str	r3, [r7, #4]
}
 8006788:	bf00      	nop
 800678a:	e7fe      	b.n	800678a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800678c:	4b0a      	ldr	r3, [pc, #40]	; (80067b8 <vPortExitCritical+0x54>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	3b01      	subs	r3, #1
 8006792:	4a09      	ldr	r2, [pc, #36]	; (80067b8 <vPortExitCritical+0x54>)
 8006794:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006796:	4b08      	ldr	r3, [pc, #32]	; (80067b8 <vPortExitCritical+0x54>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d105      	bne.n	80067aa <vPortExitCritical+0x46>
 800679e:	2300      	movs	r3, #0
 80067a0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	f383 8811 	msr	BASEPRI, r3
}
 80067a8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80067aa:	bf00      	nop
 80067ac:	370c      	adds	r7, #12
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	2000000c 	.word	0x2000000c
 80067bc:	00000000 	.word	0x00000000

080067c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80067c0:	f3ef 8009 	mrs	r0, PSP
 80067c4:	f3bf 8f6f 	isb	sy
 80067c8:	4b15      	ldr	r3, [pc, #84]	; (8006820 <pxCurrentTCBConst>)
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	f01e 0f10 	tst.w	lr, #16
 80067d0:	bf08      	it	eq
 80067d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80067d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067da:	6010      	str	r0, [r2, #0]
 80067dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80067e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80067e4:	b672      	cpsid	i
 80067e6:	f380 8811 	msr	BASEPRI, r0
 80067ea:	f3bf 8f4f 	dsb	sy
 80067ee:	f3bf 8f6f 	isb	sy
 80067f2:	b662      	cpsie	i
 80067f4:	f7fe ffb4 	bl	8005760 <vTaskSwitchContext>
 80067f8:	f04f 0000 	mov.w	r0, #0
 80067fc:	f380 8811 	msr	BASEPRI, r0
 8006800:	bc09      	pop	{r0, r3}
 8006802:	6819      	ldr	r1, [r3, #0]
 8006804:	6808      	ldr	r0, [r1, #0]
 8006806:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800680a:	f01e 0f10 	tst.w	lr, #16
 800680e:	bf08      	it	eq
 8006810:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006814:	f380 8809 	msr	PSP, r0
 8006818:	f3bf 8f6f 	isb	sy
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop

08006820 <pxCurrentTCBConst>:
 8006820:	20000a3c 	.word	0x20000a3c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006824:	bf00      	nop
 8006826:	bf00      	nop

08006828 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
	__asm volatile
 800682e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006832:	b672      	cpsid	i
 8006834:	f383 8811 	msr	BASEPRI, r3
 8006838:	f3bf 8f6f 	isb	sy
 800683c:	f3bf 8f4f 	dsb	sy
 8006840:	b662      	cpsie	i
 8006842:	607b      	str	r3, [r7, #4]
}
 8006844:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006846:	f7fe fecf 	bl	80055e8 <xTaskIncrementTick>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d003      	beq.n	8006858 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006850:	4b06      	ldr	r3, [pc, #24]	; (800686c <SysTick_Handler+0x44>)
 8006852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006856:	601a      	str	r2, [r3, #0]
 8006858:	2300      	movs	r3, #0
 800685a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	f383 8811 	msr	BASEPRI, r3
}
 8006862:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006864:	bf00      	nop
 8006866:	3708      	adds	r7, #8
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}
 800686c:	e000ed04 	.word	0xe000ed04

08006870 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006870:	b480      	push	{r7}
 8006872:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006874:	4b0b      	ldr	r3, [pc, #44]	; (80068a4 <vPortSetupTimerInterrupt+0x34>)
 8006876:	2200      	movs	r2, #0
 8006878:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800687a:	4b0b      	ldr	r3, [pc, #44]	; (80068a8 <vPortSetupTimerInterrupt+0x38>)
 800687c:	2200      	movs	r2, #0
 800687e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006880:	4b0a      	ldr	r3, [pc, #40]	; (80068ac <vPortSetupTimerInterrupt+0x3c>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a0a      	ldr	r2, [pc, #40]	; (80068b0 <vPortSetupTimerInterrupt+0x40>)
 8006886:	fba2 2303 	umull	r2, r3, r2, r3
 800688a:	099b      	lsrs	r3, r3, #6
 800688c:	4a09      	ldr	r2, [pc, #36]	; (80068b4 <vPortSetupTimerInterrupt+0x44>)
 800688e:	3b01      	subs	r3, #1
 8006890:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006892:	4b04      	ldr	r3, [pc, #16]	; (80068a4 <vPortSetupTimerInterrupt+0x34>)
 8006894:	2207      	movs	r2, #7
 8006896:	601a      	str	r2, [r3, #0]
}
 8006898:	bf00      	nop
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	e000e010 	.word	0xe000e010
 80068a8:	e000e018 	.word	0xe000e018
 80068ac:	20000000 	.word	0x20000000
 80068b0:	10624dd3 	.word	0x10624dd3
 80068b4:	e000e014 	.word	0xe000e014

080068b8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80068b8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80068c8 <vPortEnableVFP+0x10>
 80068bc:	6801      	ldr	r1, [r0, #0]
 80068be:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80068c2:	6001      	str	r1, [r0, #0]
 80068c4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80068c6:	bf00      	nop
 80068c8:	e000ed88 	.word	0xe000ed88

080068cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80068cc:	b480      	push	{r7}
 80068ce:	b085      	sub	sp, #20
 80068d0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80068d2:	f3ef 8305 	mrs	r3, IPSR
 80068d6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2b0f      	cmp	r3, #15
 80068dc:	d916      	bls.n	800690c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80068de:	4a19      	ldr	r2, [pc, #100]	; (8006944 <vPortValidateInterruptPriority+0x78>)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	4413      	add	r3, r2
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80068e8:	4b17      	ldr	r3, [pc, #92]	; (8006948 <vPortValidateInterruptPriority+0x7c>)
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	7afa      	ldrb	r2, [r7, #11]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d20c      	bcs.n	800690c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80068f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f6:	b672      	cpsid	i
 80068f8:	f383 8811 	msr	BASEPRI, r3
 80068fc:	f3bf 8f6f 	isb	sy
 8006900:	f3bf 8f4f 	dsb	sy
 8006904:	b662      	cpsie	i
 8006906:	607b      	str	r3, [r7, #4]
}
 8006908:	bf00      	nop
 800690a:	e7fe      	b.n	800690a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800690c:	4b0f      	ldr	r3, [pc, #60]	; (800694c <vPortValidateInterruptPriority+0x80>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006914:	4b0e      	ldr	r3, [pc, #56]	; (8006950 <vPortValidateInterruptPriority+0x84>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	429a      	cmp	r2, r3
 800691a:	d90c      	bls.n	8006936 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800691c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006920:	b672      	cpsid	i
 8006922:	f383 8811 	msr	BASEPRI, r3
 8006926:	f3bf 8f6f 	isb	sy
 800692a:	f3bf 8f4f 	dsb	sy
 800692e:	b662      	cpsie	i
 8006930:	603b      	str	r3, [r7, #0]
}
 8006932:	bf00      	nop
 8006934:	e7fe      	b.n	8006934 <vPortValidateInterruptPriority+0x68>
	}
 8006936:	bf00      	nop
 8006938:	3714      	adds	r7, #20
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop
 8006944:	e000e3f0 	.word	0xe000e3f0
 8006948:	20001068 	.word	0x20001068
 800694c:	e000ed0c 	.word	0xe000ed0c
 8006950:	2000106c 	.word	0x2000106c

08006954 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b08a      	sub	sp, #40	; 0x28
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800695c:	2300      	movs	r3, #0
 800695e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006960:	f7fe fd84 	bl	800546c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006964:	4b5b      	ldr	r3, [pc, #364]	; (8006ad4 <pvPortMalloc+0x180>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d101      	bne.n	8006970 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800696c:	f000 f91a 	bl	8006ba4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006970:	4b59      	ldr	r3, [pc, #356]	; (8006ad8 <pvPortMalloc+0x184>)
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4013      	ands	r3, r2
 8006978:	2b00      	cmp	r3, #0
 800697a:	f040 8092 	bne.w	8006aa2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d01f      	beq.n	80069c4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8006984:	2208      	movs	r2, #8
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4413      	add	r3, r2
 800698a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f003 0307 	and.w	r3, r3, #7
 8006992:	2b00      	cmp	r3, #0
 8006994:	d016      	beq.n	80069c4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f023 0307 	bic.w	r3, r3, #7
 800699c:	3308      	adds	r3, #8
 800699e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f003 0307 	and.w	r3, r3, #7
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00c      	beq.n	80069c4 <pvPortMalloc+0x70>
	__asm volatile
 80069aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ae:	b672      	cpsid	i
 80069b0:	f383 8811 	msr	BASEPRI, r3
 80069b4:	f3bf 8f6f 	isb	sy
 80069b8:	f3bf 8f4f 	dsb	sy
 80069bc:	b662      	cpsie	i
 80069be:	617b      	str	r3, [r7, #20]
}
 80069c0:	bf00      	nop
 80069c2:	e7fe      	b.n	80069c2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d06b      	beq.n	8006aa2 <pvPortMalloc+0x14e>
 80069ca:	4b44      	ldr	r3, [pc, #272]	; (8006adc <pvPortMalloc+0x188>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d866      	bhi.n	8006aa2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80069d4:	4b42      	ldr	r3, [pc, #264]	; (8006ae0 <pvPortMalloc+0x18c>)
 80069d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80069d8:	4b41      	ldr	r3, [pc, #260]	; (8006ae0 <pvPortMalloc+0x18c>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80069de:	e004      	b.n	80069ea <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80069e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80069e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80069ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d903      	bls.n	80069fc <pvPortMalloc+0xa8>
 80069f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d1f1      	bne.n	80069e0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80069fc:	4b35      	ldr	r3, [pc, #212]	; (8006ad4 <pvPortMalloc+0x180>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d04d      	beq.n	8006aa2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006a06:	6a3b      	ldr	r3, [r7, #32]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2208      	movs	r2, #8
 8006a0c:	4413      	add	r3, r2
 8006a0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	6a3b      	ldr	r3, [r7, #32]
 8006a16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1a:	685a      	ldr	r2, [r3, #4]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	1ad2      	subs	r2, r2, r3
 8006a20:	2308      	movs	r3, #8
 8006a22:	005b      	lsls	r3, r3, #1
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d921      	bls.n	8006a6c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4413      	add	r3, r2
 8006a2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	f003 0307 	and.w	r3, r3, #7
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d00c      	beq.n	8006a54 <pvPortMalloc+0x100>
	__asm volatile
 8006a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a3e:	b672      	cpsid	i
 8006a40:	f383 8811 	msr	BASEPRI, r3
 8006a44:	f3bf 8f6f 	isb	sy
 8006a48:	f3bf 8f4f 	dsb	sy
 8006a4c:	b662      	cpsie	i
 8006a4e:	613b      	str	r3, [r7, #16]
}
 8006a50:	bf00      	nop
 8006a52:	e7fe      	b.n	8006a52 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a56:	685a      	ldr	r2, [r3, #4]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	1ad2      	subs	r2, r2, r3
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006a66:	69b8      	ldr	r0, [r7, #24]
 8006a68:	f000 f8fe 	bl	8006c68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006a6c:	4b1b      	ldr	r3, [pc, #108]	; (8006adc <pvPortMalloc+0x188>)
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	1ad3      	subs	r3, r2, r3
 8006a76:	4a19      	ldr	r2, [pc, #100]	; (8006adc <pvPortMalloc+0x188>)
 8006a78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006a7a:	4b18      	ldr	r3, [pc, #96]	; (8006adc <pvPortMalloc+0x188>)
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	4b19      	ldr	r3, [pc, #100]	; (8006ae4 <pvPortMalloc+0x190>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d203      	bcs.n	8006a8e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006a86:	4b15      	ldr	r3, [pc, #84]	; (8006adc <pvPortMalloc+0x188>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a16      	ldr	r2, [pc, #88]	; (8006ae4 <pvPortMalloc+0x190>)
 8006a8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a90:	685a      	ldr	r2, [r3, #4]
 8006a92:	4b11      	ldr	r3, [pc, #68]	; (8006ad8 <pvPortMalloc+0x184>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	431a      	orrs	r2, r3
 8006a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006aa2:	f7fe fcf1 	bl	8005488 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	f003 0307 	and.w	r3, r3, #7
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d00c      	beq.n	8006aca <pvPortMalloc+0x176>
	__asm volatile
 8006ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab4:	b672      	cpsid	i
 8006ab6:	f383 8811 	msr	BASEPRI, r3
 8006aba:	f3bf 8f6f 	isb	sy
 8006abe:	f3bf 8f4f 	dsb	sy
 8006ac2:	b662      	cpsie	i
 8006ac4:	60fb      	str	r3, [r7, #12]
}
 8006ac6:	bf00      	nop
 8006ac8:	e7fe      	b.n	8006ac8 <pvPortMalloc+0x174>
	return pvReturn;
 8006aca:	69fb      	ldr	r3, [r7, #28]
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3728      	adds	r7, #40	; 0x28
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	20004c78 	.word	0x20004c78
 8006ad8:	20004c84 	.word	0x20004c84
 8006adc:	20004c7c 	.word	0x20004c7c
 8006ae0:	20004c70 	.word	0x20004c70
 8006ae4:	20004c80 	.word	0x20004c80

08006ae8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b086      	sub	sp, #24
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d04c      	beq.n	8006b94 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006afa:	2308      	movs	r3, #8
 8006afc:	425b      	negs	r3, r3
 8006afe:	697a      	ldr	r2, [r7, #20]
 8006b00:	4413      	add	r3, r2
 8006b02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	685a      	ldr	r2, [r3, #4]
 8006b0c:	4b23      	ldr	r3, [pc, #140]	; (8006b9c <vPortFree+0xb4>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4013      	ands	r3, r2
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d10c      	bne.n	8006b30 <vPortFree+0x48>
	__asm volatile
 8006b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b1a:	b672      	cpsid	i
 8006b1c:	f383 8811 	msr	BASEPRI, r3
 8006b20:	f3bf 8f6f 	isb	sy
 8006b24:	f3bf 8f4f 	dsb	sy
 8006b28:	b662      	cpsie	i
 8006b2a:	60fb      	str	r3, [r7, #12]
}
 8006b2c:	bf00      	nop
 8006b2e:	e7fe      	b.n	8006b2e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d00c      	beq.n	8006b52 <vPortFree+0x6a>
	__asm volatile
 8006b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b3c:	b672      	cpsid	i
 8006b3e:	f383 8811 	msr	BASEPRI, r3
 8006b42:	f3bf 8f6f 	isb	sy
 8006b46:	f3bf 8f4f 	dsb	sy
 8006b4a:	b662      	cpsie	i
 8006b4c:	60bb      	str	r3, [r7, #8]
}
 8006b4e:	bf00      	nop
 8006b50:	e7fe      	b.n	8006b50 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	685a      	ldr	r2, [r3, #4]
 8006b56:	4b11      	ldr	r3, [pc, #68]	; (8006b9c <vPortFree+0xb4>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d019      	beq.n	8006b94 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d115      	bne.n	8006b94 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	685a      	ldr	r2, [r3, #4]
 8006b6c:	4b0b      	ldr	r3, [pc, #44]	; (8006b9c <vPortFree+0xb4>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	43db      	mvns	r3, r3
 8006b72:	401a      	ands	r2, r3
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006b78:	f7fe fc78 	bl	800546c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	685a      	ldr	r2, [r3, #4]
 8006b80:	4b07      	ldr	r3, [pc, #28]	; (8006ba0 <vPortFree+0xb8>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4413      	add	r3, r2
 8006b86:	4a06      	ldr	r2, [pc, #24]	; (8006ba0 <vPortFree+0xb8>)
 8006b88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006b8a:	6938      	ldr	r0, [r7, #16]
 8006b8c:	f000 f86c 	bl	8006c68 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006b90:	f7fe fc7a 	bl	8005488 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006b94:	bf00      	nop
 8006b96:	3718      	adds	r7, #24
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	20004c84 	.word	0x20004c84
 8006ba0:	20004c7c 	.word	0x20004c7c

08006ba4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b085      	sub	sp, #20
 8006ba8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006baa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006bae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006bb0:	4b27      	ldr	r3, [pc, #156]	; (8006c50 <prvHeapInit+0xac>)
 8006bb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f003 0307 	and.w	r3, r3, #7
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d00c      	beq.n	8006bd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	3307      	adds	r3, #7
 8006bc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f023 0307 	bic.w	r3, r3, #7
 8006bca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006bcc:	68ba      	ldr	r2, [r7, #8]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	4a1f      	ldr	r2, [pc, #124]	; (8006c50 <prvHeapInit+0xac>)
 8006bd4:	4413      	add	r3, r2
 8006bd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006bdc:	4a1d      	ldr	r2, [pc, #116]	; (8006c54 <prvHeapInit+0xb0>)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006be2:	4b1c      	ldr	r3, [pc, #112]	; (8006c54 <prvHeapInit+0xb0>)
 8006be4:	2200      	movs	r2, #0
 8006be6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	68ba      	ldr	r2, [r7, #8]
 8006bec:	4413      	add	r3, r2
 8006bee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006bf0:	2208      	movs	r2, #8
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	1a9b      	subs	r3, r3, r2
 8006bf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f023 0307 	bic.w	r3, r3, #7
 8006bfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	4a15      	ldr	r2, [pc, #84]	; (8006c58 <prvHeapInit+0xb4>)
 8006c04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006c06:	4b14      	ldr	r3, [pc, #80]	; (8006c58 <prvHeapInit+0xb4>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006c0e:	4b12      	ldr	r3, [pc, #72]	; (8006c58 <prvHeapInit+0xb4>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2200      	movs	r2, #0
 8006c14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	68fa      	ldr	r2, [r7, #12]
 8006c1e:	1ad2      	subs	r2, r2, r3
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006c24:	4b0c      	ldr	r3, [pc, #48]	; (8006c58 <prvHeapInit+0xb4>)
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	4a0a      	ldr	r2, [pc, #40]	; (8006c5c <prvHeapInit+0xb8>)
 8006c32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	4a09      	ldr	r2, [pc, #36]	; (8006c60 <prvHeapInit+0xbc>)
 8006c3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006c3c:	4b09      	ldr	r3, [pc, #36]	; (8006c64 <prvHeapInit+0xc0>)
 8006c3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006c42:	601a      	str	r2, [r3, #0]
}
 8006c44:	bf00      	nop
 8006c46:	3714      	adds	r7, #20
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr
 8006c50:	20001070 	.word	0x20001070
 8006c54:	20004c70 	.word	0x20004c70
 8006c58:	20004c78 	.word	0x20004c78
 8006c5c:	20004c80 	.word	0x20004c80
 8006c60:	20004c7c 	.word	0x20004c7c
 8006c64:	20004c84 	.word	0x20004c84

08006c68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b085      	sub	sp, #20
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006c70:	4b28      	ldr	r3, [pc, #160]	; (8006d14 <prvInsertBlockIntoFreeList+0xac>)
 8006c72:	60fb      	str	r3, [r7, #12]
 8006c74:	e002      	b.n	8006c7c <prvInsertBlockIntoFreeList+0x14>
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	60fb      	str	r3, [r7, #12]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d8f7      	bhi.n	8006c76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	68ba      	ldr	r2, [r7, #8]
 8006c90:	4413      	add	r3, r2
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d108      	bne.n	8006caa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	685a      	ldr	r2, [r3, #4]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	441a      	add	r2, r3
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	68ba      	ldr	r2, [r7, #8]
 8006cb4:	441a      	add	r2, r3
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d118      	bne.n	8006cf0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	4b15      	ldr	r3, [pc, #84]	; (8006d18 <prvInsertBlockIntoFreeList+0xb0>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d00d      	beq.n	8006ce6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	685a      	ldr	r2, [r3, #4]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	441a      	add	r2, r3
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	601a      	str	r2, [r3, #0]
 8006ce4:	e008      	b.n	8006cf8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006ce6:	4b0c      	ldr	r3, [pc, #48]	; (8006d18 <prvInsertBlockIntoFreeList+0xb0>)
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	601a      	str	r2, [r3, #0]
 8006cee:	e003      	b.n	8006cf8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d002      	beq.n	8006d06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d06:	bf00      	nop
 8006d08:	3714      	adds	r7, #20
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	20004c70 	.word	0x20004c70
 8006d18:	20004c78 	.word	0x20004c78

08006d1c <__libc_init_array>:
 8006d1c:	b570      	push	{r4, r5, r6, lr}
 8006d1e:	4d0d      	ldr	r5, [pc, #52]	; (8006d54 <__libc_init_array+0x38>)
 8006d20:	4c0d      	ldr	r4, [pc, #52]	; (8006d58 <__libc_init_array+0x3c>)
 8006d22:	1b64      	subs	r4, r4, r5
 8006d24:	10a4      	asrs	r4, r4, #2
 8006d26:	2600      	movs	r6, #0
 8006d28:	42a6      	cmp	r6, r4
 8006d2a:	d109      	bne.n	8006d40 <__libc_init_array+0x24>
 8006d2c:	4d0b      	ldr	r5, [pc, #44]	; (8006d5c <__libc_init_array+0x40>)
 8006d2e:	4c0c      	ldr	r4, [pc, #48]	; (8006d60 <__libc_init_array+0x44>)
 8006d30:	f000 f8f2 	bl	8006f18 <_init>
 8006d34:	1b64      	subs	r4, r4, r5
 8006d36:	10a4      	asrs	r4, r4, #2
 8006d38:	2600      	movs	r6, #0
 8006d3a:	42a6      	cmp	r6, r4
 8006d3c:	d105      	bne.n	8006d4a <__libc_init_array+0x2e>
 8006d3e:	bd70      	pop	{r4, r5, r6, pc}
 8006d40:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d44:	4798      	blx	r3
 8006d46:	3601      	adds	r6, #1
 8006d48:	e7ee      	b.n	8006d28 <__libc_init_array+0xc>
 8006d4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d4e:	4798      	blx	r3
 8006d50:	3601      	adds	r6, #1
 8006d52:	e7f2      	b.n	8006d3a <__libc_init_array+0x1e>
 8006d54:	08007030 	.word	0x08007030
 8006d58:	08007030 	.word	0x08007030
 8006d5c:	08007030 	.word	0x08007030
 8006d60:	08007034 	.word	0x08007034

08006d64 <__retarget_lock_acquire_recursive>:
 8006d64:	4770      	bx	lr

08006d66 <__retarget_lock_release_recursive>:
 8006d66:	4770      	bx	lr

08006d68 <memcpy>:
 8006d68:	440a      	add	r2, r1
 8006d6a:	4291      	cmp	r1, r2
 8006d6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d70:	d100      	bne.n	8006d74 <memcpy+0xc>
 8006d72:	4770      	bx	lr
 8006d74:	b510      	push	{r4, lr}
 8006d76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d7e:	4291      	cmp	r1, r2
 8006d80:	d1f9      	bne.n	8006d76 <memcpy+0xe>
 8006d82:	bd10      	pop	{r4, pc}

08006d84 <memset>:
 8006d84:	4402      	add	r2, r0
 8006d86:	4603      	mov	r3, r0
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d100      	bne.n	8006d8e <memset+0xa>
 8006d8c:	4770      	bx	lr
 8006d8e:	f803 1b01 	strb.w	r1, [r3], #1
 8006d92:	e7f9      	b.n	8006d88 <memset+0x4>

08006d94 <cleanup_glue>:
 8006d94:	b538      	push	{r3, r4, r5, lr}
 8006d96:	460c      	mov	r4, r1
 8006d98:	6809      	ldr	r1, [r1, #0]
 8006d9a:	4605      	mov	r5, r0
 8006d9c:	b109      	cbz	r1, 8006da2 <cleanup_glue+0xe>
 8006d9e:	f7ff fff9 	bl	8006d94 <cleanup_glue>
 8006da2:	4621      	mov	r1, r4
 8006da4:	4628      	mov	r0, r5
 8006da6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006daa:	f000 b869 	b.w	8006e80 <_free_r>
	...

08006db0 <_reclaim_reent>:
 8006db0:	4b2c      	ldr	r3, [pc, #176]	; (8006e64 <_reclaim_reent+0xb4>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4283      	cmp	r3, r0
 8006db6:	b570      	push	{r4, r5, r6, lr}
 8006db8:	4604      	mov	r4, r0
 8006dba:	d051      	beq.n	8006e60 <_reclaim_reent+0xb0>
 8006dbc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006dbe:	b143      	cbz	r3, 8006dd2 <_reclaim_reent+0x22>
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d14a      	bne.n	8006e5c <_reclaim_reent+0xac>
 8006dc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006dc8:	6819      	ldr	r1, [r3, #0]
 8006dca:	b111      	cbz	r1, 8006dd2 <_reclaim_reent+0x22>
 8006dcc:	4620      	mov	r0, r4
 8006dce:	f000 f857 	bl	8006e80 <_free_r>
 8006dd2:	6961      	ldr	r1, [r4, #20]
 8006dd4:	b111      	cbz	r1, 8006ddc <_reclaim_reent+0x2c>
 8006dd6:	4620      	mov	r0, r4
 8006dd8:	f000 f852 	bl	8006e80 <_free_r>
 8006ddc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006dde:	b111      	cbz	r1, 8006de6 <_reclaim_reent+0x36>
 8006de0:	4620      	mov	r0, r4
 8006de2:	f000 f84d 	bl	8006e80 <_free_r>
 8006de6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006de8:	b111      	cbz	r1, 8006df0 <_reclaim_reent+0x40>
 8006dea:	4620      	mov	r0, r4
 8006dec:	f000 f848 	bl	8006e80 <_free_r>
 8006df0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006df2:	b111      	cbz	r1, 8006dfa <_reclaim_reent+0x4a>
 8006df4:	4620      	mov	r0, r4
 8006df6:	f000 f843 	bl	8006e80 <_free_r>
 8006dfa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006dfc:	b111      	cbz	r1, 8006e04 <_reclaim_reent+0x54>
 8006dfe:	4620      	mov	r0, r4
 8006e00:	f000 f83e 	bl	8006e80 <_free_r>
 8006e04:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006e06:	b111      	cbz	r1, 8006e0e <_reclaim_reent+0x5e>
 8006e08:	4620      	mov	r0, r4
 8006e0a:	f000 f839 	bl	8006e80 <_free_r>
 8006e0e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006e10:	b111      	cbz	r1, 8006e18 <_reclaim_reent+0x68>
 8006e12:	4620      	mov	r0, r4
 8006e14:	f000 f834 	bl	8006e80 <_free_r>
 8006e18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e1a:	b111      	cbz	r1, 8006e22 <_reclaim_reent+0x72>
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	f000 f82f 	bl	8006e80 <_free_r>
 8006e22:	69a3      	ldr	r3, [r4, #24]
 8006e24:	b1e3      	cbz	r3, 8006e60 <_reclaim_reent+0xb0>
 8006e26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006e28:	4620      	mov	r0, r4
 8006e2a:	4798      	blx	r3
 8006e2c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006e2e:	b1b9      	cbz	r1, 8006e60 <_reclaim_reent+0xb0>
 8006e30:	4620      	mov	r0, r4
 8006e32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006e36:	f7ff bfad 	b.w	8006d94 <cleanup_glue>
 8006e3a:	5949      	ldr	r1, [r1, r5]
 8006e3c:	b941      	cbnz	r1, 8006e50 <_reclaim_reent+0xa0>
 8006e3e:	3504      	adds	r5, #4
 8006e40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e42:	2d80      	cmp	r5, #128	; 0x80
 8006e44:	68d9      	ldr	r1, [r3, #12]
 8006e46:	d1f8      	bne.n	8006e3a <_reclaim_reent+0x8a>
 8006e48:	4620      	mov	r0, r4
 8006e4a:	f000 f819 	bl	8006e80 <_free_r>
 8006e4e:	e7ba      	b.n	8006dc6 <_reclaim_reent+0x16>
 8006e50:	680e      	ldr	r6, [r1, #0]
 8006e52:	4620      	mov	r0, r4
 8006e54:	f000 f814 	bl	8006e80 <_free_r>
 8006e58:	4631      	mov	r1, r6
 8006e5a:	e7ef      	b.n	8006e3c <_reclaim_reent+0x8c>
 8006e5c:	2500      	movs	r5, #0
 8006e5e:	e7ef      	b.n	8006e40 <_reclaim_reent+0x90>
 8006e60:	bd70      	pop	{r4, r5, r6, pc}
 8006e62:	bf00      	nop
 8006e64:	20000010 	.word	0x20000010

08006e68 <__malloc_lock>:
 8006e68:	4801      	ldr	r0, [pc, #4]	; (8006e70 <__malloc_lock+0x8>)
 8006e6a:	f7ff bf7b 	b.w	8006d64 <__retarget_lock_acquire_recursive>
 8006e6e:	bf00      	nop
 8006e70:	20004c88 	.word	0x20004c88

08006e74 <__malloc_unlock>:
 8006e74:	4801      	ldr	r0, [pc, #4]	; (8006e7c <__malloc_unlock+0x8>)
 8006e76:	f7ff bf76 	b.w	8006d66 <__retarget_lock_release_recursive>
 8006e7a:	bf00      	nop
 8006e7c:	20004c88 	.word	0x20004c88

08006e80 <_free_r>:
 8006e80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e82:	2900      	cmp	r1, #0
 8006e84:	d044      	beq.n	8006f10 <_free_r+0x90>
 8006e86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e8a:	9001      	str	r0, [sp, #4]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	f1a1 0404 	sub.w	r4, r1, #4
 8006e92:	bfb8      	it	lt
 8006e94:	18e4      	addlt	r4, r4, r3
 8006e96:	f7ff ffe7 	bl	8006e68 <__malloc_lock>
 8006e9a:	4a1e      	ldr	r2, [pc, #120]	; (8006f14 <_free_r+0x94>)
 8006e9c:	9801      	ldr	r0, [sp, #4]
 8006e9e:	6813      	ldr	r3, [r2, #0]
 8006ea0:	b933      	cbnz	r3, 8006eb0 <_free_r+0x30>
 8006ea2:	6063      	str	r3, [r4, #4]
 8006ea4:	6014      	str	r4, [r2, #0]
 8006ea6:	b003      	add	sp, #12
 8006ea8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006eac:	f7ff bfe2 	b.w	8006e74 <__malloc_unlock>
 8006eb0:	42a3      	cmp	r3, r4
 8006eb2:	d908      	bls.n	8006ec6 <_free_r+0x46>
 8006eb4:	6825      	ldr	r5, [r4, #0]
 8006eb6:	1961      	adds	r1, r4, r5
 8006eb8:	428b      	cmp	r3, r1
 8006eba:	bf01      	itttt	eq
 8006ebc:	6819      	ldreq	r1, [r3, #0]
 8006ebe:	685b      	ldreq	r3, [r3, #4]
 8006ec0:	1949      	addeq	r1, r1, r5
 8006ec2:	6021      	streq	r1, [r4, #0]
 8006ec4:	e7ed      	b.n	8006ea2 <_free_r+0x22>
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	b10b      	cbz	r3, 8006ed0 <_free_r+0x50>
 8006ecc:	42a3      	cmp	r3, r4
 8006ece:	d9fa      	bls.n	8006ec6 <_free_r+0x46>
 8006ed0:	6811      	ldr	r1, [r2, #0]
 8006ed2:	1855      	adds	r5, r2, r1
 8006ed4:	42a5      	cmp	r5, r4
 8006ed6:	d10b      	bne.n	8006ef0 <_free_r+0x70>
 8006ed8:	6824      	ldr	r4, [r4, #0]
 8006eda:	4421      	add	r1, r4
 8006edc:	1854      	adds	r4, r2, r1
 8006ede:	42a3      	cmp	r3, r4
 8006ee0:	6011      	str	r1, [r2, #0]
 8006ee2:	d1e0      	bne.n	8006ea6 <_free_r+0x26>
 8006ee4:	681c      	ldr	r4, [r3, #0]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	6053      	str	r3, [r2, #4]
 8006eea:	4421      	add	r1, r4
 8006eec:	6011      	str	r1, [r2, #0]
 8006eee:	e7da      	b.n	8006ea6 <_free_r+0x26>
 8006ef0:	d902      	bls.n	8006ef8 <_free_r+0x78>
 8006ef2:	230c      	movs	r3, #12
 8006ef4:	6003      	str	r3, [r0, #0]
 8006ef6:	e7d6      	b.n	8006ea6 <_free_r+0x26>
 8006ef8:	6825      	ldr	r5, [r4, #0]
 8006efa:	1961      	adds	r1, r4, r5
 8006efc:	428b      	cmp	r3, r1
 8006efe:	bf04      	itt	eq
 8006f00:	6819      	ldreq	r1, [r3, #0]
 8006f02:	685b      	ldreq	r3, [r3, #4]
 8006f04:	6063      	str	r3, [r4, #4]
 8006f06:	bf04      	itt	eq
 8006f08:	1949      	addeq	r1, r1, r5
 8006f0a:	6021      	streq	r1, [r4, #0]
 8006f0c:	6054      	str	r4, [r2, #4]
 8006f0e:	e7ca      	b.n	8006ea6 <_free_r+0x26>
 8006f10:	b003      	add	sp, #12
 8006f12:	bd30      	pop	{r4, r5, pc}
 8006f14:	20004c8c 	.word	0x20004c8c

08006f18 <_init>:
 8006f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f1a:	bf00      	nop
 8006f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f1e:	bc08      	pop	{r3}
 8006f20:	469e      	mov	lr, r3
 8006f22:	4770      	bx	lr

08006f24 <_fini>:
 8006f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f26:	bf00      	nop
 8006f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f2a:	bc08      	pop	{r3}
 8006f2c:	469e      	mov	lr, r3
 8006f2e:	4770      	bx	lr
