
FRT_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ea0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  080070a0  080070a0  000170a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007198  08007198  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007198  08007198  00017198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071a0  080071a0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071a0  080071a0  000171a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071a4  080071a4  000171a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080071a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c1c  20000078  08007220  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c94  08007220  00024c94  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000191ac  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031c7  00000000  00000000  00039252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a8  00000000  00000000  0003c420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001260  00000000  00000000  0003d7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000344e  00000000  00000000  0003ea28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015afb  00000000  00000000  00041e76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010732c  00000000  00000000  00057971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015ec9d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005620  00000000  00000000  0015ecf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000078 	.word	0x20000078
 800021c:	00000000 	.word	0x00000000
 8000220:	08007088 	.word	0x08007088

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000007c 	.word	0x2000007c
 800023c:	08007088 	.word	0x08007088

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b974 	b.w	8000540 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <APPS2_ADC_Percent>:
	ADC_VAL = HAL_ADC_GetValue(&hadc1);
	HAL_ADC_Stop(&hadc1);
	return (float)ADC_VAL/4095; //returns ADC percentage ranges from 0-1
}

float APPS2_ADC_Percent(void) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
	uint16_t ADC_VAL;

	HAL_ADC_Start(&hadc2);
 800054a:	480f      	ldr	r0, [pc, #60]	; (8000588 <APPS2_ADC_Percent+0x44>)
 800054c:	f001 f830 	bl	80015b0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 10);
 8000550:	210a      	movs	r1, #10
 8000552:	480d      	ldr	r0, [pc, #52]	; (8000588 <APPS2_ADC_Percent+0x44>)
 8000554:	f001 f92e 	bl	80017b4 <HAL_ADC_PollForConversion>
	ADC_VAL = HAL_ADC_GetValue(&hadc2);
 8000558:	480b      	ldr	r0, [pc, #44]	; (8000588 <APPS2_ADC_Percent+0x44>)
 800055a:	f001 f9b6 	bl	80018ca <HAL_ADC_GetValue>
 800055e:	4603      	mov	r3, r0
 8000560:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc2);
 8000562:	4809      	ldr	r0, [pc, #36]	; (8000588 <APPS2_ADC_Percent+0x44>)
 8000564:	f001 f8f2 	bl	800174c <HAL_ADC_Stop>
	return (float)ADC_VAL/4095;
 8000568:	88fb      	ldrh	r3, [r7, #6]
 800056a:	ee07 3a90 	vmov	s15, r3
 800056e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000572:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800058c <APPS2_ADC_Percent+0x48>
 8000576:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800057a:	eef0 7a66 	vmov.f32	s15, s13
}
 800057e:	eeb0 0a67 	vmov.f32	s0, s15
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	200000dc 	.word	0x200000dc
 800058c:	457ff000 	.word	0x457ff000

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000594:	f000 ff9b 	bl	80014ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000598:	f000 f892 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059c:	f000 fa5a 	bl	8000a54 <MX_GPIO_Init>
  MX_CAN1_Init();
 80005a0:	f000 f9ec 	bl	800097c <MX_CAN1_Init>
  MX_ADC1_Init();
 80005a4:	f000 f8f4 	bl	8000790 <MX_ADC1_Init>
  MX_ADC2_Init();
 80005a8:	f000 f944 	bl	8000834 <MX_ADC2_Init>
  MX_ADC3_Init();
 80005ac:	f000 f994 	bl	80008d8 <MX_ADC3_Init>
  MX_CAN3_Init();
 80005b0:	f000 fa1a 	bl	80009e8 <MX_CAN3_Init>
  /* USER CODE BEGIN 2 */
  	CAN_Config();
 80005b4:	f000 faba 	bl	8000b2c <CAN_Config>

	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80005b8:	2102      	movs	r1, #2
 80005ba:	4836      	ldr	r0, [pc, #216]	; (8000694 <main+0x104>)
 80005bc:	f001 fff0 	bl	80025a0 <HAL_CAN_ActivateNotification>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <main+0x3a>
	{
	  Error_Handler();
 80005c6:	f000 fd59 	bl	800107c <Error_Handler>
	}
	// Initialize TxHeader and TxData
	AMK_TxHeader_R.DLC = 8;
 80005ca:	4b33      	ldr	r3, [pc, #204]	; (8000698 <main+0x108>)
 80005cc:	2208      	movs	r2, #8
 80005ce:	611a      	str	r2, [r3, #16]
	AMK_TxHeader_R.IDE = CAN_ID_STD;
 80005d0:	4b31      	ldr	r3, [pc, #196]	; (8000698 <main+0x108>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
	AMK_TxHeader_R.RTR = CAN_RTR_DATA;
 80005d6:	4b30      	ldr	r3, [pc, #192]	; (8000698 <main+0x108>)
 80005d8:	2200      	movs	r2, #0
 80005da:	60da      	str	r2, [r3, #12]
	AMK_TxHeader_R.StdId = 0x186;
 80005dc:	4b2e      	ldr	r3, [pc, #184]	; (8000698 <main+0x108>)
 80005de:	f44f 72c3 	mov.w	r2, #390	; 0x186
 80005e2:	601a      	str	r2, [r3, #0]
	AMK_TxHeader_R.TransmitGlobalTime = DISABLE;
 80005e4:	4b2c      	ldr	r3, [pc, #176]	; (8000698 <main+0x108>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	751a      	strb	r2, [r3, #20]

	AMK_TxData_R[0] = 0x00;
 80005ea:	4b2c      	ldr	r3, [pc, #176]	; (800069c <main+0x10c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	AMK_TxData_R[1] = 0x00;
 80005f0:	4b2a      	ldr	r3, [pc, #168]	; (800069c <main+0x10c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	705a      	strb	r2, [r3, #1]
	AMK_TxData_R[2] = 0x00;
 80005f6:	4b29      	ldr	r3, [pc, #164]	; (800069c <main+0x10c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	709a      	strb	r2, [r3, #2]
	AMK_TxData_R[3] = 0x00;
 80005fc:	4b27      	ldr	r3, [pc, #156]	; (800069c <main+0x10c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	70da      	strb	r2, [r3, #3]
	AMK_TxData_R[4] = 0x00;
 8000602:	4b26      	ldr	r3, [pc, #152]	; (800069c <main+0x10c>)
 8000604:	2200      	movs	r2, #0
 8000606:	711a      	strb	r2, [r3, #4]
	AMK_TxData_R[5] = 0x00;
 8000608:	4b24      	ldr	r3, [pc, #144]	; (800069c <main+0x10c>)
 800060a:	2200      	movs	r2, #0
 800060c:	715a      	strb	r2, [r3, #5]
	AMK_TxData_R[6] = 0x00;
 800060e:	4b23      	ldr	r3, [pc, #140]	; (800069c <main+0x10c>)
 8000610:	2200      	movs	r2, #0
 8000612:	719a      	strb	r2, [r3, #6]
	AMK_TxData_R[7] = 0x00;
 8000614:	4b21      	ldr	r3, [pc, #132]	; (800069c <main+0x10c>)
 8000616:	2200      	movs	r2, #0
 8000618:	71da      	strb	r2, [r3, #7]

	AMK_TxHeader_L.DLC = 8;
 800061a:	4b21      	ldr	r3, [pc, #132]	; (80006a0 <main+0x110>)
 800061c:	2208      	movs	r2, #8
 800061e:	611a      	str	r2, [r3, #16]
	AMK_TxHeader_L.IDE = CAN_ID_STD;
 8000620:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <main+0x110>)
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
	AMK_TxHeader_L.RTR = CAN_RTR_DATA;
 8000626:	4b1e      	ldr	r3, [pc, #120]	; (80006a0 <main+0x110>)
 8000628:	2200      	movs	r2, #0
 800062a:	60da      	str	r2, [r3, #12]
	AMK_TxHeader_L.StdId = 0x185;
 800062c:	4b1c      	ldr	r3, [pc, #112]	; (80006a0 <main+0x110>)
 800062e:	f240 1285 	movw	r2, #389	; 0x185
 8000632:	601a      	str	r2, [r3, #0]
	AMK_TxHeader_L.TransmitGlobalTime = DISABLE;
 8000634:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <main+0x110>)
 8000636:	2200      	movs	r2, #0
 8000638:	751a      	strb	r2, [r3, #20]

	AMK_TxData_L[0] = 0x00;
 800063a:	4b1a      	ldr	r3, [pc, #104]	; (80006a4 <main+0x114>)
 800063c:	2200      	movs	r2, #0
 800063e:	701a      	strb	r2, [r3, #0]
	AMK_TxData_L[1] = 0x00;
 8000640:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <main+0x114>)
 8000642:	2200      	movs	r2, #0
 8000644:	705a      	strb	r2, [r3, #1]
	AMK_TxData_L[2] = 0x00;
 8000646:	4b17      	ldr	r3, [pc, #92]	; (80006a4 <main+0x114>)
 8000648:	2200      	movs	r2, #0
 800064a:	709a      	strb	r2, [r3, #2]
	AMK_TxData_L[3] = 0x00;
 800064c:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <main+0x114>)
 800064e:	2200      	movs	r2, #0
 8000650:	70da      	strb	r2, [r3, #3]
	AMK_TxData_L[4] = 0x00;
 8000652:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <main+0x114>)
 8000654:	2200      	movs	r2, #0
 8000656:	711a      	strb	r2, [r3, #4]
	AMK_TxData_L[5] = 0x00;
 8000658:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <main+0x114>)
 800065a:	2200      	movs	r2, #0
 800065c:	715a      	strb	r2, [r3, #5]
	AMK_TxData_L[6] = 0x00;
 800065e:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <main+0x114>)
 8000660:	2200      	movs	r2, #0
 8000662:	719a      	strb	r2, [r3, #6]
	AMK_TxData_L[7] = 0x00;
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <main+0x114>)
 8000666:	2200      	movs	r2, #0
 8000668:	71da      	strb	r2, [r3, #7]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800066a:	f003 fca3 	bl	8003fb4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of controllerStart */
  controllerStartHandle = osThreadNew(Start_FRT_controller, NULL, &controllerStart_attributes);
 800066e:	4a0e      	ldr	r2, [pc, #56]	; (80006a8 <main+0x118>)
 8000670:	2100      	movs	r1, #0
 8000672:	480e      	ldr	r0, [pc, #56]	; (80006ac <main+0x11c>)
 8000674:	f003 fd08 	bl	8004088 <osThreadNew>
 8000678:	4603      	mov	r3, r0
 800067a:	4a0d      	ldr	r2, [pc, #52]	; (80006b0 <main+0x120>)
 800067c:	6013      	str	r3, [r2, #0]

  /* creation of motorControl */
  motorControlHandle = osThreadNew(Start_AMK, NULL, &motorControl_attributes);
 800067e:	4a0d      	ldr	r2, [pc, #52]	; (80006b4 <main+0x124>)
 8000680:	2100      	movs	r1, #0
 8000682:	480d      	ldr	r0, [pc, #52]	; (80006b8 <main+0x128>)
 8000684:	f003 fd00 	bl	8004088 <osThreadNew>
 8000688:	4603      	mov	r3, r0
 800068a:	4a0c      	ldr	r2, [pc, #48]	; (80006bc <main+0x12c>)
 800068c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800068e:	f003 fcc5 	bl	800401c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000692:	e7fe      	b.n	8000692 <main+0x102>
 8000694:	2000016c 	.word	0x2000016c
 8000698:	200001c4 	.word	0x200001c4
 800069c:	20000210 	.word	0x20000210
 80006a0:	200001dc 	.word	0x200001dc
 80006a4:	20000218 	.word	0x20000218
 80006a8:	080070d8 	.word	0x080070d8
 80006ac:	08000cfd 	.word	0x08000cfd
 80006b0:	200001bc 	.word	0x200001bc
 80006b4:	080070fc 	.word	0x080070fc
 80006b8:	08000df9 	.word	0x08000df9
 80006bc:	200001c0 	.word	0x200001c0

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b094      	sub	sp, #80	; 0x50
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 031c 	add.w	r3, r7, #28
 80006ca:	2234      	movs	r2, #52	; 0x34
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f006 fc10 	bl	8006ef4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	f107 0308 	add.w	r3, r7, #8
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e4:	4b28      	ldr	r3, [pc, #160]	; (8000788 <SystemClock_Config+0xc8>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	4a27      	ldr	r2, [pc, #156]	; (8000788 <SystemClock_Config+0xc8>)
 80006ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ee:	6413      	str	r3, [r2, #64]	; 0x40
 80006f0:	4b25      	ldr	r3, [pc, #148]	; (8000788 <SystemClock_Config+0xc8>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006fc:	4b23      	ldr	r3, [pc, #140]	; (800078c <SystemClock_Config+0xcc>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000704:	4a21      	ldr	r2, [pc, #132]	; (800078c <SystemClock_Config+0xcc>)
 8000706:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800070a:	6013      	str	r3, [r2, #0]
 800070c:	4b1f      	ldr	r3, [pc, #124]	; (800078c <SystemClock_Config+0xcc>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000714:	603b      	str	r3, [r7, #0]
 8000716:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000718:	2302      	movs	r3, #2
 800071a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800071c:	2301      	movs	r3, #1
 800071e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000720:	2310      	movs	r3, #16
 8000722:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000724:	2302      	movs	r3, #2
 8000726:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000728:	2300      	movs	r3, #0
 800072a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800072c:	2308      	movs	r3, #8
 800072e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000730:	2360      	movs	r3, #96	; 0x60
 8000732:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8000734:	2306      	movs	r3, #6
 8000736:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000738:	2302      	movs	r3, #2
 800073a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800073c:	2302      	movs	r3, #2
 800073e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000740:	f107 031c 	add.w	r3, r7, #28
 8000744:	4618      	mov	r0, r3
 8000746:	f002 fc5b 	bl	8003000 <HAL_RCC_OscConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000750:	f000 fc94 	bl	800107c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000754:	230f      	movs	r3, #15
 8000756:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000758:	2302      	movs	r3, #2
 800075a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800075c:	2380      	movs	r3, #128	; 0x80
 800075e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000760:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000764:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800076a:	f107 0308 	add.w	r3, r7, #8
 800076e:	2100      	movs	r1, #0
 8000770:	4618      	mov	r0, r3
 8000772:	f002 fef3 	bl	800355c <HAL_RCC_ClockConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800077c:	f000 fc7e 	bl	800107c <Error_Handler>
  }
}
 8000780:	bf00      	nop
 8000782:	3750      	adds	r7, #80	; 0x50
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40023800 	.word	0x40023800
 800078c:	40007000 	.word	0x40007000

08000790 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000796:	463b      	mov	r3, r7
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007a2:	4b21      	ldr	r3, [pc, #132]	; (8000828 <MX_ADC1_Init+0x98>)
 80007a4:	4a21      	ldr	r2, [pc, #132]	; (800082c <MX_ADC1_Init+0x9c>)
 80007a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007a8:	4b1f      	ldr	r3, [pc, #124]	; (8000828 <MX_ADC1_Init+0x98>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007ae:	4b1e      	ldr	r3, [pc, #120]	; (8000828 <MX_ADC1_Init+0x98>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007b4:	4b1c      	ldr	r3, [pc, #112]	; (8000828 <MX_ADC1_Init+0x98>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007ba:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <MX_ADC1_Init+0x98>)
 80007bc:	2201      	movs	r2, #1
 80007be:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007c0:	4b19      	ldr	r3, [pc, #100]	; (8000828 <MX_ADC1_Init+0x98>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007c8:	4b17      	ldr	r3, [pc, #92]	; (8000828 <MX_ADC1_Init+0x98>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007ce:	4b16      	ldr	r3, [pc, #88]	; (8000828 <MX_ADC1_Init+0x98>)
 80007d0:	4a17      	ldr	r2, [pc, #92]	; (8000830 <MX_ADC1_Init+0xa0>)
 80007d2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007d4:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_ADC1_Init+0x98>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007da:	4b13      	ldr	r3, [pc, #76]	; (8000828 <MX_ADC1_Init+0x98>)
 80007dc:	2201      	movs	r2, #1
 80007de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_ADC1_Init+0x98>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_ADC1_Init+0x98>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007ee:	480e      	ldr	r0, [pc, #56]	; (8000828 <MX_ADC1_Init+0x98>)
 80007f0:	f000 fe9a 	bl	8001528 <HAL_ADC_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80007fa:	f000 fc3f 	bl	800107c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80007fe:	230a      	movs	r3, #10
 8000800:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000802:	2301      	movs	r3, #1
 8000804:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000806:	2300      	movs	r3, #0
 8000808:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800080a:	463b      	mov	r3, r7
 800080c:	4619      	mov	r1, r3
 800080e:	4806      	ldr	r0, [pc, #24]	; (8000828 <MX_ADC1_Init+0x98>)
 8000810:	f001 f868 	bl	80018e4 <HAL_ADC_ConfigChannel>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800081a:	f000 fc2f 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000094 	.word	0x20000094
 800082c:	40012000 	.word	0x40012000
 8000830:	0f000001 	.word	0x0f000001

08000834 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800083a:	463b      	mov	r3, r7
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000846:	4b21      	ldr	r3, [pc, #132]	; (80008cc <MX_ADC2_Init+0x98>)
 8000848:	4a21      	ldr	r2, [pc, #132]	; (80008d0 <MX_ADC2_Init+0x9c>)
 800084a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800084c:	4b1f      	ldr	r3, [pc, #124]	; (80008cc <MX_ADC2_Init+0x98>)
 800084e:	2200      	movs	r2, #0
 8000850:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000852:	4b1e      	ldr	r3, [pc, #120]	; (80008cc <MX_ADC2_Init+0x98>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000858:	4b1c      	ldr	r3, [pc, #112]	; (80008cc <MX_ADC2_Init+0x98>)
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800085e:	4b1b      	ldr	r3, [pc, #108]	; (80008cc <MX_ADC2_Init+0x98>)
 8000860:	2201      	movs	r2, #1
 8000862:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000864:	4b19      	ldr	r3, [pc, #100]	; (80008cc <MX_ADC2_Init+0x98>)
 8000866:	2200      	movs	r2, #0
 8000868:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800086c:	4b17      	ldr	r3, [pc, #92]	; (80008cc <MX_ADC2_Init+0x98>)
 800086e:	2200      	movs	r2, #0
 8000870:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000872:	4b16      	ldr	r3, [pc, #88]	; (80008cc <MX_ADC2_Init+0x98>)
 8000874:	4a17      	ldr	r2, [pc, #92]	; (80008d4 <MX_ADC2_Init+0xa0>)
 8000876:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000878:	4b14      	ldr	r3, [pc, #80]	; (80008cc <MX_ADC2_Init+0x98>)
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800087e:	4b13      	ldr	r3, [pc, #76]	; (80008cc <MX_ADC2_Init+0x98>)
 8000880:	2201      	movs	r2, #1
 8000882:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000884:	4b11      	ldr	r3, [pc, #68]	; (80008cc <MX_ADC2_Init+0x98>)
 8000886:	2200      	movs	r2, #0
 8000888:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800088c:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <MX_ADC2_Init+0x98>)
 800088e:	2201      	movs	r2, #1
 8000890:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000892:	480e      	ldr	r0, [pc, #56]	; (80008cc <MX_ADC2_Init+0x98>)
 8000894:	f000 fe48 	bl	8001528 <HAL_ADC_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 800089e:	f000 fbed 	bl	800107c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80008a2:	230b      	movs	r3, #11
 80008a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008a6:	2301      	movs	r3, #1
 80008a8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008ae:	463b      	mov	r3, r7
 80008b0:	4619      	mov	r1, r3
 80008b2:	4806      	ldr	r0, [pc, #24]	; (80008cc <MX_ADC2_Init+0x98>)
 80008b4:	f001 f816 	bl	80018e4 <HAL_ADC_ConfigChannel>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80008be:	f000 fbdd 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	3710      	adds	r7, #16
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	200000dc 	.word	0x200000dc
 80008d0:	40012100 	.word	0x40012100
 80008d4:	0f000001 	.word	0x0f000001

080008d8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008de:	463b      	mov	r3, r7
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80008ea:	4b21      	ldr	r3, [pc, #132]	; (8000970 <MX_ADC3_Init+0x98>)
 80008ec:	4a21      	ldr	r2, [pc, #132]	; (8000974 <MX_ADC3_Init+0x9c>)
 80008ee:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80008f0:	4b1f      	ldr	r3, [pc, #124]	; (8000970 <MX_ADC3_Init+0x98>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80008f6:	4b1e      	ldr	r3, [pc, #120]	; (8000970 <MX_ADC3_Init+0x98>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008fc:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <MX_ADC3_Init+0x98>)
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000902:	4b1b      	ldr	r3, [pc, #108]	; (8000970 <MX_ADC3_Init+0x98>)
 8000904:	2200      	movs	r2, #0
 8000906:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000908:	4b19      	ldr	r3, [pc, #100]	; (8000970 <MX_ADC3_Init+0x98>)
 800090a:	2200      	movs	r2, #0
 800090c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000910:	4b17      	ldr	r3, [pc, #92]	; (8000970 <MX_ADC3_Init+0x98>)
 8000912:	2200      	movs	r2, #0
 8000914:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000916:	4b16      	ldr	r3, [pc, #88]	; (8000970 <MX_ADC3_Init+0x98>)
 8000918:	4a17      	ldr	r2, [pc, #92]	; (8000978 <MX_ADC3_Init+0xa0>)
 800091a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800091c:	4b14      	ldr	r3, [pc, #80]	; (8000970 <MX_ADC3_Init+0x98>)
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000922:	4b13      	ldr	r3, [pc, #76]	; (8000970 <MX_ADC3_Init+0x98>)
 8000924:	2201      	movs	r2, #1
 8000926:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000928:	4b11      	ldr	r3, [pc, #68]	; (8000970 <MX_ADC3_Init+0x98>)
 800092a:	2200      	movs	r2, #0
 800092c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000930:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <MX_ADC3_Init+0x98>)
 8000932:	2201      	movs	r2, #1
 8000934:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000936:	480e      	ldr	r0, [pc, #56]	; (8000970 <MX_ADC3_Init+0x98>)
 8000938:	f000 fdf6 	bl	8001528 <HAL_ADC_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8000942:	f000 fb9b 	bl	800107c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000946:	230c      	movs	r3, #12
 8000948:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800094a:	2301      	movs	r3, #1
 800094c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800094e:	2300      	movs	r3, #0
 8000950:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000952:	463b      	mov	r3, r7
 8000954:	4619      	mov	r1, r3
 8000956:	4806      	ldr	r0, [pc, #24]	; (8000970 <MX_ADC3_Init+0x98>)
 8000958:	f000 ffc4 	bl	80018e4 <HAL_ADC_ConfigChannel>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8000962:	f000 fb8b 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	3710      	adds	r7, #16
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000124 	.word	0x20000124
 8000974:	40012200 	.word	0x40012200
 8000978:	0f000001 	.word	0x0f000001

0800097c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000980:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <MX_CAN1_Init+0x64>)
 8000982:	4a18      	ldr	r2, [pc, #96]	; (80009e4 <MX_CAN1_Init+0x68>)
 8000984:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1;
 8000986:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <MX_CAN1_Init+0x64>)
 8000988:	2201      	movs	r2, #1
 800098a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800098c:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <MX_CAN1_Init+0x64>)
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000992:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <MX_CAN1_Init+0x64>)
 8000994:	2200      	movs	r2, #0
 8000996:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000998:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <MX_CAN1_Init+0x64>)
 800099a:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800099e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <MX_CAN1_Init+0x64>)
 80009a2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80009a6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80009a8:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <MX_CAN1_Init+0x64>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 80009ae:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MX_CAN1_Init+0x64>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80009b4:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <MX_CAN1_Init+0x64>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_CAN1_Init+0x64>)
 80009bc:	2200      	movs	r2, #0
 80009be:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80009c0:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <MX_CAN1_Init+0x64>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <MX_CAN1_Init+0x64>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80009cc:	4804      	ldr	r0, [pc, #16]	; (80009e0 <MX_CAN1_Init+0x64>)
 80009ce:	f001 f9d9 	bl	8001d84 <HAL_CAN_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80009d8:	f000 fb50 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	2000016c 	.word	0x2000016c
 80009e4:	40006400 	.word	0x40006400

080009e8 <MX_CAN3_Init>:
  * @brief CAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN3_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 80009ec:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <MX_CAN3_Init+0x64>)
 80009ee:	4a18      	ldr	r2, [pc, #96]	; (8000a50 <MX_CAN3_Init+0x68>)
 80009f0:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 1;
 80009f2:	4b16      	ldr	r3, [pc, #88]	; (8000a4c <MX_CAN3_Init+0x64>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 80009f8:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <MX_CAN3_Init+0x64>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80009fe:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <MX_CAN3_Init+0x64>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000a04:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <MX_CAN3_Init+0x64>)
 8000a06:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000a0a:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <MX_CAN3_Init+0x64>)
 8000a0e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000a12:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8000a14:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <MX_CAN3_Init+0x64>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = ENABLE;
 8000a1a:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <MX_CAN3_Init+0x64>)
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8000a20:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <MX_CAN3_Init+0x64>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8000a26:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <MX_CAN3_Init+0x64>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8000a2c:	4b07      	ldr	r3, [pc, #28]	; (8000a4c <MX_CAN3_Init+0x64>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <MX_CAN3_Init+0x64>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8000a38:	4804      	ldr	r0, [pc, #16]	; (8000a4c <MX_CAN3_Init+0x64>)
 8000a3a:	f001 f9a3 	bl	8001d84 <HAL_CAN_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 8000a44:	f000 fb1a 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000194 	.word	0x20000194
 8000a50:	40003400 	.word	0x40003400

08000a54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b088      	sub	sp, #32
 8000a58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5a:	f107 030c 	add.w	r3, r7, #12
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	60da      	str	r2, [r3, #12]
 8000a68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6a:	4b2d      	ldr	r3, [pc, #180]	; (8000b20 <MX_GPIO_Init+0xcc>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a2c      	ldr	r2, [pc, #176]	; (8000b20 <MX_GPIO_Init+0xcc>)
 8000a70:	f043 0304 	orr.w	r3, r3, #4
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b2a      	ldr	r3, [pc, #168]	; (8000b20 <MX_GPIO_Init+0xcc>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0304 	and.w	r3, r3, #4
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a82:	4b27      	ldr	r3, [pc, #156]	; (8000b20 <MX_GPIO_Init+0xcc>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a26      	ldr	r2, [pc, #152]	; (8000b20 <MX_GPIO_Init+0xcc>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b24      	ldr	r3, [pc, #144]	; (8000b20 <MX_GPIO_Init+0xcc>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a9a:	4b21      	ldr	r3, [pc, #132]	; (8000b20 <MX_GPIO_Init+0xcc>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a20      	ldr	r2, [pc, #128]	; (8000b20 <MX_GPIO_Init+0xcc>)
 8000aa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b1e      	ldr	r3, [pc, #120]	; (8000b20 <MX_GPIO_Init+0xcc>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aae:	603b      	str	r3, [r7, #0]
 8000ab0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED_Pin|START_BTN_LED_EN_Pin, GPIO_PIN_RESET);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2128      	movs	r1, #40	; 0x28
 8000ab6:	481b      	ldr	r0, [pc, #108]	; (8000b24 <MX_GPIO_Init+0xd0>)
 8000ab8:	f002 fa6e 	bl	8002f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BRAKE_LIGHT_EN_Pin|RTDS_EN_Pin, GPIO_PIN_RESET);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2109      	movs	r1, #9
 8000ac0:	4819      	ldr	r0, [pc, #100]	; (8000b28 <MX_GPIO_Init+0xd4>)
 8000ac2:	f002 fa69 	bl	8002f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_LED_Pin START_BTN_LED_EN_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|START_BTN_LED_EN_Pin;
 8000ac6:	2328      	movs	r3, #40	; 0x28
 8000ac8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aca:	2301      	movs	r3, #1
 8000acc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad6:	f107 030c 	add.w	r3, r7, #12
 8000ada:	4619      	mov	r1, r3
 8000adc:	4811      	ldr	r0, [pc, #68]	; (8000b24 <MX_GPIO_Init+0xd0>)
 8000ade:	f002 f897 	bl	8002c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : BRAKE_LIGHT_EN_Pin RTDS_EN_Pin */
  GPIO_InitStruct.Pin = BRAKE_LIGHT_EN_Pin|RTDS_EN_Pin;
 8000ae2:	2309      	movs	r3, #9
 8000ae4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000af2:	f107 030c 	add.w	r3, r7, #12
 8000af6:	4619      	mov	r1, r3
 8000af8:	480b      	ldr	r0, [pc, #44]	; (8000b28 <MX_GPIO_Init+0xd4>)
 8000afa:	f002 f889 	bl	8002c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BTN_n_Pin */
  GPIO_InitStruct.Pin = START_BTN_n_Pin;
 8000afe:	2340      	movs	r3, #64	; 0x40
 8000b00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b02:	2300      	movs	r3, #0
 8000b04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(START_BTN_n_GPIO_Port, &GPIO_InitStruct);
 8000b0a:	f107 030c 	add.w	r3, r7, #12
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4805      	ldr	r0, [pc, #20]	; (8000b28 <MX_GPIO_Init+0xd4>)
 8000b12:	f002 f87d 	bl	8002c10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b16:	bf00      	nop
 8000b18:	3720      	adds	r7, #32
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40020000 	.word	0x40020000
 8000b28:	40021800 	.word	0x40021800

08000b2c <CAN_Config>:

/* USER CODE BEGIN 4 */
static void CAN_Config(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08a      	sub	sp, #40	; 0x28
 8000b30:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 13;
 8000b32:	230d      	movs	r3, #13
 8000b34:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x284<<5;
 8000b3e:	f44f 43a1 	mov.w	r3, #20608	; 0x5080
 8000b42:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8000b44:	2300      	movs	r3, #0
 8000b46:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0xFFE<<5; //Only ID 0x284 and 0x285 can pass through
 8000b48:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <CAN_Config+0x6c>)
 8000b4a:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8000b54:	2301      	movs	r3, #1
 8000b56:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8000b5c:	463b      	mov	r3, r7
 8000b5e:	4619      	mov	r1, r3
 8000b60:	480e      	ldr	r0, [pc, #56]	; (8000b9c <CAN_Config+0x70>)
 8000b62:	f001 fa0b 	bl	8001f7c <HAL_CAN_ConfigFilter>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <CAN_Config+0x44>
	{
		/* Filter configuration Error */
		Error_Handler();
 8000b6c:	f000 fa86 	bl	800107c <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8000b70:	480a      	ldr	r0, [pc, #40]	; (8000b9c <CAN_Config+0x70>)
 8000b72:	f001 faef 	bl	8002154 <HAL_CAN_Start>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <CAN_Config+0x54>
	{
		/* Start Error */
		Error_Handler();
 8000b7c:	f000 fa7e 	bl	800107c <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan3) != HAL_OK)
 8000b80:	4807      	ldr	r0, [pc, #28]	; (8000ba0 <CAN_Config+0x74>)
 8000b82:	f001 fae7 	bl	8002154 <HAL_CAN_Start>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <CAN_Config+0x64>
	{
		/* Start Error */
		Error_Handler();
 8000b8c:	f000 fa76 	bl	800107c <Error_Handler>
	}
}
 8000b90:	bf00      	nop
 8000b92:	3728      	adds	r7, #40	; 0x28
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	0001ffc0 	.word	0x0001ffc0
 8000b9c:	2000016c 	.word	0x2000016c
 8000ba0:	20000194 	.word	0x20000194

08000ba4 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
	//Get Rx message
	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8000bac:	4b4e      	ldr	r3, [pc, #312]	; (8000ce8 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000bae:	4a4f      	ldr	r2, [pc, #316]	; (8000cec <HAL_CAN_RxFifo0MsgPendingCallback+0x148>)
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	484f      	ldr	r0, [pc, #316]	; (8000cf0 <HAL_CAN_RxFifo0MsgPendingCallback+0x14c>)
 8000bb4:	f001 fbe2 	bl	800237c <HAL_CAN_GetRxMessage>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
		Error_Handler();
 8000bbe:	f000 fa5d 	bl	800107c <Error_Handler>
	}

	if (RxHeader.StdId == 0x285) {
 8000bc2:	4b4a      	ldr	r3, [pc, #296]	; (8000cec <HAL_CAN_RxFifo0MsgPendingCallback+0x148>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f240 2285 	movw	r2, #645	; 0x285
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d142      	bne.n	8000c54 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>
		if ((RxData[1] >> 1) & 1) {
 8000bce:	4b46      	ldr	r3, [pc, #280]	; (8000ce8 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000bd0:	785b      	ldrb	r3, [r3, #1]
 8000bd2:	085b      	lsrs	r3, r3, #1
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d003      	beq.n	8000be6 <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
			MotorStatus_R = STATUS_ERROR;
 8000bde:	4b45      	ldr	r3, [pc, #276]	; (8000cf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000be0:	2207      	movs	r2, #7
 8000be2:	701a      	strb	r2, [r3, #0]
			return;
 8000be4:	e07d      	b.n	8000ce2 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
		} else if (RxData[1] >> 7 & 1){
 8000be6:	4b40      	ldr	r3, [pc, #256]	; (8000ce8 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000be8:	785b      	ldrb	r3, [r3, #1]
 8000bea:	09db      	lsrs	r3, r3, #7
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d003      	beq.n	8000bfe <HAL_CAN_RxFifo0MsgPendingCallback+0x5a>
			MotorStatus_R = STATUS_DERATING;
 8000bf6:	4b3f      	ldr	r3, [pc, #252]	; (8000cf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000bf8:	2206      	movs	r2, #6
 8000bfa:	701a      	strb	r2, [r3, #0]
			return;
 8000bfc:	e071      	b.n	8000ce2 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
		} else {
			switch(RxData[1]) {
 8000bfe:	4b3a      	ldr	r3, [pc, #232]	; (8000ce8 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000c00:	785b      	ldrb	r3, [r3, #1]
 8000c02:	2b79      	cmp	r3, #121	; 0x79
 8000c04:	d01e      	beq.n	8000c44 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>
 8000c06:	2b79      	cmp	r3, #121	; 0x79
 8000c08:	dc20      	bgt.n	8000c4c <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
 8000c0a:	2b59      	cmp	r3, #89	; 0x59
 8000c0c:	d016      	beq.n	8000c3c <HAL_CAN_RxFifo0MsgPendingCallback+0x98>
 8000c0e:	2b59      	cmp	r3, #89	; 0x59
 8000c10:	dc1c      	bgt.n	8000c4c <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
 8000c12:	2b19      	cmp	r3, #25
 8000c14:	d00e      	beq.n	8000c34 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>
 8000c16:	2b19      	cmp	r3, #25
 8000c18:	dc18      	bgt.n	8000c4c <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d002      	beq.n	8000c24 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>
 8000c1e:	2b11      	cmp	r3, #17
 8000c20:	d004      	beq.n	8000c2c <HAL_CAN_RxFifo0MsgPendingCallback+0x88>
 8000c22:	e013      	b.n	8000c4c <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
				case 0x01:
					MotorStatus_R = STATUS_SYSTEM_READY;
 8000c24:	4b33      	ldr	r3, [pc, #204]	; (8000cf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	701a      	strb	r2, [r3, #0]
					break;
 8000c2a:	e05a      	b.n	8000ce2 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x11:
					MotorStatus_R = STATUS_DC_ON;
 8000c2c:	4b31      	ldr	r3, [pc, #196]	; (8000cf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000c2e:	2202      	movs	r2, #2
 8000c30:	701a      	strb	r2, [r3, #0]
					break;
 8000c32:	e056      	b.n	8000ce2 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x19:
					MotorStatus_R = STATUS_QUIT_DC_ON;
 8000c34:	4b2f      	ldr	r3, [pc, #188]	; (8000cf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000c36:	2203      	movs	r2, #3
 8000c38:	701a      	strb	r2, [r3, #0]
					break;
 8000c3a:	e052      	b.n	8000ce2 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x59:
					MotorStatus_R = STATUS_INVERTER_ON;
 8000c3c:	4b2d      	ldr	r3, [pc, #180]	; (8000cf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000c3e:	2204      	movs	r2, #4
 8000c40:	701a      	strb	r2, [r3, #0]
					break;
 8000c42:	e04e      	b.n	8000ce2 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x79:
					MotorStatus_R = STATUS_QUIT_INVERTER_ON;
 8000c44:	4b2b      	ldr	r3, [pc, #172]	; (8000cf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000c46:	2205      	movs	r2, #5
 8000c48:	701a      	strb	r2, [r3, #0]
					break;
 8000c4a:	e04a      	b.n	8000ce2 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				default:
					MotorStatus_R = STATUS_UNKNOWN;
 8000c4c:	4b29      	ldr	r3, [pc, #164]	; (8000cf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	701a      	strb	r2, [r3, #0]
 8000c52:	e046      	b.n	8000ce2 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
			}
		}
	}
	else if (RxHeader.StdId == 0x284) {
 8000c54:	4b25      	ldr	r3, [pc, #148]	; (8000cec <HAL_CAN_RxFifo0MsgPendingCallback+0x148>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f5b3 7f21 	cmp.w	r3, #644	; 0x284
 8000c5c:	d141      	bne.n	8000ce2 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
		if ((RxData[1] >> 1) & 1) {
 8000c5e:	4b22      	ldr	r3, [pc, #136]	; (8000ce8 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000c60:	785b      	ldrb	r3, [r3, #1]
 8000c62:	085b      	lsrs	r3, r3, #1
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d003      	beq.n	8000c76 <HAL_CAN_RxFifo0MsgPendingCallback+0xd2>
			MotorStatus_L = STATUS_ERROR;
 8000c6e:	4b22      	ldr	r3, [pc, #136]	; (8000cf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000c70:	2207      	movs	r2, #7
 8000c72:	701a      	strb	r2, [r3, #0]
			return;
 8000c74:	e035      	b.n	8000ce2 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
		} else if (RxData[1] >> 7 & 1){
 8000c76:	4b1c      	ldr	r3, [pc, #112]	; (8000ce8 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000c78:	785b      	ldrb	r3, [r3, #1]
 8000c7a:	09db      	lsrs	r3, r3, #7
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d003      	beq.n	8000c8e <HAL_CAN_RxFifo0MsgPendingCallback+0xea>
			MotorStatus_L = STATUS_DERATING;
 8000c86:	4b1c      	ldr	r3, [pc, #112]	; (8000cf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000c88:	2206      	movs	r2, #6
 8000c8a:	701a      	strb	r2, [r3, #0]
			return;
 8000c8c:	e029      	b.n	8000ce2 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
		} else {
			switch(RxData[1]) {
 8000c8e:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000c90:	785b      	ldrb	r3, [r3, #1]
 8000c92:	2b79      	cmp	r3, #121	; 0x79
 8000c94:	d01e      	beq.n	8000cd4 <HAL_CAN_RxFifo0MsgPendingCallback+0x130>
 8000c96:	2b79      	cmp	r3, #121	; 0x79
 8000c98:	dc20      	bgt.n	8000cdc <HAL_CAN_RxFifo0MsgPendingCallback+0x138>
 8000c9a:	2b59      	cmp	r3, #89	; 0x59
 8000c9c:	d016      	beq.n	8000ccc <HAL_CAN_RxFifo0MsgPendingCallback+0x128>
 8000c9e:	2b59      	cmp	r3, #89	; 0x59
 8000ca0:	dc1c      	bgt.n	8000cdc <HAL_CAN_RxFifo0MsgPendingCallback+0x138>
 8000ca2:	2b19      	cmp	r3, #25
 8000ca4:	d00e      	beq.n	8000cc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>
 8000ca6:	2b19      	cmp	r3, #25
 8000ca8:	dc18      	bgt.n	8000cdc <HAL_CAN_RxFifo0MsgPendingCallback+0x138>
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d002      	beq.n	8000cb4 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>
 8000cae:	2b11      	cmp	r3, #17
 8000cb0:	d004      	beq.n	8000cbc <HAL_CAN_RxFifo0MsgPendingCallback+0x118>
 8000cb2:	e013      	b.n	8000cdc <HAL_CAN_RxFifo0MsgPendingCallback+0x138>
				case 0x01:
					MotorStatus_L = STATUS_SYSTEM_READY;
 8000cb4:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	701a      	strb	r2, [r3, #0]
					break;
 8000cba:	e012      	b.n	8000ce2 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x11:
					MotorStatus_L = STATUS_DC_ON;
 8000cbc:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000cbe:	2202      	movs	r2, #2
 8000cc0:	701a      	strb	r2, [r3, #0]
					break;
 8000cc2:	e00e      	b.n	8000ce2 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x19:
					MotorStatus_L = STATUS_QUIT_DC_ON;
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000cc6:	2203      	movs	r2, #3
 8000cc8:	701a      	strb	r2, [r3, #0]
					break;
 8000cca:	e00a      	b.n	8000ce2 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x59:
					MotorStatus_L = STATUS_INVERTER_ON;
 8000ccc:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000cce:	2204      	movs	r2, #4
 8000cd0:	701a      	strb	r2, [r3, #0]
					break;
 8000cd2:	e006      	b.n	8000ce2 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				case 0x79:
					MotorStatus_L = STATUS_QUIT_INVERTER_ON;
 8000cd4:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000cd6:	2205      	movs	r2, #5
 8000cd8:	701a      	strb	r2, [r3, #0]
					break;
 8000cda:	e002      	b.n	8000ce2 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				default:
					MotorStatus_L = STATUS_UNKNOWN;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20000220 	.word	0x20000220
 8000cec:	200001f4 	.word	0x200001f4
 8000cf0:	2000016c 	.word	0x2000016c
 8000cf4:	2000022c 	.word	0x2000022c
 8000cf8:	2000022d 	.word	0x2000022d

08000cfc <Start_FRT_controller>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_FRT_controller */
void Start_FRT_controller(void *argument)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(50);
 8000d04:	2032      	movs	r0, #50	; 0x32
 8000d06:	f003 facd 	bl	80042a4 <osDelay>
    if (HAL_GPIO_ReadPin(START_BTN_n_GPIO_Port, START_BTN_n_Pin) == 0) {
 8000d0a:	2140      	movs	r1, #64	; 0x40
 8000d0c:	4832      	ldr	r0, [pc, #200]	; (8000dd8 <Start_FRT_controller+0xdc>)
 8000d0e:	f002 f92b 	bl	8002f68 <HAL_GPIO_ReadPin>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d102      	bne.n	8000d1e <Start_FRT_controller+0x22>
    	//Read Ready to Drive button
    	TsOn_n = 1;
 8000d18:	4b30      	ldr	r3, [pc, #192]	; (8000ddc <Start_FRT_controller+0xe0>)
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	701a      	strb	r2, [r3, #0]
    }
    if (RxData[1] == 0x79 && TsOn_n && BrakeOn) {
 8000d1e:	4b30      	ldr	r3, [pc, #192]	; (8000de0 <Start_FRT_controller+0xe4>)
 8000d20:	785b      	ldrb	r3, [r3, #1]
 8000d22:	2b79      	cmp	r3, #121	; 0x79
 8000d24:	d11e      	bne.n	8000d64 <Start_FRT_controller+0x68>
 8000d26:	4b2d      	ldr	r3, [pc, #180]	; (8000ddc <Start_FRT_controller+0xe0>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d01a      	beq.n	8000d64 <Start_FRT_controller+0x68>
 8000d2e:	4b2d      	ldr	r3, [pc, #180]	; (8000de4 <Start_FRT_controller+0xe8>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d016      	beq.n	8000d64 <Start_FRT_controller+0x68>
    	//Set ready to drive flag when all procedures are met
    	ReadyToDrive = 1;
 8000d36:	4b2c      	ldr	r3, [pc, #176]	; (8000de8 <Start_FRT_controller+0xec>)
 8000d38:	2201      	movs	r2, #1
 8000d3a:	701a      	strb	r2, [r3, #0]
    	//Sound read to drive speaker for 2s

    	//HAL_GPIO_WritePin(RTDS_EN_GPIO_Port, RTDS_EN_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(BRAKE_LIGHT_EN_GPIO_Port, BRAKE_LIGHT_EN_Pin, GPIO_PIN_SET);
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	2101      	movs	r1, #1
 8000d40:	4825      	ldr	r0, [pc, #148]	; (8000dd8 <Start_FRT_controller+0xdc>)
 8000d42:	f002 f929 	bl	8002f98 <HAL_GPIO_WritePin>
    	osDelay(2000);
 8000d46:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d4a:	f003 faab 	bl	80042a4 <osDelay>
    	//HAL_GPIO_WritePin(RTDS_EN_GPIO_Port, RTDS_EN_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(BRAKE_LIGHT_EN_GPIO_Port, BRAKE_LIGHT_EN_Pin, GPIO_PIN_RESET);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2101      	movs	r1, #1
 8000d52:	4821      	ldr	r0, [pc, #132]	; (8000dd8 <Start_FRT_controller+0xdc>)
 8000d54:	f002 f920 	bl	8002f98 <HAL_GPIO_WritePin>

		//Terminate thread when vehicle is ready to drive
    	osThreadSuspend(controllerStartHandle);
 8000d58:	4b24      	ldr	r3, [pc, #144]	; (8000dec <Start_FRT_controller+0xf0>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f003 fa39 	bl	80041d4 <osThreadSuspend>
 8000d62:	e038      	b.n	8000dd6 <Start_FRT_controller+0xda>
    } else if ((RxData[1] & 1) && !TsOn_n) {
 8000d64:	4b1e      	ldr	r3, [pc, #120]	; (8000de0 <Start_FRT_controller+0xe4>)
 8000d66:	785b      	ldrb	r3, [r3, #1]
 8000d68:	f003 0301 	and.w	r3, r3, #1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d019      	beq.n	8000da4 <Start_FRT_controller+0xa8>
 8000d70:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <Start_FRT_controller+0xe0>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	f083 0301 	eor.w	r3, r3, #1
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d012      	beq.n	8000da4 <Start_FRT_controller+0xa8>
    	//Blink the status LED when AMK is ready
		HAL_GPIO_WritePin(START_BTN_LED_EN_GPIO_Port, START_BTN_LED_EN_Pin, GPIO_PIN_SET);
 8000d7e:	2201      	movs	r2, #1
 8000d80:	2120      	movs	r1, #32
 8000d82:	481b      	ldr	r0, [pc, #108]	; (8000df0 <Start_FRT_controller+0xf4>)
 8000d84:	f002 f908 	bl	8002f98 <HAL_GPIO_WritePin>
		osDelay(500);
 8000d88:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d8c:	f003 fa8a 	bl	80042a4 <osDelay>
		HAL_GPIO_WritePin(START_BTN_LED_EN_GPIO_Port, START_BTN_LED_EN_Pin, GPIO_PIN_RESET);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2120      	movs	r1, #32
 8000d94:	4816      	ldr	r0, [pc, #88]	; (8000df0 <Start_FRT_controller+0xf4>)
 8000d96:	f002 f8ff 	bl	8002f98 <HAL_GPIO_WritePin>
		osDelay(450);
 8000d9a:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8000d9e:	f003 fa81 	bl	80042a4 <osDelay>
 8000da2:	e018      	b.n	8000dd6 <Start_FRT_controller+0xda>
    } else if (TsOn_n) {
 8000da4:	4b0d      	ldr	r3, [pc, #52]	; (8000ddc <Start_FRT_controller+0xe0>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d0ab      	beq.n	8000d04 <Start_FRT_controller+0x8>
    	//Send CAN messages to close AIRs
    	while ((MotorStatus_R == STATUS_DERATING) && (MotorStatus_R == STATUS_DERATING)) {
 8000dac:	e006      	b.n	8000dbc <Start_FRT_controller+0xc0>
    		osDelay(50);
 8000dae:	2032      	movs	r0, #50	; 0x32
 8000db0:	f003 fa78 	bl	80042a4 <osDelay>
    		HAL_GPIO_TogglePin(START_BTN_LED_EN_GPIO_Port, START_BTN_LED_EN_Pin);
 8000db4:	2120      	movs	r1, #32
 8000db6:	480e      	ldr	r0, [pc, #56]	; (8000df0 <Start_FRT_controller+0xf4>)
 8000db8:	f002 f907 	bl	8002fca <HAL_GPIO_TogglePin>
    	while ((MotorStatus_R == STATUS_DERATING) && (MotorStatus_R == STATUS_DERATING)) {
 8000dbc:	4b0d      	ldr	r3, [pc, #52]	; (8000df4 <Start_FRT_controller+0xf8>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b06      	cmp	r3, #6
 8000dc2:	d103      	bne.n	8000dcc <Start_FRT_controller+0xd0>
 8000dc4:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <Start_FRT_controller+0xf8>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b06      	cmp	r3, #6
 8000dca:	d0f0      	beq.n	8000dae <Start_FRT_controller+0xb2>
    	}
		HAL_GPIO_WritePin(START_BTN_LED_EN_GPIO_Port, START_BTN_LED_EN_Pin, GPIO_PIN_SET);
 8000dcc:	2201      	movs	r2, #1
 8000dce:	2120      	movs	r1, #32
 8000dd0:	4807      	ldr	r0, [pc, #28]	; (8000df0 <Start_FRT_controller+0xf4>)
 8000dd2:	f002 f8e1 	bl	8002f98 <HAL_GPIO_WritePin>
    osDelay(50);
 8000dd6:	e795      	b.n	8000d04 <Start_FRT_controller+0x8>
 8000dd8:	40021800 	.word	0x40021800
 8000ddc:	2000022f 	.word	0x2000022f
 8000de0:	20000220 	.word	0x20000220
 8000de4:	20000000 	.word	0x20000000
 8000de8:	20000230 	.word	0x20000230
 8000dec:	200001bc 	.word	0x200001bc
 8000df0:	40020000 	.word	0x40020000
 8000df4:	2000022c 	.word	0x2000022c

08000df8 <Start_AMK>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_AMK */
void Start_AMK(void *argument)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_AMK */
  /* Infinite loop */
  for(;;)
  {

    osDelay(5);
 8000e00:	2005      	movs	r0, #5
 8000e02:	f003 fa4f 	bl	80042a4 <osDelay>
    //Read accelerator position
    APPS2_VAL = APPS2_ADC_Percent()*500;
 8000e06:	f7ff fb9d 	bl	8000544 <APPS2_ADC_Percent>
 8000e0a:	eef0 7a40 	vmov.f32	s15, s0
 8000e0e:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8001010 <Start_AMK+0x218>
 8000e12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e1a:	ee17 3a90 	vmov	r3, s15
 8000e1e:	b29a      	uxth	r2, r3
 8000e20:	4b7c      	ldr	r3, [pc, #496]	; (8001014 <Start_AMK+0x21c>)
 8000e22:	801a      	strh	r2, [r3, #0]
    //Read brake pressure
    if (APPS2_VAL >= 450) {
 8000e24:	4b7b      	ldr	r3, [pc, #492]	; (8001014 <Start_AMK+0x21c>)
 8000e26:	881b      	ldrh	r3, [r3, #0]
 8000e28:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8000e2c:	d308      	bcc.n	8000e40 <Start_AMK+0x48>
    	BrakeOn = 1;
 8000e2e:	4b7a      	ldr	r3, [pc, #488]	; (8001018 <Start_AMK+0x220>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	701a      	strb	r2, [r3, #0]
    	HAL_GPIO_WritePin(BRAKE_LIGHT_EN_GPIO_Port, BRAKE_LIGHT_EN_Pin, GPIO_PIN_SET);
 8000e34:	2201      	movs	r2, #1
 8000e36:	2101      	movs	r1, #1
 8000e38:	4878      	ldr	r0, [pc, #480]	; (800101c <Start_AMK+0x224>)
 8000e3a:	f002 f8ad 	bl	8002f98 <HAL_GPIO_WritePin>
 8000e3e:	e007      	b.n	8000e50 <Start_AMK+0x58>
    } else {
    	BrakeOn = 0;
 8000e40:	4b75      	ldr	r3, [pc, #468]	; (8001018 <Start_AMK+0x220>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	701a      	strb	r2, [r3, #0]
    	HAL_GPIO_WritePin(BRAKE_LIGHT_EN_GPIO_Port, BRAKE_LIGHT_EN_Pin, GPIO_PIN_RESET);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2101      	movs	r1, #1
 8000e4a:	4874      	ldr	r0, [pc, #464]	; (800101c <Start_AMK+0x224>)
 8000e4c:	f002 f8a4 	bl	8002f98 <HAL_GPIO_WritePin>
    }

	//HAL_GPIO_WritePin(BRAKE_LIGHT_EN_GPIO_Port, BRAKE_LIGHT_EN_Pin, GPIO_PIN_SET);
	//HAL_GPIO_WritePin(RTDS_EN_GPIO_Port, RTDS_EN_Pin, GPIO_PIN_SET);

    if ((MotorStatus_R == STATUS_SYSTEM_READY) && (MotorStatus_L == STATUS_SYSTEM_READY)) {
 8000e50:	4b73      	ldr	r3, [pc, #460]	; (8001020 <Start_AMK+0x228>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d10d      	bne.n	8000e74 <Start_AMK+0x7c>
 8000e58:	4b72      	ldr	r3, [pc, #456]	; (8001024 <Start_AMK+0x22c>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d109      	bne.n	8000e74 <Start_AMK+0x7c>
    	//Perform AMK start-up sequence
    	AMK_TxData_R[1] = 0x02;
 8000e60:	4b71      	ldr	r3, [pc, #452]	; (8001028 <Start_AMK+0x230>)
 8000e62:	2202      	movs	r2, #2
 8000e64:	705a      	strb	r2, [r3, #1]
    	AMK_TxData_L[1] = 0x02;
 8000e66:	4b71      	ldr	r3, [pc, #452]	; (800102c <Start_AMK+0x234>)
 8000e68:	2202      	movs	r2, #2
 8000e6a:	705a      	strb	r2, [r3, #1]
		ControlStatus = CONTROL_DC_ON;
 8000e6c:	4b70      	ldr	r3, [pc, #448]	; (8001030 <Start_AMK+0x238>)
 8000e6e:	2201      	movs	r2, #1
 8000e70:	701a      	strb	r2, [r3, #0]
 8000e72:	e0b6      	b.n	8000fe2 <Start_AMK+0x1ea>
    } else if ((MotorStatus_R == STATUS_QUIT_DC_ON) && (MotorStatus_L == STATUS_QUIT_DC_ON)) {
 8000e74:	4b6a      	ldr	r3, [pc, #424]	; (8001020 <Start_AMK+0x228>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2b03      	cmp	r3, #3
 8000e7a:	d117      	bne.n	8000eac <Start_AMK+0xb4>
 8000e7c:	4b69      	ldr	r3, [pc, #420]	; (8001024 <Start_AMK+0x22c>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b03      	cmp	r3, #3
 8000e82:	d113      	bne.n	8000eac <Start_AMK+0xb4>
		AMK_TxData_L[1] = 0x07;
 8000e84:	4b69      	ldr	r3, [pc, #420]	; (800102c <Start_AMK+0x234>)
 8000e86:	2207      	movs	r2, #7
 8000e88:	705a      	strb	r2, [r3, #1]
		AMK_TxData_R[1] = 0x07;
 8000e8a:	4b67      	ldr	r3, [pc, #412]	; (8001028 <Start_AMK+0x230>)
 8000e8c:	2207      	movs	r2, #7
 8000e8e:	705a      	strb	r2, [r3, #1]
		memset(&AMK_TxData_R[2],0x00, 4*sizeof(uint8_t));
 8000e90:	2204      	movs	r2, #4
 8000e92:	2100      	movs	r1, #0
 8000e94:	4867      	ldr	r0, [pc, #412]	; (8001034 <Start_AMK+0x23c>)
 8000e96:	f006 f82d 	bl	8006ef4 <memset>
		memset(&AMK_TxData_L[2],0x00, 4*sizeof(uint8_t));
 8000e9a:	2204      	movs	r2, #4
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	4866      	ldr	r0, [pc, #408]	; (8001038 <Start_AMK+0x240>)
 8000ea0:	f006 f828 	bl	8006ef4 <memset>
		ControlStatus = CONTROL_ENABLE;
 8000ea4:	4b62      	ldr	r3, [pc, #392]	; (8001030 <Start_AMK+0x238>)
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	701a      	strb	r2, [r3, #0]
 8000eaa:	e09a      	b.n	8000fe2 <Start_AMK+0x1ea>
    } else if ((MotorStatus_R == STATUS_INVERTER_ON) && (MotorStatus_L == STATUS_INVERTER_ON)) {
 8000eac:	4b5c      	ldr	r3, [pc, #368]	; (8001020 <Start_AMK+0x228>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b04      	cmp	r3, #4
 8000eb2:	d11c      	bne.n	8000eee <Start_AMK+0xf6>
 8000eb4:	4b5b      	ldr	r3, [pc, #364]	; (8001024 <Start_AMK+0x22c>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b04      	cmp	r3, #4
 8000eba:	d118      	bne.n	8000eee <Start_AMK+0xf6>
    	osThreadResume(controllerStartHandle);
 8000ebc:	4b5f      	ldr	r3, [pc, #380]	; (800103c <Start_AMK+0x244>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f003 f9bb 	bl	800423c <osThreadResume>
    	AMK_TxData_L[1] = 0x07;
 8000ec6:	4b59      	ldr	r3, [pc, #356]	; (800102c <Start_AMK+0x234>)
 8000ec8:	2207      	movs	r2, #7
 8000eca:	705a      	strb	r2, [r3, #1]
    	AMK_TxData_R[1] = 0x07;
 8000ecc:	4b56      	ldr	r3, [pc, #344]	; (8001028 <Start_AMK+0x230>)
 8000ece:	2207      	movs	r2, #7
 8000ed0:	705a      	strb	r2, [r3, #1]
    	memset(&AMK_TxData_R[2],0x00, 4*sizeof(uint8_t));
 8000ed2:	2204      	movs	r2, #4
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4857      	ldr	r0, [pc, #348]	; (8001034 <Start_AMK+0x23c>)
 8000ed8:	f006 f80c 	bl	8006ef4 <memset>
    	memset(&AMK_TxData_L[2],0x00, 4*sizeof(uint8_t));
 8000edc:	2204      	movs	r2, #4
 8000ede:	2100      	movs	r1, #0
 8000ee0:	4855      	ldr	r0, [pc, #340]	; (8001038 <Start_AMK+0x240>)
 8000ee2:	f006 f807 	bl	8006ef4 <memset>
    	ControlStatus = CONTROL_INVERTER_ON;
 8000ee6:	4b52      	ldr	r3, [pc, #328]	; (8001030 <Start_AMK+0x238>)
 8000ee8:	2203      	movs	r2, #3
 8000eea:	701a      	strb	r2, [r3, #0]
 8000eec:	e079      	b.n	8000fe2 <Start_AMK+0x1ea>
    } else if ((MotorStatus_R == STATUS_QUIT_INVERTER_ON) && (MotorStatus_L == STATUS_QUIT_INVERTER_ON) && TsOn_n) {
 8000eee:	4b4c      	ldr	r3, [pc, #304]	; (8001020 <Start_AMK+0x228>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b05      	cmp	r3, #5
 8000ef4:	d13b      	bne.n	8000f6e <Start_AMK+0x176>
 8000ef6:	4b4b      	ldr	r3, [pc, #300]	; (8001024 <Start_AMK+0x22c>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	2b05      	cmp	r3, #5
 8000efc:	d137      	bne.n	8000f6e <Start_AMK+0x176>
 8000efe:	4b50      	ldr	r3, [pc, #320]	; (8001040 <Start_AMK+0x248>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d033      	beq.n	8000f6e <Start_AMK+0x176>
    	if (ReadyToDrive) {
 8000f06:	4b4f      	ldr	r3, [pc, #316]	; (8001044 <Start_AMK+0x24c>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d01b      	beq.n	8000f46 <Start_AMK+0x14e>
    		AMK_TxData_R[1] = 0x07;
 8000f0e:	4b46      	ldr	r3, [pc, #280]	; (8001028 <Start_AMK+0x230>)
 8000f10:	2207      	movs	r2, #7
 8000f12:	705a      	strb	r2, [r3, #1]
			AMK_TxData_L[1] = 0x07;
 8000f14:	4b45      	ldr	r3, [pc, #276]	; (800102c <Start_AMK+0x234>)
 8000f16:	2207      	movs	r2, #7
 8000f18:	705a      	strb	r2, [r3, #1]

//			AMK_TxData_R[2] = APPS2_VAL & 0xFF;
//			AMK_TxData_R[3] = (APPS2_VAL >> 8) & 0xFF;
			AMK_TxData_R[2] = 0xFF;
 8000f1a:	4b43      	ldr	r3, [pc, #268]	; (8001028 <Start_AMK+0x230>)
 8000f1c:	22ff      	movs	r2, #255	; 0xff
 8000f1e:	709a      	strb	r2, [r3, #2]
			AMK_TxData_R[3] = 0x01;
 8000f20:	4b41      	ldr	r3, [pc, #260]	; (8001028 <Start_AMK+0x230>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	70da      	strb	r2, [r3, #3]
			AMK_TxData_R[4] = 0x32; //set positive torque request to 50
 8000f26:	4b40      	ldr	r3, [pc, #256]	; (8001028 <Start_AMK+0x230>)
 8000f28:	2232      	movs	r2, #50	; 0x32
 8000f2a:	711a      	strb	r2, [r3, #4]

//			AMK_TxData_L[2] = APPS2_VAL & 0xFF;
//			AMK_TxData_L[3] = (APPS2_VAL >> 8) & 0xFF;
			AMK_TxData_L[2] = 0xFF;
 8000f2c:	4b3f      	ldr	r3, [pc, #252]	; (800102c <Start_AMK+0x234>)
 8000f2e:	22ff      	movs	r2, #255	; 0xff
 8000f30:	709a      	strb	r2, [r3, #2]
			AMK_TxData_L[3] = 0x01;
 8000f32:	4b3e      	ldr	r3, [pc, #248]	; (800102c <Start_AMK+0x234>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	70da      	strb	r2, [r3, #3]
			AMK_TxData_L[4] = 0x32;
 8000f38:	4b3c      	ldr	r3, [pc, #240]	; (800102c <Start_AMK+0x234>)
 8000f3a:	2232      	movs	r2, #50	; 0x32
 8000f3c:	711a      	strb	r2, [r3, #4]
			ControlStatus = CONTROL_RUNNING;
 8000f3e:	4b3c      	ldr	r3, [pc, #240]	; (8001030 <Start_AMK+0x238>)
 8000f40:	2207      	movs	r2, #7
 8000f42:	701a      	strb	r2, [r3, #0]
    	if (ReadyToDrive) {
 8000f44:	e04d      	b.n	8000fe2 <Start_AMK+0x1ea>
    	} else {
    		AMK_TxData_R[1] = 0x07;
 8000f46:	4b38      	ldr	r3, [pc, #224]	; (8001028 <Start_AMK+0x230>)
 8000f48:	2207      	movs	r2, #7
 8000f4a:	705a      	strb	r2, [r3, #1]
    		AMK_TxData_L[1] = 0x07;
 8000f4c:	4b37      	ldr	r3, [pc, #220]	; (800102c <Start_AMK+0x234>)
 8000f4e:	2207      	movs	r2, #7
 8000f50:	705a      	strb	r2, [r3, #1]
    		memset(&AMK_TxData_R[2],0x00, 4*sizeof(uint8_t));
 8000f52:	2204      	movs	r2, #4
 8000f54:	2100      	movs	r1, #0
 8000f56:	4837      	ldr	r0, [pc, #220]	; (8001034 <Start_AMK+0x23c>)
 8000f58:	f005 ffcc 	bl	8006ef4 <memset>
    		memset(&AMK_TxData_L[2],0x00, 4*sizeof(uint8_t));
 8000f5c:	2204      	movs	r2, #4
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4835      	ldr	r0, [pc, #212]	; (8001038 <Start_AMK+0x240>)
 8000f62:	f005 ffc7 	bl	8006ef4 <memset>
    		ControlStatus = CONTROL_TS_READY;
 8000f66:	4b32      	ldr	r3, [pc, #200]	; (8001030 <Start_AMK+0x238>)
 8000f68:	2204      	movs	r2, #4
 8000f6a:	701a      	strb	r2, [r3, #0]
    	if (ReadyToDrive) {
 8000f6c:	e039      	b.n	8000fe2 <Start_AMK+0x1ea>
    	}
    } else if (MotorStatus_R == STATUS_ERROR) {
 8000f6e:	4b2c      	ldr	r3, [pc, #176]	; (8001020 <Start_AMK+0x228>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	2b07      	cmp	r3, #7
 8000f74:	d109      	bne.n	8000f8a <Start_AMK+0x192>
    	ReadyToDrive = 0;
 8000f76:	4b33      	ldr	r3, [pc, #204]	; (8001044 <Start_AMK+0x24c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	701a      	strb	r2, [r3, #0]
    	AMK_TxData_R[1] = 0x08;
 8000f7c:	4b2a      	ldr	r3, [pc, #168]	; (8001028 <Start_AMK+0x230>)
 8000f7e:	2208      	movs	r2, #8
 8000f80:	705a      	strb	r2, [r3, #1]
		ControlStatus = CONTROL_ERROR_RESET_RIGHT;
 8000f82:	4b2b      	ldr	r3, [pc, #172]	; (8001030 <Start_AMK+0x238>)
 8000f84:	2205      	movs	r2, #5
 8000f86:	701a      	strb	r2, [r3, #0]
 8000f88:	e02b      	b.n	8000fe2 <Start_AMK+0x1ea>
    } else if (MotorStatus_L == STATUS_ERROR) {
 8000f8a:	4b26      	ldr	r3, [pc, #152]	; (8001024 <Start_AMK+0x22c>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b07      	cmp	r3, #7
 8000f90:	d109      	bne.n	8000fa6 <Start_AMK+0x1ae>
    	ReadyToDrive = 0;
 8000f92:	4b2c      	ldr	r3, [pc, #176]	; (8001044 <Start_AMK+0x24c>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	701a      	strb	r2, [r3, #0]
    	AMK_TxData_L[1] = 0x08;
 8000f98:	4b24      	ldr	r3, [pc, #144]	; (800102c <Start_AMK+0x234>)
 8000f9a:	2208      	movs	r2, #8
 8000f9c:	705a      	strb	r2, [r3, #1]
		ControlStatus = CONTROL_ERROR_RESET_LEFT;
 8000f9e:	4b24      	ldr	r3, [pc, #144]	; (8001030 <Start_AMK+0x238>)
 8000fa0:	2206      	movs	r2, #6
 8000fa2:	701a      	strb	r2, [r3, #0]
 8000fa4:	e01d      	b.n	8000fe2 <Start_AMK+0x1ea>
    } else if ((MotorStatus_R == STATUS_DERATING) && (MotorStatus_L == STATUS_DERATING)) {
 8000fa6:	4b1e      	ldr	r3, [pc, #120]	; (8001020 <Start_AMK+0x228>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b06      	cmp	r3, #6
 8000fac:	d103      	bne.n	8000fb6 <Start_AMK+0x1be>
 8000fae:	4b1d      	ldr	r3, [pc, #116]	; (8001024 <Start_AMK+0x22c>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b06      	cmp	r3, #6
 8000fb4:	d015      	beq.n	8000fe2 <Start_AMK+0x1ea>
    	//TsOn_n = 0;
    } else {
    	ReadyToDrive = 0;
 8000fb6:	4b23      	ldr	r3, [pc, #140]	; (8001044 <Start_AMK+0x24c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]
    	AMK_TxData_L[1] = 0x07;
 8000fbc:	4b1b      	ldr	r3, [pc, #108]	; (800102c <Start_AMK+0x234>)
 8000fbe:	2207      	movs	r2, #7
 8000fc0:	705a      	strb	r2, [r3, #1]
		AMK_TxData_R[1] = 0x07;
 8000fc2:	4b19      	ldr	r3, [pc, #100]	; (8001028 <Start_AMK+0x230>)
 8000fc4:	2207      	movs	r2, #7
 8000fc6:	705a      	strb	r2, [r3, #1]
		memset(&AMK_TxData_R[2],0x00, 4*sizeof(uint8_t));
 8000fc8:	2204      	movs	r2, #4
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4819      	ldr	r0, [pc, #100]	; (8001034 <Start_AMK+0x23c>)
 8000fce:	f005 ff91 	bl	8006ef4 <memset>
		memset(&AMK_TxData_L[2],0x00, 4*sizeof(uint8_t));
 8000fd2:	2204      	movs	r2, #4
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4818      	ldr	r0, [pc, #96]	; (8001038 <Start_AMK+0x240>)
 8000fd8:	f005 ff8c 	bl	8006ef4 <memset>
    	ControlStatus = CONTROL_UNKNOWN;
 8000fdc:	4b14      	ldr	r3, [pc, #80]	; (8001030 <Start_AMK+0x238>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	701a      	strb	r2, [r3, #0]
    }

	HAL_CAN_AddTxMessage(&hcan1, &AMK_TxHeader_R, AMK_TxData_R, &TxMailbox);
 8000fe2:	4b19      	ldr	r3, [pc, #100]	; (8001048 <Start_AMK+0x250>)
 8000fe4:	4a10      	ldr	r2, [pc, #64]	; (8001028 <Start_AMK+0x230>)
 8000fe6:	4919      	ldr	r1, [pc, #100]	; (800104c <Start_AMK+0x254>)
 8000fe8:	4819      	ldr	r0, [pc, #100]	; (8001050 <Start_AMK+0x258>)
 8000fea:	f001 f8f7 	bl	80021dc <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&hcan1, &AMK_TxHeader_L, AMK_TxData_L, &TxMailbox);
 8000fee:	4b16      	ldr	r3, [pc, #88]	; (8001048 <Start_AMK+0x250>)
 8000ff0:	4a0e      	ldr	r2, [pc, #56]	; (800102c <Start_AMK+0x234>)
 8000ff2:	4918      	ldr	r1, [pc, #96]	; (8001054 <Start_AMK+0x25c>)
 8000ff4:	4816      	ldr	r0, [pc, #88]	; (8001050 <Start_AMK+0x258>)
 8000ff6:	f001 f8f1 	bl	80021dc <HAL_CAN_AddTxMessage>
	memset(&AMK_TxData_R[0],0x00, 8*sizeof(uint8_t));
 8000ffa:	2208      	movs	r2, #8
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	480a      	ldr	r0, [pc, #40]	; (8001028 <Start_AMK+0x230>)
 8001000:	f005 ff78 	bl	8006ef4 <memset>
	memset(&AMK_TxData_L[0],0x00, 8*sizeof(uint8_t));
 8001004:	2208      	movs	r2, #8
 8001006:	2100      	movs	r1, #0
 8001008:	4808      	ldr	r0, [pc, #32]	; (800102c <Start_AMK+0x234>)
 800100a:	f005 ff73 	bl	8006ef4 <memset>
    osDelay(5);
 800100e:	e6f7      	b.n	8000e00 <Start_AMK+0x8>
 8001010:	43fa0000 	.word	0x43fa0000
 8001014:	20000232 	.word	0x20000232
 8001018:	20000000 	.word	0x20000000
 800101c:	40021800 	.word	0x40021800
 8001020:	2000022c 	.word	0x2000022c
 8001024:	2000022d 	.word	0x2000022d
 8001028:	20000210 	.word	0x20000210
 800102c:	20000218 	.word	0x20000218
 8001030:	2000022e 	.word	0x2000022e
 8001034:	20000212 	.word	0x20000212
 8001038:	2000021a 	.word	0x2000021a
 800103c:	200001bc 	.word	0x200001bc
 8001040:	2000022f 	.word	0x2000022f
 8001044:	20000230 	.word	0x20000230
 8001048:	20000228 	.word	0x20000228
 800104c:	200001c4 	.word	0x200001c4
 8001050:	2000016c 	.word	0x2000016c
 8001054:	200001dc 	.word	0x200001dc

08001058 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a04      	ldr	r2, [pc, #16]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d101      	bne.n	800106e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800106a:	f000 fa3d 	bl	80014e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40001000 	.word	0x40001000

0800107c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001080:	b672      	cpsid	i
}
 8001082:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 1);
 8001084:	2201      	movs	r2, #1
 8001086:	2108      	movs	r1, #8
 8001088:	4801      	ldr	r0, [pc, #4]	; (8001090 <Error_Handler+0x14>)
 800108a:	f001 ff85 	bl	8002f98 <HAL_GPIO_WritePin>
  while (1)
 800108e:	e7fe      	b.n	800108e <Error_Handler+0x12>
 8001090:	40020000 	.word	0x40020000

08001094 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800109a:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <HAL_MspInit+0x4c>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	4a10      	ldr	r2, [pc, #64]	; (80010e0 <HAL_MspInit+0x4c>)
 80010a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a4:	6413      	str	r3, [r2, #64]	; 0x40
 80010a6:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <HAL_MspInit+0x4c>)
 80010a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b2:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <HAL_MspInit+0x4c>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b6:	4a0a      	ldr	r2, [pc, #40]	; (80010e0 <HAL_MspInit+0x4c>)
 80010b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010bc:	6453      	str	r3, [r2, #68]	; 0x44
 80010be:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <HAL_MspInit+0x4c>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010c6:	603b      	str	r3, [r7, #0]
 80010c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010ca:	2200      	movs	r2, #0
 80010cc:	210f      	movs	r1, #15
 80010ce:	f06f 0001 	mvn.w	r0, #1
 80010d2:	f001 fd73 	bl	8002bbc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40023800 	.word	0x40023800

080010e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08e      	sub	sp, #56	; 0x38
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a3f      	ldr	r2, [pc, #252]	; (8001200 <HAL_ADC_MspInit+0x11c>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d124      	bne.n	8001150 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001106:	4b3f      	ldr	r3, [pc, #252]	; (8001204 <HAL_ADC_MspInit+0x120>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110a:	4a3e      	ldr	r2, [pc, #248]	; (8001204 <HAL_ADC_MspInit+0x120>)
 800110c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001110:	6453      	str	r3, [r2, #68]	; 0x44
 8001112:	4b3c      	ldr	r3, [pc, #240]	; (8001204 <HAL_ADC_MspInit+0x120>)
 8001114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800111a:	623b      	str	r3, [r7, #32]
 800111c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800111e:	4b39      	ldr	r3, [pc, #228]	; (8001204 <HAL_ADC_MspInit+0x120>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a38      	ldr	r2, [pc, #224]	; (8001204 <HAL_ADC_MspInit+0x120>)
 8001124:	f043 0304 	orr.w	r3, r3, #4
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b36      	ldr	r3, [pc, #216]	; (8001204 <HAL_ADC_MspInit+0x120>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0304 	and.w	r3, r3, #4
 8001132:	61fb      	str	r3, [r7, #28]
 8001134:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = APPS1_Pin;
 8001136:	2301      	movs	r3, #1
 8001138:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800113a:	2303      	movs	r3, #3
 800113c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(APPS1_GPIO_Port, &GPIO_InitStruct);
 8001142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001146:	4619      	mov	r1, r3
 8001148:	482f      	ldr	r0, [pc, #188]	; (8001208 <HAL_ADC_MspInit+0x124>)
 800114a:	f001 fd61 	bl	8002c10 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800114e:	e052      	b.n	80011f6 <HAL_ADC_MspInit+0x112>
  else if(hadc->Instance==ADC2)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a2d      	ldr	r2, [pc, #180]	; (800120c <HAL_ADC_MspInit+0x128>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d124      	bne.n	80011a4 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800115a:	4b2a      	ldr	r3, [pc, #168]	; (8001204 <HAL_ADC_MspInit+0x120>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115e:	4a29      	ldr	r2, [pc, #164]	; (8001204 <HAL_ADC_MspInit+0x120>)
 8001160:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001164:	6453      	str	r3, [r2, #68]	; 0x44
 8001166:	4b27      	ldr	r3, [pc, #156]	; (8001204 <HAL_ADC_MspInit+0x120>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800116e:	61bb      	str	r3, [r7, #24]
 8001170:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001172:	4b24      	ldr	r3, [pc, #144]	; (8001204 <HAL_ADC_MspInit+0x120>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a23      	ldr	r2, [pc, #140]	; (8001204 <HAL_ADC_MspInit+0x120>)
 8001178:	f043 0304 	orr.w	r3, r3, #4
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b21      	ldr	r3, [pc, #132]	; (8001204 <HAL_ADC_MspInit+0x120>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f003 0304 	and.w	r3, r3, #4
 8001186:	617b      	str	r3, [r7, #20]
 8001188:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = APPS2_Pin;
 800118a:	2302      	movs	r3, #2
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800118e:	2303      	movs	r3, #3
 8001190:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(APPS2_GPIO_Port, &GPIO_InitStruct);
 8001196:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119a:	4619      	mov	r1, r3
 800119c:	481a      	ldr	r0, [pc, #104]	; (8001208 <HAL_ADC_MspInit+0x124>)
 800119e:	f001 fd37 	bl	8002c10 <HAL_GPIO_Init>
}
 80011a2:	e028      	b.n	80011f6 <HAL_ADC_MspInit+0x112>
  else if(hadc->Instance==ADC3)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a19      	ldr	r2, [pc, #100]	; (8001210 <HAL_ADC_MspInit+0x12c>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d123      	bne.n	80011f6 <HAL_ADC_MspInit+0x112>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80011ae:	4b15      	ldr	r3, [pc, #84]	; (8001204 <HAL_ADC_MspInit+0x120>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b2:	4a14      	ldr	r2, [pc, #80]	; (8001204 <HAL_ADC_MspInit+0x120>)
 80011b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011b8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ba:	4b12      	ldr	r3, [pc, #72]	; (8001204 <HAL_ADC_MspInit+0x120>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c6:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <HAL_ADC_MspInit+0x120>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	4a0e      	ldr	r2, [pc, #56]	; (8001204 <HAL_ADC_MspInit+0x120>)
 80011cc:	f043 0304 	orr.w	r3, r3, #4
 80011d0:	6313      	str	r3, [r2, #48]	; 0x30
 80011d2:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <HAL_ADC_MspInit+0x120>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	f003 0304 	and.w	r3, r3, #4
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEERING_ANGLE_SENSOR_Pin|BPPS_BUFFERED_Pin;
 80011de:	230c      	movs	r3, #12
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011e2:	2303      	movs	r3, #3
 80011e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ee:	4619      	mov	r1, r3
 80011f0:	4805      	ldr	r0, [pc, #20]	; (8001208 <HAL_ADC_MspInit+0x124>)
 80011f2:	f001 fd0d 	bl	8002c10 <HAL_GPIO_Init>
}
 80011f6:	bf00      	nop
 80011f8:	3738      	adds	r7, #56	; 0x38
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40012000 	.word	0x40012000
 8001204:	40023800 	.word	0x40023800
 8001208:	40020800 	.word	0x40020800
 800120c:	40012100 	.word	0x40012100
 8001210:	40012200 	.word	0x40012200

08001214 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08c      	sub	sp, #48	; 0x30
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 031c 	add.w	r3, r7, #28
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a33      	ldr	r2, [pc, #204]	; (8001300 <HAL_CAN_MspInit+0xec>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d131      	bne.n	800129a <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001236:	4b33      	ldr	r3, [pc, #204]	; (8001304 <HAL_CAN_MspInit+0xf0>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	4a32      	ldr	r2, [pc, #200]	; (8001304 <HAL_CAN_MspInit+0xf0>)
 800123c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001240:	6413      	str	r3, [r2, #64]	; 0x40
 8001242:	4b30      	ldr	r3, [pc, #192]	; (8001304 <HAL_CAN_MspInit+0xf0>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800124a:	61bb      	str	r3, [r7, #24]
 800124c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124e:	4b2d      	ldr	r3, [pc, #180]	; (8001304 <HAL_CAN_MspInit+0xf0>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	4a2c      	ldr	r2, [pc, #176]	; (8001304 <HAL_CAN_MspInit+0xf0>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
 800125a:	4b2a      	ldr	r3, [pc, #168]	; (8001304 <HAL_CAN_MspInit+0xf0>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001266:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800126a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126c:	2302      	movs	r3, #2
 800126e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001274:	2303      	movs	r3, #3
 8001276:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001278:	2309      	movs	r3, #9
 800127a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127c:	f107 031c 	add.w	r3, r7, #28
 8001280:	4619      	mov	r1, r3
 8001282:	4821      	ldr	r0, [pc, #132]	; (8001308 <HAL_CAN_MspInit+0xf4>)
 8001284:	f001 fcc4 	bl	8002c10 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001288:	2200      	movs	r2, #0
 800128a:	2105      	movs	r1, #5
 800128c:	2014      	movs	r0, #20
 800128e:	f001 fc95 	bl	8002bbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001292:	2014      	movs	r0, #20
 8001294:	f001 fcae 	bl	8002bf4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }

}
 8001298:	e02d      	b.n	80012f6 <HAL_CAN_MspInit+0xe2>
  else if(hcan->Instance==CAN3)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a1b      	ldr	r2, [pc, #108]	; (800130c <HAL_CAN_MspInit+0xf8>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d128      	bne.n	80012f6 <HAL_CAN_MspInit+0xe2>
    __HAL_RCC_CAN3_CLK_ENABLE();
 80012a4:	4b17      	ldr	r3, [pc, #92]	; (8001304 <HAL_CAN_MspInit+0xf0>)
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	4a16      	ldr	r2, [pc, #88]	; (8001304 <HAL_CAN_MspInit+0xf0>)
 80012aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012ae:	6413      	str	r3, [r2, #64]	; 0x40
 80012b0:	4b14      	ldr	r3, [pc, #80]	; (8001304 <HAL_CAN_MspInit+0xf0>)
 80012b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012b8:	613b      	str	r3, [r7, #16]
 80012ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <HAL_CAN_MspInit+0xf0>)
 80012be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c0:	4a10      	ldr	r2, [pc, #64]	; (8001304 <HAL_CAN_MspInit+0xf0>)
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	6313      	str	r3, [r2, #48]	; 0x30
 80012c8:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <HAL_CAN_MspInit+0xf0>)
 80012ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012cc:	f003 0301 	and.w	r3, r3, #1
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 80012d4:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80012d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012da:	2302      	movs	r3, #2
 80012dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e2:	2303      	movs	r3, #3
 80012e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 80012e6:	230b      	movs	r3, #11
 80012e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ea:	f107 031c 	add.w	r3, r7, #28
 80012ee:	4619      	mov	r1, r3
 80012f0:	4805      	ldr	r0, [pc, #20]	; (8001308 <HAL_CAN_MspInit+0xf4>)
 80012f2:	f001 fc8d 	bl	8002c10 <HAL_GPIO_Init>
}
 80012f6:	bf00      	nop
 80012f8:	3730      	adds	r7, #48	; 0x30
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40006400 	.word	0x40006400
 8001304:	40023800 	.word	0x40023800
 8001308:	40020000 	.word	0x40020000
 800130c:	40003400 	.word	0x40003400

08001310 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08e      	sub	sp, #56	; 0x38
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001318:	2300      	movs	r3, #0
 800131a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800131c:	2300      	movs	r3, #0
 800131e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001320:	4b33      	ldr	r3, [pc, #204]	; (80013f0 <HAL_InitTick+0xe0>)
 8001322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001324:	4a32      	ldr	r2, [pc, #200]	; (80013f0 <HAL_InitTick+0xe0>)
 8001326:	f043 0310 	orr.w	r3, r3, #16
 800132a:	6413      	str	r3, [r2, #64]	; 0x40
 800132c:	4b30      	ldr	r3, [pc, #192]	; (80013f0 <HAL_InitTick+0xe0>)
 800132e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001330:	f003 0310 	and.w	r3, r3, #16
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001338:	f107 0210 	add.w	r2, r7, #16
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	4611      	mov	r1, r2
 8001342:	4618      	mov	r0, r3
 8001344:	f002 fb1c 	bl	8003980 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001348:	6a3b      	ldr	r3, [r7, #32]
 800134a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800134c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800134e:	2b00      	cmp	r3, #0
 8001350:	d103      	bne.n	800135a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001352:	f002 fb01 	bl	8003958 <HAL_RCC_GetPCLK1Freq>
 8001356:	6378      	str	r0, [r7, #52]	; 0x34
 8001358:	e004      	b.n	8001364 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800135a:	f002 fafd 	bl	8003958 <HAL_RCC_GetPCLK1Freq>
 800135e:	4603      	mov	r3, r0
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001366:	4a23      	ldr	r2, [pc, #140]	; (80013f4 <HAL_InitTick+0xe4>)
 8001368:	fba2 2303 	umull	r2, r3, r2, r3
 800136c:	0c9b      	lsrs	r3, r3, #18
 800136e:	3b01      	subs	r3, #1
 8001370:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001372:	4b21      	ldr	r3, [pc, #132]	; (80013f8 <HAL_InitTick+0xe8>)
 8001374:	4a21      	ldr	r2, [pc, #132]	; (80013fc <HAL_InitTick+0xec>)
 8001376:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001378:	4b1f      	ldr	r3, [pc, #124]	; (80013f8 <HAL_InitTick+0xe8>)
 800137a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800137e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001380:	4a1d      	ldr	r2, [pc, #116]	; (80013f8 <HAL_InitTick+0xe8>)
 8001382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001384:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001386:	4b1c      	ldr	r3, [pc, #112]	; (80013f8 <HAL_InitTick+0xe8>)
 8001388:	2200      	movs	r2, #0
 800138a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138c:	4b1a      	ldr	r3, [pc, #104]	; (80013f8 <HAL_InitTick+0xe8>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001392:	4b19      	ldr	r3, [pc, #100]	; (80013f8 <HAL_InitTick+0xe8>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001398:	4817      	ldr	r0, [pc, #92]	; (80013f8 <HAL_InitTick+0xe8>)
 800139a:	f002 fb23 	bl	80039e4 <HAL_TIM_Base_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80013a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d11b      	bne.n	80013e4 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80013ac:	4812      	ldr	r0, [pc, #72]	; (80013f8 <HAL_InitTick+0xe8>)
 80013ae:	f002 fb7b 	bl	8003aa8 <HAL_TIM_Base_Start_IT>
 80013b2:	4603      	mov	r3, r0
 80013b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80013b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d111      	bne.n	80013e4 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013c0:	2036      	movs	r0, #54	; 0x36
 80013c2:	f001 fc17 	bl	8002bf4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2b0f      	cmp	r3, #15
 80013ca:	d808      	bhi.n	80013de <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80013cc:	2200      	movs	r2, #0
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	2036      	movs	r0, #54	; 0x36
 80013d2:	f001 fbf3 	bl	8002bbc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013d6:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <HAL_InitTick+0xf0>)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6013      	str	r3, [r2, #0]
 80013dc:	e002      	b.n	80013e4 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80013e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3738      	adds	r7, #56	; 0x38
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40023800 	.word	0x40023800
 80013f4:	431bde83 	.word	0x431bde83
 80013f8:	20000234 	.word	0x20000234
 80013fc:	40001000 	.word	0x40001000
 8001400:	20000008 	.word	0x20000008

08001404 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001408:	e7fe      	b.n	8001408 <NMI_Handler+0x4>

0800140a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800140e:	e7fe      	b.n	800140e <HardFault_Handler+0x4>

08001410 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001414:	e7fe      	b.n	8001414 <MemManage_Handler+0x4>

08001416 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800141a:	e7fe      	b.n	800141a <BusFault_Handler+0x4>

0800141c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001420:	e7fe      	b.n	8001420 <UsageFault_Handler+0x4>

08001422 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001434:	4802      	ldr	r0, [pc, #8]	; (8001440 <CAN1_RX0_IRQHandler+0x10>)
 8001436:	f001 f8d9 	bl	80025ec <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	2000016c 	.word	0x2000016c

08001444 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001448:	4802      	ldr	r0, [pc, #8]	; (8001454 <TIM6_DAC_IRQHandler+0x10>)
 800144a:	f002 fba5 	bl	8003b98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000234 	.word	0x20000234

08001458 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800145c:	4b06      	ldr	r3, [pc, #24]	; (8001478 <SystemInit+0x20>)
 800145e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001462:	4a05      	ldr	r2, [pc, #20]	; (8001478 <SystemInit+0x20>)
 8001464:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001468:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800147c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001480:	480d      	ldr	r0, [pc, #52]	; (80014b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001482:	490e      	ldr	r1, [pc, #56]	; (80014bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001484:	4a0e      	ldr	r2, [pc, #56]	; (80014c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001486:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001488:	e002      	b.n	8001490 <LoopCopyDataInit>

0800148a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800148a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800148c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800148e:	3304      	adds	r3, #4

08001490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001494:	d3f9      	bcc.n	800148a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001496:	4a0b      	ldr	r2, [pc, #44]	; (80014c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001498:	4c0b      	ldr	r4, [pc, #44]	; (80014c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800149a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800149c:	e001      	b.n	80014a2 <LoopFillZerobss>

0800149e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800149e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a0:	3204      	adds	r2, #4

080014a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a4:	d3fb      	bcc.n	800149e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014a6:	f7ff ffd7 	bl	8001458 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014aa:	f005 fcef 	bl	8006e8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ae:	f7ff f86f 	bl	8000590 <main>
  bx  lr    
 80014b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014b4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80014b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014bc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80014c0:	080071a8 	.word	0x080071a8
  ldr r2, =_sbss
 80014c4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80014c8:	20004c94 	.word	0x20004c94

080014cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014cc:	e7fe      	b.n	80014cc <ADC_IRQHandler>

080014ce <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d2:	2003      	movs	r0, #3
 80014d4:	f001 fb67 	bl	8002ba6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014d8:	200f      	movs	r0, #15
 80014da:	f7ff ff19 	bl	8001310 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014de:	f7ff fdd9 	bl	8001094 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014ec:	4b06      	ldr	r3, [pc, #24]	; (8001508 <HAL_IncTick+0x20>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	461a      	mov	r2, r3
 80014f2:	4b06      	ldr	r3, [pc, #24]	; (800150c <HAL_IncTick+0x24>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4413      	add	r3, r2
 80014f8:	4a04      	ldr	r2, [pc, #16]	; (800150c <HAL_IncTick+0x24>)
 80014fa:	6013      	str	r3, [r2, #0]
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	2000000c 	.word	0x2000000c
 800150c:	20000280 	.word	0x20000280

08001510 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  return uwTick;
 8001514:	4b03      	ldr	r3, [pc, #12]	; (8001524 <HAL_GetTick+0x14>)
 8001516:	681b      	ldr	r3, [r3, #0]
}
 8001518:	4618      	mov	r0, r3
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	20000280 	.word	0x20000280

08001528 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001530:	2300      	movs	r3, #0
 8001532:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d101      	bne.n	800153e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e031      	b.n	80015a2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	2b00      	cmp	r3, #0
 8001544:	d109      	bne.n	800155a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f7ff fdcc 	bl	80010e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	f003 0310 	and.w	r3, r3, #16
 8001562:	2b00      	cmp	r3, #0
 8001564:	d116      	bne.n	8001594 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <HAL_ADC_Init+0x84>)
 800156c:	4013      	ands	r3, r2
 800156e:	f043 0202 	orr.w	r2, r3, #2
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f000 fb0a 	bl	8001b90 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	f023 0303 	bic.w	r3, r3, #3
 800158a:	f043 0201 	orr.w	r2, r3, #1
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	641a      	str	r2, [r3, #64]	; 0x40
 8001592:	e001      	b.n	8001598 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80015a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	ffffeefd 	.word	0xffffeefd

080015b0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d101      	bne.n	80015ca <HAL_ADC_Start+0x1a>
 80015c6:	2302      	movs	r3, #2
 80015c8:	e0ad      	b.n	8001726 <HAL_ADC_Start+0x176>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2201      	movs	r2, #1
 80015ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d018      	beq.n	8001612 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	689a      	ldr	r2, [r3, #8]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f042 0201 	orr.w	r2, r2, #1
 80015ee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80015f0:	4b50      	ldr	r3, [pc, #320]	; (8001734 <HAL_ADC_Start+0x184>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a50      	ldr	r2, [pc, #320]	; (8001738 <HAL_ADC_Start+0x188>)
 80015f6:	fba2 2303 	umull	r2, r3, r2, r3
 80015fa:	0c9a      	lsrs	r2, r3, #18
 80015fc:	4613      	mov	r3, r2
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	4413      	add	r3, r2
 8001602:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001604:	e002      	b.n	800160c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	3b01      	subs	r3, #1
 800160a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f9      	bne.n	8001606 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	2b01      	cmp	r3, #1
 800161e:	d175      	bne.n	800170c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001624:	4b45      	ldr	r3, [pc, #276]	; (800173c <HAL_ADC_Start+0x18c>)
 8001626:	4013      	ands	r3, r2
 8001628:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800163a:	2b00      	cmp	r3, #0
 800163c:	d007      	beq.n	800164e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001646:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800165a:	d106      	bne.n	800166a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001660:	f023 0206 	bic.w	r2, r3, #6
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	645a      	str	r2, [r3, #68]	; 0x44
 8001668:	e002      	b.n	8001670 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001680:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001682:	4b2f      	ldr	r3, [pc, #188]	; (8001740 <HAL_ADC_Start+0x190>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f003 031f 	and.w	r3, r3, #31
 800168a:	2b00      	cmp	r3, #0
 800168c:	d10f      	bne.n	80016ae <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d143      	bne.n	8001724 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	689a      	ldr	r2, [r3, #8]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	e03a      	b.n	8001724 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a24      	ldr	r2, [pc, #144]	; (8001744 <HAL_ADC_Start+0x194>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d10e      	bne.n	80016d6 <HAL_ADC_Start+0x126>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d107      	bne.n	80016d6 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80016d4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80016d6:	4b1a      	ldr	r3, [pc, #104]	; (8001740 <HAL_ADC_Start+0x190>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f003 0310 	and.w	r3, r3, #16
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d120      	bne.n	8001724 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a18      	ldr	r2, [pc, #96]	; (8001748 <HAL_ADC_Start+0x198>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d11b      	bne.n	8001724 <HAL_ADC_Start+0x174>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d114      	bne.n	8001724 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001708:	609a      	str	r2, [r3, #8]
 800170a:	e00b      	b.n	8001724 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001710:	f043 0210 	orr.w	r2, r3, #16
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171c:	f043 0201 	orr.w	r2, r3, #1
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	20000004 	.word	0x20000004
 8001738:	431bde83 	.word	0x431bde83
 800173c:	fffff8fe 	.word	0xfffff8fe
 8001740:	40012300 	.word	0x40012300
 8001744:	40012000 	.word	0x40012000
 8001748:	40012200 	.word	0x40012200

0800174c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800175a:	2b01      	cmp	r3, #1
 800175c:	d101      	bne.n	8001762 <HAL_ADC_Stop+0x16>
 800175e:	2302      	movs	r3, #2
 8001760:	e01f      	b.n	80017a2 <HAL_ADC_Stop+0x56>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2201      	movs	r2, #1
 8001766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f022 0201 	bic.w	r2, r2, #1
 8001778:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	2b00      	cmp	r3, #0
 8001786:	d107      	bne.n	8001798 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800178c:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <HAL_ADC_Stop+0x64>)
 800178e:	4013      	ands	r3, r2
 8001790:	f043 0201 	orr.w	r2, r3, #1
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	ffffeefe 	.word	0xffffeefe

080017b4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017d0:	d113      	bne.n	80017fa <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80017dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017e0:	d10b      	bne.n	80017fa <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	f043 0220 	orr.w	r2, r3, #32
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e063      	b.n	80018c2 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80017fa:	f7ff fe89 	bl	8001510 <HAL_GetTick>
 80017fe:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001800:	e021      	b.n	8001846 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001808:	d01d      	beq.n	8001846 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d007      	beq.n	8001820 <HAL_ADC_PollForConversion+0x6c>
 8001810:	f7ff fe7e 	bl	8001510 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	429a      	cmp	r2, r3
 800181e:	d212      	bcs.n	8001846 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b02      	cmp	r3, #2
 800182c:	d00b      	beq.n	8001846 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	f043 0204 	orr.w	r2, r3, #4
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e03d      	b.n	80018c2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0302 	and.w	r3, r3, #2
 8001850:	2b02      	cmp	r3, #2
 8001852:	d1d6      	bne.n	8001802 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f06f 0212 	mvn.w	r2, #18
 800185c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d123      	bne.n	80018c0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800187c:	2b00      	cmp	r3, #0
 800187e:	d11f      	bne.n	80018c0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001886:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800188a:	2b00      	cmp	r3, #0
 800188c:	d006      	beq.n	800189c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001898:	2b00      	cmp	r3, #0
 800189a:	d111      	bne.n	80018c0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d105      	bne.n	80018c0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b8:	f043 0201 	orr.w	r2, r3, #1
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80018ca:	b480      	push	{r7}
 80018cc:	b083      	sub	sp, #12
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80018d8:	4618      	mov	r0, r3
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d101      	bne.n	8001900 <HAL_ADC_ConfigChannel+0x1c>
 80018fc:	2302      	movs	r3, #2
 80018fe:	e136      	b.n	8001b6e <HAL_ADC_ConfigChannel+0x28a>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2b09      	cmp	r3, #9
 800190e:	d93a      	bls.n	8001986 <HAL_ADC_ConfigChannel+0xa2>
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001918:	d035      	beq.n	8001986 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	68d9      	ldr	r1, [r3, #12]
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	b29b      	uxth	r3, r3
 8001926:	461a      	mov	r2, r3
 8001928:	4613      	mov	r3, r2
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	4413      	add	r3, r2
 800192e:	3b1e      	subs	r3, #30
 8001930:	2207      	movs	r2, #7
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	43da      	mvns	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	400a      	ands	r2, r1
 800193e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a8d      	ldr	r2, [pc, #564]	; (8001b7c <HAL_ADC_ConfigChannel+0x298>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d10a      	bne.n	8001960 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	68d9      	ldr	r1, [r3, #12]
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	061a      	lsls	r2, r3, #24
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	430a      	orrs	r2, r1
 800195c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800195e:	e035      	b.n	80019cc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	68d9      	ldr	r1, [r3, #12]
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	689a      	ldr	r2, [r3, #8]
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	b29b      	uxth	r3, r3
 8001970:	4618      	mov	r0, r3
 8001972:	4603      	mov	r3, r0
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	4403      	add	r3, r0
 8001978:	3b1e      	subs	r3, #30
 800197a:	409a      	lsls	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	430a      	orrs	r2, r1
 8001982:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001984:	e022      	b.n	80019cc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	6919      	ldr	r1, [r3, #16]
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	b29b      	uxth	r3, r3
 8001992:	461a      	mov	r2, r3
 8001994:	4613      	mov	r3, r2
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	4413      	add	r3, r2
 800199a:	2207      	movs	r2, #7
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	43da      	mvns	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	400a      	ands	r2, r1
 80019a8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	6919      	ldr	r1, [r3, #16]
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	689a      	ldr	r2, [r3, #8]
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	4618      	mov	r0, r3
 80019bc:	4603      	mov	r3, r0
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	4403      	add	r3, r0
 80019c2:	409a      	lsls	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	430a      	orrs	r2, r1
 80019ca:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	2b06      	cmp	r3, #6
 80019d2:	d824      	bhi.n	8001a1e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685a      	ldr	r2, [r3, #4]
 80019de:	4613      	mov	r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	4413      	add	r3, r2
 80019e4:	3b05      	subs	r3, #5
 80019e6:	221f      	movs	r2, #31
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	43da      	mvns	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	400a      	ands	r2, r1
 80019f4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	4618      	mov	r0, r3
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685a      	ldr	r2, [r3, #4]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4413      	add	r3, r2
 8001a0e:	3b05      	subs	r3, #5
 8001a10:	fa00 f203 	lsl.w	r2, r0, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	635a      	str	r2, [r3, #52]	; 0x34
 8001a1c:	e04c      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	2b0c      	cmp	r3, #12
 8001a24:	d824      	bhi.n	8001a70 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685a      	ldr	r2, [r3, #4]
 8001a30:	4613      	mov	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	3b23      	subs	r3, #35	; 0x23
 8001a38:	221f      	movs	r2, #31
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43da      	mvns	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	400a      	ands	r2, r1
 8001a46:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	4618      	mov	r0, r3
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4413      	add	r3, r2
 8001a60:	3b23      	subs	r3, #35	; 0x23
 8001a62:	fa00 f203 	lsl.w	r2, r0, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	631a      	str	r2, [r3, #48]	; 0x30
 8001a6e:	e023      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	3b41      	subs	r3, #65	; 0x41
 8001a82:	221f      	movs	r2, #31
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43da      	mvns	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	400a      	ands	r2, r1
 8001a90:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4413      	add	r3, r2
 8001aaa:	3b41      	subs	r3, #65	; 0x41
 8001aac:	fa00 f203 	lsl.w	r2, r0, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a30      	ldr	r2, [pc, #192]	; (8001b80 <HAL_ADC_ConfigChannel+0x29c>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d10a      	bne.n	8001ad8 <HAL_ADC_ConfigChannel+0x1f4>
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001aca:	d105      	bne.n	8001ad8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001acc:	4b2d      	ldr	r3, [pc, #180]	; (8001b84 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	4a2c      	ldr	r2, [pc, #176]	; (8001b84 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ad2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001ad6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a28      	ldr	r2, [pc, #160]	; (8001b80 <HAL_ADC_ConfigChannel+0x29c>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d10f      	bne.n	8001b02 <HAL_ADC_ConfigChannel+0x21e>
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2b12      	cmp	r3, #18
 8001ae8:	d10b      	bne.n	8001b02 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001aea:	4b26      	ldr	r3, [pc, #152]	; (8001b84 <HAL_ADC_ConfigChannel+0x2a0>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	4a25      	ldr	r2, [pc, #148]	; (8001b84 <HAL_ADC_ConfigChannel+0x2a0>)
 8001af0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001af4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001af6:	4b23      	ldr	r3, [pc, #140]	; (8001b84 <HAL_ADC_ConfigChannel+0x2a0>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	4a22      	ldr	r2, [pc, #136]	; (8001b84 <HAL_ADC_ConfigChannel+0x2a0>)
 8001afc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b00:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a1e      	ldr	r2, [pc, #120]	; (8001b80 <HAL_ADC_ConfigChannel+0x29c>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d12b      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0x280>
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a1a      	ldr	r2, [pc, #104]	; (8001b7c <HAL_ADC_ConfigChannel+0x298>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d003      	beq.n	8001b1e <HAL_ADC_ConfigChannel+0x23a>
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2b11      	cmp	r3, #17
 8001b1c:	d122      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001b1e:	4b19      	ldr	r3, [pc, #100]	; (8001b84 <HAL_ADC_ConfigChannel+0x2a0>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	4a18      	ldr	r2, [pc, #96]	; (8001b84 <HAL_ADC_ConfigChannel+0x2a0>)
 8001b24:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001b28:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001b2a:	4b16      	ldr	r3, [pc, #88]	; (8001b84 <HAL_ADC_ConfigChannel+0x2a0>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	4a15      	ldr	r2, [pc, #84]	; (8001b84 <HAL_ADC_ConfigChannel+0x2a0>)
 8001b30:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b34:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a10      	ldr	r2, [pc, #64]	; (8001b7c <HAL_ADC_ConfigChannel+0x298>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d111      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001b40:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <HAL_ADC_ConfigChannel+0x2a4>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a11      	ldr	r2, [pc, #68]	; (8001b8c <HAL_ADC_ConfigChannel+0x2a8>)
 8001b46:	fba2 2303 	umull	r2, r3, r2, r3
 8001b4a:	0c9a      	lsrs	r2, r3, #18
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4413      	add	r3, r2
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001b56:	e002      	b.n	8001b5e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d1f9      	bne.n	8001b58 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	10000012 	.word	0x10000012
 8001b80:	40012000 	.word	0x40012000
 8001b84:	40012300 	.word	0x40012300
 8001b88:	20000004 	.word	0x20000004
 8001b8c:	431bde83 	.word	0x431bde83

08001b90 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001b98:	4b78      	ldr	r3, [pc, #480]	; (8001d7c <ADC_Init+0x1ec>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	4a77      	ldr	r2, [pc, #476]	; (8001d7c <ADC_Init+0x1ec>)
 8001b9e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001ba2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001ba4:	4b75      	ldr	r3, [pc, #468]	; (8001d7c <ADC_Init+0x1ec>)
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	4973      	ldr	r1, [pc, #460]	; (8001d7c <ADC_Init+0x1ec>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bc0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	6859      	ldr	r1, [r3, #4]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	021a      	lsls	r2, r3, #8
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001be4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	6859      	ldr	r1, [r3, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	689a      	ldr	r2, [r3, #8]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6899      	ldr	r1, [r3, #8]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68da      	ldr	r2, [r3, #12]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	430a      	orrs	r2, r1
 8001c18:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c1e:	4a58      	ldr	r2, [pc, #352]	; (8001d80 <ADC_Init+0x1f0>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d022      	beq.n	8001c6a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	689a      	ldr	r2, [r3, #8]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c32:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6899      	ldr	r1, [r3, #8]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	430a      	orrs	r2, r1
 8001c44:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689a      	ldr	r2, [r3, #8]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6899      	ldr	r1, [r3, #8]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	430a      	orrs	r2, r1
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	e00f      	b.n	8001c8a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c88:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f022 0202 	bic.w	r2, r2, #2
 8001c98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6899      	ldr	r1, [r3, #8]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	005a      	lsls	r2, r3, #1
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	430a      	orrs	r2, r1
 8001cac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d01b      	beq.n	8001cf0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cc6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	685a      	ldr	r2, [r3, #4]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001cd6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6859      	ldr	r1, [r3, #4]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	035a      	lsls	r2, r3, #13
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	430a      	orrs	r2, r1
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	e007      	b.n	8001d00 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	685a      	ldr	r2, [r3, #4]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cfe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001d0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	051a      	lsls	r2, r3, #20
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	430a      	orrs	r2, r1
 8001d24:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6899      	ldr	r1, [r3, #8]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d42:	025a      	lsls	r2, r3, #9
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	689a      	ldr	r2, [r3, #8]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6899      	ldr	r1, [r3, #8]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	695b      	ldr	r3, [r3, #20]
 8001d66:	029a      	lsls	r2, r3, #10
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	609a      	str	r2, [r3, #8]
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	40012300 	.word	0x40012300
 8001d80:	0f000001 	.word	0x0f000001

08001d84 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e0ed      	b.n	8001f72 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d102      	bne.n	8001da8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff fa36 	bl	8001214 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f042 0201 	orr.w	r2, r2, #1
 8001db6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001db8:	f7ff fbaa 	bl	8001510 <HAL_GetTick>
 8001dbc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001dbe:	e012      	b.n	8001de6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001dc0:	f7ff fba6 	bl	8001510 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b0a      	cmp	r3, #10
 8001dcc:	d90b      	bls.n	8001de6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2205      	movs	r2, #5
 8001dde:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e0c5      	b.n	8001f72 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d0e5      	beq.n	8001dc0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 0202 	bic.w	r2, r2, #2
 8001e02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e04:	f7ff fb84 	bl	8001510 <HAL_GetTick>
 8001e08:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e0a:	e012      	b.n	8001e32 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e0c:	f7ff fb80 	bl	8001510 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b0a      	cmp	r3, #10
 8001e18:	d90b      	bls.n	8001e32 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2205      	movs	r2, #5
 8001e2a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e09f      	b.n	8001f72 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d1e5      	bne.n	8001e0c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	7e1b      	ldrb	r3, [r3, #24]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d108      	bne.n	8001e5a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	e007      	b.n	8001e6a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e68:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	7e5b      	ldrb	r3, [r3, #25]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d108      	bne.n	8001e84 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	e007      	b.n	8001e94 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e92:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	7e9b      	ldrb	r3, [r3, #26]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d108      	bne.n	8001eae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f042 0220 	orr.w	r2, r2, #32
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	e007      	b.n	8001ebe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f022 0220 	bic.w	r2, r2, #32
 8001ebc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	7edb      	ldrb	r3, [r3, #27]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d108      	bne.n	8001ed8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 0210 	bic.w	r2, r2, #16
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	e007      	b.n	8001ee8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 0210 	orr.w	r2, r2, #16
 8001ee6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	7f1b      	ldrb	r3, [r3, #28]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d108      	bne.n	8001f02 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f042 0208 	orr.w	r2, r2, #8
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	e007      	b.n	8001f12 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 0208 	bic.w	r2, r2, #8
 8001f10:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	7f5b      	ldrb	r3, [r3, #29]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d108      	bne.n	8001f2c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f042 0204 	orr.w	r2, r2, #4
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	e007      	b.n	8001f3c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 0204 	bic.w	r2, r2, #4
 8001f3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	431a      	orrs	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	695b      	ldr	r3, [r3, #20]
 8001f50:	ea42 0103 	orr.w	r1, r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	1e5a      	subs	r2, r3, #1
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
	...

08001f7c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b087      	sub	sp, #28
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f92:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001f94:	7cfb      	ldrb	r3, [r7, #19]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d003      	beq.n	8001fa2 <HAL_CAN_ConfigFilter+0x26>
 8001f9a:	7cfb      	ldrb	r3, [r7, #19]
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	f040 80c7 	bne.w	8002130 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a69      	ldr	r2, [pc, #420]	; (800214c <HAL_CAN_ConfigFilter+0x1d0>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d001      	beq.n	8001fb0 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001fac:	4b68      	ldr	r3, [pc, #416]	; (8002150 <HAL_CAN_ConfigFilter+0x1d4>)
 8001fae:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001fb6:	f043 0201 	orr.w	r2, r3, #1
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	4a63      	ldr	r2, [pc, #396]	; (8002150 <HAL_CAN_ConfigFilter+0x1d4>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d111      	bne.n	8001fec <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001fce:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe2:	021b      	lsls	r3, r3, #8
 8001fe4:	431a      	orrs	r2, r3
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	f003 031f 	and.w	r3, r3, #31
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	43db      	mvns	r3, r3
 8002006:	401a      	ands	r2, r3
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d123      	bne.n	800205e <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	43db      	mvns	r3, r3
 8002020:	401a      	ands	r2, r3
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002038:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	3248      	adds	r2, #72	; 0x48
 800203e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002052:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002054:	6979      	ldr	r1, [r7, #20]
 8002056:	3348      	adds	r3, #72	; 0x48
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	440b      	add	r3, r1
 800205c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d122      	bne.n	80020ac <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	431a      	orrs	r2, r3
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002086:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	3248      	adds	r2, #72	; 0x48
 800208c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80020a0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80020a2:	6979      	ldr	r1, [r7, #20]
 80020a4:	3348      	adds	r3, #72	; 0x48
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	440b      	add	r3, r1
 80020aa:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d109      	bne.n	80020c8 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	43db      	mvns	r3, r3
 80020be:	401a      	ands	r2, r3
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80020c6:	e007      	b.n	80020d8 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	431a      	orrs	r2, r3
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d109      	bne.n	80020f4 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	43db      	mvns	r3, r3
 80020ea:	401a      	ands	r2, r3
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80020f2:	e007      	b.n	8002104 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	431a      	orrs	r2, r3
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d107      	bne.n	800211c <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	431a      	orrs	r2, r3
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002122:	f023 0201 	bic.w	r2, r3, #1
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800212c:	2300      	movs	r3, #0
 800212e:	e006      	b.n	800213e <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
  }
}
 800213e:	4618      	mov	r0, r3
 8002140:	371c      	adds	r7, #28
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	40003400 	.word	0x40003400
 8002150:	40006400 	.word	0x40006400

08002154 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b01      	cmp	r3, #1
 8002166:	d12e      	bne.n	80021c6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2202      	movs	r2, #2
 800216c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 0201 	bic.w	r2, r2, #1
 800217e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002180:	f7ff f9c6 	bl	8001510 <HAL_GetTick>
 8002184:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002186:	e012      	b.n	80021ae <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002188:	f7ff f9c2 	bl	8001510 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b0a      	cmp	r3, #10
 8002194:	d90b      	bls.n	80021ae <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2205      	movs	r2, #5
 80021a6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e012      	b.n	80021d4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d1e5      	bne.n	8002188 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80021c2:	2300      	movs	r3, #0
 80021c4:	e006      	b.n	80021d4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ca:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
  }
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80021dc:	b480      	push	{r7}
 80021de:	b089      	sub	sp, #36	; 0x24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
 80021e8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021f0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80021fa:	7ffb      	ldrb	r3, [r7, #31]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d003      	beq.n	8002208 <HAL_CAN_AddTxMessage+0x2c>
 8002200:	7ffb      	ldrb	r3, [r7, #31]
 8002202:	2b02      	cmp	r3, #2
 8002204:	f040 80ad 	bne.w	8002362 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d10a      	bne.n	8002228 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002218:	2b00      	cmp	r3, #0
 800221a:	d105      	bne.n	8002228 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002222:	2b00      	cmp	r3, #0
 8002224:	f000 8095 	beq.w	8002352 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	0e1b      	lsrs	r3, r3, #24
 800222c:	f003 0303 	and.w	r3, r3, #3
 8002230:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002232:	2201      	movs	r2, #1
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	409a      	lsls	r2, r3
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d10d      	bne.n	8002260 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800224e:	68f9      	ldr	r1, [r7, #12]
 8002250:	6809      	ldr	r1, [r1, #0]
 8002252:	431a      	orrs	r2, r3
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	3318      	adds	r3, #24
 8002258:	011b      	lsls	r3, r3, #4
 800225a:	440b      	add	r3, r1
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	e00f      	b.n	8002280 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800226a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002270:	68f9      	ldr	r1, [r7, #12]
 8002272:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002274:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	3318      	adds	r3, #24
 800227a:	011b      	lsls	r3, r3, #4
 800227c:	440b      	add	r3, r1
 800227e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6819      	ldr	r1, [r3, #0]
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	691a      	ldr	r2, [r3, #16]
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	3318      	adds	r3, #24
 800228c:	011b      	lsls	r3, r3, #4
 800228e:	440b      	add	r3, r1
 8002290:	3304      	adds	r3, #4
 8002292:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	7d1b      	ldrb	r3, [r3, #20]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d111      	bne.n	80022c0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	3318      	adds	r3, #24
 80022a4:	011b      	lsls	r3, r3, #4
 80022a6:	4413      	add	r3, r2
 80022a8:	3304      	adds	r3, #4
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	6811      	ldr	r1, [r2, #0]
 80022b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	3318      	adds	r3, #24
 80022b8:	011b      	lsls	r3, r3, #4
 80022ba:	440b      	add	r3, r1
 80022bc:	3304      	adds	r3, #4
 80022be:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3307      	adds	r3, #7
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	061a      	lsls	r2, r3, #24
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3306      	adds	r3, #6
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	041b      	lsls	r3, r3, #16
 80022d0:	431a      	orrs	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	3305      	adds	r3, #5
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	021b      	lsls	r3, r3, #8
 80022da:	4313      	orrs	r3, r2
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	3204      	adds	r2, #4
 80022e0:	7812      	ldrb	r2, [r2, #0]
 80022e2:	4610      	mov	r0, r2
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	6811      	ldr	r1, [r2, #0]
 80022e8:	ea43 0200 	orr.w	r2, r3, r0
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	011b      	lsls	r3, r3, #4
 80022f0:	440b      	add	r3, r1
 80022f2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80022f6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3303      	adds	r3, #3
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	061a      	lsls	r2, r3, #24
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	3302      	adds	r3, #2
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	041b      	lsls	r3, r3, #16
 8002308:	431a      	orrs	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3301      	adds	r3, #1
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	021b      	lsls	r3, r3, #8
 8002312:	4313      	orrs	r3, r2
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	7812      	ldrb	r2, [r2, #0]
 8002318:	4610      	mov	r0, r2
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	6811      	ldr	r1, [r2, #0]
 800231e:	ea43 0200 	orr.w	r2, r3, r0
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	011b      	lsls	r3, r3, #4
 8002326:	440b      	add	r3, r1
 8002328:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800232c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	3318      	adds	r3, #24
 8002336:	011b      	lsls	r3, r3, #4
 8002338:	4413      	add	r3, r2
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	6811      	ldr	r1, [r2, #0]
 8002340:	f043 0201 	orr.w	r2, r3, #1
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	3318      	adds	r3, #24
 8002348:	011b      	lsls	r3, r3, #4
 800234a:	440b      	add	r3, r1
 800234c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800234e:	2300      	movs	r3, #0
 8002350:	e00e      	b.n	8002370 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002356:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e006      	b.n	8002370 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002366:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
  }
}
 8002370:	4618      	mov	r0, r3
 8002372:	3724      	adds	r7, #36	; 0x24
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800237c:	b480      	push	{r7}
 800237e:	b087      	sub	sp, #28
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
 8002388:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002390:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002392:	7dfb      	ldrb	r3, [r7, #23]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d003      	beq.n	80023a0 <HAL_CAN_GetRxMessage+0x24>
 8002398:	7dfb      	ldrb	r3, [r7, #23]
 800239a:	2b02      	cmp	r3, #2
 800239c:	f040 80f3 	bne.w	8002586 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10e      	bne.n	80023c4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	f003 0303 	and.w	r3, r3, #3
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d116      	bne.n	80023e2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e0e7      	b.n	8002594 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	f003 0303 	and.w	r3, r3, #3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d107      	bne.n	80023e2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e0d8      	b.n	8002594 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	331b      	adds	r3, #27
 80023ea:	011b      	lsls	r3, r3, #4
 80023ec:	4413      	add	r3, r2
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0204 	and.w	r2, r3, #4
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10c      	bne.n	800241a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	331b      	adds	r3, #27
 8002408:	011b      	lsls	r3, r3, #4
 800240a:	4413      	add	r3, r2
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	0d5b      	lsrs	r3, r3, #21
 8002410:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	e00b      	b.n	8002432 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	331b      	adds	r3, #27
 8002422:	011b      	lsls	r3, r3, #4
 8002424:	4413      	add	r3, r2
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	08db      	lsrs	r3, r3, #3
 800242a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	331b      	adds	r3, #27
 800243a:	011b      	lsls	r3, r3, #4
 800243c:	4413      	add	r3, r2
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0202 	and.w	r2, r3, #2
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	331b      	adds	r3, #27
 8002450:	011b      	lsls	r3, r3, #4
 8002452:	4413      	add	r3, r2
 8002454:	3304      	adds	r3, #4
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 020f 	and.w	r2, r3, #15
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	331b      	adds	r3, #27
 8002468:	011b      	lsls	r3, r3, #4
 800246a:	4413      	add	r3, r2
 800246c:	3304      	adds	r3, #4
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	0a1b      	lsrs	r3, r3, #8
 8002472:	b2da      	uxtb	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	331b      	adds	r3, #27
 8002480:	011b      	lsls	r3, r3, #4
 8002482:	4413      	add	r3, r2
 8002484:	3304      	adds	r3, #4
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	0c1b      	lsrs	r3, r3, #16
 800248a:	b29a      	uxth	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	011b      	lsls	r3, r3, #4
 8002498:	4413      	add	r3, r2
 800249a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	011b      	lsls	r3, r3, #4
 80024ae:	4413      	add	r3, r2
 80024b0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	0a1a      	lsrs	r2, r3, #8
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	3301      	adds	r3, #1
 80024bc:	b2d2      	uxtb	r2, r2
 80024be:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	011b      	lsls	r3, r3, #4
 80024c8:	4413      	add	r3, r2
 80024ca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	0c1a      	lsrs	r2, r3, #16
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	3302      	adds	r3, #2
 80024d6:	b2d2      	uxtb	r2, r2
 80024d8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	011b      	lsls	r3, r3, #4
 80024e2:	4413      	add	r3, r2
 80024e4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	0e1a      	lsrs	r2, r3, #24
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	3303      	adds	r3, #3
 80024f0:	b2d2      	uxtb	r2, r2
 80024f2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	011b      	lsls	r3, r3, #4
 80024fc:	4413      	add	r3, r2
 80024fe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	3304      	adds	r3, #4
 8002508:	b2d2      	uxtb	r2, r2
 800250a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	011b      	lsls	r3, r3, #4
 8002514:	4413      	add	r3, r2
 8002516:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	0a1a      	lsrs	r2, r3, #8
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	3305      	adds	r3, #5
 8002522:	b2d2      	uxtb	r2, r2
 8002524:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	011b      	lsls	r3, r3, #4
 800252e:	4413      	add	r3, r2
 8002530:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	0c1a      	lsrs	r2, r3, #16
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	3306      	adds	r3, #6
 800253c:	b2d2      	uxtb	r2, r2
 800253e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	011b      	lsls	r3, r3, #4
 8002548:	4413      	add	r3, r2
 800254a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	0e1a      	lsrs	r2, r3, #24
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	3307      	adds	r3, #7
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d108      	bne.n	8002572 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68da      	ldr	r2, [r3, #12]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f042 0220 	orr.w	r2, r2, #32
 800256e:	60da      	str	r2, [r3, #12]
 8002570:	e007      	b.n	8002582 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	691a      	ldr	r2, [r3, #16]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f042 0220 	orr.w	r2, r2, #32
 8002580:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002582:	2300      	movs	r3, #0
 8002584:	e006      	b.n	8002594 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
  }
}
 8002594:	4618      	mov	r0, r3
 8002596:	371c      	adds	r7, #28
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025b0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80025b2:	7bfb      	ldrb	r3, [r7, #15]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d002      	beq.n	80025be <HAL_CAN_ActivateNotification+0x1e>
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d109      	bne.n	80025d2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6959      	ldr	r1, [r3, #20]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80025ce:	2300      	movs	r3, #0
 80025d0:	e006      	b.n	80025e0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
  }
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3714      	adds	r7, #20
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b08a      	sub	sp, #40	; 0x28
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80025f4:	2300      	movs	r3, #0
 80025f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002628:	6a3b      	ldr	r3, [r7, #32]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d07c      	beq.n	800272c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	2b00      	cmp	r3, #0
 800263a:	d023      	beq.n	8002684 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2201      	movs	r2, #1
 8002642:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 f983 	bl	800295a <HAL_CAN_TxMailbox0CompleteCallback>
 8002654:	e016      	b.n	8002684 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	2b00      	cmp	r3, #0
 800265e:	d004      	beq.n	800266a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002666:	627b      	str	r3, [r7, #36]	; 0x24
 8002668:	e00c      	b.n	8002684 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	f003 0308 	and.w	r3, r3, #8
 8002670:	2b00      	cmp	r3, #0
 8002672:	d004      	beq.n	800267e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800267a:	627b      	str	r3, [r7, #36]	; 0x24
 800267c:	e002      	b.n	8002684 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 f989 	bl	8002996 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268a:	2b00      	cmp	r3, #0
 800268c:	d024      	beq.n	80026d8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002696:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f963 	bl	800296e <HAL_CAN_TxMailbox1CompleteCallback>
 80026a8:	e016      	b.n	80026d8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d004      	beq.n	80026be <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80026ba:	627b      	str	r3, [r7, #36]	; 0x24
 80026bc:	e00c      	b.n	80026d8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d004      	beq.n	80026d2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80026c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026ce:	627b      	str	r3, [r7, #36]	; 0x24
 80026d0:	e002      	b.n	80026d8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 f969 	bl	80029aa <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d024      	beq.n	800272c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80026ea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 f943 	bl	8002982 <HAL_CAN_TxMailbox2CompleteCallback>
 80026fc:	e016      	b.n	800272c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d004      	beq.n	8002712 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800270e:	627b      	str	r3, [r7, #36]	; 0x24
 8002710:	e00c      	b.n	800272c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d004      	beq.n	8002726 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002722:	627b      	str	r3, [r7, #36]	; 0x24
 8002724:	e002      	b.n	800272c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 f949 	bl	80029be <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800272c:	6a3b      	ldr	r3, [r7, #32]
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00c      	beq.n	8002750 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f003 0310 	and.w	r3, r3, #16
 800273c:	2b00      	cmp	r3, #0
 800273e:	d007      	beq.n	8002750 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002746:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2210      	movs	r2, #16
 800274e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002750:	6a3b      	ldr	r3, [r7, #32]
 8002752:	f003 0304 	and.w	r3, r3, #4
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00b      	beq.n	8002772 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	f003 0308 	and.w	r3, r3, #8
 8002760:	2b00      	cmp	r3, #0
 8002762:	d006      	beq.n	8002772 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2208      	movs	r2, #8
 800276a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f000 f930 	bl	80029d2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002772:	6a3b      	ldr	r3, [r7, #32]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d009      	beq.n	8002790 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	f003 0303 	and.w	r3, r3, #3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d002      	beq.n	8002790 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7fe fa0a 	bl	8000ba4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002790:	6a3b      	ldr	r3, [r7, #32]
 8002792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00c      	beq.n	80027b4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	f003 0310 	and.w	r3, r3, #16
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d007      	beq.n	80027b4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80027a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027aa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2210      	movs	r2, #16
 80027b2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80027b4:	6a3b      	ldr	r3, [r7, #32]
 80027b6:	f003 0320 	and.w	r3, r3, #32
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00b      	beq.n	80027d6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	f003 0308 	and.w	r3, r3, #8
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d006      	beq.n	80027d6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2208      	movs	r2, #8
 80027ce:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f000 f912 	bl	80029fa <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80027d6:	6a3b      	ldr	r3, [r7, #32]
 80027d8:	f003 0310 	and.w	r3, r3, #16
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d009      	beq.n	80027f4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d002      	beq.n	80027f4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f8f9 	bl	80029e6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80027f4:	6a3b      	ldr	r3, [r7, #32]
 80027f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00b      	beq.n	8002816 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	f003 0310 	and.w	r3, r3, #16
 8002804:	2b00      	cmp	r3, #0
 8002806:	d006      	beq.n	8002816 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2210      	movs	r2, #16
 800280e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 f8fc 	bl	8002a0e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002816:	6a3b      	ldr	r3, [r7, #32]
 8002818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00b      	beq.n	8002838 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	f003 0308 	and.w	r3, r3, #8
 8002826:	2b00      	cmp	r3, #0
 8002828:	d006      	beq.n	8002838 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2208      	movs	r2, #8
 8002830:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f8f5 	bl	8002a22 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002838:	6a3b      	ldr	r3, [r7, #32]
 800283a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d07b      	beq.n	800293a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b00      	cmp	r3, #0
 800284a:	d072      	beq.n	8002932 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800284c:	6a3b      	ldr	r3, [r7, #32]
 800284e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002852:	2b00      	cmp	r3, #0
 8002854:	d008      	beq.n	8002868 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800285c:	2b00      	cmp	r3, #0
 800285e:	d003      	beq.n	8002868 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	f043 0301 	orr.w	r3, r3, #1
 8002866:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002868:	6a3b      	ldr	r3, [r7, #32]
 800286a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800286e:	2b00      	cmp	r3, #0
 8002870:	d008      	beq.n	8002884 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002878:	2b00      	cmp	r3, #0
 800287a:	d003      	beq.n	8002884 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287e:	f043 0302 	orr.w	r3, r3, #2
 8002882:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002884:	6a3b      	ldr	r3, [r7, #32]
 8002886:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800288a:	2b00      	cmp	r3, #0
 800288c:	d008      	beq.n	80028a0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002894:	2b00      	cmp	r3, #0
 8002896:	d003      	beq.n	80028a0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289a:	f043 0304 	orr.w	r3, r3, #4
 800289e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80028a0:	6a3b      	ldr	r3, [r7, #32]
 80028a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d043      	beq.n	8002932 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d03e      	beq.n	8002932 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028ba:	2b60      	cmp	r3, #96	; 0x60
 80028bc:	d02b      	beq.n	8002916 <HAL_CAN_IRQHandler+0x32a>
 80028be:	2b60      	cmp	r3, #96	; 0x60
 80028c0:	d82e      	bhi.n	8002920 <HAL_CAN_IRQHandler+0x334>
 80028c2:	2b50      	cmp	r3, #80	; 0x50
 80028c4:	d022      	beq.n	800290c <HAL_CAN_IRQHandler+0x320>
 80028c6:	2b50      	cmp	r3, #80	; 0x50
 80028c8:	d82a      	bhi.n	8002920 <HAL_CAN_IRQHandler+0x334>
 80028ca:	2b40      	cmp	r3, #64	; 0x40
 80028cc:	d019      	beq.n	8002902 <HAL_CAN_IRQHandler+0x316>
 80028ce:	2b40      	cmp	r3, #64	; 0x40
 80028d0:	d826      	bhi.n	8002920 <HAL_CAN_IRQHandler+0x334>
 80028d2:	2b30      	cmp	r3, #48	; 0x30
 80028d4:	d010      	beq.n	80028f8 <HAL_CAN_IRQHandler+0x30c>
 80028d6:	2b30      	cmp	r3, #48	; 0x30
 80028d8:	d822      	bhi.n	8002920 <HAL_CAN_IRQHandler+0x334>
 80028da:	2b10      	cmp	r3, #16
 80028dc:	d002      	beq.n	80028e4 <HAL_CAN_IRQHandler+0x2f8>
 80028de:	2b20      	cmp	r3, #32
 80028e0:	d005      	beq.n	80028ee <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80028e2:	e01d      	b.n	8002920 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	f043 0308 	orr.w	r3, r3, #8
 80028ea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028ec:	e019      	b.n	8002922 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	f043 0310 	orr.w	r3, r3, #16
 80028f4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028f6:	e014      	b.n	8002922 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80028f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fa:	f043 0320 	orr.w	r3, r3, #32
 80028fe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002900:	e00f      	b.n	8002922 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002908:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800290a:	e00a      	b.n	8002922 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002912:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002914:	e005      	b.n	8002922 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800291c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800291e:	e000      	b.n	8002922 <HAL_CAN_IRQHandler+0x336>
            break;
 8002920:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	699a      	ldr	r2, [r3, #24]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002930:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2204      	movs	r2, #4
 8002938:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	2b00      	cmp	r3, #0
 800293e:	d008      	beq.n	8002952 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 f872 	bl	8002a36 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002952:	bf00      	nop
 8002954:	3728      	adds	r7, #40	; 0x28
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800295a:	b480      	push	{r7}
 800295c:	b083      	sub	sp, #12
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800296e:	b480      	push	{r7}
 8002970:	b083      	sub	sp, #12
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002982:	b480      	push	{r7}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80029be:	b480      	push	{r7}
 80029c0:	b083      	sub	sp, #12
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b083      	sub	sp, #12
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80029ee:	bf00      	nop
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b083      	sub	sp, #12
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr

08002a0e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b083      	sub	sp, #12
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002a16:	bf00      	nop
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr

08002a22 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002a22:	b480      	push	{r7}
 8002a24:	b083      	sub	sp, #12
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b083      	sub	sp, #12
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
	...

08002a4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a5c:	4b0b      	ldr	r3, [pc, #44]	; (8002a8c <__NVIC_SetPriorityGrouping+0x40>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a68:	4013      	ands	r3, r2
 8002a6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002a74:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <__NVIC_SetPriorityGrouping+0x44>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a7a:	4a04      	ldr	r2, [pc, #16]	; (8002a8c <__NVIC_SetPriorityGrouping+0x40>)
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	60d3      	str	r3, [r2, #12]
}
 8002a80:	bf00      	nop
 8002a82:	3714      	adds	r7, #20
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	e000ed00 	.word	0xe000ed00
 8002a90:	05fa0000 	.word	0x05fa0000

08002a94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a98:	4b04      	ldr	r3, [pc, #16]	; (8002aac <__NVIC_GetPriorityGrouping+0x18>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	0a1b      	lsrs	r3, r3, #8
 8002a9e:	f003 0307 	and.w	r3, r3, #7
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	e000ed00 	.word	0xe000ed00

08002ab0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	db0b      	blt.n	8002ada <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ac2:	79fb      	ldrb	r3, [r7, #7]
 8002ac4:	f003 021f 	and.w	r2, r3, #31
 8002ac8:	4907      	ldr	r1, [pc, #28]	; (8002ae8 <__NVIC_EnableIRQ+0x38>)
 8002aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ace:	095b      	lsrs	r3, r3, #5
 8002ad0:	2001      	movs	r0, #1
 8002ad2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	e000e100 	.word	0xe000e100

08002aec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	4603      	mov	r3, r0
 8002af4:	6039      	str	r1, [r7, #0]
 8002af6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	db0a      	blt.n	8002b16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	b2da      	uxtb	r2, r3
 8002b04:	490c      	ldr	r1, [pc, #48]	; (8002b38 <__NVIC_SetPriority+0x4c>)
 8002b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0a:	0112      	lsls	r2, r2, #4
 8002b0c:	b2d2      	uxtb	r2, r2
 8002b0e:	440b      	add	r3, r1
 8002b10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b14:	e00a      	b.n	8002b2c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	b2da      	uxtb	r2, r3
 8002b1a:	4908      	ldr	r1, [pc, #32]	; (8002b3c <__NVIC_SetPriority+0x50>)
 8002b1c:	79fb      	ldrb	r3, [r7, #7]
 8002b1e:	f003 030f 	and.w	r3, r3, #15
 8002b22:	3b04      	subs	r3, #4
 8002b24:	0112      	lsls	r2, r2, #4
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	440b      	add	r3, r1
 8002b2a:	761a      	strb	r2, [r3, #24]
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	e000e100 	.word	0xe000e100
 8002b3c:	e000ed00 	.word	0xe000ed00

08002b40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b089      	sub	sp, #36	; 0x24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	f1c3 0307 	rsb	r3, r3, #7
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	bf28      	it	cs
 8002b5e:	2304      	movcs	r3, #4
 8002b60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	3304      	adds	r3, #4
 8002b66:	2b06      	cmp	r3, #6
 8002b68:	d902      	bls.n	8002b70 <NVIC_EncodePriority+0x30>
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	3b03      	subs	r3, #3
 8002b6e:	e000      	b.n	8002b72 <NVIC_EncodePriority+0x32>
 8002b70:	2300      	movs	r3, #0
 8002b72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b74:	f04f 32ff 	mov.w	r2, #4294967295
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7e:	43da      	mvns	r2, r3
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	401a      	ands	r2, r3
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b88:	f04f 31ff 	mov.w	r1, #4294967295
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b92:	43d9      	mvns	r1, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b98:	4313      	orrs	r3, r2
         );
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3724      	adds	r7, #36	; 0x24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b082      	sub	sp, #8
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7ff ff4c 	bl	8002a4c <__NVIC_SetPriorityGrouping>
}
 8002bb4:	bf00      	nop
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
 8002bc8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bce:	f7ff ff61 	bl	8002a94 <__NVIC_GetPriorityGrouping>
 8002bd2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	68b9      	ldr	r1, [r7, #8]
 8002bd8:	6978      	ldr	r0, [r7, #20]
 8002bda:	f7ff ffb1 	bl	8002b40 <NVIC_EncodePriority>
 8002bde:	4602      	mov	r2, r0
 8002be0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002be4:	4611      	mov	r1, r2
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7ff ff80 	bl	8002aec <__NVIC_SetPriority>
}
 8002bec:	bf00      	nop
 8002bee:	3718      	adds	r7, #24
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff ff54 	bl	8002ab0 <__NVIC_EnableIRQ>
}
 8002c08:	bf00      	nop
 8002c0a:	3708      	adds	r7, #8
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b089      	sub	sp, #36	; 0x24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002c22:	2300      	movs	r3, #0
 8002c24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002c26:	2300      	movs	r3, #0
 8002c28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	61fb      	str	r3, [r7, #28]
 8002c2e:	e175      	b.n	8002f1c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002c30:	2201      	movs	r2, #1
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	4013      	ands	r3, r2
 8002c42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	f040 8164 	bne.w	8002f16 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f003 0303 	and.w	r3, r3, #3
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d005      	beq.n	8002c66 <HAL_GPIO_Init+0x56>
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f003 0303 	and.w	r3, r3, #3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d130      	bne.n	8002cc8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	2203      	movs	r2, #3
 8002c72:	fa02 f303 	lsl.w	r3, r2, r3
 8002c76:	43db      	mvns	r3, r3
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	68da      	ldr	r2, [r3, #12]
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	091b      	lsrs	r3, r3, #4
 8002cb2:	f003 0201 	and.w	r2, r3, #1
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f003 0303 	and.w	r3, r3, #3
 8002cd0:	2b03      	cmp	r3, #3
 8002cd2:	d017      	beq.n	8002d04 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	2203      	movs	r2, #3
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f003 0303 	and.w	r3, r3, #3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d123      	bne.n	8002d58 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	08da      	lsrs	r2, r3, #3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3208      	adds	r2, #8
 8002d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	f003 0307 	and.w	r3, r3, #7
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	220f      	movs	r2, #15
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	4013      	ands	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	691a      	ldr	r2, [r3, #16]
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	f003 0307 	and.w	r3, r3, #7
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	08da      	lsrs	r2, r3, #3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	3208      	adds	r2, #8
 8002d52:	69b9      	ldr	r1, [r7, #24]
 8002d54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	2203      	movs	r2, #3
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f003 0203 	and.w	r2, r3, #3
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 80be 	beq.w	8002f16 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d9a:	4b66      	ldr	r3, [pc, #408]	; (8002f34 <HAL_GPIO_Init+0x324>)
 8002d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9e:	4a65      	ldr	r2, [pc, #404]	; (8002f34 <HAL_GPIO_Init+0x324>)
 8002da0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002da4:	6453      	str	r3, [r2, #68]	; 0x44
 8002da6:	4b63      	ldr	r3, [pc, #396]	; (8002f34 <HAL_GPIO_Init+0x324>)
 8002da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002db2:	4a61      	ldr	r2, [pc, #388]	; (8002f38 <HAL_GPIO_Init+0x328>)
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	089b      	lsrs	r3, r3, #2
 8002db8:	3302      	adds	r3, #2
 8002dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	f003 0303 	and.w	r3, r3, #3
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	220f      	movs	r2, #15
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a58      	ldr	r2, [pc, #352]	; (8002f3c <HAL_GPIO_Init+0x32c>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d037      	beq.n	8002e4e <HAL_GPIO_Init+0x23e>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a57      	ldr	r2, [pc, #348]	; (8002f40 <HAL_GPIO_Init+0x330>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d031      	beq.n	8002e4a <HAL_GPIO_Init+0x23a>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a56      	ldr	r2, [pc, #344]	; (8002f44 <HAL_GPIO_Init+0x334>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d02b      	beq.n	8002e46 <HAL_GPIO_Init+0x236>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a55      	ldr	r2, [pc, #340]	; (8002f48 <HAL_GPIO_Init+0x338>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d025      	beq.n	8002e42 <HAL_GPIO_Init+0x232>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a54      	ldr	r2, [pc, #336]	; (8002f4c <HAL_GPIO_Init+0x33c>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d01f      	beq.n	8002e3e <HAL_GPIO_Init+0x22e>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a53      	ldr	r2, [pc, #332]	; (8002f50 <HAL_GPIO_Init+0x340>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d019      	beq.n	8002e3a <HAL_GPIO_Init+0x22a>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a52      	ldr	r2, [pc, #328]	; (8002f54 <HAL_GPIO_Init+0x344>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d013      	beq.n	8002e36 <HAL_GPIO_Init+0x226>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a51      	ldr	r2, [pc, #324]	; (8002f58 <HAL_GPIO_Init+0x348>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d00d      	beq.n	8002e32 <HAL_GPIO_Init+0x222>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a50      	ldr	r2, [pc, #320]	; (8002f5c <HAL_GPIO_Init+0x34c>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d007      	beq.n	8002e2e <HAL_GPIO_Init+0x21e>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a4f      	ldr	r2, [pc, #316]	; (8002f60 <HAL_GPIO_Init+0x350>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d101      	bne.n	8002e2a <HAL_GPIO_Init+0x21a>
 8002e26:	2309      	movs	r3, #9
 8002e28:	e012      	b.n	8002e50 <HAL_GPIO_Init+0x240>
 8002e2a:	230a      	movs	r3, #10
 8002e2c:	e010      	b.n	8002e50 <HAL_GPIO_Init+0x240>
 8002e2e:	2308      	movs	r3, #8
 8002e30:	e00e      	b.n	8002e50 <HAL_GPIO_Init+0x240>
 8002e32:	2307      	movs	r3, #7
 8002e34:	e00c      	b.n	8002e50 <HAL_GPIO_Init+0x240>
 8002e36:	2306      	movs	r3, #6
 8002e38:	e00a      	b.n	8002e50 <HAL_GPIO_Init+0x240>
 8002e3a:	2305      	movs	r3, #5
 8002e3c:	e008      	b.n	8002e50 <HAL_GPIO_Init+0x240>
 8002e3e:	2304      	movs	r3, #4
 8002e40:	e006      	b.n	8002e50 <HAL_GPIO_Init+0x240>
 8002e42:	2303      	movs	r3, #3
 8002e44:	e004      	b.n	8002e50 <HAL_GPIO_Init+0x240>
 8002e46:	2302      	movs	r3, #2
 8002e48:	e002      	b.n	8002e50 <HAL_GPIO_Init+0x240>
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e000      	b.n	8002e50 <HAL_GPIO_Init+0x240>
 8002e4e:	2300      	movs	r3, #0
 8002e50:	69fa      	ldr	r2, [r7, #28]
 8002e52:	f002 0203 	and.w	r2, r2, #3
 8002e56:	0092      	lsls	r2, r2, #2
 8002e58:	4093      	lsls	r3, r2
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002e60:	4935      	ldr	r1, [pc, #212]	; (8002f38 <HAL_GPIO_Init+0x328>)
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	089b      	lsrs	r3, r3, #2
 8002e66:	3302      	adds	r3, #2
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e6e:	4b3d      	ldr	r3, [pc, #244]	; (8002f64 <HAL_GPIO_Init+0x354>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	43db      	mvns	r3, r3
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e92:	4a34      	ldr	r2, [pc, #208]	; (8002f64 <HAL_GPIO_Init+0x354>)
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e98:	4b32      	ldr	r3, [pc, #200]	; (8002f64 <HAL_GPIO_Init+0x354>)
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d003      	beq.n	8002ebc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ebc:	4a29      	ldr	r2, [pc, #164]	; (8002f64 <HAL_GPIO_Init+0x354>)
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ec2:	4b28      	ldr	r3, [pc, #160]	; (8002f64 <HAL_GPIO_Init+0x354>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	43db      	mvns	r3, r3
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d003      	beq.n	8002ee6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ee6:	4a1f      	ldr	r2, [pc, #124]	; (8002f64 <HAL_GPIO_Init+0x354>)
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002eec:	4b1d      	ldr	r3, [pc, #116]	; (8002f64 <HAL_GPIO_Init+0x354>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d003      	beq.n	8002f10 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f10:	4a14      	ldr	r2, [pc, #80]	; (8002f64 <HAL_GPIO_Init+0x354>)
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	3301      	adds	r3, #1
 8002f1a:	61fb      	str	r3, [r7, #28]
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	2b0f      	cmp	r3, #15
 8002f20:	f67f ae86 	bls.w	8002c30 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002f24:	bf00      	nop
 8002f26:	bf00      	nop
 8002f28:	3724      	adds	r7, #36	; 0x24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	40023800 	.word	0x40023800
 8002f38:	40013800 	.word	0x40013800
 8002f3c:	40020000 	.word	0x40020000
 8002f40:	40020400 	.word	0x40020400
 8002f44:	40020800 	.word	0x40020800
 8002f48:	40020c00 	.word	0x40020c00
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	40021400 	.word	0x40021400
 8002f54:	40021800 	.word	0x40021800
 8002f58:	40021c00 	.word	0x40021c00
 8002f5c:	40022000 	.word	0x40022000
 8002f60:	40022400 	.word	0x40022400
 8002f64:	40013c00 	.word	0x40013c00

08002f68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	460b      	mov	r3, r1
 8002f72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	691a      	ldr	r2, [r3, #16]
 8002f78:	887b      	ldrh	r3, [r7, #2]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d002      	beq.n	8002f86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f80:	2301      	movs	r3, #1
 8002f82:	73fb      	strb	r3, [r7, #15]
 8002f84:	e001      	b.n	8002f8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f86:	2300      	movs	r3, #0
 8002f88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3714      	adds	r7, #20
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	807b      	strh	r3, [r7, #2]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fa8:	787b      	ldrb	r3, [r7, #1]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fae:	887a      	ldrh	r2, [r7, #2]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002fb4:	e003      	b.n	8002fbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002fb6:	887b      	ldrh	r3, [r7, #2]
 8002fb8:	041a      	lsls	r2, r3, #16
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	619a      	str	r2, [r3, #24]
}
 8002fbe:	bf00      	nop
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr

08002fca <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	b085      	sub	sp, #20
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002fdc:	887a      	ldrh	r2, [r7, #2]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	041a      	lsls	r2, r3, #16
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	43d9      	mvns	r1, r3
 8002fe8:	887b      	ldrh	r3, [r7, #2]
 8002fea:	400b      	ands	r3, r1
 8002fec:	431a      	orrs	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	619a      	str	r2, [r3, #24]
}
 8002ff2:	bf00      	nop
 8002ff4:	3714      	adds	r7, #20
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
	...

08003000 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003008:	2300      	movs	r3, #0
 800300a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e29b      	b.n	800354e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	f000 8087 	beq.w	8003132 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003024:	4b96      	ldr	r3, [pc, #600]	; (8003280 <HAL_RCC_OscConfig+0x280>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f003 030c 	and.w	r3, r3, #12
 800302c:	2b04      	cmp	r3, #4
 800302e:	d00c      	beq.n	800304a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003030:	4b93      	ldr	r3, [pc, #588]	; (8003280 <HAL_RCC_OscConfig+0x280>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f003 030c 	and.w	r3, r3, #12
 8003038:	2b08      	cmp	r3, #8
 800303a:	d112      	bne.n	8003062 <HAL_RCC_OscConfig+0x62>
 800303c:	4b90      	ldr	r3, [pc, #576]	; (8003280 <HAL_RCC_OscConfig+0x280>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003044:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003048:	d10b      	bne.n	8003062 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800304a:	4b8d      	ldr	r3, [pc, #564]	; (8003280 <HAL_RCC_OscConfig+0x280>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d06c      	beq.n	8003130 <HAL_RCC_OscConfig+0x130>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d168      	bne.n	8003130 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e275      	b.n	800354e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800306a:	d106      	bne.n	800307a <HAL_RCC_OscConfig+0x7a>
 800306c:	4b84      	ldr	r3, [pc, #528]	; (8003280 <HAL_RCC_OscConfig+0x280>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a83      	ldr	r2, [pc, #524]	; (8003280 <HAL_RCC_OscConfig+0x280>)
 8003072:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003076:	6013      	str	r3, [r2, #0]
 8003078:	e02e      	b.n	80030d8 <HAL_RCC_OscConfig+0xd8>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10c      	bne.n	800309c <HAL_RCC_OscConfig+0x9c>
 8003082:	4b7f      	ldr	r3, [pc, #508]	; (8003280 <HAL_RCC_OscConfig+0x280>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a7e      	ldr	r2, [pc, #504]	; (8003280 <HAL_RCC_OscConfig+0x280>)
 8003088:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800308c:	6013      	str	r3, [r2, #0]
 800308e:	4b7c      	ldr	r3, [pc, #496]	; (8003280 <HAL_RCC_OscConfig+0x280>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a7b      	ldr	r2, [pc, #492]	; (8003280 <HAL_RCC_OscConfig+0x280>)
 8003094:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003098:	6013      	str	r3, [r2, #0]
 800309a:	e01d      	b.n	80030d8 <HAL_RCC_OscConfig+0xd8>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030a4:	d10c      	bne.n	80030c0 <HAL_RCC_OscConfig+0xc0>
 80030a6:	4b76      	ldr	r3, [pc, #472]	; (8003280 <HAL_RCC_OscConfig+0x280>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a75      	ldr	r2, [pc, #468]	; (8003280 <HAL_RCC_OscConfig+0x280>)
 80030ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030b0:	6013      	str	r3, [r2, #0]
 80030b2:	4b73      	ldr	r3, [pc, #460]	; (8003280 <HAL_RCC_OscConfig+0x280>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a72      	ldr	r2, [pc, #456]	; (8003280 <HAL_RCC_OscConfig+0x280>)
 80030b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	e00b      	b.n	80030d8 <HAL_RCC_OscConfig+0xd8>
 80030c0:	4b6f      	ldr	r3, [pc, #444]	; (8003280 <HAL_RCC_OscConfig+0x280>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a6e      	ldr	r2, [pc, #440]	; (8003280 <HAL_RCC_OscConfig+0x280>)
 80030c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ca:	6013      	str	r3, [r2, #0]
 80030cc:	4b6c      	ldr	r3, [pc, #432]	; (8003280 <HAL_RCC_OscConfig+0x280>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a6b      	ldr	r2, [pc, #428]	; (8003280 <HAL_RCC_OscConfig+0x280>)
 80030d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d013      	beq.n	8003108 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e0:	f7fe fa16 	bl	8001510 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030e8:	f7fe fa12 	bl	8001510 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b64      	cmp	r3, #100	; 0x64
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e229      	b.n	800354e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030fa:	4b61      	ldr	r3, [pc, #388]	; (8003280 <HAL_RCC_OscConfig+0x280>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d0f0      	beq.n	80030e8 <HAL_RCC_OscConfig+0xe8>
 8003106:	e014      	b.n	8003132 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003108:	f7fe fa02 	bl	8001510 <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003110:	f7fe f9fe 	bl	8001510 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b64      	cmp	r3, #100	; 0x64
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e215      	b.n	800354e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003122:	4b57      	ldr	r3, [pc, #348]	; (8003280 <HAL_RCC_OscConfig+0x280>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1f0      	bne.n	8003110 <HAL_RCC_OscConfig+0x110>
 800312e:	e000      	b.n	8003132 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003130:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d069      	beq.n	8003212 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800313e:	4b50      	ldr	r3, [pc, #320]	; (8003280 <HAL_RCC_OscConfig+0x280>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f003 030c 	and.w	r3, r3, #12
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00b      	beq.n	8003162 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800314a:	4b4d      	ldr	r3, [pc, #308]	; (8003280 <HAL_RCC_OscConfig+0x280>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 030c 	and.w	r3, r3, #12
 8003152:	2b08      	cmp	r3, #8
 8003154:	d11c      	bne.n	8003190 <HAL_RCC_OscConfig+0x190>
 8003156:	4b4a      	ldr	r3, [pc, #296]	; (8003280 <HAL_RCC_OscConfig+0x280>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d116      	bne.n	8003190 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003162:	4b47      	ldr	r3, [pc, #284]	; (8003280 <HAL_RCC_OscConfig+0x280>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d005      	beq.n	800317a <HAL_RCC_OscConfig+0x17a>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d001      	beq.n	800317a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e1e9      	b.n	800354e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800317a:	4b41      	ldr	r3, [pc, #260]	; (8003280 <HAL_RCC_OscConfig+0x280>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	493d      	ldr	r1, [pc, #244]	; (8003280 <HAL_RCC_OscConfig+0x280>)
 800318a:	4313      	orrs	r3, r2
 800318c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800318e:	e040      	b.n	8003212 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d023      	beq.n	80031e0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003198:	4b39      	ldr	r3, [pc, #228]	; (8003280 <HAL_RCC_OscConfig+0x280>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a38      	ldr	r2, [pc, #224]	; (8003280 <HAL_RCC_OscConfig+0x280>)
 800319e:	f043 0301 	orr.w	r3, r3, #1
 80031a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a4:	f7fe f9b4 	bl	8001510 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031ac:	f7fe f9b0 	bl	8001510 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e1c7      	b.n	800354e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031be:	4b30      	ldr	r3, [pc, #192]	; (8003280 <HAL_RCC_OscConfig+0x280>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d0f0      	beq.n	80031ac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ca:	4b2d      	ldr	r3, [pc, #180]	; (8003280 <HAL_RCC_OscConfig+0x280>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	4929      	ldr	r1, [pc, #164]	; (8003280 <HAL_RCC_OscConfig+0x280>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	600b      	str	r3, [r1, #0]
 80031de:	e018      	b.n	8003212 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031e0:	4b27      	ldr	r3, [pc, #156]	; (8003280 <HAL_RCC_OscConfig+0x280>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a26      	ldr	r2, [pc, #152]	; (8003280 <HAL_RCC_OscConfig+0x280>)
 80031e6:	f023 0301 	bic.w	r3, r3, #1
 80031ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ec:	f7fe f990 	bl	8001510 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031f4:	f7fe f98c 	bl	8001510 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e1a3      	b.n	800354e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003206:	4b1e      	ldr	r3, [pc, #120]	; (8003280 <HAL_RCC_OscConfig+0x280>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1f0      	bne.n	80031f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0308 	and.w	r3, r3, #8
 800321a:	2b00      	cmp	r3, #0
 800321c:	d038      	beq.n	8003290 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d019      	beq.n	800325a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003226:	4b16      	ldr	r3, [pc, #88]	; (8003280 <HAL_RCC_OscConfig+0x280>)
 8003228:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800322a:	4a15      	ldr	r2, [pc, #84]	; (8003280 <HAL_RCC_OscConfig+0x280>)
 800322c:	f043 0301 	orr.w	r3, r3, #1
 8003230:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003232:	f7fe f96d 	bl	8001510 <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003238:	e008      	b.n	800324c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800323a:	f7fe f969 	bl	8001510 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e180      	b.n	800354e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800324c:	4b0c      	ldr	r3, [pc, #48]	; (8003280 <HAL_RCC_OscConfig+0x280>)
 800324e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d0f0      	beq.n	800323a <HAL_RCC_OscConfig+0x23a>
 8003258:	e01a      	b.n	8003290 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800325a:	4b09      	ldr	r3, [pc, #36]	; (8003280 <HAL_RCC_OscConfig+0x280>)
 800325c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800325e:	4a08      	ldr	r2, [pc, #32]	; (8003280 <HAL_RCC_OscConfig+0x280>)
 8003260:	f023 0301 	bic.w	r3, r3, #1
 8003264:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003266:	f7fe f953 	bl	8001510 <HAL_GetTick>
 800326a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800326c:	e00a      	b.n	8003284 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800326e:	f7fe f94f 	bl	8001510 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d903      	bls.n	8003284 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e166      	b.n	800354e <HAL_RCC_OscConfig+0x54e>
 8003280:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003284:	4b92      	ldr	r3, [pc, #584]	; (80034d0 <HAL_RCC_OscConfig+0x4d0>)
 8003286:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1ee      	bne.n	800326e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	2b00      	cmp	r3, #0
 800329a:	f000 80a4 	beq.w	80033e6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800329e:	4b8c      	ldr	r3, [pc, #560]	; (80034d0 <HAL_RCC_OscConfig+0x4d0>)
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10d      	bne.n	80032c6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80032aa:	4b89      	ldr	r3, [pc, #548]	; (80034d0 <HAL_RCC_OscConfig+0x4d0>)
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	4a88      	ldr	r2, [pc, #544]	; (80034d0 <HAL_RCC_OscConfig+0x4d0>)
 80032b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032b4:	6413      	str	r3, [r2, #64]	; 0x40
 80032b6:	4b86      	ldr	r3, [pc, #536]	; (80034d0 <HAL_RCC_OscConfig+0x4d0>)
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032be:	60bb      	str	r3, [r7, #8]
 80032c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032c2:	2301      	movs	r3, #1
 80032c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032c6:	4b83      	ldr	r3, [pc, #524]	; (80034d4 <HAL_RCC_OscConfig+0x4d4>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d118      	bne.n	8003304 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80032d2:	4b80      	ldr	r3, [pc, #512]	; (80034d4 <HAL_RCC_OscConfig+0x4d4>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a7f      	ldr	r2, [pc, #508]	; (80034d4 <HAL_RCC_OscConfig+0x4d4>)
 80032d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032de:	f7fe f917 	bl	8001510 <HAL_GetTick>
 80032e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032e4:	e008      	b.n	80032f8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032e6:	f7fe f913 	bl	8001510 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b64      	cmp	r3, #100	; 0x64
 80032f2:	d901      	bls.n	80032f8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e12a      	b.n	800354e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032f8:	4b76      	ldr	r3, [pc, #472]	; (80034d4 <HAL_RCC_OscConfig+0x4d4>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003300:	2b00      	cmp	r3, #0
 8003302:	d0f0      	beq.n	80032e6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d106      	bne.n	800331a <HAL_RCC_OscConfig+0x31a>
 800330c:	4b70      	ldr	r3, [pc, #448]	; (80034d0 <HAL_RCC_OscConfig+0x4d0>)
 800330e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003310:	4a6f      	ldr	r2, [pc, #444]	; (80034d0 <HAL_RCC_OscConfig+0x4d0>)
 8003312:	f043 0301 	orr.w	r3, r3, #1
 8003316:	6713      	str	r3, [r2, #112]	; 0x70
 8003318:	e02d      	b.n	8003376 <HAL_RCC_OscConfig+0x376>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10c      	bne.n	800333c <HAL_RCC_OscConfig+0x33c>
 8003322:	4b6b      	ldr	r3, [pc, #428]	; (80034d0 <HAL_RCC_OscConfig+0x4d0>)
 8003324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003326:	4a6a      	ldr	r2, [pc, #424]	; (80034d0 <HAL_RCC_OscConfig+0x4d0>)
 8003328:	f023 0301 	bic.w	r3, r3, #1
 800332c:	6713      	str	r3, [r2, #112]	; 0x70
 800332e:	4b68      	ldr	r3, [pc, #416]	; (80034d0 <HAL_RCC_OscConfig+0x4d0>)
 8003330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003332:	4a67      	ldr	r2, [pc, #412]	; (80034d0 <HAL_RCC_OscConfig+0x4d0>)
 8003334:	f023 0304 	bic.w	r3, r3, #4
 8003338:	6713      	str	r3, [r2, #112]	; 0x70
 800333a:	e01c      	b.n	8003376 <HAL_RCC_OscConfig+0x376>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	2b05      	cmp	r3, #5
 8003342:	d10c      	bne.n	800335e <HAL_RCC_OscConfig+0x35e>
 8003344:	4b62      	ldr	r3, [pc, #392]	; (80034d0 <HAL_RCC_OscConfig+0x4d0>)
 8003346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003348:	4a61      	ldr	r2, [pc, #388]	; (80034d0 <HAL_RCC_OscConfig+0x4d0>)
 800334a:	f043 0304 	orr.w	r3, r3, #4
 800334e:	6713      	str	r3, [r2, #112]	; 0x70
 8003350:	4b5f      	ldr	r3, [pc, #380]	; (80034d0 <HAL_RCC_OscConfig+0x4d0>)
 8003352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003354:	4a5e      	ldr	r2, [pc, #376]	; (80034d0 <HAL_RCC_OscConfig+0x4d0>)
 8003356:	f043 0301 	orr.w	r3, r3, #1
 800335a:	6713      	str	r3, [r2, #112]	; 0x70
 800335c:	e00b      	b.n	8003376 <HAL_RCC_OscConfig+0x376>
 800335e:	4b5c      	ldr	r3, [pc, #368]	; (80034d0 <HAL_RCC_OscConfig+0x4d0>)
 8003360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003362:	4a5b      	ldr	r2, [pc, #364]	; (80034d0 <HAL_RCC_OscConfig+0x4d0>)
 8003364:	f023 0301 	bic.w	r3, r3, #1
 8003368:	6713      	str	r3, [r2, #112]	; 0x70
 800336a:	4b59      	ldr	r3, [pc, #356]	; (80034d0 <HAL_RCC_OscConfig+0x4d0>)
 800336c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336e:	4a58      	ldr	r2, [pc, #352]	; (80034d0 <HAL_RCC_OscConfig+0x4d0>)
 8003370:	f023 0304 	bic.w	r3, r3, #4
 8003374:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d015      	beq.n	80033aa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800337e:	f7fe f8c7 	bl	8001510 <HAL_GetTick>
 8003382:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003384:	e00a      	b.n	800339c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003386:	f7fe f8c3 	bl	8001510 <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	f241 3288 	movw	r2, #5000	; 0x1388
 8003394:	4293      	cmp	r3, r2
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e0d8      	b.n	800354e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800339c:	4b4c      	ldr	r3, [pc, #304]	; (80034d0 <HAL_RCC_OscConfig+0x4d0>)
 800339e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0ee      	beq.n	8003386 <HAL_RCC_OscConfig+0x386>
 80033a8:	e014      	b.n	80033d4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033aa:	f7fe f8b1 	bl	8001510 <HAL_GetTick>
 80033ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033b0:	e00a      	b.n	80033c8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033b2:	f7fe f8ad 	bl	8001510 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d901      	bls.n	80033c8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e0c2      	b.n	800354e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033c8:	4b41      	ldr	r3, [pc, #260]	; (80034d0 <HAL_RCC_OscConfig+0x4d0>)
 80033ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1ee      	bne.n	80033b2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033d4:	7dfb      	ldrb	r3, [r7, #23]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d105      	bne.n	80033e6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033da:	4b3d      	ldr	r3, [pc, #244]	; (80034d0 <HAL_RCC_OscConfig+0x4d0>)
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	4a3c      	ldr	r2, [pc, #240]	; (80034d0 <HAL_RCC_OscConfig+0x4d0>)
 80033e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f000 80ae 	beq.w	800354c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033f0:	4b37      	ldr	r3, [pc, #220]	; (80034d0 <HAL_RCC_OscConfig+0x4d0>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f003 030c 	and.w	r3, r3, #12
 80033f8:	2b08      	cmp	r3, #8
 80033fa:	d06d      	beq.n	80034d8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	2b02      	cmp	r3, #2
 8003402:	d14b      	bne.n	800349c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003404:	4b32      	ldr	r3, [pc, #200]	; (80034d0 <HAL_RCC_OscConfig+0x4d0>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a31      	ldr	r2, [pc, #196]	; (80034d0 <HAL_RCC_OscConfig+0x4d0>)
 800340a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800340e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003410:	f7fe f87e 	bl	8001510 <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003418:	f7fe f87a 	bl	8001510 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e091      	b.n	800354e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800342a:	4b29      	ldr	r3, [pc, #164]	; (80034d0 <HAL_RCC_OscConfig+0x4d0>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1f0      	bne.n	8003418 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	69da      	ldr	r2, [r3, #28]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	431a      	orrs	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	019b      	lsls	r3, r3, #6
 8003446:	431a      	orrs	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344c:	085b      	lsrs	r3, r3, #1
 800344e:	3b01      	subs	r3, #1
 8003450:	041b      	lsls	r3, r3, #16
 8003452:	431a      	orrs	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003458:	061b      	lsls	r3, r3, #24
 800345a:	431a      	orrs	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003460:	071b      	lsls	r3, r3, #28
 8003462:	491b      	ldr	r1, [pc, #108]	; (80034d0 <HAL_RCC_OscConfig+0x4d0>)
 8003464:	4313      	orrs	r3, r2
 8003466:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003468:	4b19      	ldr	r3, [pc, #100]	; (80034d0 <HAL_RCC_OscConfig+0x4d0>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a18      	ldr	r2, [pc, #96]	; (80034d0 <HAL_RCC_OscConfig+0x4d0>)
 800346e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003472:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003474:	f7fe f84c 	bl	8001510 <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800347c:	f7fe f848 	bl	8001510 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e05f      	b.n	800354e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800348e:	4b10      	ldr	r3, [pc, #64]	; (80034d0 <HAL_RCC_OscConfig+0x4d0>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d0f0      	beq.n	800347c <HAL_RCC_OscConfig+0x47c>
 800349a:	e057      	b.n	800354c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800349c:	4b0c      	ldr	r3, [pc, #48]	; (80034d0 <HAL_RCC_OscConfig+0x4d0>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a0b      	ldr	r2, [pc, #44]	; (80034d0 <HAL_RCC_OscConfig+0x4d0>)
 80034a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a8:	f7fe f832 	bl	8001510 <HAL_GetTick>
 80034ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ae:	e008      	b.n	80034c2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034b0:	f7fe f82e 	bl	8001510 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e045      	b.n	800354e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034c2:	4b03      	ldr	r3, [pc, #12]	; (80034d0 <HAL_RCC_OscConfig+0x4d0>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1f0      	bne.n	80034b0 <HAL_RCC_OscConfig+0x4b0>
 80034ce:	e03d      	b.n	800354c <HAL_RCC_OscConfig+0x54c>
 80034d0:	40023800 	.word	0x40023800
 80034d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80034d8:	4b1f      	ldr	r3, [pc, #124]	; (8003558 <HAL_RCC_OscConfig+0x558>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d030      	beq.n	8003548 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d129      	bne.n	8003548 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034fe:	429a      	cmp	r2, r3
 8003500:	d122      	bne.n	8003548 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003508:	4013      	ands	r3, r2
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800350e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003510:	4293      	cmp	r3, r2
 8003512:	d119      	bne.n	8003548 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351e:	085b      	lsrs	r3, r3, #1
 8003520:	3b01      	subs	r3, #1
 8003522:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003524:	429a      	cmp	r2, r3
 8003526:	d10f      	bne.n	8003548 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003532:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003534:	429a      	cmp	r2, r3
 8003536:	d107      	bne.n	8003548 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003542:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003544:	429a      	cmp	r2, r3
 8003546:	d001      	beq.n	800354c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e000      	b.n	800354e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3718      	adds	r7, #24
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	40023800 	.word	0x40023800

0800355c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003566:	2300      	movs	r3, #0
 8003568:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d101      	bne.n	8003574 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e0d0      	b.n	8003716 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003574:	4b6a      	ldr	r3, [pc, #424]	; (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 030f 	and.w	r3, r3, #15
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	429a      	cmp	r2, r3
 8003580:	d910      	bls.n	80035a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003582:	4b67      	ldr	r3, [pc, #412]	; (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f023 020f 	bic.w	r2, r3, #15
 800358a:	4965      	ldr	r1, [pc, #404]	; (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	4313      	orrs	r3, r2
 8003590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003592:	4b63      	ldr	r3, [pc, #396]	; (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 030f 	and.w	r3, r3, #15
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	429a      	cmp	r2, r3
 800359e:	d001      	beq.n	80035a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e0b8      	b.n	8003716 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d020      	beq.n	80035f2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0304 	and.w	r3, r3, #4
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d005      	beq.n	80035c8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035bc:	4b59      	ldr	r3, [pc, #356]	; (8003724 <HAL_RCC_ClockConfig+0x1c8>)
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	4a58      	ldr	r2, [pc, #352]	; (8003724 <HAL_RCC_ClockConfig+0x1c8>)
 80035c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0308 	and.w	r3, r3, #8
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d005      	beq.n	80035e0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035d4:	4b53      	ldr	r3, [pc, #332]	; (8003724 <HAL_RCC_ClockConfig+0x1c8>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	4a52      	ldr	r2, [pc, #328]	; (8003724 <HAL_RCC_ClockConfig+0x1c8>)
 80035da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035e0:	4b50      	ldr	r3, [pc, #320]	; (8003724 <HAL_RCC_ClockConfig+0x1c8>)
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	494d      	ldr	r1, [pc, #308]	; (8003724 <HAL_RCC_ClockConfig+0x1c8>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d040      	beq.n	8003680 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d107      	bne.n	8003616 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003606:	4b47      	ldr	r3, [pc, #284]	; (8003724 <HAL_RCC_ClockConfig+0x1c8>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d115      	bne.n	800363e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e07f      	b.n	8003716 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	2b02      	cmp	r3, #2
 800361c:	d107      	bne.n	800362e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800361e:	4b41      	ldr	r3, [pc, #260]	; (8003724 <HAL_RCC_ClockConfig+0x1c8>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d109      	bne.n	800363e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e073      	b.n	8003716 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800362e:	4b3d      	ldr	r3, [pc, #244]	; (8003724 <HAL_RCC_ClockConfig+0x1c8>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e06b      	b.n	8003716 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800363e:	4b39      	ldr	r3, [pc, #228]	; (8003724 <HAL_RCC_ClockConfig+0x1c8>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f023 0203 	bic.w	r2, r3, #3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	4936      	ldr	r1, [pc, #216]	; (8003724 <HAL_RCC_ClockConfig+0x1c8>)
 800364c:	4313      	orrs	r3, r2
 800364e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003650:	f7fd ff5e 	bl	8001510 <HAL_GetTick>
 8003654:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003656:	e00a      	b.n	800366e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003658:	f7fd ff5a 	bl	8001510 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	f241 3288 	movw	r2, #5000	; 0x1388
 8003666:	4293      	cmp	r3, r2
 8003668:	d901      	bls.n	800366e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e053      	b.n	8003716 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800366e:	4b2d      	ldr	r3, [pc, #180]	; (8003724 <HAL_RCC_ClockConfig+0x1c8>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f003 020c 	and.w	r2, r3, #12
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	429a      	cmp	r2, r3
 800367e:	d1eb      	bne.n	8003658 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003680:	4b27      	ldr	r3, [pc, #156]	; (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 030f 	and.w	r3, r3, #15
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	429a      	cmp	r2, r3
 800368c:	d210      	bcs.n	80036b0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800368e:	4b24      	ldr	r3, [pc, #144]	; (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f023 020f 	bic.w	r2, r3, #15
 8003696:	4922      	ldr	r1, [pc, #136]	; (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	4313      	orrs	r3, r2
 800369c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800369e:	4b20      	ldr	r3, [pc, #128]	; (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 030f 	and.w	r3, r3, #15
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d001      	beq.n	80036b0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e032      	b.n	8003716 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0304 	and.w	r3, r3, #4
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d008      	beq.n	80036ce <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036bc:	4b19      	ldr	r3, [pc, #100]	; (8003724 <HAL_RCC_ClockConfig+0x1c8>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	4916      	ldr	r1, [pc, #88]	; (8003724 <HAL_RCC_ClockConfig+0x1c8>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0308 	and.w	r3, r3, #8
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d009      	beq.n	80036ee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036da:	4b12      	ldr	r3, [pc, #72]	; (8003724 <HAL_RCC_ClockConfig+0x1c8>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	00db      	lsls	r3, r3, #3
 80036e8:	490e      	ldr	r1, [pc, #56]	; (8003724 <HAL_RCC_ClockConfig+0x1c8>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036ee:	f000 f821 	bl	8003734 <HAL_RCC_GetSysClockFreq>
 80036f2:	4602      	mov	r2, r0
 80036f4:	4b0b      	ldr	r3, [pc, #44]	; (8003724 <HAL_RCC_ClockConfig+0x1c8>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	091b      	lsrs	r3, r3, #4
 80036fa:	f003 030f 	and.w	r3, r3, #15
 80036fe:	490a      	ldr	r1, [pc, #40]	; (8003728 <HAL_RCC_ClockConfig+0x1cc>)
 8003700:	5ccb      	ldrb	r3, [r1, r3]
 8003702:	fa22 f303 	lsr.w	r3, r2, r3
 8003706:	4a09      	ldr	r2, [pc, #36]	; (800372c <HAL_RCC_ClockConfig+0x1d0>)
 8003708:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800370a:	4b09      	ldr	r3, [pc, #36]	; (8003730 <HAL_RCC_ClockConfig+0x1d4>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4618      	mov	r0, r3
 8003710:	f7fd fdfe 	bl	8001310 <HAL_InitTick>

  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	40023c00 	.word	0x40023c00
 8003724:	40023800 	.word	0x40023800
 8003728:	08007120 	.word	0x08007120
 800372c:	20000004 	.word	0x20000004
 8003730:	20000008 	.word	0x20000008

08003734 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003734:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003738:	b094      	sub	sp, #80	; 0x50
 800373a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800373c:	2300      	movs	r3, #0
 800373e:	647b      	str	r3, [r7, #68]	; 0x44
 8003740:	2300      	movs	r3, #0
 8003742:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003744:	2300      	movs	r3, #0
 8003746:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003748:	2300      	movs	r3, #0
 800374a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800374c:	4b79      	ldr	r3, [pc, #484]	; (8003934 <HAL_RCC_GetSysClockFreq+0x200>)
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f003 030c 	and.w	r3, r3, #12
 8003754:	2b08      	cmp	r3, #8
 8003756:	d00d      	beq.n	8003774 <HAL_RCC_GetSysClockFreq+0x40>
 8003758:	2b08      	cmp	r3, #8
 800375a:	f200 80e1 	bhi.w	8003920 <HAL_RCC_GetSysClockFreq+0x1ec>
 800375e:	2b00      	cmp	r3, #0
 8003760:	d002      	beq.n	8003768 <HAL_RCC_GetSysClockFreq+0x34>
 8003762:	2b04      	cmp	r3, #4
 8003764:	d003      	beq.n	800376e <HAL_RCC_GetSysClockFreq+0x3a>
 8003766:	e0db      	b.n	8003920 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003768:	4b73      	ldr	r3, [pc, #460]	; (8003938 <HAL_RCC_GetSysClockFreq+0x204>)
 800376a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800376c:	e0db      	b.n	8003926 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800376e:	4b73      	ldr	r3, [pc, #460]	; (800393c <HAL_RCC_GetSysClockFreq+0x208>)
 8003770:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003772:	e0d8      	b.n	8003926 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003774:	4b6f      	ldr	r3, [pc, #444]	; (8003934 <HAL_RCC_GetSysClockFreq+0x200>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800377c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800377e:	4b6d      	ldr	r3, [pc, #436]	; (8003934 <HAL_RCC_GetSysClockFreq+0x200>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d063      	beq.n	8003852 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800378a:	4b6a      	ldr	r3, [pc, #424]	; (8003934 <HAL_RCC_GetSysClockFreq+0x200>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	099b      	lsrs	r3, r3, #6
 8003790:	2200      	movs	r2, #0
 8003792:	63bb      	str	r3, [r7, #56]	; 0x38
 8003794:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003798:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800379c:	633b      	str	r3, [r7, #48]	; 0x30
 800379e:	2300      	movs	r3, #0
 80037a0:	637b      	str	r3, [r7, #52]	; 0x34
 80037a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80037a6:	4622      	mov	r2, r4
 80037a8:	462b      	mov	r3, r5
 80037aa:	f04f 0000 	mov.w	r0, #0
 80037ae:	f04f 0100 	mov.w	r1, #0
 80037b2:	0159      	lsls	r1, r3, #5
 80037b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037b8:	0150      	lsls	r0, r2, #5
 80037ba:	4602      	mov	r2, r0
 80037bc:	460b      	mov	r3, r1
 80037be:	4621      	mov	r1, r4
 80037c0:	1a51      	subs	r1, r2, r1
 80037c2:	6139      	str	r1, [r7, #16]
 80037c4:	4629      	mov	r1, r5
 80037c6:	eb63 0301 	sbc.w	r3, r3, r1
 80037ca:	617b      	str	r3, [r7, #20]
 80037cc:	f04f 0200 	mov.w	r2, #0
 80037d0:	f04f 0300 	mov.w	r3, #0
 80037d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037d8:	4659      	mov	r1, fp
 80037da:	018b      	lsls	r3, r1, #6
 80037dc:	4651      	mov	r1, sl
 80037de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037e2:	4651      	mov	r1, sl
 80037e4:	018a      	lsls	r2, r1, #6
 80037e6:	4651      	mov	r1, sl
 80037e8:	ebb2 0801 	subs.w	r8, r2, r1
 80037ec:	4659      	mov	r1, fp
 80037ee:	eb63 0901 	sbc.w	r9, r3, r1
 80037f2:	f04f 0200 	mov.w	r2, #0
 80037f6:	f04f 0300 	mov.w	r3, #0
 80037fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003802:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003806:	4690      	mov	r8, r2
 8003808:	4699      	mov	r9, r3
 800380a:	4623      	mov	r3, r4
 800380c:	eb18 0303 	adds.w	r3, r8, r3
 8003810:	60bb      	str	r3, [r7, #8]
 8003812:	462b      	mov	r3, r5
 8003814:	eb49 0303 	adc.w	r3, r9, r3
 8003818:	60fb      	str	r3, [r7, #12]
 800381a:	f04f 0200 	mov.w	r2, #0
 800381e:	f04f 0300 	mov.w	r3, #0
 8003822:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003826:	4629      	mov	r1, r5
 8003828:	024b      	lsls	r3, r1, #9
 800382a:	4621      	mov	r1, r4
 800382c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003830:	4621      	mov	r1, r4
 8003832:	024a      	lsls	r2, r1, #9
 8003834:	4610      	mov	r0, r2
 8003836:	4619      	mov	r1, r3
 8003838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800383a:	2200      	movs	r2, #0
 800383c:	62bb      	str	r3, [r7, #40]	; 0x28
 800383e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003840:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003844:	f7fc fcfc 	bl	8000240 <__aeabi_uldivmod>
 8003848:	4602      	mov	r2, r0
 800384a:	460b      	mov	r3, r1
 800384c:	4613      	mov	r3, r2
 800384e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003850:	e058      	b.n	8003904 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003852:	4b38      	ldr	r3, [pc, #224]	; (8003934 <HAL_RCC_GetSysClockFreq+0x200>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	099b      	lsrs	r3, r3, #6
 8003858:	2200      	movs	r2, #0
 800385a:	4618      	mov	r0, r3
 800385c:	4611      	mov	r1, r2
 800385e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003862:	623b      	str	r3, [r7, #32]
 8003864:	2300      	movs	r3, #0
 8003866:	627b      	str	r3, [r7, #36]	; 0x24
 8003868:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800386c:	4642      	mov	r2, r8
 800386e:	464b      	mov	r3, r9
 8003870:	f04f 0000 	mov.w	r0, #0
 8003874:	f04f 0100 	mov.w	r1, #0
 8003878:	0159      	lsls	r1, r3, #5
 800387a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800387e:	0150      	lsls	r0, r2, #5
 8003880:	4602      	mov	r2, r0
 8003882:	460b      	mov	r3, r1
 8003884:	4641      	mov	r1, r8
 8003886:	ebb2 0a01 	subs.w	sl, r2, r1
 800388a:	4649      	mov	r1, r9
 800388c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003890:	f04f 0200 	mov.w	r2, #0
 8003894:	f04f 0300 	mov.w	r3, #0
 8003898:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800389c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038a4:	ebb2 040a 	subs.w	r4, r2, sl
 80038a8:	eb63 050b 	sbc.w	r5, r3, fp
 80038ac:	f04f 0200 	mov.w	r2, #0
 80038b0:	f04f 0300 	mov.w	r3, #0
 80038b4:	00eb      	lsls	r3, r5, #3
 80038b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038ba:	00e2      	lsls	r2, r4, #3
 80038bc:	4614      	mov	r4, r2
 80038be:	461d      	mov	r5, r3
 80038c0:	4643      	mov	r3, r8
 80038c2:	18e3      	adds	r3, r4, r3
 80038c4:	603b      	str	r3, [r7, #0]
 80038c6:	464b      	mov	r3, r9
 80038c8:	eb45 0303 	adc.w	r3, r5, r3
 80038cc:	607b      	str	r3, [r7, #4]
 80038ce:	f04f 0200 	mov.w	r2, #0
 80038d2:	f04f 0300 	mov.w	r3, #0
 80038d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038da:	4629      	mov	r1, r5
 80038dc:	028b      	lsls	r3, r1, #10
 80038de:	4621      	mov	r1, r4
 80038e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038e4:	4621      	mov	r1, r4
 80038e6:	028a      	lsls	r2, r1, #10
 80038e8:	4610      	mov	r0, r2
 80038ea:	4619      	mov	r1, r3
 80038ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038ee:	2200      	movs	r2, #0
 80038f0:	61bb      	str	r3, [r7, #24]
 80038f2:	61fa      	str	r2, [r7, #28]
 80038f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038f8:	f7fc fca2 	bl	8000240 <__aeabi_uldivmod>
 80038fc:	4602      	mov	r2, r0
 80038fe:	460b      	mov	r3, r1
 8003900:	4613      	mov	r3, r2
 8003902:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003904:	4b0b      	ldr	r3, [pc, #44]	; (8003934 <HAL_RCC_GetSysClockFreq+0x200>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	0c1b      	lsrs	r3, r3, #16
 800390a:	f003 0303 	and.w	r3, r3, #3
 800390e:	3301      	adds	r3, #1
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003914:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003916:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003918:	fbb2 f3f3 	udiv	r3, r2, r3
 800391c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800391e:	e002      	b.n	8003926 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003920:	4b05      	ldr	r3, [pc, #20]	; (8003938 <HAL_RCC_GetSysClockFreq+0x204>)
 8003922:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003924:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003926:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003928:	4618      	mov	r0, r3
 800392a:	3750      	adds	r7, #80	; 0x50
 800392c:	46bd      	mov	sp, r7
 800392e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003932:	bf00      	nop
 8003934:	40023800 	.word	0x40023800
 8003938:	00f42400 	.word	0x00f42400
 800393c:	007a1200 	.word	0x007a1200

08003940 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003944:	4b03      	ldr	r3, [pc, #12]	; (8003954 <HAL_RCC_GetHCLKFreq+0x14>)
 8003946:	681b      	ldr	r3, [r3, #0]
}
 8003948:	4618      	mov	r0, r3
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	20000004 	.word	0x20000004

08003958 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800395c:	f7ff fff0 	bl	8003940 <HAL_RCC_GetHCLKFreq>
 8003960:	4602      	mov	r2, r0
 8003962:	4b05      	ldr	r3, [pc, #20]	; (8003978 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	0a9b      	lsrs	r3, r3, #10
 8003968:	f003 0307 	and.w	r3, r3, #7
 800396c:	4903      	ldr	r1, [pc, #12]	; (800397c <HAL_RCC_GetPCLK1Freq+0x24>)
 800396e:	5ccb      	ldrb	r3, [r1, r3]
 8003970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003974:	4618      	mov	r0, r3
 8003976:	bd80      	pop	{r7, pc}
 8003978:	40023800 	.word	0x40023800
 800397c:	08007130 	.word	0x08007130

08003980 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	220f      	movs	r2, #15
 800398e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003990:	4b12      	ldr	r3, [pc, #72]	; (80039dc <HAL_RCC_GetClockConfig+0x5c>)
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f003 0203 	and.w	r2, r3, #3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800399c:	4b0f      	ldr	r3, [pc, #60]	; (80039dc <HAL_RCC_GetClockConfig+0x5c>)
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80039a8:	4b0c      	ldr	r3, [pc, #48]	; (80039dc <HAL_RCC_GetClockConfig+0x5c>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80039b4:	4b09      	ldr	r3, [pc, #36]	; (80039dc <HAL_RCC_GetClockConfig+0x5c>)
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	08db      	lsrs	r3, r3, #3
 80039ba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80039c2:	4b07      	ldr	r3, [pc, #28]	; (80039e0 <HAL_RCC_GetClockConfig+0x60>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 020f 	and.w	r2, r3, #15
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	601a      	str	r2, [r3, #0]
}
 80039ce:	bf00      	nop
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	40023800 	.word	0x40023800
 80039e0:	40023c00 	.word	0x40023c00

080039e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e049      	b.n	8003a8a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d106      	bne.n	8003a10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f841 	bl	8003a92 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2202      	movs	r2, #2
 8003a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	3304      	adds	r3, #4
 8003a20:	4619      	mov	r1, r3
 8003a22:	4610      	mov	r0, r2
 8003a24:	f000 fa00 	bl	8003e28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3708      	adds	r7, #8
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003a92:	b480      	push	{r7}
 8003a94:	b083      	sub	sp, #12
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003a9a:	bf00      	nop
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
	...

08003aa8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d001      	beq.n	8003ac0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e054      	b.n	8003b6a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68da      	ldr	r2, [r3, #12]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f042 0201 	orr.w	r2, r2, #1
 8003ad6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a26      	ldr	r2, [pc, #152]	; (8003b78 <HAL_TIM_Base_Start_IT+0xd0>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d022      	beq.n	8003b28 <HAL_TIM_Base_Start_IT+0x80>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aea:	d01d      	beq.n	8003b28 <HAL_TIM_Base_Start_IT+0x80>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a22      	ldr	r2, [pc, #136]	; (8003b7c <HAL_TIM_Base_Start_IT+0xd4>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d018      	beq.n	8003b28 <HAL_TIM_Base_Start_IT+0x80>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a21      	ldr	r2, [pc, #132]	; (8003b80 <HAL_TIM_Base_Start_IT+0xd8>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d013      	beq.n	8003b28 <HAL_TIM_Base_Start_IT+0x80>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a1f      	ldr	r2, [pc, #124]	; (8003b84 <HAL_TIM_Base_Start_IT+0xdc>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d00e      	beq.n	8003b28 <HAL_TIM_Base_Start_IT+0x80>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a1e      	ldr	r2, [pc, #120]	; (8003b88 <HAL_TIM_Base_Start_IT+0xe0>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d009      	beq.n	8003b28 <HAL_TIM_Base_Start_IT+0x80>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a1c      	ldr	r2, [pc, #112]	; (8003b8c <HAL_TIM_Base_Start_IT+0xe4>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d004      	beq.n	8003b28 <HAL_TIM_Base_Start_IT+0x80>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a1b      	ldr	r2, [pc, #108]	; (8003b90 <HAL_TIM_Base_Start_IT+0xe8>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d115      	bne.n	8003b54 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	689a      	ldr	r2, [r3, #8]
 8003b2e:	4b19      	ldr	r3, [pc, #100]	; (8003b94 <HAL_TIM_Base_Start_IT+0xec>)
 8003b30:	4013      	ands	r3, r2
 8003b32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2b06      	cmp	r3, #6
 8003b38:	d015      	beq.n	8003b66 <HAL_TIM_Base_Start_IT+0xbe>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b40:	d011      	beq.n	8003b66 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f042 0201 	orr.w	r2, r2, #1
 8003b50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b52:	e008      	b.n	8003b66 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f042 0201 	orr.w	r2, r2, #1
 8003b62:	601a      	str	r2, [r3, #0]
 8003b64:	e000      	b.n	8003b68 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b66:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3714      	adds	r7, #20
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	40010000 	.word	0x40010000
 8003b7c:	40000400 	.word	0x40000400
 8003b80:	40000800 	.word	0x40000800
 8003b84:	40000c00 	.word	0x40000c00
 8003b88:	40010400 	.word	0x40010400
 8003b8c:	40014000 	.word	0x40014000
 8003b90:	40001800 	.word	0x40001800
 8003b94:	00010007 	.word	0x00010007

08003b98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d122      	bne.n	8003bf4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d11b      	bne.n	8003bf4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f06f 0202 	mvn.w	r2, #2
 8003bc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	f003 0303 	and.w	r3, r3, #3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d003      	beq.n	8003be2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f905 	bl	8003dea <HAL_TIM_IC_CaptureCallback>
 8003be0:	e005      	b.n	8003bee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f8f7 	bl	8003dd6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 f908 	bl	8003dfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	f003 0304 	and.w	r3, r3, #4
 8003bfe:	2b04      	cmp	r3, #4
 8003c00:	d122      	bne.n	8003c48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	f003 0304 	and.w	r3, r3, #4
 8003c0c:	2b04      	cmp	r3, #4
 8003c0e:	d11b      	bne.n	8003c48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f06f 0204 	mvn.w	r2, #4
 8003c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2202      	movs	r2, #2
 8003c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d003      	beq.n	8003c36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f8db 	bl	8003dea <HAL_TIM_IC_CaptureCallback>
 8003c34:	e005      	b.n	8003c42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f8cd 	bl	8003dd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 f8de 	bl	8003dfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	f003 0308 	and.w	r3, r3, #8
 8003c52:	2b08      	cmp	r3, #8
 8003c54:	d122      	bne.n	8003c9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	f003 0308 	and.w	r3, r3, #8
 8003c60:	2b08      	cmp	r3, #8
 8003c62:	d11b      	bne.n	8003c9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f06f 0208 	mvn.w	r2, #8
 8003c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2204      	movs	r2, #4
 8003c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	69db      	ldr	r3, [r3, #28]
 8003c7a:	f003 0303 	and.w	r3, r3, #3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d003      	beq.n	8003c8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f8b1 	bl	8003dea <HAL_TIM_IC_CaptureCallback>
 8003c88:	e005      	b.n	8003c96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 f8a3 	bl	8003dd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 f8b4 	bl	8003dfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	f003 0310 	and.w	r3, r3, #16
 8003ca6:	2b10      	cmp	r3, #16
 8003ca8:	d122      	bne.n	8003cf0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	f003 0310 	and.w	r3, r3, #16
 8003cb4:	2b10      	cmp	r3, #16
 8003cb6:	d11b      	bne.n	8003cf0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f06f 0210 	mvn.w	r2, #16
 8003cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2208      	movs	r2, #8
 8003cc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	69db      	ldr	r3, [r3, #28]
 8003cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d003      	beq.n	8003cde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 f887 	bl	8003dea <HAL_TIM_IC_CaptureCallback>
 8003cdc:	e005      	b.n	8003cea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f879 	bl	8003dd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 f88a 	bl	8003dfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d10e      	bne.n	8003d1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	f003 0301 	and.w	r3, r3, #1
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d107      	bne.n	8003d1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f06f 0201 	mvn.w	r2, #1
 8003d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f7fd f99e 	bl	8001058 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d26:	2b80      	cmp	r3, #128	; 0x80
 8003d28:	d10e      	bne.n	8003d48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d34:	2b80      	cmp	r3, #128	; 0x80
 8003d36:	d107      	bne.n	8003d48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 f91a 	bl	8003f7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d56:	d10e      	bne.n	8003d76 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d62:	2b80      	cmp	r3, #128	; 0x80
 8003d64:	d107      	bne.n	8003d76 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003d6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 f90d 	bl	8003f90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d80:	2b40      	cmp	r3, #64	; 0x40
 8003d82:	d10e      	bne.n	8003da2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d8e:	2b40      	cmp	r3, #64	; 0x40
 8003d90:	d107      	bne.n	8003da2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 f838 	bl	8003e12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	f003 0320 	and.w	r3, r3, #32
 8003dac:	2b20      	cmp	r3, #32
 8003dae:	d10e      	bne.n	8003dce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	f003 0320 	and.w	r3, r3, #32
 8003dba:	2b20      	cmp	r3, #32
 8003dbc:	d107      	bne.n	8003dce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f06f 0220 	mvn.w	r2, #32
 8003dc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 f8cd 	bl	8003f68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dce:	bf00      	nop
 8003dd0:	3708      	adds	r7, #8
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b083      	sub	sp, #12
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dde:	bf00      	nop
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b083      	sub	sp, #12
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003df2:	bf00      	nop
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b083      	sub	sp, #12
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e06:	bf00      	nop
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr

08003e12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e12:	b480      	push	{r7}
 8003e14:	b083      	sub	sp, #12
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e1a:	bf00      	nop
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
	...

08003e28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a40      	ldr	r2, [pc, #256]	; (8003f3c <TIM_Base_SetConfig+0x114>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d013      	beq.n	8003e68 <TIM_Base_SetConfig+0x40>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e46:	d00f      	beq.n	8003e68 <TIM_Base_SetConfig+0x40>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a3d      	ldr	r2, [pc, #244]	; (8003f40 <TIM_Base_SetConfig+0x118>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d00b      	beq.n	8003e68 <TIM_Base_SetConfig+0x40>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a3c      	ldr	r2, [pc, #240]	; (8003f44 <TIM_Base_SetConfig+0x11c>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d007      	beq.n	8003e68 <TIM_Base_SetConfig+0x40>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a3b      	ldr	r2, [pc, #236]	; (8003f48 <TIM_Base_SetConfig+0x120>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d003      	beq.n	8003e68 <TIM_Base_SetConfig+0x40>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a3a      	ldr	r2, [pc, #232]	; (8003f4c <TIM_Base_SetConfig+0x124>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d108      	bne.n	8003e7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a2f      	ldr	r2, [pc, #188]	; (8003f3c <TIM_Base_SetConfig+0x114>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d02b      	beq.n	8003eda <TIM_Base_SetConfig+0xb2>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e88:	d027      	beq.n	8003eda <TIM_Base_SetConfig+0xb2>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a2c      	ldr	r2, [pc, #176]	; (8003f40 <TIM_Base_SetConfig+0x118>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d023      	beq.n	8003eda <TIM_Base_SetConfig+0xb2>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a2b      	ldr	r2, [pc, #172]	; (8003f44 <TIM_Base_SetConfig+0x11c>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d01f      	beq.n	8003eda <TIM_Base_SetConfig+0xb2>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a2a      	ldr	r2, [pc, #168]	; (8003f48 <TIM_Base_SetConfig+0x120>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d01b      	beq.n	8003eda <TIM_Base_SetConfig+0xb2>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a29      	ldr	r2, [pc, #164]	; (8003f4c <TIM_Base_SetConfig+0x124>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d017      	beq.n	8003eda <TIM_Base_SetConfig+0xb2>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a28      	ldr	r2, [pc, #160]	; (8003f50 <TIM_Base_SetConfig+0x128>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d013      	beq.n	8003eda <TIM_Base_SetConfig+0xb2>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a27      	ldr	r2, [pc, #156]	; (8003f54 <TIM_Base_SetConfig+0x12c>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d00f      	beq.n	8003eda <TIM_Base_SetConfig+0xb2>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a26      	ldr	r2, [pc, #152]	; (8003f58 <TIM_Base_SetConfig+0x130>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d00b      	beq.n	8003eda <TIM_Base_SetConfig+0xb2>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a25      	ldr	r2, [pc, #148]	; (8003f5c <TIM_Base_SetConfig+0x134>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d007      	beq.n	8003eda <TIM_Base_SetConfig+0xb2>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a24      	ldr	r2, [pc, #144]	; (8003f60 <TIM_Base_SetConfig+0x138>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d003      	beq.n	8003eda <TIM_Base_SetConfig+0xb2>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a23      	ldr	r2, [pc, #140]	; (8003f64 <TIM_Base_SetConfig+0x13c>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d108      	bne.n	8003eec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ee0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	689a      	ldr	r2, [r3, #8]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a0a      	ldr	r2, [pc, #40]	; (8003f3c <TIM_Base_SetConfig+0x114>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d003      	beq.n	8003f20 <TIM_Base_SetConfig+0xf8>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a0c      	ldr	r2, [pc, #48]	; (8003f4c <TIM_Base_SetConfig+0x124>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d103      	bne.n	8003f28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	691a      	ldr	r2, [r3, #16]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	615a      	str	r2, [r3, #20]
}
 8003f2e:	bf00      	nop
 8003f30:	3714      	adds	r7, #20
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	40010000 	.word	0x40010000
 8003f40:	40000400 	.word	0x40000400
 8003f44:	40000800 	.word	0x40000800
 8003f48:	40000c00 	.word	0x40000c00
 8003f4c:	40010400 	.word	0x40010400
 8003f50:	40014000 	.word	0x40014000
 8003f54:	40014400 	.word	0x40014400
 8003f58:	40014800 	.word	0x40014800
 8003f5c:	40001800 	.word	0x40001800
 8003f60:	40001c00 	.word	0x40001c00
 8003f64:	40002000 	.word	0x40002000

08003f68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003fa4:	b480      	push	{r7}
 8003fa6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003fa8:	bf00      	nop
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
	...

08003fb4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003fb4:	b480      	push	{r7}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fba:	f3ef 8305 	mrs	r3, IPSR
 8003fbe:	60bb      	str	r3, [r7, #8]
  return(result);
 8003fc0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10f      	bne.n	8003fe6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fc6:	f3ef 8310 	mrs	r3, PRIMASK
 8003fca:	607b      	str	r3, [r7, #4]
  return(result);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d105      	bne.n	8003fde <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003fd2:	f3ef 8311 	mrs	r3, BASEPRI
 8003fd6:	603b      	str	r3, [r7, #0]
  return(result);
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d007      	beq.n	8003fee <osKernelInitialize+0x3a>
 8003fde:	4b0e      	ldr	r3, [pc, #56]	; (8004018 <osKernelInitialize+0x64>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d103      	bne.n	8003fee <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003fe6:	f06f 0305 	mvn.w	r3, #5
 8003fea:	60fb      	str	r3, [r7, #12]
 8003fec:	e00c      	b.n	8004008 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003fee:	4b0a      	ldr	r3, [pc, #40]	; (8004018 <osKernelInitialize+0x64>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d105      	bne.n	8004002 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003ff6:	4b08      	ldr	r3, [pc, #32]	; (8004018 <osKernelInitialize+0x64>)
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	60fb      	str	r3, [r7, #12]
 8004000:	e002      	b.n	8004008 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004002:	f04f 33ff 	mov.w	r3, #4294967295
 8004006:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004008:	68fb      	ldr	r3, [r7, #12]
}
 800400a:	4618      	mov	r0, r3
 800400c:	3714      	adds	r7, #20
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	20000284 	.word	0x20000284

0800401c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004022:	f3ef 8305 	mrs	r3, IPSR
 8004026:	60bb      	str	r3, [r7, #8]
  return(result);
 8004028:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10f      	bne.n	800404e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800402e:	f3ef 8310 	mrs	r3, PRIMASK
 8004032:	607b      	str	r3, [r7, #4]
  return(result);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d105      	bne.n	8004046 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800403a:	f3ef 8311 	mrs	r3, BASEPRI
 800403e:	603b      	str	r3, [r7, #0]
  return(result);
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d007      	beq.n	8004056 <osKernelStart+0x3a>
 8004046:	4b0f      	ldr	r3, [pc, #60]	; (8004084 <osKernelStart+0x68>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2b02      	cmp	r3, #2
 800404c:	d103      	bne.n	8004056 <osKernelStart+0x3a>
    stat = osErrorISR;
 800404e:	f06f 0305 	mvn.w	r3, #5
 8004052:	60fb      	str	r3, [r7, #12]
 8004054:	e010      	b.n	8004078 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004056:	4b0b      	ldr	r3, [pc, #44]	; (8004084 <osKernelStart+0x68>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2b01      	cmp	r3, #1
 800405c:	d109      	bne.n	8004072 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800405e:	f7ff ffa1 	bl	8003fa4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004062:	4b08      	ldr	r3, [pc, #32]	; (8004084 <osKernelStart+0x68>)
 8004064:	2202      	movs	r2, #2
 8004066:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004068:	f001 fa3e 	bl	80054e8 <vTaskStartScheduler>
      stat = osOK;
 800406c:	2300      	movs	r3, #0
 800406e:	60fb      	str	r3, [r7, #12]
 8004070:	e002      	b.n	8004078 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004072:	f04f 33ff 	mov.w	r3, #4294967295
 8004076:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004078:	68fb      	ldr	r3, [r7, #12]
}
 800407a:	4618      	mov	r0, r3
 800407c:	3710      	adds	r7, #16
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	20000284 	.word	0x20000284

08004088 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004088:	b580      	push	{r7, lr}
 800408a:	b090      	sub	sp, #64	; 0x40
 800408c:	af04      	add	r7, sp, #16
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004094:	2300      	movs	r3, #0
 8004096:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004098:	f3ef 8305 	mrs	r3, IPSR
 800409c:	61fb      	str	r3, [r7, #28]
  return(result);
 800409e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f040 808f 	bne.w	80041c4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040a6:	f3ef 8310 	mrs	r3, PRIMASK
 80040aa:	61bb      	str	r3, [r7, #24]
  return(result);
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d105      	bne.n	80040be <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80040b2:	f3ef 8311 	mrs	r3, BASEPRI
 80040b6:	617b      	str	r3, [r7, #20]
  return(result);
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d003      	beq.n	80040c6 <osThreadNew+0x3e>
 80040be:	4b44      	ldr	r3, [pc, #272]	; (80041d0 <osThreadNew+0x148>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d07e      	beq.n	80041c4 <osThreadNew+0x13c>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d07b      	beq.n	80041c4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80040cc:	2380      	movs	r3, #128	; 0x80
 80040ce:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80040d0:	2318      	movs	r3, #24
 80040d2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80040d4:	2300      	movs	r3, #0
 80040d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80040d8:	f04f 33ff 	mov.w	r3, #4294967295
 80040dc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d045      	beq.n	8004170 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d002      	beq.n	80040f2 <osThreadNew+0x6a>
        name = attr->name;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d002      	beq.n	8004100 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004102:	2b00      	cmp	r3, #0
 8004104:	d008      	beq.n	8004118 <osThreadNew+0x90>
 8004106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004108:	2b38      	cmp	r3, #56	; 0x38
 800410a:	d805      	bhi.n	8004118 <osThreadNew+0x90>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	2b00      	cmp	r3, #0
 8004116:	d001      	beq.n	800411c <osThreadNew+0x94>
        return (NULL);
 8004118:	2300      	movs	r3, #0
 800411a:	e054      	b.n	80041c6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	695b      	ldr	r3, [r3, #20]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d003      	beq.n	800412c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	089b      	lsrs	r3, r3, #2
 800412a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00e      	beq.n	8004152 <osThreadNew+0xca>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	2bbb      	cmp	r3, #187	; 0xbb
 800413a:	d90a      	bls.n	8004152 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004140:	2b00      	cmp	r3, #0
 8004142:	d006      	beq.n	8004152 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d002      	beq.n	8004152 <osThreadNew+0xca>
        mem = 1;
 800414c:	2301      	movs	r3, #1
 800414e:	623b      	str	r3, [r7, #32]
 8004150:	e010      	b.n	8004174 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10c      	bne.n	8004174 <osThreadNew+0xec>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d108      	bne.n	8004174 <osThreadNew+0xec>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d104      	bne.n	8004174 <osThreadNew+0xec>
          mem = 0;
 800416a:	2300      	movs	r3, #0
 800416c:	623b      	str	r3, [r7, #32]
 800416e:	e001      	b.n	8004174 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004170:	2300      	movs	r3, #0
 8004172:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004174:	6a3b      	ldr	r3, [r7, #32]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d110      	bne.n	800419c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004182:	9202      	str	r2, [sp, #8]
 8004184:	9301      	str	r3, [sp, #4]
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004188:	9300      	str	r3, [sp, #0]
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800418e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004190:	68f8      	ldr	r0, [r7, #12]
 8004192:	f000 fea7 	bl	8004ee4 <xTaskCreateStatic>
 8004196:	4603      	mov	r3, r0
 8004198:	613b      	str	r3, [r7, #16]
 800419a:	e013      	b.n	80041c4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800419c:	6a3b      	ldr	r3, [r7, #32]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d110      	bne.n	80041c4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80041a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	f107 0310 	add.w	r3, r7, #16
 80041aa:	9301      	str	r3, [sp, #4]
 80041ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ae:	9300      	str	r3, [sp, #0]
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f000 fef8 	bl	8004faa <xTaskCreate>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d001      	beq.n	80041c4 <osThreadNew+0x13c>
          hTask = NULL;
 80041c0:	2300      	movs	r3, #0
 80041c2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80041c4:	693b      	ldr	r3, [r7, #16]
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3730      	adds	r7, #48	; 0x30
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	20000284 	.word	0x20000284

080041d4 <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b088      	sub	sp, #32
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041e0:	f3ef 8305 	mrs	r3, IPSR
 80041e4:	617b      	str	r3, [r7, #20]
  return(result);
 80041e6:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10f      	bne.n	800420c <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041ec:	f3ef 8310 	mrs	r3, PRIMASK
 80041f0:	613b      	str	r3, [r7, #16]
  return(result);
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d105      	bne.n	8004204 <osThreadSuspend+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80041f8:	f3ef 8311 	mrs	r3, BASEPRI
 80041fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d007      	beq.n	8004214 <osThreadSuspend+0x40>
 8004204:	4b0c      	ldr	r3, [pc, #48]	; (8004238 <osThreadSuspend+0x64>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2b02      	cmp	r3, #2
 800420a:	d103      	bne.n	8004214 <osThreadSuspend+0x40>
    stat = osErrorISR;
 800420c:	f06f 0305 	mvn.w	r3, #5
 8004210:	61fb      	str	r3, [r7, #28]
 8004212:	e00b      	b.n	800422c <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d103      	bne.n	8004222 <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 800421a:	f06f 0303 	mvn.w	r3, #3
 800421e:	61fb      	str	r3, [r7, #28]
 8004220:	e004      	b.n	800422c <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 8004222:	2300      	movs	r3, #0
 8004224:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 8004226:	69b8      	ldr	r0, [r7, #24]
 8004228:	f001 f852 	bl	80052d0 <vTaskSuspend>
  }

  return (stat);
 800422c:	69fb      	ldr	r3, [r7, #28]
}
 800422e:	4618      	mov	r0, r3
 8004230:	3720      	adds	r7, #32
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	20000284 	.word	0x20000284

0800423c <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 800423c:	b580      	push	{r7, lr}
 800423e:	b088      	sub	sp, #32
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004248:	f3ef 8305 	mrs	r3, IPSR
 800424c:	617b      	str	r3, [r7, #20]
  return(result);
 800424e:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004250:	2b00      	cmp	r3, #0
 8004252:	d10f      	bne.n	8004274 <osThreadResume+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004254:	f3ef 8310 	mrs	r3, PRIMASK
 8004258:	613b      	str	r3, [r7, #16]
  return(result);
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d105      	bne.n	800426c <osThreadResume+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004260:	f3ef 8311 	mrs	r3, BASEPRI
 8004264:	60fb      	str	r3, [r7, #12]
  return(result);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d007      	beq.n	800427c <osThreadResume+0x40>
 800426c:	4b0c      	ldr	r3, [pc, #48]	; (80042a0 <osThreadResume+0x64>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2b02      	cmp	r3, #2
 8004272:	d103      	bne.n	800427c <osThreadResume+0x40>
    stat = osErrorISR;
 8004274:	f06f 0305 	mvn.w	r3, #5
 8004278:	61fb      	str	r3, [r7, #28]
 800427a:	e00b      	b.n	8004294 <osThreadResume+0x58>
  }
  else if (hTask == NULL) {
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d103      	bne.n	800428a <osThreadResume+0x4e>
    stat = osErrorParameter;
 8004282:	f06f 0303 	mvn.w	r3, #3
 8004286:	61fb      	str	r3, [r7, #28]
 8004288:	e004      	b.n	8004294 <osThreadResume+0x58>
  }
  else {
    stat = osOK;
 800428a:	2300      	movs	r3, #0
 800428c:	61fb      	str	r3, [r7, #28]
    vTaskResume (hTask);
 800428e:	69b8      	ldr	r0, [r7, #24]
 8004290:	f001 f8ca 	bl	8005428 <vTaskResume>
  }

  return (stat);
 8004294:	69fb      	ldr	r3, [r7, #28]
}
 8004296:	4618      	mov	r0, r3
 8004298:	3720      	adds	r7, #32
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	20000284 	.word	0x20000284

080042a4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b086      	sub	sp, #24
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042ac:	f3ef 8305 	mrs	r3, IPSR
 80042b0:	613b      	str	r3, [r7, #16]
  return(result);
 80042b2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10f      	bne.n	80042d8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042b8:	f3ef 8310 	mrs	r3, PRIMASK
 80042bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d105      	bne.n	80042d0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80042c4:	f3ef 8311 	mrs	r3, BASEPRI
 80042c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d007      	beq.n	80042e0 <osDelay+0x3c>
 80042d0:	4b0a      	ldr	r3, [pc, #40]	; (80042fc <osDelay+0x58>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d103      	bne.n	80042e0 <osDelay+0x3c>
    stat = osErrorISR;
 80042d8:	f06f 0305 	mvn.w	r3, #5
 80042dc:	617b      	str	r3, [r7, #20]
 80042de:	e007      	b.n	80042f0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80042e0:	2300      	movs	r3, #0
 80042e2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d002      	beq.n	80042f0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 ffba 	bl	8005264 <vTaskDelay>
    }
  }

  return (stat);
 80042f0:	697b      	ldr	r3, [r7, #20]
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3718      	adds	r7, #24
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	20000284 	.word	0x20000284

08004300 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	4a07      	ldr	r2, [pc, #28]	; (800432c <vApplicationGetIdleTaskMemory+0x2c>)
 8004310:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	4a06      	ldr	r2, [pc, #24]	; (8004330 <vApplicationGetIdleTaskMemory+0x30>)
 8004316:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2280      	movs	r2, #128	; 0x80
 800431c:	601a      	str	r2, [r3, #0]
}
 800431e:	bf00      	nop
 8004320:	3714      	adds	r7, #20
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	20000288 	.word	0x20000288
 8004330:	20000344 	.word	0x20000344

08004334 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	4a07      	ldr	r2, [pc, #28]	; (8004360 <vApplicationGetTimerTaskMemory+0x2c>)
 8004344:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	4a06      	ldr	r2, [pc, #24]	; (8004364 <vApplicationGetTimerTaskMemory+0x30>)
 800434a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004352:	601a      	str	r2, [r3, #0]
}
 8004354:	bf00      	nop
 8004356:	3714      	adds	r7, #20
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr
 8004360:	20000544 	.word	0x20000544
 8004364:	20000600 	.word	0x20000600

08004368 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f103 0208 	add.w	r2, r3, #8
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f04f 32ff 	mov.w	r2, #4294967295
 8004380:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f103 0208 	add.w	r2, r3, #8
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f103 0208 	add.w	r2, r3, #8
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80043c2:	b480      	push	{r7}
 80043c4:	b085      	sub	sp, #20
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
 80043ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	689a      	ldr	r2, [r3, #8]
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	683a      	ldr	r2, [r7, #0]
 80043e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	683a      	ldr	r2, [r7, #0]
 80043ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	1c5a      	adds	r2, r3, #1
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	601a      	str	r2, [r3, #0]
}
 80043fe:	bf00      	nop
 8004400:	3714      	adds	r7, #20
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr

0800440a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800440a:	b480      	push	{r7}
 800440c:	b085      	sub	sp, #20
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
 8004412:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004420:	d103      	bne.n	800442a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	60fb      	str	r3, [r7, #12]
 8004428:	e00c      	b.n	8004444 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	3308      	adds	r3, #8
 800442e:	60fb      	str	r3, [r7, #12]
 8004430:	e002      	b.n	8004438 <vListInsert+0x2e>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	60fb      	str	r3, [r7, #12]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68ba      	ldr	r2, [r7, #8]
 8004440:	429a      	cmp	r2, r3
 8004442:	d2f6      	bcs.n	8004432 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	683a      	ldr	r2, [r7, #0]
 8004452:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	683a      	ldr	r2, [r7, #0]
 800445e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	1c5a      	adds	r2, r3, #1
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	601a      	str	r2, [r3, #0]
}
 8004470:	bf00      	nop
 8004472:	3714      	adds	r7, #20
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	6892      	ldr	r2, [r2, #8]
 8004492:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	6852      	ldr	r2, [r2, #4]
 800449c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d103      	bne.n	80044b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689a      	ldr	r2, [r3, #8]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	1e5a      	subs	r2, r3, #1
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3714      	adds	r7, #20
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10c      	bne.n	80044fe <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80044e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e8:	b672      	cpsid	i
 80044ea:	f383 8811 	msr	BASEPRI, r3
 80044ee:	f3bf 8f6f 	isb	sy
 80044f2:	f3bf 8f4f 	dsb	sy
 80044f6:	b662      	cpsie	i
 80044f8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80044fa:	bf00      	nop
 80044fc:	e7fe      	b.n	80044fc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80044fe:	f002 f9b5 	bl	800686c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800450a:	68f9      	ldr	r1, [r7, #12]
 800450c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800450e:	fb01 f303 	mul.w	r3, r1, r3
 8004512:	441a      	add	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800452e:	3b01      	subs	r3, #1
 8004530:	68f9      	ldr	r1, [r7, #12]
 8004532:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004534:	fb01 f303 	mul.w	r3, r1, r3
 8004538:	441a      	add	r2, r3
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	22ff      	movs	r2, #255	; 0xff
 8004542:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	22ff      	movs	r2, #255	; 0xff
 800454a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d114      	bne.n	800457e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d01a      	beq.n	8004592 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	3310      	adds	r3, #16
 8004560:	4618      	mov	r0, r3
 8004562:	f001 fa69 	bl	8005a38 <xTaskRemoveFromEventList>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d012      	beq.n	8004592 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800456c:	4b0c      	ldr	r3, [pc, #48]	; (80045a0 <xQueueGenericReset+0xd0>)
 800456e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004572:	601a      	str	r2, [r3, #0]
 8004574:	f3bf 8f4f 	dsb	sy
 8004578:	f3bf 8f6f 	isb	sy
 800457c:	e009      	b.n	8004592 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	3310      	adds	r3, #16
 8004582:	4618      	mov	r0, r3
 8004584:	f7ff fef0 	bl	8004368 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	3324      	adds	r3, #36	; 0x24
 800458c:	4618      	mov	r0, r3
 800458e:	f7ff feeb 	bl	8004368 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004592:	f002 f99f 	bl	80068d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004596:	2301      	movs	r3, #1
}
 8004598:	4618      	mov	r0, r3
 800459a:	3710      	adds	r7, #16
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	e000ed04 	.word	0xe000ed04

080045a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b08e      	sub	sp, #56	; 0x38
 80045a8:	af02      	add	r7, sp, #8
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	607a      	str	r2, [r7, #4]
 80045b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d10c      	bne.n	80045d2 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80045b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045bc:	b672      	cpsid	i
 80045be:	f383 8811 	msr	BASEPRI, r3
 80045c2:	f3bf 8f6f 	isb	sy
 80045c6:	f3bf 8f4f 	dsb	sy
 80045ca:	b662      	cpsie	i
 80045cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80045ce:	bf00      	nop
 80045d0:	e7fe      	b.n	80045d0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10c      	bne.n	80045f2 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80045d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045dc:	b672      	cpsid	i
 80045de:	f383 8811 	msr	BASEPRI, r3
 80045e2:	f3bf 8f6f 	isb	sy
 80045e6:	f3bf 8f4f 	dsb	sy
 80045ea:	b662      	cpsie	i
 80045ec:	627b      	str	r3, [r7, #36]	; 0x24
}
 80045ee:	bf00      	nop
 80045f0:	e7fe      	b.n	80045f0 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d002      	beq.n	80045fe <xQueueGenericCreateStatic+0x5a>
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d001      	beq.n	8004602 <xQueueGenericCreateStatic+0x5e>
 80045fe:	2301      	movs	r3, #1
 8004600:	e000      	b.n	8004604 <xQueueGenericCreateStatic+0x60>
 8004602:	2300      	movs	r3, #0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10c      	bne.n	8004622 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8004608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460c:	b672      	cpsid	i
 800460e:	f383 8811 	msr	BASEPRI, r3
 8004612:	f3bf 8f6f 	isb	sy
 8004616:	f3bf 8f4f 	dsb	sy
 800461a:	b662      	cpsie	i
 800461c:	623b      	str	r3, [r7, #32]
}
 800461e:	bf00      	nop
 8004620:	e7fe      	b.n	8004620 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d102      	bne.n	800462e <xQueueGenericCreateStatic+0x8a>
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <xQueueGenericCreateStatic+0x8e>
 800462e:	2301      	movs	r3, #1
 8004630:	e000      	b.n	8004634 <xQueueGenericCreateStatic+0x90>
 8004632:	2300      	movs	r3, #0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d10c      	bne.n	8004652 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8004638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463c:	b672      	cpsid	i
 800463e:	f383 8811 	msr	BASEPRI, r3
 8004642:	f3bf 8f6f 	isb	sy
 8004646:	f3bf 8f4f 	dsb	sy
 800464a:	b662      	cpsie	i
 800464c:	61fb      	str	r3, [r7, #28]
}
 800464e:	bf00      	nop
 8004650:	e7fe      	b.n	8004650 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004652:	2350      	movs	r3, #80	; 0x50
 8004654:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	2b50      	cmp	r3, #80	; 0x50
 800465a:	d00c      	beq.n	8004676 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800465c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004660:	b672      	cpsid	i
 8004662:	f383 8811 	msr	BASEPRI, r3
 8004666:	f3bf 8f6f 	isb	sy
 800466a:	f3bf 8f4f 	dsb	sy
 800466e:	b662      	cpsie	i
 8004670:	61bb      	str	r3, [r7, #24]
}
 8004672:	bf00      	nop
 8004674:	e7fe      	b.n	8004674 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004676:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800467c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00d      	beq.n	800469e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004684:	2201      	movs	r2, #1
 8004686:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800468a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800468e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004690:	9300      	str	r3, [sp, #0]
 8004692:	4613      	mov	r3, r2
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	68b9      	ldr	r1, [r7, #8]
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f000 f805 	bl	80046a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800469e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3730      	adds	r7, #48	; 0x30
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
 80046b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d103      	bne.n	80046c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	601a      	str	r2, [r3, #0]
 80046c2:	e002      	b.n	80046ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	68ba      	ldr	r2, [r7, #8]
 80046d4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80046d6:	2101      	movs	r1, #1
 80046d8:	69b8      	ldr	r0, [r7, #24]
 80046da:	f7ff fef9 	bl	80044d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	78fa      	ldrb	r2, [r7, #3]
 80046e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80046e6:	bf00      	nop
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
	...

080046f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b08e      	sub	sp, #56	; 0x38
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
 80046fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80046fe:	2300      	movs	r3, #0
 8004700:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004708:	2b00      	cmp	r3, #0
 800470a:	d10c      	bne.n	8004726 <xQueueGenericSend+0x36>
	__asm volatile
 800470c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004710:	b672      	cpsid	i
 8004712:	f383 8811 	msr	BASEPRI, r3
 8004716:	f3bf 8f6f 	isb	sy
 800471a:	f3bf 8f4f 	dsb	sy
 800471e:	b662      	cpsie	i
 8004720:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004722:	bf00      	nop
 8004724:	e7fe      	b.n	8004724 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d103      	bne.n	8004734 <xQueueGenericSend+0x44>
 800472c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004730:	2b00      	cmp	r3, #0
 8004732:	d101      	bne.n	8004738 <xQueueGenericSend+0x48>
 8004734:	2301      	movs	r3, #1
 8004736:	e000      	b.n	800473a <xQueueGenericSend+0x4a>
 8004738:	2300      	movs	r3, #0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10c      	bne.n	8004758 <xQueueGenericSend+0x68>
	__asm volatile
 800473e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004742:	b672      	cpsid	i
 8004744:	f383 8811 	msr	BASEPRI, r3
 8004748:	f3bf 8f6f 	isb	sy
 800474c:	f3bf 8f4f 	dsb	sy
 8004750:	b662      	cpsie	i
 8004752:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004754:	bf00      	nop
 8004756:	e7fe      	b.n	8004756 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	2b02      	cmp	r3, #2
 800475c:	d103      	bne.n	8004766 <xQueueGenericSend+0x76>
 800475e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004762:	2b01      	cmp	r3, #1
 8004764:	d101      	bne.n	800476a <xQueueGenericSend+0x7a>
 8004766:	2301      	movs	r3, #1
 8004768:	e000      	b.n	800476c <xQueueGenericSend+0x7c>
 800476a:	2300      	movs	r3, #0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d10c      	bne.n	800478a <xQueueGenericSend+0x9a>
	__asm volatile
 8004770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004774:	b672      	cpsid	i
 8004776:	f383 8811 	msr	BASEPRI, r3
 800477a:	f3bf 8f6f 	isb	sy
 800477e:	f3bf 8f4f 	dsb	sy
 8004782:	b662      	cpsie	i
 8004784:	623b      	str	r3, [r7, #32]
}
 8004786:	bf00      	nop
 8004788:	e7fe      	b.n	8004788 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800478a:	f001 fb1f 	bl	8005dcc <xTaskGetSchedulerState>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d102      	bne.n	800479a <xQueueGenericSend+0xaa>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d101      	bne.n	800479e <xQueueGenericSend+0xae>
 800479a:	2301      	movs	r3, #1
 800479c:	e000      	b.n	80047a0 <xQueueGenericSend+0xb0>
 800479e:	2300      	movs	r3, #0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d10c      	bne.n	80047be <xQueueGenericSend+0xce>
	__asm volatile
 80047a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a8:	b672      	cpsid	i
 80047aa:	f383 8811 	msr	BASEPRI, r3
 80047ae:	f3bf 8f6f 	isb	sy
 80047b2:	f3bf 8f4f 	dsb	sy
 80047b6:	b662      	cpsie	i
 80047b8:	61fb      	str	r3, [r7, #28]
}
 80047ba:	bf00      	nop
 80047bc:	e7fe      	b.n	80047bc <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80047be:	f002 f855 	bl	800686c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80047c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d302      	bcc.n	80047d4 <xQueueGenericSend+0xe4>
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d129      	bne.n	8004828 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80047d4:	683a      	ldr	r2, [r7, #0]
 80047d6:	68b9      	ldr	r1, [r7, #8]
 80047d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047da:	f000 fa15 	bl	8004c08 <prvCopyDataToQueue>
 80047de:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d010      	beq.n	800480a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ea:	3324      	adds	r3, #36	; 0x24
 80047ec:	4618      	mov	r0, r3
 80047ee:	f001 f923 	bl	8005a38 <xTaskRemoveFromEventList>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d013      	beq.n	8004820 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80047f8:	4b3f      	ldr	r3, [pc, #252]	; (80048f8 <xQueueGenericSend+0x208>)
 80047fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047fe:	601a      	str	r2, [r3, #0]
 8004800:	f3bf 8f4f 	dsb	sy
 8004804:	f3bf 8f6f 	isb	sy
 8004808:	e00a      	b.n	8004820 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800480a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800480c:	2b00      	cmp	r3, #0
 800480e:	d007      	beq.n	8004820 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004810:	4b39      	ldr	r3, [pc, #228]	; (80048f8 <xQueueGenericSend+0x208>)
 8004812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004816:	601a      	str	r2, [r3, #0]
 8004818:	f3bf 8f4f 	dsb	sy
 800481c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004820:	f002 f858 	bl	80068d4 <vPortExitCritical>
				return pdPASS;
 8004824:	2301      	movs	r3, #1
 8004826:	e063      	b.n	80048f0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d103      	bne.n	8004836 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800482e:	f002 f851 	bl	80068d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004832:	2300      	movs	r3, #0
 8004834:	e05c      	b.n	80048f0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004838:	2b00      	cmp	r3, #0
 800483a:	d106      	bne.n	800484a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800483c:	f107 0314 	add.w	r3, r7, #20
 8004840:	4618      	mov	r0, r3
 8004842:	f001 f95f 	bl	8005b04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004846:	2301      	movs	r3, #1
 8004848:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800484a:	f002 f843 	bl	80068d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800484e:	f000 febf 	bl	80055d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004852:	f002 f80b 	bl	800686c <vPortEnterCritical>
 8004856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004858:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800485c:	b25b      	sxtb	r3, r3
 800485e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004862:	d103      	bne.n	800486c <xQueueGenericSend+0x17c>
 8004864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004866:	2200      	movs	r2, #0
 8004868:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800486c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004872:	b25b      	sxtb	r3, r3
 8004874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004878:	d103      	bne.n	8004882 <xQueueGenericSend+0x192>
 800487a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800487c:	2200      	movs	r2, #0
 800487e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004882:	f002 f827 	bl	80068d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004886:	1d3a      	adds	r2, r7, #4
 8004888:	f107 0314 	add.w	r3, r7, #20
 800488c:	4611      	mov	r1, r2
 800488e:	4618      	mov	r0, r3
 8004890:	f001 f94e 	bl	8005b30 <xTaskCheckForTimeOut>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d124      	bne.n	80048e4 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800489a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800489c:	f000 faac 	bl	8004df8 <prvIsQueueFull>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d018      	beq.n	80048d8 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80048a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a8:	3310      	adds	r3, #16
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	4611      	mov	r1, r2
 80048ae:	4618      	mov	r0, r3
 80048b0:	f001 f86e 	bl	8005990 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80048b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048b6:	f000 fa37 	bl	8004d28 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80048ba:	f000 fe97 	bl	80055ec <xTaskResumeAll>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f47f af7c 	bne.w	80047be <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80048c6:	4b0c      	ldr	r3, [pc, #48]	; (80048f8 <xQueueGenericSend+0x208>)
 80048c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048cc:	601a      	str	r2, [r3, #0]
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	f3bf 8f6f 	isb	sy
 80048d6:	e772      	b.n	80047be <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80048d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048da:	f000 fa25 	bl	8004d28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80048de:	f000 fe85 	bl	80055ec <xTaskResumeAll>
 80048e2:	e76c      	b.n	80047be <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80048e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048e6:	f000 fa1f 	bl	8004d28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80048ea:	f000 fe7f 	bl	80055ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80048ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3738      	adds	r7, #56	; 0x38
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	e000ed04 	.word	0xe000ed04

080048fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b08e      	sub	sp, #56	; 0x38
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
 8004908:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800490e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10c      	bne.n	800492e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8004914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004918:	b672      	cpsid	i
 800491a:	f383 8811 	msr	BASEPRI, r3
 800491e:	f3bf 8f6f 	isb	sy
 8004922:	f3bf 8f4f 	dsb	sy
 8004926:	b662      	cpsie	i
 8004928:	627b      	str	r3, [r7, #36]	; 0x24
}
 800492a:	bf00      	nop
 800492c:	e7fe      	b.n	800492c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d103      	bne.n	800493c <xQueueGenericSendFromISR+0x40>
 8004934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004938:	2b00      	cmp	r3, #0
 800493a:	d101      	bne.n	8004940 <xQueueGenericSendFromISR+0x44>
 800493c:	2301      	movs	r3, #1
 800493e:	e000      	b.n	8004942 <xQueueGenericSendFromISR+0x46>
 8004940:	2300      	movs	r3, #0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10c      	bne.n	8004960 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8004946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494a:	b672      	cpsid	i
 800494c:	f383 8811 	msr	BASEPRI, r3
 8004950:	f3bf 8f6f 	isb	sy
 8004954:	f3bf 8f4f 	dsb	sy
 8004958:	b662      	cpsie	i
 800495a:	623b      	str	r3, [r7, #32]
}
 800495c:	bf00      	nop
 800495e:	e7fe      	b.n	800495e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	2b02      	cmp	r3, #2
 8004964:	d103      	bne.n	800496e <xQueueGenericSendFromISR+0x72>
 8004966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800496a:	2b01      	cmp	r3, #1
 800496c:	d101      	bne.n	8004972 <xQueueGenericSendFromISR+0x76>
 800496e:	2301      	movs	r3, #1
 8004970:	e000      	b.n	8004974 <xQueueGenericSendFromISR+0x78>
 8004972:	2300      	movs	r3, #0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d10c      	bne.n	8004992 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8004978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800497c:	b672      	cpsid	i
 800497e:	f383 8811 	msr	BASEPRI, r3
 8004982:	f3bf 8f6f 	isb	sy
 8004986:	f3bf 8f4f 	dsb	sy
 800498a:	b662      	cpsie	i
 800498c:	61fb      	str	r3, [r7, #28]
}
 800498e:	bf00      	nop
 8004990:	e7fe      	b.n	8004990 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004992:	f002 f853 	bl	8006a3c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004996:	f3ef 8211 	mrs	r2, BASEPRI
 800499a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800499e:	b672      	cpsid	i
 80049a0:	f383 8811 	msr	BASEPRI, r3
 80049a4:	f3bf 8f6f 	isb	sy
 80049a8:	f3bf 8f4f 	dsb	sy
 80049ac:	b662      	cpsie	i
 80049ae:	61ba      	str	r2, [r7, #24]
 80049b0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80049b2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80049b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80049b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049be:	429a      	cmp	r2, r3
 80049c0:	d302      	bcc.n	80049c8 <xQueueGenericSendFromISR+0xcc>
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d12c      	bne.n	8004a22 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80049c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	68b9      	ldr	r1, [r7, #8]
 80049d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049d8:	f000 f916 	bl	8004c08 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80049dc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80049e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e4:	d112      	bne.n	8004a0c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d016      	beq.n	8004a1c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f0:	3324      	adds	r3, #36	; 0x24
 80049f2:	4618      	mov	r0, r3
 80049f4:	f001 f820 	bl	8005a38 <xTaskRemoveFromEventList>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00e      	beq.n	8004a1c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00b      	beq.n	8004a1c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	601a      	str	r2, [r3, #0]
 8004a0a:	e007      	b.n	8004a1c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004a0c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004a10:	3301      	adds	r3, #1
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	b25a      	sxtb	r2, r3
 8004a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004a20:	e001      	b.n	8004a26 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004a22:	2300      	movs	r3, #0
 8004a24:	637b      	str	r3, [r7, #52]	; 0x34
 8004a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a28:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004a30:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3738      	adds	r7, #56	; 0x38
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b08c      	sub	sp, #48	; 0x30
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10c      	bne.n	8004a70 <xQueueReceive+0x34>
	__asm volatile
 8004a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5a:	b672      	cpsid	i
 8004a5c:	f383 8811 	msr	BASEPRI, r3
 8004a60:	f3bf 8f6f 	isb	sy
 8004a64:	f3bf 8f4f 	dsb	sy
 8004a68:	b662      	cpsie	i
 8004a6a:	623b      	str	r3, [r7, #32]
}
 8004a6c:	bf00      	nop
 8004a6e:	e7fe      	b.n	8004a6e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d103      	bne.n	8004a7e <xQueueReceive+0x42>
 8004a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d101      	bne.n	8004a82 <xQueueReceive+0x46>
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e000      	b.n	8004a84 <xQueueReceive+0x48>
 8004a82:	2300      	movs	r3, #0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d10c      	bne.n	8004aa2 <xQueueReceive+0x66>
	__asm volatile
 8004a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8c:	b672      	cpsid	i
 8004a8e:	f383 8811 	msr	BASEPRI, r3
 8004a92:	f3bf 8f6f 	isb	sy
 8004a96:	f3bf 8f4f 	dsb	sy
 8004a9a:	b662      	cpsie	i
 8004a9c:	61fb      	str	r3, [r7, #28]
}
 8004a9e:	bf00      	nop
 8004aa0:	e7fe      	b.n	8004aa0 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004aa2:	f001 f993 	bl	8005dcc <xTaskGetSchedulerState>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d102      	bne.n	8004ab2 <xQueueReceive+0x76>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d101      	bne.n	8004ab6 <xQueueReceive+0x7a>
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e000      	b.n	8004ab8 <xQueueReceive+0x7c>
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d10c      	bne.n	8004ad6 <xQueueReceive+0x9a>
	__asm volatile
 8004abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac0:	b672      	cpsid	i
 8004ac2:	f383 8811 	msr	BASEPRI, r3
 8004ac6:	f3bf 8f6f 	isb	sy
 8004aca:	f3bf 8f4f 	dsb	sy
 8004ace:	b662      	cpsie	i
 8004ad0:	61bb      	str	r3, [r7, #24]
}
 8004ad2:	bf00      	nop
 8004ad4:	e7fe      	b.n	8004ad4 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ad6:	f001 fec9 	bl	800686c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ade:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d01f      	beq.n	8004b26 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004ae6:	68b9      	ldr	r1, [r7, #8]
 8004ae8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004aea:	f000 f8f7 	bl	8004cdc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af0:	1e5a      	subs	r2, r3, #1
 8004af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00f      	beq.n	8004b1e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b00:	3310      	adds	r3, #16
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 ff98 	bl	8005a38 <xTaskRemoveFromEventList>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d007      	beq.n	8004b1e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004b0e:	4b3d      	ldr	r3, [pc, #244]	; (8004c04 <xQueueReceive+0x1c8>)
 8004b10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b14:	601a      	str	r2, [r3, #0]
 8004b16:	f3bf 8f4f 	dsb	sy
 8004b1a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004b1e:	f001 fed9 	bl	80068d4 <vPortExitCritical>
				return pdPASS;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e069      	b.n	8004bfa <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d103      	bne.n	8004b34 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b2c:	f001 fed2 	bl	80068d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004b30:	2300      	movs	r3, #0
 8004b32:	e062      	b.n	8004bfa <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d106      	bne.n	8004b48 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b3a:	f107 0310 	add.w	r3, r7, #16
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f000 ffe0 	bl	8005b04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b44:	2301      	movs	r3, #1
 8004b46:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b48:	f001 fec4 	bl	80068d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b4c:	f000 fd40 	bl	80055d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b50:	f001 fe8c 	bl	800686c <vPortEnterCritical>
 8004b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b5a:	b25b      	sxtb	r3, r3
 8004b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b60:	d103      	bne.n	8004b6a <xQueueReceive+0x12e>
 8004b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b70:	b25b      	sxtb	r3, r3
 8004b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b76:	d103      	bne.n	8004b80 <xQueueReceive+0x144>
 8004b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b80:	f001 fea8 	bl	80068d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b84:	1d3a      	adds	r2, r7, #4
 8004b86:	f107 0310 	add.w	r3, r7, #16
 8004b8a:	4611      	mov	r1, r2
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f000 ffcf 	bl	8005b30 <xTaskCheckForTimeOut>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d123      	bne.n	8004be0 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b9a:	f000 f917 	bl	8004dcc <prvIsQueueEmpty>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d017      	beq.n	8004bd4 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba6:	3324      	adds	r3, #36	; 0x24
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	4611      	mov	r1, r2
 8004bac:	4618      	mov	r0, r3
 8004bae:	f000 feef 	bl	8005990 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004bb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bb4:	f000 f8b8 	bl	8004d28 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004bb8:	f000 fd18 	bl	80055ec <xTaskResumeAll>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d189      	bne.n	8004ad6 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8004bc2:	4b10      	ldr	r3, [pc, #64]	; (8004c04 <xQueueReceive+0x1c8>)
 8004bc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bc8:	601a      	str	r2, [r3, #0]
 8004bca:	f3bf 8f4f 	dsb	sy
 8004bce:	f3bf 8f6f 	isb	sy
 8004bd2:	e780      	b.n	8004ad6 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004bd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bd6:	f000 f8a7 	bl	8004d28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004bda:	f000 fd07 	bl	80055ec <xTaskResumeAll>
 8004bde:	e77a      	b.n	8004ad6 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004be0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004be2:	f000 f8a1 	bl	8004d28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004be6:	f000 fd01 	bl	80055ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004bea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bec:	f000 f8ee 	bl	8004dcc <prvIsQueueEmpty>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f43f af6f 	beq.w	8004ad6 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004bf8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3730      	adds	r7, #48	; 0x30
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	e000ed04 	.word	0xe000ed04

08004c08 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004c14:	2300      	movs	r3, #0
 8004c16:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d10d      	bne.n	8004c42 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d14d      	bne.n	8004cca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	4618      	mov	r0, r3
 8004c34:	f001 f8e8 	bl	8005e08 <xTaskPriorityDisinherit>
 8004c38:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	609a      	str	r2, [r3, #8]
 8004c40:	e043      	b.n	8004cca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d119      	bne.n	8004c7c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6858      	ldr	r0, [r3, #4]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c50:	461a      	mov	r2, r3
 8004c52:	68b9      	ldr	r1, [r7, #8]
 8004c54:	f002 f940 	bl	8006ed8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	685a      	ldr	r2, [r3, #4]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c60:	441a      	add	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	685a      	ldr	r2, [r3, #4]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d32b      	bcc.n	8004cca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	605a      	str	r2, [r3, #4]
 8004c7a:	e026      	b.n	8004cca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	68d8      	ldr	r0, [r3, #12]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c84:	461a      	mov	r2, r3
 8004c86:	68b9      	ldr	r1, [r7, #8]
 8004c88:	f002 f926 	bl	8006ed8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	68da      	ldr	r2, [r3, #12]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c94:	425b      	negs	r3, r3
 8004c96:	441a      	add	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	68da      	ldr	r2, [r3, #12]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d207      	bcs.n	8004cb8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	689a      	ldr	r2, [r3, #8]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb0:	425b      	negs	r3, r3
 8004cb2:	441a      	add	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d105      	bne.n	8004cca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d002      	beq.n	8004cca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	1c5a      	adds	r2, r3, #1
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004cd2:	697b      	ldr	r3, [r7, #20]
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3718      	adds	r7, #24
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d018      	beq.n	8004d20 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	68da      	ldr	r2, [r3, #12]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf6:	441a      	add	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	68da      	ldr	r2, [r3, #12]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d303      	bcc.n	8004d10 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	68d9      	ldr	r1, [r3, #12]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d18:	461a      	mov	r2, r3
 8004d1a:	6838      	ldr	r0, [r7, #0]
 8004d1c:	f002 f8dc 	bl	8006ed8 <memcpy>
	}
}
 8004d20:	bf00      	nop
 8004d22:	3708      	adds	r7, #8
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004d30:	f001 fd9c 	bl	800686c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d3a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d3c:	e011      	b.n	8004d62 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d012      	beq.n	8004d6c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	3324      	adds	r3, #36	; 0x24
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f000 fe74 	bl	8005a38 <xTaskRemoveFromEventList>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d001      	beq.n	8004d5a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004d56:	f000 ff51 	bl	8005bfc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004d5a:	7bfb      	ldrb	r3, [r7, #15]
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	dce9      	bgt.n	8004d3e <prvUnlockQueue+0x16>
 8004d6a:	e000      	b.n	8004d6e <prvUnlockQueue+0x46>
					break;
 8004d6c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	22ff      	movs	r2, #255	; 0xff
 8004d72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004d76:	f001 fdad 	bl	80068d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004d7a:	f001 fd77 	bl	800686c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d84:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d86:	e011      	b.n	8004dac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d012      	beq.n	8004db6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	3310      	adds	r3, #16
 8004d94:	4618      	mov	r0, r3
 8004d96:	f000 fe4f 	bl	8005a38 <xTaskRemoveFromEventList>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d001      	beq.n	8004da4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004da0:	f000 ff2c 	bl	8005bfc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004da4:	7bbb      	ldrb	r3, [r7, #14]
 8004da6:	3b01      	subs	r3, #1
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004dac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	dce9      	bgt.n	8004d88 <prvUnlockQueue+0x60>
 8004db4:	e000      	b.n	8004db8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004db6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	22ff      	movs	r2, #255	; 0xff
 8004dbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004dc0:	f001 fd88 	bl	80068d4 <vPortExitCritical>
}
 8004dc4:	bf00      	nop
 8004dc6:	3710      	adds	r7, #16
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004dd4:	f001 fd4a 	bl	800686c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d102      	bne.n	8004de6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004de0:	2301      	movs	r3, #1
 8004de2:	60fb      	str	r3, [r7, #12]
 8004de4:	e001      	b.n	8004dea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004de6:	2300      	movs	r3, #0
 8004de8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004dea:	f001 fd73 	bl	80068d4 <vPortExitCritical>

	return xReturn;
 8004dee:	68fb      	ldr	r3, [r7, #12]
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3710      	adds	r7, #16
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e00:	f001 fd34 	bl	800686c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d102      	bne.n	8004e16 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004e10:	2301      	movs	r3, #1
 8004e12:	60fb      	str	r3, [r7, #12]
 8004e14:	e001      	b.n	8004e1a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004e16:	2300      	movs	r3, #0
 8004e18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e1a:	f001 fd5b 	bl	80068d4 <vPortExitCritical>

	return xReturn;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3710      	adds	r7, #16
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e32:	2300      	movs	r3, #0
 8004e34:	60fb      	str	r3, [r7, #12]
 8004e36:	e014      	b.n	8004e62 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004e38:	4a0f      	ldr	r2, [pc, #60]	; (8004e78 <vQueueAddToRegistry+0x50>)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d10b      	bne.n	8004e5c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004e44:	490c      	ldr	r1, [pc, #48]	; (8004e78 <vQueueAddToRegistry+0x50>)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	683a      	ldr	r2, [r7, #0]
 8004e4a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004e4e:	4a0a      	ldr	r2, [pc, #40]	; (8004e78 <vQueueAddToRegistry+0x50>)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	00db      	lsls	r3, r3, #3
 8004e54:	4413      	add	r3, r2
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004e5a:	e006      	b.n	8004e6a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	3301      	adds	r3, #1
 8004e60:	60fb      	str	r3, [r7, #12]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2b07      	cmp	r3, #7
 8004e66:	d9e7      	bls.n	8004e38 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004e68:	bf00      	nop
 8004e6a:	bf00      	nop
 8004e6c:	3714      	adds	r7, #20
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	20000a00 	.word	0x20000a00

08004e7c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004e8c:	f001 fcee 	bl	800686c <vPortEnterCritical>
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e96:	b25b      	sxtb	r3, r3
 8004e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9c:	d103      	bne.n	8004ea6 <vQueueWaitForMessageRestricted+0x2a>
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004eac:	b25b      	sxtb	r3, r3
 8004eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb2:	d103      	bne.n	8004ebc <vQueueWaitForMessageRestricted+0x40>
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ebc:	f001 fd0a 	bl	80068d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d106      	bne.n	8004ed6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	3324      	adds	r3, #36	; 0x24
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	68b9      	ldr	r1, [r7, #8]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f000 fd83 	bl	80059dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004ed6:	6978      	ldr	r0, [r7, #20]
 8004ed8:	f7ff ff26 	bl	8004d28 <prvUnlockQueue>
	}
 8004edc:	bf00      	nop
 8004ede:	3718      	adds	r7, #24
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b08e      	sub	sp, #56	; 0x38
 8004ee8:	af04      	add	r7, sp, #16
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]
 8004ef0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d10c      	bne.n	8004f12 <xTaskCreateStatic+0x2e>
	__asm volatile
 8004ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efc:	b672      	cpsid	i
 8004efe:	f383 8811 	msr	BASEPRI, r3
 8004f02:	f3bf 8f6f 	isb	sy
 8004f06:	f3bf 8f4f 	dsb	sy
 8004f0a:	b662      	cpsie	i
 8004f0c:	623b      	str	r3, [r7, #32]
}
 8004f0e:	bf00      	nop
 8004f10:	e7fe      	b.n	8004f10 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8004f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d10c      	bne.n	8004f32 <xTaskCreateStatic+0x4e>
	__asm volatile
 8004f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f1c:	b672      	cpsid	i
 8004f1e:	f383 8811 	msr	BASEPRI, r3
 8004f22:	f3bf 8f6f 	isb	sy
 8004f26:	f3bf 8f4f 	dsb	sy
 8004f2a:	b662      	cpsie	i
 8004f2c:	61fb      	str	r3, [r7, #28]
}
 8004f2e:	bf00      	nop
 8004f30:	e7fe      	b.n	8004f30 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004f32:	23bc      	movs	r3, #188	; 0xbc
 8004f34:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	2bbc      	cmp	r3, #188	; 0xbc
 8004f3a:	d00c      	beq.n	8004f56 <xTaskCreateStatic+0x72>
	__asm volatile
 8004f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f40:	b672      	cpsid	i
 8004f42:	f383 8811 	msr	BASEPRI, r3
 8004f46:	f3bf 8f6f 	isb	sy
 8004f4a:	f3bf 8f4f 	dsb	sy
 8004f4e:	b662      	cpsie	i
 8004f50:	61bb      	str	r3, [r7, #24]
}
 8004f52:	bf00      	nop
 8004f54:	e7fe      	b.n	8004f54 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004f56:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d01e      	beq.n	8004f9c <xTaskCreateStatic+0xb8>
 8004f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d01b      	beq.n	8004f9c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f66:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f6c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f70:	2202      	movs	r2, #2
 8004f72:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004f76:	2300      	movs	r3, #0
 8004f78:	9303      	str	r3, [sp, #12]
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7c:	9302      	str	r3, [sp, #8]
 8004f7e:	f107 0314 	add.w	r3, r7, #20
 8004f82:	9301      	str	r3, [sp, #4]
 8004f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f86:	9300      	str	r3, [sp, #0]
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	68b9      	ldr	r1, [r7, #8]
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f000 f850 	bl	8005034 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f96:	f000 f8f5 	bl	8005184 <prvAddNewTaskToReadyList>
 8004f9a:	e001      	b.n	8004fa0 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004fa0:	697b      	ldr	r3, [r7, #20]
	}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3728      	adds	r7, #40	; 0x28
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b08c      	sub	sp, #48	; 0x30
 8004fae:	af04      	add	r7, sp, #16
 8004fb0:	60f8      	str	r0, [r7, #12]
 8004fb2:	60b9      	str	r1, [r7, #8]
 8004fb4:	603b      	str	r3, [r7, #0]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004fba:	88fb      	ldrh	r3, [r7, #6]
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f001 fd80 	bl	8006ac4 <pvPortMalloc>
 8004fc4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00e      	beq.n	8004fea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004fcc:	20bc      	movs	r0, #188	; 0xbc
 8004fce:	f001 fd79 	bl	8006ac4 <pvPortMalloc>
 8004fd2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d003      	beq.n	8004fe2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	697a      	ldr	r2, [r7, #20]
 8004fde:	631a      	str	r2, [r3, #48]	; 0x30
 8004fe0:	e005      	b.n	8004fee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004fe2:	6978      	ldr	r0, [r7, #20]
 8004fe4:	f001 fe38 	bl	8006c58 <vPortFree>
 8004fe8:	e001      	b.n	8004fee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004fea:	2300      	movs	r3, #0
 8004fec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d017      	beq.n	8005024 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004ffc:	88fa      	ldrh	r2, [r7, #6]
 8004ffe:	2300      	movs	r3, #0
 8005000:	9303      	str	r3, [sp, #12]
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	9302      	str	r3, [sp, #8]
 8005006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005008:	9301      	str	r3, [sp, #4]
 800500a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500c:	9300      	str	r3, [sp, #0]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	68b9      	ldr	r1, [r7, #8]
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f000 f80e 	bl	8005034 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005018:	69f8      	ldr	r0, [r7, #28]
 800501a:	f000 f8b3 	bl	8005184 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800501e:	2301      	movs	r3, #1
 8005020:	61bb      	str	r3, [r7, #24]
 8005022:	e002      	b.n	800502a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005024:	f04f 33ff 	mov.w	r3, #4294967295
 8005028:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800502a:	69bb      	ldr	r3, [r7, #24]
	}
 800502c:	4618      	mov	r0, r3
 800502e:	3720      	adds	r7, #32
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b088      	sub	sp, #32
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	607a      	str	r2, [r7, #4]
 8005040:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005044:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	461a      	mov	r2, r3
 800504c:	21a5      	movs	r1, #165	; 0xa5
 800504e:	f001 ff51 	bl	8006ef4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005054:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005056:	6879      	ldr	r1, [r7, #4]
 8005058:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800505c:	440b      	add	r3, r1
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	4413      	add	r3, r2
 8005062:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	f023 0307 	bic.w	r3, r3, #7
 800506a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	f003 0307 	and.w	r3, r3, #7
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00c      	beq.n	8005090 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8005076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507a:	b672      	cpsid	i
 800507c:	f383 8811 	msr	BASEPRI, r3
 8005080:	f3bf 8f6f 	isb	sy
 8005084:	f3bf 8f4f 	dsb	sy
 8005088:	b662      	cpsie	i
 800508a:	617b      	str	r3, [r7, #20]
}
 800508c:	bf00      	nop
 800508e:	e7fe      	b.n	800508e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d01f      	beq.n	80050d6 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005096:	2300      	movs	r3, #0
 8005098:	61fb      	str	r3, [r7, #28]
 800509a:	e012      	b.n	80050c2 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800509c:	68ba      	ldr	r2, [r7, #8]
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	4413      	add	r3, r2
 80050a2:	7819      	ldrb	r1, [r3, #0]
 80050a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	4413      	add	r3, r2
 80050aa:	3334      	adds	r3, #52	; 0x34
 80050ac:	460a      	mov	r2, r1
 80050ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80050b0:	68ba      	ldr	r2, [r7, #8]
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	4413      	add	r3, r2
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d006      	beq.n	80050ca <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	3301      	adds	r3, #1
 80050c0:	61fb      	str	r3, [r7, #28]
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	2b0f      	cmp	r3, #15
 80050c6:	d9e9      	bls.n	800509c <prvInitialiseNewTask+0x68>
 80050c8:	e000      	b.n	80050cc <prvInitialiseNewTask+0x98>
			{
				break;
 80050ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80050cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050d4:	e003      	b.n	80050de <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80050d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80050de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e0:	2b37      	cmp	r3, #55	; 0x37
 80050e2:	d901      	bls.n	80050e8 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80050e4:	2337      	movs	r3, #55	; 0x37
 80050e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80050e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80050ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050f2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80050f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f6:	2200      	movs	r2, #0
 80050f8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80050fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fc:	3304      	adds	r3, #4
 80050fe:	4618      	mov	r0, r3
 8005100:	f7ff f952 	bl	80043a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005106:	3318      	adds	r3, #24
 8005108:	4618      	mov	r0, r3
 800510a:	f7ff f94d 	bl	80043a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800510e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005110:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005112:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005116:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800511a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800511e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005120:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005122:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005126:	2200      	movs	r2, #0
 8005128:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800512c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512e:	2200      	movs	r2, #0
 8005130:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005136:	3354      	adds	r3, #84	; 0x54
 8005138:	2260      	movs	r2, #96	; 0x60
 800513a:	2100      	movs	r1, #0
 800513c:	4618      	mov	r0, r3
 800513e:	f001 fed9 	bl	8006ef4 <memset>
 8005142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005144:	4a0c      	ldr	r2, [pc, #48]	; (8005178 <prvInitialiseNewTask+0x144>)
 8005146:	659a      	str	r2, [r3, #88]	; 0x58
 8005148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514a:	4a0c      	ldr	r2, [pc, #48]	; (800517c <prvInitialiseNewTask+0x148>)
 800514c:	65da      	str	r2, [r3, #92]	; 0x5c
 800514e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005150:	4a0b      	ldr	r2, [pc, #44]	; (8005180 <prvInitialiseNewTask+0x14c>)
 8005152:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005154:	683a      	ldr	r2, [r7, #0]
 8005156:	68f9      	ldr	r1, [r7, #12]
 8005158:	69b8      	ldr	r0, [r7, #24]
 800515a:	f001 fa77 	bl	800664c <pxPortInitialiseStack>
 800515e:	4602      	mov	r2, r0
 8005160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005162:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005166:	2b00      	cmp	r3, #0
 8005168:	d002      	beq.n	8005170 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800516a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800516c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800516e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005170:	bf00      	nop
 8005172:	3720      	adds	r7, #32
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	08007158 	.word	0x08007158
 800517c:	08007178 	.word	0x08007178
 8005180:	08007138 	.word	0x08007138

08005184 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800518c:	f001 fb6e 	bl	800686c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005190:	4b2d      	ldr	r3, [pc, #180]	; (8005248 <prvAddNewTaskToReadyList+0xc4>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	3301      	adds	r3, #1
 8005196:	4a2c      	ldr	r2, [pc, #176]	; (8005248 <prvAddNewTaskToReadyList+0xc4>)
 8005198:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800519a:	4b2c      	ldr	r3, [pc, #176]	; (800524c <prvAddNewTaskToReadyList+0xc8>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d109      	bne.n	80051b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80051a2:	4a2a      	ldr	r2, [pc, #168]	; (800524c <prvAddNewTaskToReadyList+0xc8>)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80051a8:	4b27      	ldr	r3, [pc, #156]	; (8005248 <prvAddNewTaskToReadyList+0xc4>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d110      	bne.n	80051d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80051b0:	f000 fd48 	bl	8005c44 <prvInitialiseTaskLists>
 80051b4:	e00d      	b.n	80051d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80051b6:	4b26      	ldr	r3, [pc, #152]	; (8005250 <prvAddNewTaskToReadyList+0xcc>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d109      	bne.n	80051d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80051be:	4b23      	ldr	r3, [pc, #140]	; (800524c <prvAddNewTaskToReadyList+0xc8>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d802      	bhi.n	80051d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80051cc:	4a1f      	ldr	r2, [pc, #124]	; (800524c <prvAddNewTaskToReadyList+0xc8>)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80051d2:	4b20      	ldr	r3, [pc, #128]	; (8005254 <prvAddNewTaskToReadyList+0xd0>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	3301      	adds	r3, #1
 80051d8:	4a1e      	ldr	r2, [pc, #120]	; (8005254 <prvAddNewTaskToReadyList+0xd0>)
 80051da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80051dc:	4b1d      	ldr	r3, [pc, #116]	; (8005254 <prvAddNewTaskToReadyList+0xd0>)
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051e8:	4b1b      	ldr	r3, [pc, #108]	; (8005258 <prvAddNewTaskToReadyList+0xd4>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d903      	bls.n	80051f8 <prvAddNewTaskToReadyList+0x74>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f4:	4a18      	ldr	r2, [pc, #96]	; (8005258 <prvAddNewTaskToReadyList+0xd4>)
 80051f6:	6013      	str	r3, [r2, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051fc:	4613      	mov	r3, r2
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	4413      	add	r3, r2
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	4a15      	ldr	r2, [pc, #84]	; (800525c <prvAddNewTaskToReadyList+0xd8>)
 8005206:	441a      	add	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	3304      	adds	r3, #4
 800520c:	4619      	mov	r1, r3
 800520e:	4610      	mov	r0, r2
 8005210:	f7ff f8d7 	bl	80043c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005214:	f001 fb5e 	bl	80068d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005218:	4b0d      	ldr	r3, [pc, #52]	; (8005250 <prvAddNewTaskToReadyList+0xcc>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00e      	beq.n	800523e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005220:	4b0a      	ldr	r3, [pc, #40]	; (800524c <prvAddNewTaskToReadyList+0xc8>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522a:	429a      	cmp	r2, r3
 800522c:	d207      	bcs.n	800523e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800522e:	4b0c      	ldr	r3, [pc, #48]	; (8005260 <prvAddNewTaskToReadyList+0xdc>)
 8005230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005234:	601a      	str	r2, [r3, #0]
 8005236:	f3bf 8f4f 	dsb	sy
 800523a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800523e:	bf00      	nop
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	20000f14 	.word	0x20000f14
 800524c:	20000a40 	.word	0x20000a40
 8005250:	20000f20 	.word	0x20000f20
 8005254:	20000f30 	.word	0x20000f30
 8005258:	20000f1c 	.word	0x20000f1c
 800525c:	20000a44 	.word	0x20000a44
 8005260:	e000ed04 	.word	0xe000ed04

08005264 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800526c:	2300      	movs	r3, #0
 800526e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d019      	beq.n	80052aa <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005276:	4b14      	ldr	r3, [pc, #80]	; (80052c8 <vTaskDelay+0x64>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00c      	beq.n	8005298 <vTaskDelay+0x34>
	__asm volatile
 800527e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005282:	b672      	cpsid	i
 8005284:	f383 8811 	msr	BASEPRI, r3
 8005288:	f3bf 8f6f 	isb	sy
 800528c:	f3bf 8f4f 	dsb	sy
 8005290:	b662      	cpsie	i
 8005292:	60bb      	str	r3, [r7, #8]
}
 8005294:	bf00      	nop
 8005296:	e7fe      	b.n	8005296 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005298:	f000 f99a 	bl	80055d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800529c:	2100      	movs	r1, #0
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 fe24 	bl	8005eec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80052a4:	f000 f9a2 	bl	80055ec <xTaskResumeAll>
 80052a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d107      	bne.n	80052c0 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80052b0:	4b06      	ldr	r3, [pc, #24]	; (80052cc <vTaskDelay+0x68>)
 80052b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052b6:	601a      	str	r2, [r3, #0]
 80052b8:	f3bf 8f4f 	dsb	sy
 80052bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80052c0:	bf00      	nop
 80052c2:	3710      	adds	r7, #16
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	20000f3c 	.word	0x20000f3c
 80052cc:	e000ed04 	.word	0xe000ed04

080052d0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80052d8:	f001 fac8 	bl	800686c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d102      	bne.n	80052e8 <vTaskSuspend+0x18>
 80052e2:	4b31      	ldr	r3, [pc, #196]	; (80053a8 <vTaskSuspend+0xd8>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	e000      	b.n	80052ea <vTaskSuspend+0x1a>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	3304      	adds	r3, #4
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7ff f8c3 	bl	800447c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d004      	beq.n	8005308 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	3318      	adds	r3, #24
 8005302:	4618      	mov	r0, r3
 8005304:	f7ff f8ba 	bl	800447c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	3304      	adds	r3, #4
 800530c:	4619      	mov	r1, r3
 800530e:	4827      	ldr	r0, [pc, #156]	; (80053ac <vTaskSuspend+0xdc>)
 8005310:	f7ff f857 	bl	80043c2 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800531a:	b2db      	uxtb	r3, r3
 800531c:	2b01      	cmp	r3, #1
 800531e:	d103      	bne.n	8005328 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8005328:	f001 fad4 	bl	80068d4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800532c:	4b20      	ldr	r3, [pc, #128]	; (80053b0 <vTaskSuspend+0xe0>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d005      	beq.n	8005340 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8005334:	f001 fa9a 	bl	800686c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8005338:	f000 fd28 	bl	8005d8c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800533c:	f001 faca 	bl	80068d4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8005340:	4b19      	ldr	r3, [pc, #100]	; (80053a8 <vTaskSuspend+0xd8>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	429a      	cmp	r2, r3
 8005348:	d129      	bne.n	800539e <vTaskSuspend+0xce>
		{
			if( xSchedulerRunning != pdFALSE )
 800534a:	4b19      	ldr	r3, [pc, #100]	; (80053b0 <vTaskSuspend+0xe0>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d019      	beq.n	8005386 <vTaskSuspend+0xb6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8005352:	4b18      	ldr	r3, [pc, #96]	; (80053b4 <vTaskSuspend+0xe4>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00c      	beq.n	8005374 <vTaskSuspend+0xa4>
	__asm volatile
 800535a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535e:	b672      	cpsid	i
 8005360:	f383 8811 	msr	BASEPRI, r3
 8005364:	f3bf 8f6f 	isb	sy
 8005368:	f3bf 8f4f 	dsb	sy
 800536c:	b662      	cpsie	i
 800536e:	60bb      	str	r3, [r7, #8]
}
 8005370:	bf00      	nop
 8005372:	e7fe      	b.n	8005372 <vTaskSuspend+0xa2>
				portYIELD_WITHIN_API();
 8005374:	4b10      	ldr	r3, [pc, #64]	; (80053b8 <vTaskSuspend+0xe8>)
 8005376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800537a:	601a      	str	r2, [r3, #0]
 800537c:	f3bf 8f4f 	dsb	sy
 8005380:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005384:	e00b      	b.n	800539e <vTaskSuspend+0xce>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8005386:	4b09      	ldr	r3, [pc, #36]	; (80053ac <vTaskSuspend+0xdc>)
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	4b0c      	ldr	r3, [pc, #48]	; (80053bc <vTaskSuspend+0xec>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	429a      	cmp	r2, r3
 8005390:	d103      	bne.n	800539a <vTaskSuspend+0xca>
					pxCurrentTCB = NULL;
 8005392:	4b05      	ldr	r3, [pc, #20]	; (80053a8 <vTaskSuspend+0xd8>)
 8005394:	2200      	movs	r2, #0
 8005396:	601a      	str	r2, [r3, #0]
	}
 8005398:	e001      	b.n	800539e <vTaskSuspend+0xce>
					vTaskSwitchContext();
 800539a:	f000 fa93 	bl	80058c4 <vTaskSwitchContext>
	}
 800539e:	bf00      	nop
 80053a0:	3710      	adds	r7, #16
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	20000a40 	.word	0x20000a40
 80053ac:	20000f00 	.word	0x20000f00
 80053b0:	20000f20 	.word	0x20000f20
 80053b4:	20000f3c 	.word	0x20000f3c
 80053b8:	e000ed04 	.word	0xe000ed04
 80053bc:	20000f14 	.word	0x20000f14

080053c0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80053c0:	b480      	push	{r7}
 80053c2:	b087      	sub	sp, #28
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80053c8:	2300      	movs	r3, #0
 80053ca:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10c      	bne.n	80053f0 <prvTaskIsTaskSuspended+0x30>
	__asm volatile
 80053d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053da:	b672      	cpsid	i
 80053dc:	f383 8811 	msr	BASEPRI, r3
 80053e0:	f3bf 8f6f 	isb	sy
 80053e4:	f3bf 8f4f 	dsb	sy
 80053e8:	b662      	cpsie	i
 80053ea:	60fb      	str	r3, [r7, #12]
}
 80053ec:	bf00      	nop
 80053ee:	e7fe      	b.n	80053ee <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	695b      	ldr	r3, [r3, #20]
 80053f4:	4a0a      	ldr	r2, [pc, #40]	; (8005420 <prvTaskIsTaskSuspended+0x60>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d10a      	bne.n	8005410 <prvTaskIsTaskSuspended+0x50>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053fe:	4a09      	ldr	r2, [pc, #36]	; (8005424 <prvTaskIsTaskSuspended+0x64>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d005      	beq.n	8005410 <prvTaskIsTaskSuspended+0x50>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005408:	2b00      	cmp	r3, #0
 800540a:	d101      	bne.n	8005410 <prvTaskIsTaskSuspended+0x50>
				{
					xReturn = pdTRUE;
 800540c:	2301      	movs	r3, #1
 800540e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005410:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8005412:	4618      	mov	r0, r3
 8005414:	371c      	adds	r7, #28
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	20000f00 	.word	0x20000f00
 8005424:	20000ed4 	.word	0x20000ed4

08005428 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d10c      	bne.n	8005454 <vTaskResume+0x2c>
	__asm volatile
 800543a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800543e:	b672      	cpsid	i
 8005440:	f383 8811 	msr	BASEPRI, r3
 8005444:	f3bf 8f6f 	isb	sy
 8005448:	f3bf 8f4f 	dsb	sy
 800544c:	b662      	cpsie	i
 800544e:	60bb      	str	r3, [r7, #8]
}
 8005450:	bf00      	nop
 8005452:	e7fe      	b.n	8005452 <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8005454:	4b20      	ldr	r3, [pc, #128]	; (80054d8 <vTaskResume+0xb0>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	429a      	cmp	r2, r3
 800545c:	d038      	beq.n	80054d0 <vTaskResume+0xa8>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d035      	beq.n	80054d0 <vTaskResume+0xa8>
		{
			taskENTER_CRITICAL();
 8005464:	f001 fa02 	bl	800686c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	f7ff ffa9 	bl	80053c0 <prvTaskIsTaskSuspended>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d02b      	beq.n	80054cc <vTaskResume+0xa4>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	3304      	adds	r3, #4
 8005478:	4618      	mov	r0, r3
 800547a:	f7fe ffff 	bl	800447c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005482:	4b16      	ldr	r3, [pc, #88]	; (80054dc <vTaskResume+0xb4>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	429a      	cmp	r2, r3
 8005488:	d903      	bls.n	8005492 <vTaskResume+0x6a>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800548e:	4a13      	ldr	r2, [pc, #76]	; (80054dc <vTaskResume+0xb4>)
 8005490:	6013      	str	r3, [r2, #0]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005496:	4613      	mov	r3, r2
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	4413      	add	r3, r2
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	4a10      	ldr	r2, [pc, #64]	; (80054e0 <vTaskResume+0xb8>)
 80054a0:	441a      	add	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	3304      	adds	r3, #4
 80054a6:	4619      	mov	r1, r3
 80054a8:	4610      	mov	r0, r2
 80054aa:	f7fe ff8a 	bl	80043c2 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054b2:	4b09      	ldr	r3, [pc, #36]	; (80054d8 <vTaskResume+0xb0>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d307      	bcc.n	80054cc <vTaskResume+0xa4>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80054bc:	4b09      	ldr	r3, [pc, #36]	; (80054e4 <vTaskResume+0xbc>)
 80054be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054c2:	601a      	str	r2, [r3, #0]
 80054c4:	f3bf 8f4f 	dsb	sy
 80054c8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80054cc:	f001 fa02 	bl	80068d4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80054d0:	bf00      	nop
 80054d2:	3710      	adds	r7, #16
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	20000a40 	.word	0x20000a40
 80054dc:	20000f1c 	.word	0x20000f1c
 80054e0:	20000a44 	.word	0x20000a44
 80054e4:	e000ed04 	.word	0xe000ed04

080054e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b08a      	sub	sp, #40	; 0x28
 80054ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80054ee:	2300      	movs	r3, #0
 80054f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80054f2:	2300      	movs	r3, #0
 80054f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80054f6:	463a      	mov	r2, r7
 80054f8:	1d39      	adds	r1, r7, #4
 80054fa:	f107 0308 	add.w	r3, r7, #8
 80054fe:	4618      	mov	r0, r3
 8005500:	f7fe fefe 	bl	8004300 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005504:	6839      	ldr	r1, [r7, #0]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	68ba      	ldr	r2, [r7, #8]
 800550a:	9202      	str	r2, [sp, #8]
 800550c:	9301      	str	r3, [sp, #4]
 800550e:	2300      	movs	r3, #0
 8005510:	9300      	str	r3, [sp, #0]
 8005512:	2300      	movs	r3, #0
 8005514:	460a      	mov	r2, r1
 8005516:	4926      	ldr	r1, [pc, #152]	; (80055b0 <vTaskStartScheduler+0xc8>)
 8005518:	4826      	ldr	r0, [pc, #152]	; (80055b4 <vTaskStartScheduler+0xcc>)
 800551a:	f7ff fce3 	bl	8004ee4 <xTaskCreateStatic>
 800551e:	4603      	mov	r3, r0
 8005520:	4a25      	ldr	r2, [pc, #148]	; (80055b8 <vTaskStartScheduler+0xd0>)
 8005522:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005524:	4b24      	ldr	r3, [pc, #144]	; (80055b8 <vTaskStartScheduler+0xd0>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d002      	beq.n	8005532 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800552c:	2301      	movs	r3, #1
 800552e:	617b      	str	r3, [r7, #20]
 8005530:	e001      	b.n	8005536 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005532:	2300      	movs	r3, #0
 8005534:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d102      	bne.n	8005542 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800553c:	f000 fd2a 	bl	8005f94 <xTimerCreateTimerTask>
 8005540:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	2b01      	cmp	r3, #1
 8005546:	d11d      	bne.n	8005584 <vTaskStartScheduler+0x9c>
	__asm volatile
 8005548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800554c:	b672      	cpsid	i
 800554e:	f383 8811 	msr	BASEPRI, r3
 8005552:	f3bf 8f6f 	isb	sy
 8005556:	f3bf 8f4f 	dsb	sy
 800555a:	b662      	cpsie	i
 800555c:	613b      	str	r3, [r7, #16]
}
 800555e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005560:	4b16      	ldr	r3, [pc, #88]	; (80055bc <vTaskStartScheduler+0xd4>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	3354      	adds	r3, #84	; 0x54
 8005566:	4a16      	ldr	r2, [pc, #88]	; (80055c0 <vTaskStartScheduler+0xd8>)
 8005568:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800556a:	4b16      	ldr	r3, [pc, #88]	; (80055c4 <vTaskStartScheduler+0xdc>)
 800556c:	f04f 32ff 	mov.w	r2, #4294967295
 8005570:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005572:	4b15      	ldr	r3, [pc, #84]	; (80055c8 <vTaskStartScheduler+0xe0>)
 8005574:	2201      	movs	r2, #1
 8005576:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005578:	4b14      	ldr	r3, [pc, #80]	; (80055cc <vTaskStartScheduler+0xe4>)
 800557a:	2200      	movs	r2, #0
 800557c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800557e:	f001 f8f7 	bl	8006770 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005582:	e010      	b.n	80055a6 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800558a:	d10c      	bne.n	80055a6 <vTaskStartScheduler+0xbe>
	__asm volatile
 800558c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005590:	b672      	cpsid	i
 8005592:	f383 8811 	msr	BASEPRI, r3
 8005596:	f3bf 8f6f 	isb	sy
 800559a:	f3bf 8f4f 	dsb	sy
 800559e:	b662      	cpsie	i
 80055a0:	60fb      	str	r3, [r7, #12]
}
 80055a2:	bf00      	nop
 80055a4:	e7fe      	b.n	80055a4 <vTaskStartScheduler+0xbc>
}
 80055a6:	bf00      	nop
 80055a8:	3718      	adds	r7, #24
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	080070c0 	.word	0x080070c0
 80055b4:	08005c15 	.word	0x08005c15
 80055b8:	20000f38 	.word	0x20000f38
 80055bc:	20000a40 	.word	0x20000a40
 80055c0:	20000014 	.word	0x20000014
 80055c4:	20000f34 	.word	0x20000f34
 80055c8:	20000f20 	.word	0x20000f20
 80055cc:	20000f18 	.word	0x20000f18

080055d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80055d0:	b480      	push	{r7}
 80055d2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80055d4:	4b04      	ldr	r3, [pc, #16]	; (80055e8 <vTaskSuspendAll+0x18>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	3301      	adds	r3, #1
 80055da:	4a03      	ldr	r2, [pc, #12]	; (80055e8 <vTaskSuspendAll+0x18>)
 80055dc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80055de:	bf00      	nop
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr
 80055e8:	20000f3c 	.word	0x20000f3c

080055ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80055f2:	2300      	movs	r3, #0
 80055f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80055f6:	2300      	movs	r3, #0
 80055f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80055fa:	4b43      	ldr	r3, [pc, #268]	; (8005708 <xTaskResumeAll+0x11c>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d10c      	bne.n	800561c <xTaskResumeAll+0x30>
	__asm volatile
 8005602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005606:	b672      	cpsid	i
 8005608:	f383 8811 	msr	BASEPRI, r3
 800560c:	f3bf 8f6f 	isb	sy
 8005610:	f3bf 8f4f 	dsb	sy
 8005614:	b662      	cpsie	i
 8005616:	603b      	str	r3, [r7, #0]
}
 8005618:	bf00      	nop
 800561a:	e7fe      	b.n	800561a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800561c:	f001 f926 	bl	800686c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005620:	4b39      	ldr	r3, [pc, #228]	; (8005708 <xTaskResumeAll+0x11c>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	3b01      	subs	r3, #1
 8005626:	4a38      	ldr	r2, [pc, #224]	; (8005708 <xTaskResumeAll+0x11c>)
 8005628:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800562a:	4b37      	ldr	r3, [pc, #220]	; (8005708 <xTaskResumeAll+0x11c>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d162      	bne.n	80056f8 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005632:	4b36      	ldr	r3, [pc, #216]	; (800570c <xTaskResumeAll+0x120>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d05e      	beq.n	80056f8 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800563a:	e02f      	b.n	800569c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800563c:	4b34      	ldr	r3, [pc, #208]	; (8005710 <xTaskResumeAll+0x124>)
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	3318      	adds	r3, #24
 8005648:	4618      	mov	r0, r3
 800564a:	f7fe ff17 	bl	800447c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	3304      	adds	r3, #4
 8005652:	4618      	mov	r0, r3
 8005654:	f7fe ff12 	bl	800447c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800565c:	4b2d      	ldr	r3, [pc, #180]	; (8005714 <xTaskResumeAll+0x128>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	429a      	cmp	r2, r3
 8005662:	d903      	bls.n	800566c <xTaskResumeAll+0x80>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005668:	4a2a      	ldr	r2, [pc, #168]	; (8005714 <xTaskResumeAll+0x128>)
 800566a:	6013      	str	r3, [r2, #0]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005670:	4613      	mov	r3, r2
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	4413      	add	r3, r2
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	4a27      	ldr	r2, [pc, #156]	; (8005718 <xTaskResumeAll+0x12c>)
 800567a:	441a      	add	r2, r3
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	3304      	adds	r3, #4
 8005680:	4619      	mov	r1, r3
 8005682:	4610      	mov	r0, r2
 8005684:	f7fe fe9d 	bl	80043c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800568c:	4b23      	ldr	r3, [pc, #140]	; (800571c <xTaskResumeAll+0x130>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005692:	429a      	cmp	r2, r3
 8005694:	d302      	bcc.n	800569c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8005696:	4b22      	ldr	r3, [pc, #136]	; (8005720 <xTaskResumeAll+0x134>)
 8005698:	2201      	movs	r2, #1
 800569a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800569c:	4b1c      	ldr	r3, [pc, #112]	; (8005710 <xTaskResumeAll+0x124>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d1cb      	bne.n	800563c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d001      	beq.n	80056ae <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80056aa:	f000 fb6f 	bl	8005d8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80056ae:	4b1d      	ldr	r3, [pc, #116]	; (8005724 <xTaskResumeAll+0x138>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d010      	beq.n	80056dc <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80056ba:	f000 f847 	bl	800574c <xTaskIncrementTick>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d002      	beq.n	80056ca <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80056c4:	4b16      	ldr	r3, [pc, #88]	; (8005720 <xTaskResumeAll+0x134>)
 80056c6:	2201      	movs	r2, #1
 80056c8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	3b01      	subs	r3, #1
 80056ce:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1f1      	bne.n	80056ba <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80056d6:	4b13      	ldr	r3, [pc, #76]	; (8005724 <xTaskResumeAll+0x138>)
 80056d8:	2200      	movs	r2, #0
 80056da:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80056dc:	4b10      	ldr	r3, [pc, #64]	; (8005720 <xTaskResumeAll+0x134>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d009      	beq.n	80056f8 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80056e4:	2301      	movs	r3, #1
 80056e6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80056e8:	4b0f      	ldr	r3, [pc, #60]	; (8005728 <xTaskResumeAll+0x13c>)
 80056ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ee:	601a      	str	r2, [r3, #0]
 80056f0:	f3bf 8f4f 	dsb	sy
 80056f4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80056f8:	f001 f8ec 	bl	80068d4 <vPortExitCritical>

	return xAlreadyYielded;
 80056fc:	68bb      	ldr	r3, [r7, #8]
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3710      	adds	r7, #16
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	20000f3c 	.word	0x20000f3c
 800570c:	20000f14 	.word	0x20000f14
 8005710:	20000ed4 	.word	0x20000ed4
 8005714:	20000f1c 	.word	0x20000f1c
 8005718:	20000a44 	.word	0x20000a44
 800571c:	20000a40 	.word	0x20000a40
 8005720:	20000f28 	.word	0x20000f28
 8005724:	20000f24 	.word	0x20000f24
 8005728:	e000ed04 	.word	0xe000ed04

0800572c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005732:	4b05      	ldr	r3, [pc, #20]	; (8005748 <xTaskGetTickCount+0x1c>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005738:	687b      	ldr	r3, [r7, #4]
}
 800573a:	4618      	mov	r0, r3
 800573c:	370c      	adds	r7, #12
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	20000f18 	.word	0x20000f18

0800574c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b086      	sub	sp, #24
 8005750:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005752:	2300      	movs	r3, #0
 8005754:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005756:	4b50      	ldr	r3, [pc, #320]	; (8005898 <xTaskIncrementTick+0x14c>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2b00      	cmp	r3, #0
 800575c:	f040 808b 	bne.w	8005876 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005760:	4b4e      	ldr	r3, [pc, #312]	; (800589c <xTaskIncrementTick+0x150>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	3301      	adds	r3, #1
 8005766:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005768:	4a4c      	ldr	r2, [pc, #304]	; (800589c <xTaskIncrementTick+0x150>)
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d122      	bne.n	80057ba <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8005774:	4b4a      	ldr	r3, [pc, #296]	; (80058a0 <xTaskIncrementTick+0x154>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00c      	beq.n	8005798 <xTaskIncrementTick+0x4c>
	__asm volatile
 800577e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005782:	b672      	cpsid	i
 8005784:	f383 8811 	msr	BASEPRI, r3
 8005788:	f3bf 8f6f 	isb	sy
 800578c:	f3bf 8f4f 	dsb	sy
 8005790:	b662      	cpsie	i
 8005792:	603b      	str	r3, [r7, #0]
}
 8005794:	bf00      	nop
 8005796:	e7fe      	b.n	8005796 <xTaskIncrementTick+0x4a>
 8005798:	4b41      	ldr	r3, [pc, #260]	; (80058a0 <xTaskIncrementTick+0x154>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	60fb      	str	r3, [r7, #12]
 800579e:	4b41      	ldr	r3, [pc, #260]	; (80058a4 <xTaskIncrementTick+0x158>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a3f      	ldr	r2, [pc, #252]	; (80058a0 <xTaskIncrementTick+0x154>)
 80057a4:	6013      	str	r3, [r2, #0]
 80057a6:	4a3f      	ldr	r2, [pc, #252]	; (80058a4 <xTaskIncrementTick+0x158>)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6013      	str	r3, [r2, #0]
 80057ac:	4b3e      	ldr	r3, [pc, #248]	; (80058a8 <xTaskIncrementTick+0x15c>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	3301      	adds	r3, #1
 80057b2:	4a3d      	ldr	r2, [pc, #244]	; (80058a8 <xTaskIncrementTick+0x15c>)
 80057b4:	6013      	str	r3, [r2, #0]
 80057b6:	f000 fae9 	bl	8005d8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80057ba:	4b3c      	ldr	r3, [pc, #240]	; (80058ac <xTaskIncrementTick+0x160>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d349      	bcc.n	8005858 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057c4:	4b36      	ldr	r3, [pc, #216]	; (80058a0 <xTaskIncrementTick+0x154>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d104      	bne.n	80057d8 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057ce:	4b37      	ldr	r3, [pc, #220]	; (80058ac <xTaskIncrementTick+0x160>)
 80057d0:	f04f 32ff 	mov.w	r2, #4294967295
 80057d4:	601a      	str	r2, [r3, #0]
					break;
 80057d6:	e03f      	b.n	8005858 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057d8:	4b31      	ldr	r3, [pc, #196]	; (80058a0 <xTaskIncrementTick+0x154>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80057e8:	693a      	ldr	r2, [r7, #16]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d203      	bcs.n	80057f8 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80057f0:	4a2e      	ldr	r2, [pc, #184]	; (80058ac <xTaskIncrementTick+0x160>)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80057f6:	e02f      	b.n	8005858 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	3304      	adds	r3, #4
 80057fc:	4618      	mov	r0, r3
 80057fe:	f7fe fe3d 	bl	800447c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005806:	2b00      	cmp	r3, #0
 8005808:	d004      	beq.n	8005814 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	3318      	adds	r3, #24
 800580e:	4618      	mov	r0, r3
 8005810:	f7fe fe34 	bl	800447c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005818:	4b25      	ldr	r3, [pc, #148]	; (80058b0 <xTaskIncrementTick+0x164>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	429a      	cmp	r2, r3
 800581e:	d903      	bls.n	8005828 <xTaskIncrementTick+0xdc>
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005824:	4a22      	ldr	r2, [pc, #136]	; (80058b0 <xTaskIncrementTick+0x164>)
 8005826:	6013      	str	r3, [r2, #0]
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800582c:	4613      	mov	r3, r2
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	4413      	add	r3, r2
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	4a1f      	ldr	r2, [pc, #124]	; (80058b4 <xTaskIncrementTick+0x168>)
 8005836:	441a      	add	r2, r3
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	3304      	adds	r3, #4
 800583c:	4619      	mov	r1, r3
 800583e:	4610      	mov	r0, r2
 8005840:	f7fe fdbf 	bl	80043c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005848:	4b1b      	ldr	r3, [pc, #108]	; (80058b8 <xTaskIncrementTick+0x16c>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584e:	429a      	cmp	r2, r3
 8005850:	d3b8      	bcc.n	80057c4 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8005852:	2301      	movs	r3, #1
 8005854:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005856:	e7b5      	b.n	80057c4 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005858:	4b17      	ldr	r3, [pc, #92]	; (80058b8 <xTaskIncrementTick+0x16c>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800585e:	4915      	ldr	r1, [pc, #84]	; (80058b4 <xTaskIncrementTick+0x168>)
 8005860:	4613      	mov	r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4413      	add	r3, r2
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	440b      	add	r3, r1
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d907      	bls.n	8005880 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8005870:	2301      	movs	r3, #1
 8005872:	617b      	str	r3, [r7, #20]
 8005874:	e004      	b.n	8005880 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005876:	4b11      	ldr	r3, [pc, #68]	; (80058bc <xTaskIncrementTick+0x170>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	3301      	adds	r3, #1
 800587c:	4a0f      	ldr	r2, [pc, #60]	; (80058bc <xTaskIncrementTick+0x170>)
 800587e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005880:	4b0f      	ldr	r3, [pc, #60]	; (80058c0 <xTaskIncrementTick+0x174>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d001      	beq.n	800588c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8005888:	2301      	movs	r3, #1
 800588a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800588c:	697b      	ldr	r3, [r7, #20]
}
 800588e:	4618      	mov	r0, r3
 8005890:	3718      	adds	r7, #24
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	20000f3c 	.word	0x20000f3c
 800589c:	20000f18 	.word	0x20000f18
 80058a0:	20000ecc 	.word	0x20000ecc
 80058a4:	20000ed0 	.word	0x20000ed0
 80058a8:	20000f2c 	.word	0x20000f2c
 80058ac:	20000f34 	.word	0x20000f34
 80058b0:	20000f1c 	.word	0x20000f1c
 80058b4:	20000a44 	.word	0x20000a44
 80058b8:	20000a40 	.word	0x20000a40
 80058bc:	20000f24 	.word	0x20000f24
 80058c0:	20000f28 	.word	0x20000f28

080058c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80058ca:	4b2b      	ldr	r3, [pc, #172]	; (8005978 <vTaskSwitchContext+0xb4>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d003      	beq.n	80058da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80058d2:	4b2a      	ldr	r3, [pc, #168]	; (800597c <vTaskSwitchContext+0xb8>)
 80058d4:	2201      	movs	r2, #1
 80058d6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80058d8:	e048      	b.n	800596c <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 80058da:	4b28      	ldr	r3, [pc, #160]	; (800597c <vTaskSwitchContext+0xb8>)
 80058dc:	2200      	movs	r2, #0
 80058de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058e0:	4b27      	ldr	r3, [pc, #156]	; (8005980 <vTaskSwitchContext+0xbc>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	60fb      	str	r3, [r7, #12]
 80058e6:	e012      	b.n	800590e <vTaskSwitchContext+0x4a>
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10c      	bne.n	8005908 <vTaskSwitchContext+0x44>
	__asm volatile
 80058ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f2:	b672      	cpsid	i
 80058f4:	f383 8811 	msr	BASEPRI, r3
 80058f8:	f3bf 8f6f 	isb	sy
 80058fc:	f3bf 8f4f 	dsb	sy
 8005900:	b662      	cpsie	i
 8005902:	607b      	str	r3, [r7, #4]
}
 8005904:	bf00      	nop
 8005906:	e7fe      	b.n	8005906 <vTaskSwitchContext+0x42>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	3b01      	subs	r3, #1
 800590c:	60fb      	str	r3, [r7, #12]
 800590e:	491d      	ldr	r1, [pc, #116]	; (8005984 <vTaskSwitchContext+0xc0>)
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	4613      	mov	r3, r2
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	4413      	add	r3, r2
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	440b      	add	r3, r1
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d0e2      	beq.n	80058e8 <vTaskSwitchContext+0x24>
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	4613      	mov	r3, r2
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	4413      	add	r3, r2
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	4a15      	ldr	r2, [pc, #84]	; (8005984 <vTaskSwitchContext+0xc0>)
 800592e:	4413      	add	r3, r2
 8005930:	60bb      	str	r3, [r7, #8]
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	685a      	ldr	r2, [r3, #4]
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	605a      	str	r2, [r3, #4]
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	685a      	ldr	r2, [r3, #4]
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	3308      	adds	r3, #8
 8005944:	429a      	cmp	r2, r3
 8005946:	d104      	bne.n	8005952 <vTaskSwitchContext+0x8e>
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	685a      	ldr	r2, [r3, #4]
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	605a      	str	r2, [r3, #4]
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	4a0b      	ldr	r2, [pc, #44]	; (8005988 <vTaskSwitchContext+0xc4>)
 800595a:	6013      	str	r3, [r2, #0]
 800595c:	4a08      	ldr	r2, [pc, #32]	; (8005980 <vTaskSwitchContext+0xbc>)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005962:	4b09      	ldr	r3, [pc, #36]	; (8005988 <vTaskSwitchContext+0xc4>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	3354      	adds	r3, #84	; 0x54
 8005968:	4a08      	ldr	r2, [pc, #32]	; (800598c <vTaskSwitchContext+0xc8>)
 800596a:	6013      	str	r3, [r2, #0]
}
 800596c:	bf00      	nop
 800596e:	3714      	adds	r7, #20
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr
 8005978:	20000f3c 	.word	0x20000f3c
 800597c:	20000f28 	.word	0x20000f28
 8005980:	20000f1c 	.word	0x20000f1c
 8005984:	20000a44 	.word	0x20000a44
 8005988:	20000a40 	.word	0x20000a40
 800598c:	20000014 	.word	0x20000014

08005990 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d10c      	bne.n	80059ba <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80059a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a4:	b672      	cpsid	i
 80059a6:	f383 8811 	msr	BASEPRI, r3
 80059aa:	f3bf 8f6f 	isb	sy
 80059ae:	f3bf 8f4f 	dsb	sy
 80059b2:	b662      	cpsie	i
 80059b4:	60fb      	str	r3, [r7, #12]
}
 80059b6:	bf00      	nop
 80059b8:	e7fe      	b.n	80059b8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80059ba:	4b07      	ldr	r3, [pc, #28]	; (80059d8 <vTaskPlaceOnEventList+0x48>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	3318      	adds	r3, #24
 80059c0:	4619      	mov	r1, r3
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f7fe fd21 	bl	800440a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80059c8:	2101      	movs	r1, #1
 80059ca:	6838      	ldr	r0, [r7, #0]
 80059cc:	f000 fa8e 	bl	8005eec <prvAddCurrentTaskToDelayedList>
}
 80059d0:	bf00      	nop
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	20000a40 	.word	0x20000a40

080059dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b086      	sub	sp, #24
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d10c      	bne.n	8005a08 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 80059ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f2:	b672      	cpsid	i
 80059f4:	f383 8811 	msr	BASEPRI, r3
 80059f8:	f3bf 8f6f 	isb	sy
 80059fc:	f3bf 8f4f 	dsb	sy
 8005a00:	b662      	cpsie	i
 8005a02:	617b      	str	r3, [r7, #20]
}
 8005a04:	bf00      	nop
 8005a06:	e7fe      	b.n	8005a06 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a08:	4b0a      	ldr	r3, [pc, #40]	; (8005a34 <vTaskPlaceOnEventListRestricted+0x58>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	3318      	adds	r3, #24
 8005a0e:	4619      	mov	r1, r3
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f7fe fcd6 	bl	80043c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d002      	beq.n	8005a22 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8005a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8005a20:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005a22:	6879      	ldr	r1, [r7, #4]
 8005a24:	68b8      	ldr	r0, [r7, #8]
 8005a26:	f000 fa61 	bl	8005eec <prvAddCurrentTaskToDelayedList>
	}
 8005a2a:	bf00      	nop
 8005a2c:	3718      	adds	r7, #24
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
 8005a32:	bf00      	nop
 8005a34:	20000a40 	.word	0x20000a40

08005a38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b086      	sub	sp, #24
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d10c      	bne.n	8005a68 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8005a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a52:	b672      	cpsid	i
 8005a54:	f383 8811 	msr	BASEPRI, r3
 8005a58:	f3bf 8f6f 	isb	sy
 8005a5c:	f3bf 8f4f 	dsb	sy
 8005a60:	b662      	cpsie	i
 8005a62:	60fb      	str	r3, [r7, #12]
}
 8005a64:	bf00      	nop
 8005a66:	e7fe      	b.n	8005a66 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	3318      	adds	r3, #24
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f7fe fd05 	bl	800447c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a72:	4b1e      	ldr	r3, [pc, #120]	; (8005aec <xTaskRemoveFromEventList+0xb4>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d11d      	bne.n	8005ab6 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	3304      	adds	r3, #4
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7fe fcfc 	bl	800447c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a88:	4b19      	ldr	r3, [pc, #100]	; (8005af0 <xTaskRemoveFromEventList+0xb8>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d903      	bls.n	8005a98 <xTaskRemoveFromEventList+0x60>
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a94:	4a16      	ldr	r2, [pc, #88]	; (8005af0 <xTaskRemoveFromEventList+0xb8>)
 8005a96:	6013      	str	r3, [r2, #0]
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	4413      	add	r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	4a13      	ldr	r2, [pc, #76]	; (8005af4 <xTaskRemoveFromEventList+0xbc>)
 8005aa6:	441a      	add	r2, r3
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	3304      	adds	r3, #4
 8005aac:	4619      	mov	r1, r3
 8005aae:	4610      	mov	r0, r2
 8005ab0:	f7fe fc87 	bl	80043c2 <vListInsertEnd>
 8005ab4:	e005      	b.n	8005ac2 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	3318      	adds	r3, #24
 8005aba:	4619      	mov	r1, r3
 8005abc:	480e      	ldr	r0, [pc, #56]	; (8005af8 <xTaskRemoveFromEventList+0xc0>)
 8005abe:	f7fe fc80 	bl	80043c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ac6:	4b0d      	ldr	r3, [pc, #52]	; (8005afc <xTaskRemoveFromEventList+0xc4>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d905      	bls.n	8005adc <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005ad4:	4b0a      	ldr	r3, [pc, #40]	; (8005b00 <xTaskRemoveFromEventList+0xc8>)
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	601a      	str	r2, [r3, #0]
 8005ada:	e001      	b.n	8005ae0 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8005adc:	2300      	movs	r3, #0
 8005ade:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005ae0:	697b      	ldr	r3, [r7, #20]
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3718      	adds	r7, #24
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	20000f3c 	.word	0x20000f3c
 8005af0:	20000f1c 	.word	0x20000f1c
 8005af4:	20000a44 	.word	0x20000a44
 8005af8:	20000ed4 	.word	0x20000ed4
 8005afc:	20000a40 	.word	0x20000a40
 8005b00:	20000f28 	.word	0x20000f28

08005b04 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005b0c:	4b06      	ldr	r3, [pc, #24]	; (8005b28 <vTaskInternalSetTimeOutState+0x24>)
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005b14:	4b05      	ldr	r3, [pc, #20]	; (8005b2c <vTaskInternalSetTimeOutState+0x28>)
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	605a      	str	r2, [r3, #4]
}
 8005b1c:	bf00      	nop
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr
 8005b28:	20000f2c 	.word	0x20000f2c
 8005b2c:	20000f18 	.word	0x20000f18

08005b30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b088      	sub	sp, #32
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d10c      	bne.n	8005b5a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8005b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b44:	b672      	cpsid	i
 8005b46:	f383 8811 	msr	BASEPRI, r3
 8005b4a:	f3bf 8f6f 	isb	sy
 8005b4e:	f3bf 8f4f 	dsb	sy
 8005b52:	b662      	cpsie	i
 8005b54:	613b      	str	r3, [r7, #16]
}
 8005b56:	bf00      	nop
 8005b58:	e7fe      	b.n	8005b58 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d10c      	bne.n	8005b7a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8005b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b64:	b672      	cpsid	i
 8005b66:	f383 8811 	msr	BASEPRI, r3
 8005b6a:	f3bf 8f6f 	isb	sy
 8005b6e:	f3bf 8f4f 	dsb	sy
 8005b72:	b662      	cpsie	i
 8005b74:	60fb      	str	r3, [r7, #12]
}
 8005b76:	bf00      	nop
 8005b78:	e7fe      	b.n	8005b78 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8005b7a:	f000 fe77 	bl	800686c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005b7e:	4b1d      	ldr	r3, [pc, #116]	; (8005bf4 <xTaskCheckForTimeOut+0xc4>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	69ba      	ldr	r2, [r7, #24]
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b96:	d102      	bne.n	8005b9e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	61fb      	str	r3, [r7, #28]
 8005b9c:	e023      	b.n	8005be6 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	4b15      	ldr	r3, [pc, #84]	; (8005bf8 <xTaskCheckForTimeOut+0xc8>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d007      	beq.n	8005bba <xTaskCheckForTimeOut+0x8a>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	69ba      	ldr	r2, [r7, #24]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d302      	bcc.n	8005bba <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	61fb      	str	r3, [r7, #28]
 8005bb8:	e015      	b.n	8005be6 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d20b      	bcs.n	8005bdc <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	1ad2      	subs	r2, r2, r3
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f7ff ff97 	bl	8005b04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	61fb      	str	r3, [r7, #28]
 8005bda:	e004      	b.n	8005be6 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	2200      	movs	r2, #0
 8005be0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005be2:	2301      	movs	r3, #1
 8005be4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005be6:	f000 fe75 	bl	80068d4 <vPortExitCritical>

	return xReturn;
 8005bea:	69fb      	ldr	r3, [r7, #28]
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3720      	adds	r7, #32
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	20000f18 	.word	0x20000f18
 8005bf8:	20000f2c 	.word	0x20000f2c

08005bfc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005c00:	4b03      	ldr	r3, [pc, #12]	; (8005c10 <vTaskMissedYield+0x14>)
 8005c02:	2201      	movs	r2, #1
 8005c04:	601a      	str	r2, [r3, #0]
}
 8005c06:	bf00      	nop
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr
 8005c10:	20000f28 	.word	0x20000f28

08005c14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005c1c:	f000 f852 	bl	8005cc4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005c20:	4b06      	ldr	r3, [pc, #24]	; (8005c3c <prvIdleTask+0x28>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d9f9      	bls.n	8005c1c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005c28:	4b05      	ldr	r3, [pc, #20]	; (8005c40 <prvIdleTask+0x2c>)
 8005c2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c2e:	601a      	str	r2, [r3, #0]
 8005c30:	f3bf 8f4f 	dsb	sy
 8005c34:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005c38:	e7f0      	b.n	8005c1c <prvIdleTask+0x8>
 8005c3a:	bf00      	nop
 8005c3c:	20000a44 	.word	0x20000a44
 8005c40:	e000ed04 	.word	0xe000ed04

08005c44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b082      	sub	sp, #8
 8005c48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	607b      	str	r3, [r7, #4]
 8005c4e:	e00c      	b.n	8005c6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	4613      	mov	r3, r2
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	4413      	add	r3, r2
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	4a12      	ldr	r2, [pc, #72]	; (8005ca4 <prvInitialiseTaskLists+0x60>)
 8005c5c:	4413      	add	r3, r2
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7fe fb82 	bl	8004368 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	3301      	adds	r3, #1
 8005c68:	607b      	str	r3, [r7, #4]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2b37      	cmp	r3, #55	; 0x37
 8005c6e:	d9ef      	bls.n	8005c50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005c70:	480d      	ldr	r0, [pc, #52]	; (8005ca8 <prvInitialiseTaskLists+0x64>)
 8005c72:	f7fe fb79 	bl	8004368 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005c76:	480d      	ldr	r0, [pc, #52]	; (8005cac <prvInitialiseTaskLists+0x68>)
 8005c78:	f7fe fb76 	bl	8004368 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005c7c:	480c      	ldr	r0, [pc, #48]	; (8005cb0 <prvInitialiseTaskLists+0x6c>)
 8005c7e:	f7fe fb73 	bl	8004368 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005c82:	480c      	ldr	r0, [pc, #48]	; (8005cb4 <prvInitialiseTaskLists+0x70>)
 8005c84:	f7fe fb70 	bl	8004368 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005c88:	480b      	ldr	r0, [pc, #44]	; (8005cb8 <prvInitialiseTaskLists+0x74>)
 8005c8a:	f7fe fb6d 	bl	8004368 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005c8e:	4b0b      	ldr	r3, [pc, #44]	; (8005cbc <prvInitialiseTaskLists+0x78>)
 8005c90:	4a05      	ldr	r2, [pc, #20]	; (8005ca8 <prvInitialiseTaskLists+0x64>)
 8005c92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005c94:	4b0a      	ldr	r3, [pc, #40]	; (8005cc0 <prvInitialiseTaskLists+0x7c>)
 8005c96:	4a05      	ldr	r2, [pc, #20]	; (8005cac <prvInitialiseTaskLists+0x68>)
 8005c98:	601a      	str	r2, [r3, #0]
}
 8005c9a:	bf00      	nop
 8005c9c:	3708      	adds	r7, #8
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	20000a44 	.word	0x20000a44
 8005ca8:	20000ea4 	.word	0x20000ea4
 8005cac:	20000eb8 	.word	0x20000eb8
 8005cb0:	20000ed4 	.word	0x20000ed4
 8005cb4:	20000ee8 	.word	0x20000ee8
 8005cb8:	20000f00 	.word	0x20000f00
 8005cbc:	20000ecc 	.word	0x20000ecc
 8005cc0:	20000ed0 	.word	0x20000ed0

08005cc4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005cca:	e019      	b.n	8005d00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005ccc:	f000 fdce 	bl	800686c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cd0:	4b10      	ldr	r3, [pc, #64]	; (8005d14 <prvCheckTasksWaitingTermination+0x50>)
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	3304      	adds	r3, #4
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f7fe fbcd 	bl	800447c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005ce2:	4b0d      	ldr	r3, [pc, #52]	; (8005d18 <prvCheckTasksWaitingTermination+0x54>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	4a0b      	ldr	r2, [pc, #44]	; (8005d18 <prvCheckTasksWaitingTermination+0x54>)
 8005cea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005cec:	4b0b      	ldr	r3, [pc, #44]	; (8005d1c <prvCheckTasksWaitingTermination+0x58>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	4a0a      	ldr	r2, [pc, #40]	; (8005d1c <prvCheckTasksWaitingTermination+0x58>)
 8005cf4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005cf6:	f000 fded 	bl	80068d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 f810 	bl	8005d20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d00:	4b06      	ldr	r3, [pc, #24]	; (8005d1c <prvCheckTasksWaitingTermination+0x58>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d1e1      	bne.n	8005ccc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005d08:	bf00      	nop
 8005d0a:	bf00      	nop
 8005d0c:	3708      	adds	r7, #8
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	20000ee8 	.word	0x20000ee8
 8005d18:	20000f14 	.word	0x20000f14
 8005d1c:	20000efc 	.word	0x20000efc

08005d20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	3354      	adds	r3, #84	; 0x54
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f001 f8f7 	bl	8006f20 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d108      	bne.n	8005d4e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d40:	4618      	mov	r0, r3
 8005d42:	f000 ff89 	bl	8006c58 <vPortFree>
				vPortFree( pxTCB );
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 ff86 	bl	8006c58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005d4c:	e01a      	b.n	8005d84 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d103      	bne.n	8005d60 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 ff7d 	bl	8006c58 <vPortFree>
	}
 8005d5e:	e011      	b.n	8005d84 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d00c      	beq.n	8005d84 <prvDeleteTCB+0x64>
	__asm volatile
 8005d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d6e:	b672      	cpsid	i
 8005d70:	f383 8811 	msr	BASEPRI, r3
 8005d74:	f3bf 8f6f 	isb	sy
 8005d78:	f3bf 8f4f 	dsb	sy
 8005d7c:	b662      	cpsie	i
 8005d7e:	60fb      	str	r3, [r7, #12]
}
 8005d80:	bf00      	nop
 8005d82:	e7fe      	b.n	8005d82 <prvDeleteTCB+0x62>
	}
 8005d84:	bf00      	nop
 8005d86:	3710      	adds	r7, #16
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d92:	4b0c      	ldr	r3, [pc, #48]	; (8005dc4 <prvResetNextTaskUnblockTime+0x38>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d104      	bne.n	8005da6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005d9c:	4b0a      	ldr	r3, [pc, #40]	; (8005dc8 <prvResetNextTaskUnblockTime+0x3c>)
 8005d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8005da2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005da4:	e008      	b.n	8005db8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005da6:	4b07      	ldr	r3, [pc, #28]	; (8005dc4 <prvResetNextTaskUnblockTime+0x38>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	4a04      	ldr	r2, [pc, #16]	; (8005dc8 <prvResetNextTaskUnblockTime+0x3c>)
 8005db6:	6013      	str	r3, [r2, #0]
}
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr
 8005dc4:	20000ecc 	.word	0x20000ecc
 8005dc8:	20000f34 	.word	0x20000f34

08005dcc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005dd2:	4b0b      	ldr	r3, [pc, #44]	; (8005e00 <xTaskGetSchedulerState+0x34>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d102      	bne.n	8005de0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	607b      	str	r3, [r7, #4]
 8005dde:	e008      	b.n	8005df2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005de0:	4b08      	ldr	r3, [pc, #32]	; (8005e04 <xTaskGetSchedulerState+0x38>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d102      	bne.n	8005dee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005de8:	2302      	movs	r3, #2
 8005dea:	607b      	str	r3, [r7, #4]
 8005dec:	e001      	b.n	8005df2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005dee:	2300      	movs	r3, #0
 8005df0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005df2:	687b      	ldr	r3, [r7, #4]
	}
 8005df4:	4618      	mov	r0, r3
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr
 8005e00:	20000f20 	.word	0x20000f20
 8005e04:	20000f3c 	.word	0x20000f3c

08005e08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b086      	sub	sp, #24
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005e14:	2300      	movs	r3, #0
 8005e16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d05a      	beq.n	8005ed4 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005e1e:	4b30      	ldr	r3, [pc, #192]	; (8005ee0 <xTaskPriorityDisinherit+0xd8>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	693a      	ldr	r2, [r7, #16]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d00c      	beq.n	8005e42 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8005e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e2c:	b672      	cpsid	i
 8005e2e:	f383 8811 	msr	BASEPRI, r3
 8005e32:	f3bf 8f6f 	isb	sy
 8005e36:	f3bf 8f4f 	dsb	sy
 8005e3a:	b662      	cpsie	i
 8005e3c:	60fb      	str	r3, [r7, #12]
}
 8005e3e:	bf00      	nop
 8005e40:	e7fe      	b.n	8005e40 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d10c      	bne.n	8005e64 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8005e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4e:	b672      	cpsid	i
 8005e50:	f383 8811 	msr	BASEPRI, r3
 8005e54:	f3bf 8f6f 	isb	sy
 8005e58:	f3bf 8f4f 	dsb	sy
 8005e5c:	b662      	cpsie	i
 8005e5e:	60bb      	str	r3, [r7, #8]
}
 8005e60:	bf00      	nop
 8005e62:	e7fe      	b.n	8005e62 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e68:	1e5a      	subs	r2, r3, #1
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d02c      	beq.n	8005ed4 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d128      	bne.n	8005ed4 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	3304      	adds	r3, #4
 8005e86:	4618      	mov	r0, r3
 8005e88:	f7fe faf8 	bl	800447c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e98:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ea4:	4b0f      	ldr	r3, [pc, #60]	; (8005ee4 <xTaskPriorityDisinherit+0xdc>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d903      	bls.n	8005eb4 <xTaskPriorityDisinherit+0xac>
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb0:	4a0c      	ldr	r2, [pc, #48]	; (8005ee4 <xTaskPriorityDisinherit+0xdc>)
 8005eb2:	6013      	str	r3, [r2, #0]
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eb8:	4613      	mov	r3, r2
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	4413      	add	r3, r2
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	4a09      	ldr	r2, [pc, #36]	; (8005ee8 <xTaskPriorityDisinherit+0xe0>)
 8005ec2:	441a      	add	r2, r3
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	3304      	adds	r3, #4
 8005ec8:	4619      	mov	r1, r3
 8005eca:	4610      	mov	r0, r2
 8005ecc:	f7fe fa79 	bl	80043c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005ed4:	697b      	ldr	r3, [r7, #20]
	}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3718      	adds	r7, #24
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	20000a40 	.word	0x20000a40
 8005ee4:	20000f1c 	.word	0x20000f1c
 8005ee8:	20000a44 	.word	0x20000a44

08005eec <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005ef6:	4b21      	ldr	r3, [pc, #132]	; (8005f7c <prvAddCurrentTaskToDelayedList+0x90>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005efc:	4b20      	ldr	r3, [pc, #128]	; (8005f80 <prvAddCurrentTaskToDelayedList+0x94>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	3304      	adds	r3, #4
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7fe faba 	bl	800447c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f0e:	d10a      	bne.n	8005f26 <prvAddCurrentTaskToDelayedList+0x3a>
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d007      	beq.n	8005f26 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f16:	4b1a      	ldr	r3, [pc, #104]	; (8005f80 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	3304      	adds	r3, #4
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	4819      	ldr	r0, [pc, #100]	; (8005f84 <prvAddCurrentTaskToDelayedList+0x98>)
 8005f20:	f7fe fa4f 	bl	80043c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005f24:	e026      	b.n	8005f74 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005f26:	68fa      	ldr	r2, [r7, #12]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f2e:	4b14      	ldr	r3, [pc, #80]	; (8005f80 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68ba      	ldr	r2, [r7, #8]
 8005f34:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005f36:	68ba      	ldr	r2, [r7, #8]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d209      	bcs.n	8005f52 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f3e:	4b12      	ldr	r3, [pc, #72]	; (8005f88 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	4b0f      	ldr	r3, [pc, #60]	; (8005f80 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	3304      	adds	r3, #4
 8005f48:	4619      	mov	r1, r3
 8005f4a:	4610      	mov	r0, r2
 8005f4c:	f7fe fa5d 	bl	800440a <vListInsert>
}
 8005f50:	e010      	b.n	8005f74 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f52:	4b0e      	ldr	r3, [pc, #56]	; (8005f8c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	4b0a      	ldr	r3, [pc, #40]	; (8005f80 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	3304      	adds	r3, #4
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	4610      	mov	r0, r2
 8005f60:	f7fe fa53 	bl	800440a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f64:	4b0a      	ldr	r3, [pc, #40]	; (8005f90 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68ba      	ldr	r2, [r7, #8]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d202      	bcs.n	8005f74 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005f6e:	4a08      	ldr	r2, [pc, #32]	; (8005f90 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	6013      	str	r3, [r2, #0]
}
 8005f74:	bf00      	nop
 8005f76:	3710      	adds	r7, #16
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	20000f18 	.word	0x20000f18
 8005f80:	20000a40 	.word	0x20000a40
 8005f84:	20000f00 	.word	0x20000f00
 8005f88:	20000ed0 	.word	0x20000ed0
 8005f8c:	20000ecc 	.word	0x20000ecc
 8005f90:	20000f34 	.word	0x20000f34

08005f94 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b08a      	sub	sp, #40	; 0x28
 8005f98:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005f9e:	f000 fb15 	bl	80065cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005fa2:	4b1d      	ldr	r3, [pc, #116]	; (8006018 <xTimerCreateTimerTask+0x84>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d021      	beq.n	8005fee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005faa:	2300      	movs	r3, #0
 8005fac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005fb2:	1d3a      	adds	r2, r7, #4
 8005fb4:	f107 0108 	add.w	r1, r7, #8
 8005fb8:	f107 030c 	add.w	r3, r7, #12
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f7fe f9b9 	bl	8004334 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005fc2:	6879      	ldr	r1, [r7, #4]
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	9202      	str	r2, [sp, #8]
 8005fca:	9301      	str	r3, [sp, #4]
 8005fcc:	2302      	movs	r3, #2
 8005fce:	9300      	str	r3, [sp, #0]
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	460a      	mov	r2, r1
 8005fd4:	4911      	ldr	r1, [pc, #68]	; (800601c <xTimerCreateTimerTask+0x88>)
 8005fd6:	4812      	ldr	r0, [pc, #72]	; (8006020 <xTimerCreateTimerTask+0x8c>)
 8005fd8:	f7fe ff84 	bl	8004ee4 <xTaskCreateStatic>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	4a11      	ldr	r2, [pc, #68]	; (8006024 <xTimerCreateTimerTask+0x90>)
 8005fe0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005fe2:	4b10      	ldr	r3, [pc, #64]	; (8006024 <xTimerCreateTimerTask+0x90>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d001      	beq.n	8005fee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005fea:	2301      	movs	r3, #1
 8005fec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d10c      	bne.n	800600e <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8005ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff8:	b672      	cpsid	i
 8005ffa:	f383 8811 	msr	BASEPRI, r3
 8005ffe:	f3bf 8f6f 	isb	sy
 8006002:	f3bf 8f4f 	dsb	sy
 8006006:	b662      	cpsie	i
 8006008:	613b      	str	r3, [r7, #16]
}
 800600a:	bf00      	nop
 800600c:	e7fe      	b.n	800600c <xTimerCreateTimerTask+0x78>
	return xReturn;
 800600e:	697b      	ldr	r3, [r7, #20]
}
 8006010:	4618      	mov	r0, r3
 8006012:	3718      	adds	r7, #24
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	20000f70 	.word	0x20000f70
 800601c:	080070c8 	.word	0x080070c8
 8006020:	08006165 	.word	0x08006165
 8006024:	20000f74 	.word	0x20000f74

08006028 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b08a      	sub	sp, #40	; 0x28
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]
 8006034:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006036:	2300      	movs	r3, #0
 8006038:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d10c      	bne.n	800605a <xTimerGenericCommand+0x32>
	__asm volatile
 8006040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006044:	b672      	cpsid	i
 8006046:	f383 8811 	msr	BASEPRI, r3
 800604a:	f3bf 8f6f 	isb	sy
 800604e:	f3bf 8f4f 	dsb	sy
 8006052:	b662      	cpsie	i
 8006054:	623b      	str	r3, [r7, #32]
}
 8006056:	bf00      	nop
 8006058:	e7fe      	b.n	8006058 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800605a:	4b1a      	ldr	r3, [pc, #104]	; (80060c4 <xTimerGenericCommand+0x9c>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d02a      	beq.n	80060b8 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	2b05      	cmp	r3, #5
 8006072:	dc18      	bgt.n	80060a6 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006074:	f7ff feaa 	bl	8005dcc <xTaskGetSchedulerState>
 8006078:	4603      	mov	r3, r0
 800607a:	2b02      	cmp	r3, #2
 800607c:	d109      	bne.n	8006092 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800607e:	4b11      	ldr	r3, [pc, #68]	; (80060c4 <xTimerGenericCommand+0x9c>)
 8006080:	6818      	ldr	r0, [r3, #0]
 8006082:	f107 0110 	add.w	r1, r7, #16
 8006086:	2300      	movs	r3, #0
 8006088:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800608a:	f7fe fb31 	bl	80046f0 <xQueueGenericSend>
 800608e:	6278      	str	r0, [r7, #36]	; 0x24
 8006090:	e012      	b.n	80060b8 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006092:	4b0c      	ldr	r3, [pc, #48]	; (80060c4 <xTimerGenericCommand+0x9c>)
 8006094:	6818      	ldr	r0, [r3, #0]
 8006096:	f107 0110 	add.w	r1, r7, #16
 800609a:	2300      	movs	r3, #0
 800609c:	2200      	movs	r2, #0
 800609e:	f7fe fb27 	bl	80046f0 <xQueueGenericSend>
 80060a2:	6278      	str	r0, [r7, #36]	; 0x24
 80060a4:	e008      	b.n	80060b8 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80060a6:	4b07      	ldr	r3, [pc, #28]	; (80060c4 <xTimerGenericCommand+0x9c>)
 80060a8:	6818      	ldr	r0, [r3, #0]
 80060aa:	f107 0110 	add.w	r1, r7, #16
 80060ae:	2300      	movs	r3, #0
 80060b0:	683a      	ldr	r2, [r7, #0]
 80060b2:	f7fe fc23 	bl	80048fc <xQueueGenericSendFromISR>
 80060b6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80060b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3728      	adds	r7, #40	; 0x28
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	20000f70 	.word	0x20000f70

080060c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b088      	sub	sp, #32
 80060cc:	af02      	add	r7, sp, #8
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060d2:	4b23      	ldr	r3, [pc, #140]	; (8006160 <prvProcessExpiredTimer+0x98>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	3304      	adds	r3, #4
 80060e0:	4618      	mov	r0, r3
 80060e2:	f7fe f9cb 	bl	800447c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060ec:	f003 0304 	and.w	r3, r3, #4
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d024      	beq.n	800613e <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	699a      	ldr	r2, [r3, #24]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	18d1      	adds	r1, r2, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	683a      	ldr	r2, [r7, #0]
 8006100:	6978      	ldr	r0, [r7, #20]
 8006102:	f000 f8d3 	bl	80062ac <prvInsertTimerInActiveList>
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d021      	beq.n	8006150 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800610c:	2300      	movs	r3, #0
 800610e:	9300      	str	r3, [sp, #0]
 8006110:	2300      	movs	r3, #0
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	2100      	movs	r1, #0
 8006116:	6978      	ldr	r0, [r7, #20]
 8006118:	f7ff ff86 	bl	8006028 <xTimerGenericCommand>
 800611c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d115      	bne.n	8006150 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8006124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006128:	b672      	cpsid	i
 800612a:	f383 8811 	msr	BASEPRI, r3
 800612e:	f3bf 8f6f 	isb	sy
 8006132:	f3bf 8f4f 	dsb	sy
 8006136:	b662      	cpsie	i
 8006138:	60fb      	str	r3, [r7, #12]
}
 800613a:	bf00      	nop
 800613c:	e7fe      	b.n	800613c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006144:	f023 0301 	bic.w	r3, r3, #1
 8006148:	b2da      	uxtb	r2, r3
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	6a1b      	ldr	r3, [r3, #32]
 8006154:	6978      	ldr	r0, [r7, #20]
 8006156:	4798      	blx	r3
}
 8006158:	bf00      	nop
 800615a:	3718      	adds	r7, #24
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}
 8006160:	20000f68 	.word	0x20000f68

08006164 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800616c:	f107 0308 	add.w	r3, r7, #8
 8006170:	4618      	mov	r0, r3
 8006172:	f000 f857 	bl	8006224 <prvGetNextExpireTime>
 8006176:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	4619      	mov	r1, r3
 800617c:	68f8      	ldr	r0, [r7, #12]
 800617e:	f000 f803 	bl	8006188 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006182:	f000 f8d5 	bl	8006330 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006186:	e7f1      	b.n	800616c <prvTimerTask+0x8>

08006188 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006192:	f7ff fa1d 	bl	80055d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006196:	f107 0308 	add.w	r3, r7, #8
 800619a:	4618      	mov	r0, r3
 800619c:	f000 f866 	bl	800626c <prvSampleTimeNow>
 80061a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d130      	bne.n	800620a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d10a      	bne.n	80061c4 <prvProcessTimerOrBlockTask+0x3c>
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d806      	bhi.n	80061c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80061b6:	f7ff fa19 	bl	80055ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80061ba:	68f9      	ldr	r1, [r7, #12]
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f7ff ff83 	bl	80060c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80061c2:	e024      	b.n	800620e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d008      	beq.n	80061dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80061ca:	4b13      	ldr	r3, [pc, #76]	; (8006218 <prvProcessTimerOrBlockTask+0x90>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d101      	bne.n	80061d8 <prvProcessTimerOrBlockTask+0x50>
 80061d4:	2301      	movs	r3, #1
 80061d6:	e000      	b.n	80061da <prvProcessTimerOrBlockTask+0x52>
 80061d8:	2300      	movs	r3, #0
 80061da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80061dc:	4b0f      	ldr	r3, [pc, #60]	; (800621c <prvProcessTimerOrBlockTask+0x94>)
 80061de:	6818      	ldr	r0, [r3, #0]
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	683a      	ldr	r2, [r7, #0]
 80061e8:	4619      	mov	r1, r3
 80061ea:	f7fe fe47 	bl	8004e7c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80061ee:	f7ff f9fd 	bl	80055ec <xTaskResumeAll>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d10a      	bne.n	800620e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80061f8:	4b09      	ldr	r3, [pc, #36]	; (8006220 <prvProcessTimerOrBlockTask+0x98>)
 80061fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061fe:	601a      	str	r2, [r3, #0]
 8006200:	f3bf 8f4f 	dsb	sy
 8006204:	f3bf 8f6f 	isb	sy
}
 8006208:	e001      	b.n	800620e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800620a:	f7ff f9ef 	bl	80055ec <xTaskResumeAll>
}
 800620e:	bf00      	nop
 8006210:	3710      	adds	r7, #16
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	20000f6c 	.word	0x20000f6c
 800621c:	20000f70 	.word	0x20000f70
 8006220:	e000ed04 	.word	0xe000ed04

08006224 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800622c:	4b0e      	ldr	r3, [pc, #56]	; (8006268 <prvGetNextExpireTime+0x44>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d101      	bne.n	800623a <prvGetNextExpireTime+0x16>
 8006236:	2201      	movs	r2, #1
 8006238:	e000      	b.n	800623c <prvGetNextExpireTime+0x18>
 800623a:	2200      	movs	r2, #0
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d105      	bne.n	8006254 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006248:	4b07      	ldr	r3, [pc, #28]	; (8006268 <prvGetNextExpireTime+0x44>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	60fb      	str	r3, [r7, #12]
 8006252:	e001      	b.n	8006258 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006254:	2300      	movs	r3, #0
 8006256:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006258:	68fb      	ldr	r3, [r7, #12]
}
 800625a:	4618      	mov	r0, r3
 800625c:	3714      	adds	r7, #20
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop
 8006268:	20000f68 	.word	0x20000f68

0800626c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006274:	f7ff fa5a 	bl	800572c <xTaskGetTickCount>
 8006278:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800627a:	4b0b      	ldr	r3, [pc, #44]	; (80062a8 <prvSampleTimeNow+0x3c>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	429a      	cmp	r2, r3
 8006282:	d205      	bcs.n	8006290 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006284:	f000 f93c 	bl	8006500 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	601a      	str	r2, [r3, #0]
 800628e:	e002      	b.n	8006296 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006296:	4a04      	ldr	r2, [pc, #16]	; (80062a8 <prvSampleTimeNow+0x3c>)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800629c:	68fb      	ldr	r3, [r7, #12]
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3710      	adds	r7, #16
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	20000f78 	.word	0x20000f78

080062ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b086      	sub	sp, #24
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	607a      	str	r2, [r7, #4]
 80062b8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80062ba:	2300      	movs	r3, #0
 80062bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	68ba      	ldr	r2, [r7, #8]
 80062c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80062ca:	68ba      	ldr	r2, [r7, #8]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d812      	bhi.n	80062f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	1ad2      	subs	r2, r2, r3
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	699b      	ldr	r3, [r3, #24]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d302      	bcc.n	80062e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80062e0:	2301      	movs	r3, #1
 80062e2:	617b      	str	r3, [r7, #20]
 80062e4:	e01b      	b.n	800631e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80062e6:	4b10      	ldr	r3, [pc, #64]	; (8006328 <prvInsertTimerInActiveList+0x7c>)
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	3304      	adds	r3, #4
 80062ee:	4619      	mov	r1, r3
 80062f0:	4610      	mov	r0, r2
 80062f2:	f7fe f88a 	bl	800440a <vListInsert>
 80062f6:	e012      	b.n	800631e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d206      	bcs.n	800630e <prvInsertTimerInActiveList+0x62>
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	429a      	cmp	r2, r3
 8006306:	d302      	bcc.n	800630e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006308:	2301      	movs	r3, #1
 800630a:	617b      	str	r3, [r7, #20]
 800630c:	e007      	b.n	800631e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800630e:	4b07      	ldr	r3, [pc, #28]	; (800632c <prvInsertTimerInActiveList+0x80>)
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	3304      	adds	r3, #4
 8006316:	4619      	mov	r1, r3
 8006318:	4610      	mov	r0, r2
 800631a:	f7fe f876 	bl	800440a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800631e:	697b      	ldr	r3, [r7, #20]
}
 8006320:	4618      	mov	r0, r3
 8006322:	3718      	adds	r7, #24
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	20000f6c 	.word	0x20000f6c
 800632c:	20000f68 	.word	0x20000f68

08006330 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b08e      	sub	sp, #56	; 0x38
 8006334:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006336:	e0d0      	b.n	80064da <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	da1a      	bge.n	8006374 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800633e:	1d3b      	adds	r3, r7, #4
 8006340:	3304      	adds	r3, #4
 8006342:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006346:	2b00      	cmp	r3, #0
 8006348:	d10c      	bne.n	8006364 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800634a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634e:	b672      	cpsid	i
 8006350:	f383 8811 	msr	BASEPRI, r3
 8006354:	f3bf 8f6f 	isb	sy
 8006358:	f3bf 8f4f 	dsb	sy
 800635c:	b662      	cpsie	i
 800635e:	61fb      	str	r3, [r7, #28]
}
 8006360:	bf00      	nop
 8006362:	e7fe      	b.n	8006362 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800636a:	6850      	ldr	r0, [r2, #4]
 800636c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800636e:	6892      	ldr	r2, [r2, #8]
 8006370:	4611      	mov	r1, r2
 8006372:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2b00      	cmp	r3, #0
 8006378:	f2c0 80ae 	blt.w	80064d8 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006382:	695b      	ldr	r3, [r3, #20]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d004      	beq.n	8006392 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638a:	3304      	adds	r3, #4
 800638c:	4618      	mov	r0, r3
 800638e:	f7fe f875 	bl	800447c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006392:	463b      	mov	r3, r7
 8006394:	4618      	mov	r0, r3
 8006396:	f7ff ff69 	bl	800626c <prvSampleTimeNow>
 800639a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2b09      	cmp	r3, #9
 80063a0:	f200 809b 	bhi.w	80064da <prvProcessReceivedCommands+0x1aa>
 80063a4:	a201      	add	r2, pc, #4	; (adr r2, 80063ac <prvProcessReceivedCommands+0x7c>)
 80063a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063aa:	bf00      	nop
 80063ac:	080063d5 	.word	0x080063d5
 80063b0:	080063d5 	.word	0x080063d5
 80063b4:	080063d5 	.word	0x080063d5
 80063b8:	0800644d 	.word	0x0800644d
 80063bc:	08006461 	.word	0x08006461
 80063c0:	080064af 	.word	0x080064af
 80063c4:	080063d5 	.word	0x080063d5
 80063c8:	080063d5 	.word	0x080063d5
 80063cc:	0800644d 	.word	0x0800644d
 80063d0:	08006461 	.word	0x08006461
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80063d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063da:	f043 0301 	orr.w	r3, r3, #1
 80063de:	b2da      	uxtb	r2, r3
 80063e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80063e6:	68ba      	ldr	r2, [r7, #8]
 80063e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ea:	699b      	ldr	r3, [r3, #24]
 80063ec:	18d1      	adds	r1, r2, r3
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063f4:	f7ff ff5a 	bl	80062ac <prvInsertTimerInActiveList>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d06d      	beq.n	80064da <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006400:	6a1b      	ldr	r3, [r3, #32]
 8006402:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006404:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006408:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800640c:	f003 0304 	and.w	r3, r3, #4
 8006410:	2b00      	cmp	r3, #0
 8006412:	d062      	beq.n	80064da <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006414:	68ba      	ldr	r2, [r7, #8]
 8006416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	441a      	add	r2, r3
 800641c:	2300      	movs	r3, #0
 800641e:	9300      	str	r3, [sp, #0]
 8006420:	2300      	movs	r3, #0
 8006422:	2100      	movs	r1, #0
 8006424:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006426:	f7ff fdff 	bl	8006028 <xTimerGenericCommand>
 800642a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800642c:	6a3b      	ldr	r3, [r7, #32]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d153      	bne.n	80064da <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8006432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006436:	b672      	cpsid	i
 8006438:	f383 8811 	msr	BASEPRI, r3
 800643c:	f3bf 8f6f 	isb	sy
 8006440:	f3bf 8f4f 	dsb	sy
 8006444:	b662      	cpsie	i
 8006446:	61bb      	str	r3, [r7, #24]
}
 8006448:	bf00      	nop
 800644a:	e7fe      	b.n	800644a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800644c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006452:	f023 0301 	bic.w	r3, r3, #1
 8006456:	b2da      	uxtb	r2, r3
 8006458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800645e:	e03c      	b.n	80064da <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006462:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006466:	f043 0301 	orr.w	r3, r3, #1
 800646a:	b2da      	uxtb	r2, r3
 800646c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006472:	68ba      	ldr	r2, [r7, #8]
 8006474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006476:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647a:	699b      	ldr	r3, [r3, #24]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d10c      	bne.n	800649a <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8006480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006484:	b672      	cpsid	i
 8006486:	f383 8811 	msr	BASEPRI, r3
 800648a:	f3bf 8f6f 	isb	sy
 800648e:	f3bf 8f4f 	dsb	sy
 8006492:	b662      	cpsie	i
 8006494:	617b      	str	r3, [r7, #20]
}
 8006496:	bf00      	nop
 8006498:	e7fe      	b.n	8006498 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800649a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649c:	699a      	ldr	r2, [r3, #24]
 800649e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a0:	18d1      	adds	r1, r2, r3
 80064a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064a8:	f7ff ff00 	bl	80062ac <prvInsertTimerInActiveList>
					break;
 80064ac:	e015      	b.n	80064da <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80064ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064b4:	f003 0302 	and.w	r3, r3, #2
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d103      	bne.n	80064c4 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 80064bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064be:	f000 fbcb 	bl	8006c58 <vPortFree>
 80064c2:	e00a      	b.n	80064da <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80064c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064ca:	f023 0301 	bic.w	r3, r3, #1
 80064ce:	b2da      	uxtb	r2, r3
 80064d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80064d6:	e000      	b.n	80064da <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80064d8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80064da:	4b08      	ldr	r3, [pc, #32]	; (80064fc <prvProcessReceivedCommands+0x1cc>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	1d39      	adds	r1, r7, #4
 80064e0:	2200      	movs	r2, #0
 80064e2:	4618      	mov	r0, r3
 80064e4:	f7fe faaa 	bl	8004a3c <xQueueReceive>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	f47f af24 	bne.w	8006338 <prvProcessReceivedCommands+0x8>
	}
}
 80064f0:	bf00      	nop
 80064f2:	bf00      	nop
 80064f4:	3730      	adds	r7, #48	; 0x30
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	20000f70 	.word	0x20000f70

08006500 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b088      	sub	sp, #32
 8006504:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006506:	e04a      	b.n	800659e <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006508:	4b2e      	ldr	r3, [pc, #184]	; (80065c4 <prvSwitchTimerLists+0xc4>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006512:	4b2c      	ldr	r3, [pc, #176]	; (80065c4 <prvSwitchTimerLists+0xc4>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	3304      	adds	r3, #4
 8006520:	4618      	mov	r0, r3
 8006522:	f7fd ffab 	bl	800447c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6a1b      	ldr	r3, [r3, #32]
 800652a:	68f8      	ldr	r0, [r7, #12]
 800652c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006534:	f003 0304 	and.w	r3, r3, #4
 8006538:	2b00      	cmp	r3, #0
 800653a:	d030      	beq.n	800659e <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	699b      	ldr	r3, [r3, #24]
 8006540:	693a      	ldr	r2, [r7, #16]
 8006542:	4413      	add	r3, r2
 8006544:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006546:	68ba      	ldr	r2, [r7, #8]
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	429a      	cmp	r2, r3
 800654c:	d90e      	bls.n	800656c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	68ba      	ldr	r2, [r7, #8]
 8006552:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	68fa      	ldr	r2, [r7, #12]
 8006558:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800655a:	4b1a      	ldr	r3, [pc, #104]	; (80065c4 <prvSwitchTimerLists+0xc4>)
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	3304      	adds	r3, #4
 8006562:	4619      	mov	r1, r3
 8006564:	4610      	mov	r0, r2
 8006566:	f7fd ff50 	bl	800440a <vListInsert>
 800656a:	e018      	b.n	800659e <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800656c:	2300      	movs	r3, #0
 800656e:	9300      	str	r3, [sp, #0]
 8006570:	2300      	movs	r3, #0
 8006572:	693a      	ldr	r2, [r7, #16]
 8006574:	2100      	movs	r1, #0
 8006576:	68f8      	ldr	r0, [r7, #12]
 8006578:	f7ff fd56 	bl	8006028 <xTimerGenericCommand>
 800657c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d10c      	bne.n	800659e <prvSwitchTimerLists+0x9e>
	__asm volatile
 8006584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006588:	b672      	cpsid	i
 800658a:	f383 8811 	msr	BASEPRI, r3
 800658e:	f3bf 8f6f 	isb	sy
 8006592:	f3bf 8f4f 	dsb	sy
 8006596:	b662      	cpsie	i
 8006598:	603b      	str	r3, [r7, #0]
}
 800659a:	bf00      	nop
 800659c:	e7fe      	b.n	800659c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800659e:	4b09      	ldr	r3, [pc, #36]	; (80065c4 <prvSwitchTimerLists+0xc4>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1af      	bne.n	8006508 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80065a8:	4b06      	ldr	r3, [pc, #24]	; (80065c4 <prvSwitchTimerLists+0xc4>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80065ae:	4b06      	ldr	r3, [pc, #24]	; (80065c8 <prvSwitchTimerLists+0xc8>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a04      	ldr	r2, [pc, #16]	; (80065c4 <prvSwitchTimerLists+0xc4>)
 80065b4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80065b6:	4a04      	ldr	r2, [pc, #16]	; (80065c8 <prvSwitchTimerLists+0xc8>)
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	6013      	str	r3, [r2, #0]
}
 80065bc:	bf00      	nop
 80065be:	3718      	adds	r7, #24
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}
 80065c4:	20000f68 	.word	0x20000f68
 80065c8:	20000f6c 	.word	0x20000f6c

080065cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80065d2:	f000 f94b 	bl	800686c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80065d6:	4b15      	ldr	r3, [pc, #84]	; (800662c <prvCheckForValidListAndQueue+0x60>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d120      	bne.n	8006620 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80065de:	4814      	ldr	r0, [pc, #80]	; (8006630 <prvCheckForValidListAndQueue+0x64>)
 80065e0:	f7fd fec2 	bl	8004368 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80065e4:	4813      	ldr	r0, [pc, #76]	; (8006634 <prvCheckForValidListAndQueue+0x68>)
 80065e6:	f7fd febf 	bl	8004368 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80065ea:	4b13      	ldr	r3, [pc, #76]	; (8006638 <prvCheckForValidListAndQueue+0x6c>)
 80065ec:	4a10      	ldr	r2, [pc, #64]	; (8006630 <prvCheckForValidListAndQueue+0x64>)
 80065ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80065f0:	4b12      	ldr	r3, [pc, #72]	; (800663c <prvCheckForValidListAndQueue+0x70>)
 80065f2:	4a10      	ldr	r2, [pc, #64]	; (8006634 <prvCheckForValidListAndQueue+0x68>)
 80065f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80065f6:	2300      	movs	r3, #0
 80065f8:	9300      	str	r3, [sp, #0]
 80065fa:	4b11      	ldr	r3, [pc, #68]	; (8006640 <prvCheckForValidListAndQueue+0x74>)
 80065fc:	4a11      	ldr	r2, [pc, #68]	; (8006644 <prvCheckForValidListAndQueue+0x78>)
 80065fe:	2110      	movs	r1, #16
 8006600:	200a      	movs	r0, #10
 8006602:	f7fd ffcf 	bl	80045a4 <xQueueGenericCreateStatic>
 8006606:	4603      	mov	r3, r0
 8006608:	4a08      	ldr	r2, [pc, #32]	; (800662c <prvCheckForValidListAndQueue+0x60>)
 800660a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800660c:	4b07      	ldr	r3, [pc, #28]	; (800662c <prvCheckForValidListAndQueue+0x60>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d005      	beq.n	8006620 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006614:	4b05      	ldr	r3, [pc, #20]	; (800662c <prvCheckForValidListAndQueue+0x60>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	490b      	ldr	r1, [pc, #44]	; (8006648 <prvCheckForValidListAndQueue+0x7c>)
 800661a:	4618      	mov	r0, r3
 800661c:	f7fe fc04 	bl	8004e28 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006620:	f000 f958 	bl	80068d4 <vPortExitCritical>
}
 8006624:	bf00      	nop
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	20000f70 	.word	0x20000f70
 8006630:	20000f40 	.word	0x20000f40
 8006634:	20000f54 	.word	0x20000f54
 8006638:	20000f68 	.word	0x20000f68
 800663c:	20000f6c 	.word	0x20000f6c
 8006640:	2000101c 	.word	0x2000101c
 8006644:	20000f7c 	.word	0x20000f7c
 8006648:	080070d0 	.word	0x080070d0

0800664c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	3b04      	subs	r3, #4
 800665c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006664:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	3b04      	subs	r3, #4
 800666a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	f023 0201 	bic.w	r2, r3, #1
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	3b04      	subs	r3, #4
 800667a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800667c:	4a0c      	ldr	r2, [pc, #48]	; (80066b0 <pxPortInitialiseStack+0x64>)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	3b14      	subs	r3, #20
 8006686:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	3b04      	subs	r3, #4
 8006692:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f06f 0202 	mvn.w	r2, #2
 800669a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	3b20      	subs	r3, #32
 80066a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80066a2:	68fb      	ldr	r3, [r7, #12]
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3714      	adds	r7, #20
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr
 80066b0:	080066b5 	.word	0x080066b5

080066b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80066b4:	b480      	push	{r7}
 80066b6:	b085      	sub	sp, #20
 80066b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80066ba:	2300      	movs	r3, #0
 80066bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80066be:	4b14      	ldr	r3, [pc, #80]	; (8006710 <prvTaskExitError+0x5c>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c6:	d00c      	beq.n	80066e2 <prvTaskExitError+0x2e>
	__asm volatile
 80066c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066cc:	b672      	cpsid	i
 80066ce:	f383 8811 	msr	BASEPRI, r3
 80066d2:	f3bf 8f6f 	isb	sy
 80066d6:	f3bf 8f4f 	dsb	sy
 80066da:	b662      	cpsie	i
 80066dc:	60fb      	str	r3, [r7, #12]
}
 80066de:	bf00      	nop
 80066e0:	e7fe      	b.n	80066e0 <prvTaskExitError+0x2c>
	__asm volatile
 80066e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e6:	b672      	cpsid	i
 80066e8:	f383 8811 	msr	BASEPRI, r3
 80066ec:	f3bf 8f6f 	isb	sy
 80066f0:	f3bf 8f4f 	dsb	sy
 80066f4:	b662      	cpsie	i
 80066f6:	60bb      	str	r3, [r7, #8]
}
 80066f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80066fa:	bf00      	nop
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d0fc      	beq.n	80066fc <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006702:	bf00      	nop
 8006704:	bf00      	nop
 8006706:	3714      	adds	r7, #20
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr
 8006710:	20000010 	.word	0x20000010
	...

08006720 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006720:	4b07      	ldr	r3, [pc, #28]	; (8006740 <pxCurrentTCBConst2>)
 8006722:	6819      	ldr	r1, [r3, #0]
 8006724:	6808      	ldr	r0, [r1, #0]
 8006726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800672a:	f380 8809 	msr	PSP, r0
 800672e:	f3bf 8f6f 	isb	sy
 8006732:	f04f 0000 	mov.w	r0, #0
 8006736:	f380 8811 	msr	BASEPRI, r0
 800673a:	4770      	bx	lr
 800673c:	f3af 8000 	nop.w

08006740 <pxCurrentTCBConst2>:
 8006740:	20000a40 	.word	0x20000a40
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006744:	bf00      	nop
 8006746:	bf00      	nop

08006748 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006748:	4808      	ldr	r0, [pc, #32]	; (800676c <prvPortStartFirstTask+0x24>)
 800674a:	6800      	ldr	r0, [r0, #0]
 800674c:	6800      	ldr	r0, [r0, #0]
 800674e:	f380 8808 	msr	MSP, r0
 8006752:	f04f 0000 	mov.w	r0, #0
 8006756:	f380 8814 	msr	CONTROL, r0
 800675a:	b662      	cpsie	i
 800675c:	b661      	cpsie	f
 800675e:	f3bf 8f4f 	dsb	sy
 8006762:	f3bf 8f6f 	isb	sy
 8006766:	df00      	svc	0
 8006768:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800676a:	bf00      	nop
 800676c:	e000ed08 	.word	0xe000ed08

08006770 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006776:	4b37      	ldr	r3, [pc, #220]	; (8006854 <xPortStartScheduler+0xe4>)
 8006778:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	b2db      	uxtb	r3, r3
 8006780:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	22ff      	movs	r2, #255	; 0xff
 8006786:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	b2db      	uxtb	r3, r3
 800678e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006790:	78fb      	ldrb	r3, [r7, #3]
 8006792:	b2db      	uxtb	r3, r3
 8006794:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006798:	b2da      	uxtb	r2, r3
 800679a:	4b2f      	ldr	r3, [pc, #188]	; (8006858 <xPortStartScheduler+0xe8>)
 800679c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800679e:	4b2f      	ldr	r3, [pc, #188]	; (800685c <xPortStartScheduler+0xec>)
 80067a0:	2207      	movs	r2, #7
 80067a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067a4:	e009      	b.n	80067ba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80067a6:	4b2d      	ldr	r3, [pc, #180]	; (800685c <xPortStartScheduler+0xec>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	3b01      	subs	r3, #1
 80067ac:	4a2b      	ldr	r2, [pc, #172]	; (800685c <xPortStartScheduler+0xec>)
 80067ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80067b0:	78fb      	ldrb	r3, [r7, #3]
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	005b      	lsls	r3, r3, #1
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067ba:	78fb      	ldrb	r3, [r7, #3]
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067c2:	2b80      	cmp	r3, #128	; 0x80
 80067c4:	d0ef      	beq.n	80067a6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80067c6:	4b25      	ldr	r3, [pc, #148]	; (800685c <xPortStartScheduler+0xec>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f1c3 0307 	rsb	r3, r3, #7
 80067ce:	2b04      	cmp	r3, #4
 80067d0:	d00c      	beq.n	80067ec <xPortStartScheduler+0x7c>
	__asm volatile
 80067d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d6:	b672      	cpsid	i
 80067d8:	f383 8811 	msr	BASEPRI, r3
 80067dc:	f3bf 8f6f 	isb	sy
 80067e0:	f3bf 8f4f 	dsb	sy
 80067e4:	b662      	cpsie	i
 80067e6:	60bb      	str	r3, [r7, #8]
}
 80067e8:	bf00      	nop
 80067ea:	e7fe      	b.n	80067ea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80067ec:	4b1b      	ldr	r3, [pc, #108]	; (800685c <xPortStartScheduler+0xec>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	021b      	lsls	r3, r3, #8
 80067f2:	4a1a      	ldr	r2, [pc, #104]	; (800685c <xPortStartScheduler+0xec>)
 80067f4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80067f6:	4b19      	ldr	r3, [pc, #100]	; (800685c <xPortStartScheduler+0xec>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80067fe:	4a17      	ldr	r2, [pc, #92]	; (800685c <xPortStartScheduler+0xec>)
 8006800:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	b2da      	uxtb	r2, r3
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800680a:	4b15      	ldr	r3, [pc, #84]	; (8006860 <xPortStartScheduler+0xf0>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a14      	ldr	r2, [pc, #80]	; (8006860 <xPortStartScheduler+0xf0>)
 8006810:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006814:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006816:	4b12      	ldr	r3, [pc, #72]	; (8006860 <xPortStartScheduler+0xf0>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a11      	ldr	r2, [pc, #68]	; (8006860 <xPortStartScheduler+0xf0>)
 800681c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006820:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006822:	f000 f8dd 	bl	80069e0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006826:	4b0f      	ldr	r3, [pc, #60]	; (8006864 <xPortStartScheduler+0xf4>)
 8006828:	2200      	movs	r2, #0
 800682a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800682c:	f000 f8fc 	bl	8006a28 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006830:	4b0d      	ldr	r3, [pc, #52]	; (8006868 <xPortStartScheduler+0xf8>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a0c      	ldr	r2, [pc, #48]	; (8006868 <xPortStartScheduler+0xf8>)
 8006836:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800683a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800683c:	f7ff ff84 	bl	8006748 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006840:	f7ff f840 	bl	80058c4 <vTaskSwitchContext>
	prvTaskExitError();
 8006844:	f7ff ff36 	bl	80066b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3710      	adds	r7, #16
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	e000e400 	.word	0xe000e400
 8006858:	2000106c 	.word	0x2000106c
 800685c:	20001070 	.word	0x20001070
 8006860:	e000ed20 	.word	0xe000ed20
 8006864:	20000010 	.word	0x20000010
 8006868:	e000ef34 	.word	0xe000ef34

0800686c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
	__asm volatile
 8006872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006876:	b672      	cpsid	i
 8006878:	f383 8811 	msr	BASEPRI, r3
 800687c:	f3bf 8f6f 	isb	sy
 8006880:	f3bf 8f4f 	dsb	sy
 8006884:	b662      	cpsie	i
 8006886:	607b      	str	r3, [r7, #4]
}
 8006888:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800688a:	4b10      	ldr	r3, [pc, #64]	; (80068cc <vPortEnterCritical+0x60>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	3301      	adds	r3, #1
 8006890:	4a0e      	ldr	r2, [pc, #56]	; (80068cc <vPortEnterCritical+0x60>)
 8006892:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006894:	4b0d      	ldr	r3, [pc, #52]	; (80068cc <vPortEnterCritical+0x60>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2b01      	cmp	r3, #1
 800689a:	d111      	bne.n	80068c0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800689c:	4b0c      	ldr	r3, [pc, #48]	; (80068d0 <vPortEnterCritical+0x64>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00c      	beq.n	80068c0 <vPortEnterCritical+0x54>
	__asm volatile
 80068a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068aa:	b672      	cpsid	i
 80068ac:	f383 8811 	msr	BASEPRI, r3
 80068b0:	f3bf 8f6f 	isb	sy
 80068b4:	f3bf 8f4f 	dsb	sy
 80068b8:	b662      	cpsie	i
 80068ba:	603b      	str	r3, [r7, #0]
}
 80068bc:	bf00      	nop
 80068be:	e7fe      	b.n	80068be <vPortEnterCritical+0x52>
	}
}
 80068c0:	bf00      	nop
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr
 80068cc:	20000010 	.word	0x20000010
 80068d0:	e000ed04 	.word	0xe000ed04

080068d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80068da:	4b13      	ldr	r3, [pc, #76]	; (8006928 <vPortExitCritical+0x54>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d10c      	bne.n	80068fc <vPortExitCritical+0x28>
	__asm volatile
 80068e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e6:	b672      	cpsid	i
 80068e8:	f383 8811 	msr	BASEPRI, r3
 80068ec:	f3bf 8f6f 	isb	sy
 80068f0:	f3bf 8f4f 	dsb	sy
 80068f4:	b662      	cpsie	i
 80068f6:	607b      	str	r3, [r7, #4]
}
 80068f8:	bf00      	nop
 80068fa:	e7fe      	b.n	80068fa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80068fc:	4b0a      	ldr	r3, [pc, #40]	; (8006928 <vPortExitCritical+0x54>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	3b01      	subs	r3, #1
 8006902:	4a09      	ldr	r2, [pc, #36]	; (8006928 <vPortExitCritical+0x54>)
 8006904:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006906:	4b08      	ldr	r3, [pc, #32]	; (8006928 <vPortExitCritical+0x54>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d105      	bne.n	800691a <vPortExitCritical+0x46>
 800690e:	2300      	movs	r3, #0
 8006910:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	f383 8811 	msr	BASEPRI, r3
}
 8006918:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800691a:	bf00      	nop
 800691c:	370c      	adds	r7, #12
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	20000010 	.word	0x20000010
 800692c:	00000000 	.word	0x00000000

08006930 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006930:	f3ef 8009 	mrs	r0, PSP
 8006934:	f3bf 8f6f 	isb	sy
 8006938:	4b15      	ldr	r3, [pc, #84]	; (8006990 <pxCurrentTCBConst>)
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	f01e 0f10 	tst.w	lr, #16
 8006940:	bf08      	it	eq
 8006942:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006946:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800694a:	6010      	str	r0, [r2, #0]
 800694c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006950:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006954:	b672      	cpsid	i
 8006956:	f380 8811 	msr	BASEPRI, r0
 800695a:	f3bf 8f4f 	dsb	sy
 800695e:	f3bf 8f6f 	isb	sy
 8006962:	b662      	cpsie	i
 8006964:	f7fe ffae 	bl	80058c4 <vTaskSwitchContext>
 8006968:	f04f 0000 	mov.w	r0, #0
 800696c:	f380 8811 	msr	BASEPRI, r0
 8006970:	bc09      	pop	{r0, r3}
 8006972:	6819      	ldr	r1, [r3, #0]
 8006974:	6808      	ldr	r0, [r1, #0]
 8006976:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800697a:	f01e 0f10 	tst.w	lr, #16
 800697e:	bf08      	it	eq
 8006980:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006984:	f380 8809 	msr	PSP, r0
 8006988:	f3bf 8f6f 	isb	sy
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop

08006990 <pxCurrentTCBConst>:
 8006990:	20000a40 	.word	0x20000a40
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006994:	bf00      	nop
 8006996:	bf00      	nop

08006998 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
	__asm volatile
 800699e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a2:	b672      	cpsid	i
 80069a4:	f383 8811 	msr	BASEPRI, r3
 80069a8:	f3bf 8f6f 	isb	sy
 80069ac:	f3bf 8f4f 	dsb	sy
 80069b0:	b662      	cpsie	i
 80069b2:	607b      	str	r3, [r7, #4]
}
 80069b4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80069b6:	f7fe fec9 	bl	800574c <xTaskIncrementTick>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d003      	beq.n	80069c8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80069c0:	4b06      	ldr	r3, [pc, #24]	; (80069dc <SysTick_Handler+0x44>)
 80069c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069c6:	601a      	str	r2, [r3, #0]
 80069c8:	2300      	movs	r3, #0
 80069ca:	603b      	str	r3, [r7, #0]
	__asm volatile
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	f383 8811 	msr	BASEPRI, r3
}
 80069d2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80069d4:	bf00      	nop
 80069d6:	3708      	adds	r7, #8
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	e000ed04 	.word	0xe000ed04

080069e0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80069e0:	b480      	push	{r7}
 80069e2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80069e4:	4b0b      	ldr	r3, [pc, #44]	; (8006a14 <vPortSetupTimerInterrupt+0x34>)
 80069e6:	2200      	movs	r2, #0
 80069e8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80069ea:	4b0b      	ldr	r3, [pc, #44]	; (8006a18 <vPortSetupTimerInterrupt+0x38>)
 80069ec:	2200      	movs	r2, #0
 80069ee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80069f0:	4b0a      	ldr	r3, [pc, #40]	; (8006a1c <vPortSetupTimerInterrupt+0x3c>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a0a      	ldr	r2, [pc, #40]	; (8006a20 <vPortSetupTimerInterrupt+0x40>)
 80069f6:	fba2 2303 	umull	r2, r3, r2, r3
 80069fa:	099b      	lsrs	r3, r3, #6
 80069fc:	4a09      	ldr	r2, [pc, #36]	; (8006a24 <vPortSetupTimerInterrupt+0x44>)
 80069fe:	3b01      	subs	r3, #1
 8006a00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006a02:	4b04      	ldr	r3, [pc, #16]	; (8006a14 <vPortSetupTimerInterrupt+0x34>)
 8006a04:	2207      	movs	r2, #7
 8006a06:	601a      	str	r2, [r3, #0]
}
 8006a08:	bf00      	nop
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr
 8006a12:	bf00      	nop
 8006a14:	e000e010 	.word	0xe000e010
 8006a18:	e000e018 	.word	0xe000e018
 8006a1c:	20000004 	.word	0x20000004
 8006a20:	10624dd3 	.word	0x10624dd3
 8006a24:	e000e014 	.word	0xe000e014

08006a28 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006a28:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006a38 <vPortEnableVFP+0x10>
 8006a2c:	6801      	ldr	r1, [r0, #0]
 8006a2e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006a32:	6001      	str	r1, [r0, #0]
 8006a34:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006a36:	bf00      	nop
 8006a38:	e000ed88 	.word	0xe000ed88

08006a3c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b085      	sub	sp, #20
 8006a40:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006a42:	f3ef 8305 	mrs	r3, IPSR
 8006a46:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2b0f      	cmp	r3, #15
 8006a4c:	d916      	bls.n	8006a7c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006a4e:	4a19      	ldr	r2, [pc, #100]	; (8006ab4 <vPortValidateInterruptPriority+0x78>)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	4413      	add	r3, r2
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006a58:	4b17      	ldr	r3, [pc, #92]	; (8006ab8 <vPortValidateInterruptPriority+0x7c>)
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	7afa      	ldrb	r2, [r7, #11]
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d20c      	bcs.n	8006a7c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8006a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a66:	b672      	cpsid	i
 8006a68:	f383 8811 	msr	BASEPRI, r3
 8006a6c:	f3bf 8f6f 	isb	sy
 8006a70:	f3bf 8f4f 	dsb	sy
 8006a74:	b662      	cpsie	i
 8006a76:	607b      	str	r3, [r7, #4]
}
 8006a78:	bf00      	nop
 8006a7a:	e7fe      	b.n	8006a7a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006a7c:	4b0f      	ldr	r3, [pc, #60]	; (8006abc <vPortValidateInterruptPriority+0x80>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006a84:	4b0e      	ldr	r3, [pc, #56]	; (8006ac0 <vPortValidateInterruptPriority+0x84>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d90c      	bls.n	8006aa6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8006a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a90:	b672      	cpsid	i
 8006a92:	f383 8811 	msr	BASEPRI, r3
 8006a96:	f3bf 8f6f 	isb	sy
 8006a9a:	f3bf 8f4f 	dsb	sy
 8006a9e:	b662      	cpsie	i
 8006aa0:	603b      	str	r3, [r7, #0]
}
 8006aa2:	bf00      	nop
 8006aa4:	e7fe      	b.n	8006aa4 <vPortValidateInterruptPriority+0x68>
	}
 8006aa6:	bf00      	nop
 8006aa8:	3714      	adds	r7, #20
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop
 8006ab4:	e000e3f0 	.word	0xe000e3f0
 8006ab8:	2000106c 	.word	0x2000106c
 8006abc:	e000ed0c 	.word	0xe000ed0c
 8006ac0:	20001070 	.word	0x20001070

08006ac4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b08a      	sub	sp, #40	; 0x28
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006acc:	2300      	movs	r3, #0
 8006ace:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006ad0:	f7fe fd7e 	bl	80055d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006ad4:	4b5b      	ldr	r3, [pc, #364]	; (8006c44 <pvPortMalloc+0x180>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d101      	bne.n	8006ae0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006adc:	f000 f91a 	bl	8006d14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006ae0:	4b59      	ldr	r3, [pc, #356]	; (8006c48 <pvPortMalloc+0x184>)
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	f040 8092 	bne.w	8006c12 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d01f      	beq.n	8006b34 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8006af4:	2208      	movs	r2, #8
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4413      	add	r3, r2
 8006afa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f003 0307 	and.w	r3, r3, #7
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d016      	beq.n	8006b34 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f023 0307 	bic.w	r3, r3, #7
 8006b0c:	3308      	adds	r3, #8
 8006b0e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f003 0307 	and.w	r3, r3, #7
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d00c      	beq.n	8006b34 <pvPortMalloc+0x70>
	__asm volatile
 8006b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b1e:	b672      	cpsid	i
 8006b20:	f383 8811 	msr	BASEPRI, r3
 8006b24:	f3bf 8f6f 	isb	sy
 8006b28:	f3bf 8f4f 	dsb	sy
 8006b2c:	b662      	cpsie	i
 8006b2e:	617b      	str	r3, [r7, #20]
}
 8006b30:	bf00      	nop
 8006b32:	e7fe      	b.n	8006b32 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d06b      	beq.n	8006c12 <pvPortMalloc+0x14e>
 8006b3a:	4b44      	ldr	r3, [pc, #272]	; (8006c4c <pvPortMalloc+0x188>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d866      	bhi.n	8006c12 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006b44:	4b42      	ldr	r3, [pc, #264]	; (8006c50 <pvPortMalloc+0x18c>)
 8006b46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006b48:	4b41      	ldr	r3, [pc, #260]	; (8006c50 <pvPortMalloc+0x18c>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b4e:	e004      	b.n	8006b5a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8006b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d903      	bls.n	8006b6c <pvPortMalloc+0xa8>
 8006b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d1f1      	bne.n	8006b50 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006b6c:	4b35      	ldr	r3, [pc, #212]	; (8006c44 <pvPortMalloc+0x180>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d04d      	beq.n	8006c12 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006b76:	6a3b      	ldr	r3, [r7, #32]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	2208      	movs	r2, #8
 8006b7c:	4413      	add	r3, r2
 8006b7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	6a3b      	ldr	r3, [r7, #32]
 8006b86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8a:	685a      	ldr	r2, [r3, #4]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	1ad2      	subs	r2, r2, r3
 8006b90:	2308      	movs	r3, #8
 8006b92:	005b      	lsls	r3, r3, #1
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d921      	bls.n	8006bdc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	f003 0307 	and.w	r3, r3, #7
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d00c      	beq.n	8006bc4 <pvPortMalloc+0x100>
	__asm volatile
 8006baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bae:	b672      	cpsid	i
 8006bb0:	f383 8811 	msr	BASEPRI, r3
 8006bb4:	f3bf 8f6f 	isb	sy
 8006bb8:	f3bf 8f4f 	dsb	sy
 8006bbc:	b662      	cpsie	i
 8006bbe:	613b      	str	r3, [r7, #16]
}
 8006bc0:	bf00      	nop
 8006bc2:	e7fe      	b.n	8006bc2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc6:	685a      	ldr	r2, [r3, #4]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	1ad2      	subs	r2, r2, r3
 8006bcc:	69bb      	ldr	r3, [r7, #24]
 8006bce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006bd6:	69b8      	ldr	r0, [r7, #24]
 8006bd8:	f000 f8fe 	bl	8006dd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006bdc:	4b1b      	ldr	r3, [pc, #108]	; (8006c4c <pvPortMalloc+0x188>)
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	1ad3      	subs	r3, r2, r3
 8006be6:	4a19      	ldr	r2, [pc, #100]	; (8006c4c <pvPortMalloc+0x188>)
 8006be8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006bea:	4b18      	ldr	r3, [pc, #96]	; (8006c4c <pvPortMalloc+0x188>)
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	4b19      	ldr	r3, [pc, #100]	; (8006c54 <pvPortMalloc+0x190>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d203      	bcs.n	8006bfe <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006bf6:	4b15      	ldr	r3, [pc, #84]	; (8006c4c <pvPortMalloc+0x188>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a16      	ldr	r2, [pc, #88]	; (8006c54 <pvPortMalloc+0x190>)
 8006bfc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c00:	685a      	ldr	r2, [r3, #4]
 8006c02:	4b11      	ldr	r3, [pc, #68]	; (8006c48 <pvPortMalloc+0x184>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	431a      	orrs	r2, r3
 8006c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0e:	2200      	movs	r2, #0
 8006c10:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006c12:	f7fe fceb 	bl	80055ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	f003 0307 	and.w	r3, r3, #7
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d00c      	beq.n	8006c3a <pvPortMalloc+0x176>
	__asm volatile
 8006c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c24:	b672      	cpsid	i
 8006c26:	f383 8811 	msr	BASEPRI, r3
 8006c2a:	f3bf 8f6f 	isb	sy
 8006c2e:	f3bf 8f4f 	dsb	sy
 8006c32:	b662      	cpsie	i
 8006c34:	60fb      	str	r3, [r7, #12]
}
 8006c36:	bf00      	nop
 8006c38:	e7fe      	b.n	8006c38 <pvPortMalloc+0x174>
	return pvReturn;
 8006c3a:	69fb      	ldr	r3, [r7, #28]
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3728      	adds	r7, #40	; 0x28
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	20004c7c 	.word	0x20004c7c
 8006c48:	20004c88 	.word	0x20004c88
 8006c4c:	20004c80 	.word	0x20004c80
 8006c50:	20004c74 	.word	0x20004c74
 8006c54:	20004c84 	.word	0x20004c84

08006c58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b086      	sub	sp, #24
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d04c      	beq.n	8006d04 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006c6a:	2308      	movs	r3, #8
 8006c6c:	425b      	negs	r3, r3
 8006c6e:	697a      	ldr	r2, [r7, #20]
 8006c70:	4413      	add	r3, r2
 8006c72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	685a      	ldr	r2, [r3, #4]
 8006c7c:	4b23      	ldr	r3, [pc, #140]	; (8006d0c <vPortFree+0xb4>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4013      	ands	r3, r2
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d10c      	bne.n	8006ca0 <vPortFree+0x48>
	__asm volatile
 8006c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c8a:	b672      	cpsid	i
 8006c8c:	f383 8811 	msr	BASEPRI, r3
 8006c90:	f3bf 8f6f 	isb	sy
 8006c94:	f3bf 8f4f 	dsb	sy
 8006c98:	b662      	cpsie	i
 8006c9a:	60fb      	str	r3, [r7, #12]
}
 8006c9c:	bf00      	nop
 8006c9e:	e7fe      	b.n	8006c9e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d00c      	beq.n	8006cc2 <vPortFree+0x6a>
	__asm volatile
 8006ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cac:	b672      	cpsid	i
 8006cae:	f383 8811 	msr	BASEPRI, r3
 8006cb2:	f3bf 8f6f 	isb	sy
 8006cb6:	f3bf 8f4f 	dsb	sy
 8006cba:	b662      	cpsie	i
 8006cbc:	60bb      	str	r3, [r7, #8]
}
 8006cbe:	bf00      	nop
 8006cc0:	e7fe      	b.n	8006cc0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	685a      	ldr	r2, [r3, #4]
 8006cc6:	4b11      	ldr	r3, [pc, #68]	; (8006d0c <vPortFree+0xb4>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4013      	ands	r3, r2
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d019      	beq.n	8006d04 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d115      	bne.n	8006d04 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	685a      	ldr	r2, [r3, #4]
 8006cdc:	4b0b      	ldr	r3, [pc, #44]	; (8006d0c <vPortFree+0xb4>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	43db      	mvns	r3, r3
 8006ce2:	401a      	ands	r2, r3
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006ce8:	f7fe fc72 	bl	80055d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	685a      	ldr	r2, [r3, #4]
 8006cf0:	4b07      	ldr	r3, [pc, #28]	; (8006d10 <vPortFree+0xb8>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4413      	add	r3, r2
 8006cf6:	4a06      	ldr	r2, [pc, #24]	; (8006d10 <vPortFree+0xb8>)
 8006cf8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006cfa:	6938      	ldr	r0, [r7, #16]
 8006cfc:	f000 f86c 	bl	8006dd8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006d00:	f7fe fc74 	bl	80055ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006d04:	bf00      	nop
 8006d06:	3718      	adds	r7, #24
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}
 8006d0c:	20004c88 	.word	0x20004c88
 8006d10:	20004c80 	.word	0x20004c80

08006d14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006d14:	b480      	push	{r7}
 8006d16:	b085      	sub	sp, #20
 8006d18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006d1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006d1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006d20:	4b27      	ldr	r3, [pc, #156]	; (8006dc0 <prvHeapInit+0xac>)
 8006d22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f003 0307 	and.w	r3, r3, #7
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d00c      	beq.n	8006d48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	3307      	adds	r3, #7
 8006d32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f023 0307 	bic.w	r3, r3, #7
 8006d3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006d3c:	68ba      	ldr	r2, [r7, #8]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	1ad3      	subs	r3, r2, r3
 8006d42:	4a1f      	ldr	r2, [pc, #124]	; (8006dc0 <prvHeapInit+0xac>)
 8006d44:	4413      	add	r3, r2
 8006d46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006d4c:	4a1d      	ldr	r2, [pc, #116]	; (8006dc4 <prvHeapInit+0xb0>)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006d52:	4b1c      	ldr	r3, [pc, #112]	; (8006dc4 <prvHeapInit+0xb0>)
 8006d54:	2200      	movs	r2, #0
 8006d56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	68ba      	ldr	r2, [r7, #8]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006d60:	2208      	movs	r2, #8
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	1a9b      	subs	r3, r3, r2
 8006d66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f023 0307 	bic.w	r3, r3, #7
 8006d6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	4a15      	ldr	r2, [pc, #84]	; (8006dc8 <prvHeapInit+0xb4>)
 8006d74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006d76:	4b14      	ldr	r3, [pc, #80]	; (8006dc8 <prvHeapInit+0xb4>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006d7e:	4b12      	ldr	r3, [pc, #72]	; (8006dc8 <prvHeapInit+0xb4>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2200      	movs	r2, #0
 8006d84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	1ad2      	subs	r2, r2, r3
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006d94:	4b0c      	ldr	r3, [pc, #48]	; (8006dc8 <prvHeapInit+0xb4>)
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	4a0a      	ldr	r2, [pc, #40]	; (8006dcc <prvHeapInit+0xb8>)
 8006da2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	4a09      	ldr	r2, [pc, #36]	; (8006dd0 <prvHeapInit+0xbc>)
 8006daa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006dac:	4b09      	ldr	r3, [pc, #36]	; (8006dd4 <prvHeapInit+0xc0>)
 8006dae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006db2:	601a      	str	r2, [r3, #0]
}
 8006db4:	bf00      	nop
 8006db6:	3714      	adds	r7, #20
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr
 8006dc0:	20001074 	.word	0x20001074
 8006dc4:	20004c74 	.word	0x20004c74
 8006dc8:	20004c7c 	.word	0x20004c7c
 8006dcc:	20004c84 	.word	0x20004c84
 8006dd0:	20004c80 	.word	0x20004c80
 8006dd4:	20004c88 	.word	0x20004c88

08006dd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006de0:	4b28      	ldr	r3, [pc, #160]	; (8006e84 <prvInsertBlockIntoFreeList+0xac>)
 8006de2:	60fb      	str	r3, [r7, #12]
 8006de4:	e002      	b.n	8006dec <prvInsertBlockIntoFreeList+0x14>
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	60fb      	str	r3, [r7, #12]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d8f7      	bhi.n	8006de6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	68ba      	ldr	r2, [r7, #8]
 8006e00:	4413      	add	r3, r2
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d108      	bne.n	8006e1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	685a      	ldr	r2, [r3, #4]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	441a      	add	r2, r3
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	68ba      	ldr	r2, [r7, #8]
 8006e24:	441a      	add	r2, r3
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d118      	bne.n	8006e60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	4b15      	ldr	r3, [pc, #84]	; (8006e88 <prvInsertBlockIntoFreeList+0xb0>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d00d      	beq.n	8006e56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	685a      	ldr	r2, [r3, #4]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	441a      	add	r2, r3
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	601a      	str	r2, [r3, #0]
 8006e54:	e008      	b.n	8006e68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e56:	4b0c      	ldr	r3, [pc, #48]	; (8006e88 <prvInsertBlockIntoFreeList+0xb0>)
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	601a      	str	r2, [r3, #0]
 8006e5e:	e003      	b.n	8006e68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006e68:	68fa      	ldr	r2, [r7, #12]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d002      	beq.n	8006e76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e76:	bf00      	nop
 8006e78:	3714      	adds	r7, #20
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr
 8006e82:	bf00      	nop
 8006e84:	20004c74 	.word	0x20004c74
 8006e88:	20004c7c 	.word	0x20004c7c

08006e8c <__libc_init_array>:
 8006e8c:	b570      	push	{r4, r5, r6, lr}
 8006e8e:	4d0d      	ldr	r5, [pc, #52]	; (8006ec4 <__libc_init_array+0x38>)
 8006e90:	4c0d      	ldr	r4, [pc, #52]	; (8006ec8 <__libc_init_array+0x3c>)
 8006e92:	1b64      	subs	r4, r4, r5
 8006e94:	10a4      	asrs	r4, r4, #2
 8006e96:	2600      	movs	r6, #0
 8006e98:	42a6      	cmp	r6, r4
 8006e9a:	d109      	bne.n	8006eb0 <__libc_init_array+0x24>
 8006e9c:	4d0b      	ldr	r5, [pc, #44]	; (8006ecc <__libc_init_array+0x40>)
 8006e9e:	4c0c      	ldr	r4, [pc, #48]	; (8006ed0 <__libc_init_array+0x44>)
 8006ea0:	f000 f8f2 	bl	8007088 <_init>
 8006ea4:	1b64      	subs	r4, r4, r5
 8006ea6:	10a4      	asrs	r4, r4, #2
 8006ea8:	2600      	movs	r6, #0
 8006eaa:	42a6      	cmp	r6, r4
 8006eac:	d105      	bne.n	8006eba <__libc_init_array+0x2e>
 8006eae:	bd70      	pop	{r4, r5, r6, pc}
 8006eb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eb4:	4798      	blx	r3
 8006eb6:	3601      	adds	r6, #1
 8006eb8:	e7ee      	b.n	8006e98 <__libc_init_array+0xc>
 8006eba:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ebe:	4798      	blx	r3
 8006ec0:	3601      	adds	r6, #1
 8006ec2:	e7f2      	b.n	8006eaa <__libc_init_array+0x1e>
 8006ec4:	080071a0 	.word	0x080071a0
 8006ec8:	080071a0 	.word	0x080071a0
 8006ecc:	080071a0 	.word	0x080071a0
 8006ed0:	080071a4 	.word	0x080071a4

08006ed4 <__retarget_lock_acquire_recursive>:
 8006ed4:	4770      	bx	lr

08006ed6 <__retarget_lock_release_recursive>:
 8006ed6:	4770      	bx	lr

08006ed8 <memcpy>:
 8006ed8:	440a      	add	r2, r1
 8006eda:	4291      	cmp	r1, r2
 8006edc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ee0:	d100      	bne.n	8006ee4 <memcpy+0xc>
 8006ee2:	4770      	bx	lr
 8006ee4:	b510      	push	{r4, lr}
 8006ee6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006eea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006eee:	4291      	cmp	r1, r2
 8006ef0:	d1f9      	bne.n	8006ee6 <memcpy+0xe>
 8006ef2:	bd10      	pop	{r4, pc}

08006ef4 <memset>:
 8006ef4:	4402      	add	r2, r0
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d100      	bne.n	8006efe <memset+0xa>
 8006efc:	4770      	bx	lr
 8006efe:	f803 1b01 	strb.w	r1, [r3], #1
 8006f02:	e7f9      	b.n	8006ef8 <memset+0x4>

08006f04 <cleanup_glue>:
 8006f04:	b538      	push	{r3, r4, r5, lr}
 8006f06:	460c      	mov	r4, r1
 8006f08:	6809      	ldr	r1, [r1, #0]
 8006f0a:	4605      	mov	r5, r0
 8006f0c:	b109      	cbz	r1, 8006f12 <cleanup_glue+0xe>
 8006f0e:	f7ff fff9 	bl	8006f04 <cleanup_glue>
 8006f12:	4621      	mov	r1, r4
 8006f14:	4628      	mov	r0, r5
 8006f16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f1a:	f000 b869 	b.w	8006ff0 <_free_r>
	...

08006f20 <_reclaim_reent>:
 8006f20:	4b2c      	ldr	r3, [pc, #176]	; (8006fd4 <_reclaim_reent+0xb4>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4283      	cmp	r3, r0
 8006f26:	b570      	push	{r4, r5, r6, lr}
 8006f28:	4604      	mov	r4, r0
 8006f2a:	d051      	beq.n	8006fd0 <_reclaim_reent+0xb0>
 8006f2c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006f2e:	b143      	cbz	r3, 8006f42 <_reclaim_reent+0x22>
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d14a      	bne.n	8006fcc <_reclaim_reent+0xac>
 8006f36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f38:	6819      	ldr	r1, [r3, #0]
 8006f3a:	b111      	cbz	r1, 8006f42 <_reclaim_reent+0x22>
 8006f3c:	4620      	mov	r0, r4
 8006f3e:	f000 f857 	bl	8006ff0 <_free_r>
 8006f42:	6961      	ldr	r1, [r4, #20]
 8006f44:	b111      	cbz	r1, 8006f4c <_reclaim_reent+0x2c>
 8006f46:	4620      	mov	r0, r4
 8006f48:	f000 f852 	bl	8006ff0 <_free_r>
 8006f4c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006f4e:	b111      	cbz	r1, 8006f56 <_reclaim_reent+0x36>
 8006f50:	4620      	mov	r0, r4
 8006f52:	f000 f84d 	bl	8006ff0 <_free_r>
 8006f56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006f58:	b111      	cbz	r1, 8006f60 <_reclaim_reent+0x40>
 8006f5a:	4620      	mov	r0, r4
 8006f5c:	f000 f848 	bl	8006ff0 <_free_r>
 8006f60:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006f62:	b111      	cbz	r1, 8006f6a <_reclaim_reent+0x4a>
 8006f64:	4620      	mov	r0, r4
 8006f66:	f000 f843 	bl	8006ff0 <_free_r>
 8006f6a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006f6c:	b111      	cbz	r1, 8006f74 <_reclaim_reent+0x54>
 8006f6e:	4620      	mov	r0, r4
 8006f70:	f000 f83e 	bl	8006ff0 <_free_r>
 8006f74:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006f76:	b111      	cbz	r1, 8006f7e <_reclaim_reent+0x5e>
 8006f78:	4620      	mov	r0, r4
 8006f7a:	f000 f839 	bl	8006ff0 <_free_r>
 8006f7e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006f80:	b111      	cbz	r1, 8006f88 <_reclaim_reent+0x68>
 8006f82:	4620      	mov	r0, r4
 8006f84:	f000 f834 	bl	8006ff0 <_free_r>
 8006f88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f8a:	b111      	cbz	r1, 8006f92 <_reclaim_reent+0x72>
 8006f8c:	4620      	mov	r0, r4
 8006f8e:	f000 f82f 	bl	8006ff0 <_free_r>
 8006f92:	69a3      	ldr	r3, [r4, #24]
 8006f94:	b1e3      	cbz	r3, 8006fd0 <_reclaim_reent+0xb0>
 8006f96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006f98:	4620      	mov	r0, r4
 8006f9a:	4798      	blx	r3
 8006f9c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006f9e:	b1b9      	cbz	r1, 8006fd0 <_reclaim_reent+0xb0>
 8006fa0:	4620      	mov	r0, r4
 8006fa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006fa6:	f7ff bfad 	b.w	8006f04 <cleanup_glue>
 8006faa:	5949      	ldr	r1, [r1, r5]
 8006fac:	b941      	cbnz	r1, 8006fc0 <_reclaim_reent+0xa0>
 8006fae:	3504      	adds	r5, #4
 8006fb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fb2:	2d80      	cmp	r5, #128	; 0x80
 8006fb4:	68d9      	ldr	r1, [r3, #12]
 8006fb6:	d1f8      	bne.n	8006faa <_reclaim_reent+0x8a>
 8006fb8:	4620      	mov	r0, r4
 8006fba:	f000 f819 	bl	8006ff0 <_free_r>
 8006fbe:	e7ba      	b.n	8006f36 <_reclaim_reent+0x16>
 8006fc0:	680e      	ldr	r6, [r1, #0]
 8006fc2:	4620      	mov	r0, r4
 8006fc4:	f000 f814 	bl	8006ff0 <_free_r>
 8006fc8:	4631      	mov	r1, r6
 8006fca:	e7ef      	b.n	8006fac <_reclaim_reent+0x8c>
 8006fcc:	2500      	movs	r5, #0
 8006fce:	e7ef      	b.n	8006fb0 <_reclaim_reent+0x90>
 8006fd0:	bd70      	pop	{r4, r5, r6, pc}
 8006fd2:	bf00      	nop
 8006fd4:	20000014 	.word	0x20000014

08006fd8 <__malloc_lock>:
 8006fd8:	4801      	ldr	r0, [pc, #4]	; (8006fe0 <__malloc_lock+0x8>)
 8006fda:	f7ff bf7b 	b.w	8006ed4 <__retarget_lock_acquire_recursive>
 8006fde:	bf00      	nop
 8006fe0:	20004c8c 	.word	0x20004c8c

08006fe4 <__malloc_unlock>:
 8006fe4:	4801      	ldr	r0, [pc, #4]	; (8006fec <__malloc_unlock+0x8>)
 8006fe6:	f7ff bf76 	b.w	8006ed6 <__retarget_lock_release_recursive>
 8006fea:	bf00      	nop
 8006fec:	20004c8c 	.word	0x20004c8c

08006ff0 <_free_r>:
 8006ff0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ff2:	2900      	cmp	r1, #0
 8006ff4:	d044      	beq.n	8007080 <_free_r+0x90>
 8006ff6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ffa:	9001      	str	r0, [sp, #4]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	f1a1 0404 	sub.w	r4, r1, #4
 8007002:	bfb8      	it	lt
 8007004:	18e4      	addlt	r4, r4, r3
 8007006:	f7ff ffe7 	bl	8006fd8 <__malloc_lock>
 800700a:	4a1e      	ldr	r2, [pc, #120]	; (8007084 <_free_r+0x94>)
 800700c:	9801      	ldr	r0, [sp, #4]
 800700e:	6813      	ldr	r3, [r2, #0]
 8007010:	b933      	cbnz	r3, 8007020 <_free_r+0x30>
 8007012:	6063      	str	r3, [r4, #4]
 8007014:	6014      	str	r4, [r2, #0]
 8007016:	b003      	add	sp, #12
 8007018:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800701c:	f7ff bfe2 	b.w	8006fe4 <__malloc_unlock>
 8007020:	42a3      	cmp	r3, r4
 8007022:	d908      	bls.n	8007036 <_free_r+0x46>
 8007024:	6825      	ldr	r5, [r4, #0]
 8007026:	1961      	adds	r1, r4, r5
 8007028:	428b      	cmp	r3, r1
 800702a:	bf01      	itttt	eq
 800702c:	6819      	ldreq	r1, [r3, #0]
 800702e:	685b      	ldreq	r3, [r3, #4]
 8007030:	1949      	addeq	r1, r1, r5
 8007032:	6021      	streq	r1, [r4, #0]
 8007034:	e7ed      	b.n	8007012 <_free_r+0x22>
 8007036:	461a      	mov	r2, r3
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	b10b      	cbz	r3, 8007040 <_free_r+0x50>
 800703c:	42a3      	cmp	r3, r4
 800703e:	d9fa      	bls.n	8007036 <_free_r+0x46>
 8007040:	6811      	ldr	r1, [r2, #0]
 8007042:	1855      	adds	r5, r2, r1
 8007044:	42a5      	cmp	r5, r4
 8007046:	d10b      	bne.n	8007060 <_free_r+0x70>
 8007048:	6824      	ldr	r4, [r4, #0]
 800704a:	4421      	add	r1, r4
 800704c:	1854      	adds	r4, r2, r1
 800704e:	42a3      	cmp	r3, r4
 8007050:	6011      	str	r1, [r2, #0]
 8007052:	d1e0      	bne.n	8007016 <_free_r+0x26>
 8007054:	681c      	ldr	r4, [r3, #0]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	6053      	str	r3, [r2, #4]
 800705a:	4421      	add	r1, r4
 800705c:	6011      	str	r1, [r2, #0]
 800705e:	e7da      	b.n	8007016 <_free_r+0x26>
 8007060:	d902      	bls.n	8007068 <_free_r+0x78>
 8007062:	230c      	movs	r3, #12
 8007064:	6003      	str	r3, [r0, #0]
 8007066:	e7d6      	b.n	8007016 <_free_r+0x26>
 8007068:	6825      	ldr	r5, [r4, #0]
 800706a:	1961      	adds	r1, r4, r5
 800706c:	428b      	cmp	r3, r1
 800706e:	bf04      	itt	eq
 8007070:	6819      	ldreq	r1, [r3, #0]
 8007072:	685b      	ldreq	r3, [r3, #4]
 8007074:	6063      	str	r3, [r4, #4]
 8007076:	bf04      	itt	eq
 8007078:	1949      	addeq	r1, r1, r5
 800707a:	6021      	streq	r1, [r4, #0]
 800707c:	6054      	str	r4, [r2, #4]
 800707e:	e7ca      	b.n	8007016 <_free_r+0x26>
 8007080:	b003      	add	sp, #12
 8007082:	bd30      	pop	{r4, r5, pc}
 8007084:	20004c90 	.word	0x20004c90

08007088 <_init>:
 8007088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800708a:	bf00      	nop
 800708c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800708e:	bc08      	pop	{r3}
 8007090:	469e      	mov	lr, r3
 8007092:	4770      	bx	lr

08007094 <_fini>:
 8007094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007096:	bf00      	nop
 8007098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800709a:	bc08      	pop	{r3}
 800709c:	469e      	mov	lr, r3
 800709e:	4770      	bx	lr
